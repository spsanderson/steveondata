{
  "hash": "1091c5d15f2e1cdb636e1d29baef6e41",
  "result": {
    "markdown": "---\ntitle: \"Unveiling the Magic of LOESS Regression in R: A Step-by-Step Guide with mtcars\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-11-22\"\ncategories: [rtip, regression]\n---\n\n\n# Introduction\n\nIf you've ever found yourself grappling with noisy data and yearning for a smoother representation, LOESS regression might be the enchanting solution you're seeking. In this blog post, we'll unravel the mysteries of LOESS regression using the power of R, and walk through a practical example using the iconic `mtcars` dataset.\n\n# What is LOESS Regression?\n\nLOESS, which stands for LOcal regrESSion, is a versatile and powerful technique for fitting a curve to a set of data points. Unlike traditional linear regression, LOESS adapts to the local behavior of the data, making it perfect for capturing intricate patterns in noisy datasets.\n\n# Getting Started: Loading the mtcars Dataset\n\nLet's kick off our journey by loading the `mtcars` dataset. This dataset, featuring various car specifications, will serve as our canvas for the LOESS magic.\n\n```R\n# Load the mtcars dataset\ndata(mtcars)\n```\n\n## Understanding LOESS: The Basics\n\nNow, let's delve into the heart of LOESS regression. In R, the magic happens with the `loess()` function. This function fits a smooth curve through your data, adjusting to the local characteristics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a LOESS model\nloess_model <- loess(mpg ~ wt, data = mtcars)\n```\n:::\n\n\nCongratulations, you've just cast the LOESS spell on the fuel efficiency and weight relationship of these iconic cars!\n\n## Visualizing the Enchantment\n\nWhat good is magic if you can't see it? Let's visualize the results with a compelling plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate predictions from the LOESS model\npredictions <- predict(loess_model, newdata = mtcars)\npredictions <- cbind(mtcars, predictions)\npredictions <- predictions[order(predictions$wt), ]\n\n# Create a scatter plot of the original data\nplot(\n  predictions$wt,\n  predictions$mpg, \n  col = \"blue\", \n  main = \"LOESS Regression: Unveiling the Magic with mtcars\", \n  xlab = \"Weight (1000 lbs)\", \n  ylab = \"Miles Per Gallon\"\n)\n\n# Add the LOESS curve to the plot\nlines(predictions$predictions, col = \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nBehold, as the red curve gracefully dances through the blue points, smoothing out the rough edges and revealing the underlying trends in the relationship between weight and fuel efficiency.\n\nNow, we did not specify any parameters for the `loess()` function, so it used the default values. Let's take a look at the default parameters.\n\n```R\nloess(formula, data, weights, subset, na.action, model = FALSE,\n      span = 0.75, enp.target, degree = 2,\n      parametric = FALSE, drop.square = FALSE, normalize = TRUE,\n      family = c(\"gaussian\", \"symmetric\"),\n      method = c(\"loess\", \"model.frame\"),\n      control = loess.control(...), ...)\n```\n\nIf you want to see the documentation in R you can use `?loess` or `help(loess)`. I have it here for you anyways but it is good to know how to check it on the fly:\n\n_Arguments_\n`formula` - a formula specifying the numeric response and one to four numeric predictors (best specified via an interaction, but can also be specified additively). Will be coerced to a formula if necessary.\n\n`data` - an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model. If not found in data, the variables are taken from environment(formula), typically the environment from which loess is called.\n\n`weights` - optional weights for each case.\n\n`subset` - an optional specification of a subset of the data to be used.\n\n`na.action` - the action to be taken with missing values in the response or predictors. The default is given by getOption(\"na.action\").\n\n`model` - should the model frame be returned?\n\n`span` - the parameter Î± which controls the degree of smoothing.\n\n`enp.target` - an alternative way to specify span, as the approximate equivalent number of parameters to be used.\n\n`degree` - the degree of the polynomials to be used, normally 1 or 2. (Degree 0 is also allowed, but see the â€˜Noteâ€™.)\n\n`parametric` - should any terms be fitted globally rather than locally? Terms can be specified by name, number or as a logical vector of the same length as the number of predictors.\n\n`drop.square` - for fits with more than one predictor and degree = 2, should the quadratic term be dropped for particular predictors? Terms are specified in the same way as for parametric.\n\n`normalize` - should the predictors be normalized to a common scale if there is more than one? The normalization used is to set the 10% trimmed standard deviation to one. Set to false for spatial coordinate predictors and others known to be on a common scale.\n\n`family` - if \"gaussian\" fitting is by least-squares, and if \"symmetric\" a re-descending M estimator is used with Tukey's biweight function. Can be abbreviated.\n\n`method` - fit the model or just extract the model frame. Can be abbreviated.\n\n`control` - control parameters: see loess.control.\n\n`...` - control parameters can also be supplied directly (if control is not specified).\n\nNow that we see we can set things like `span` and `degree` let's try it out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the data frame\ndf <- data.frame(x=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), \n                 y=c(1, 4, 7, 13, 19, 24, 20, 15, 13, 11, 15, 18, 22, 27))\n\n# Fit LOESS regression models\nloess50 <- loess(y ~ x, data=df, span=0.5)\nsmooth50 <- predict(loess50)\nloess75 <- loess(y ~ x, data=df, span=0.75)\nsmooth75 <- predict(loess75)\nloess90 <- loess(y ~ x, data=df, span=0.9)\nsmooth90 <- predict(loess90)\nloess50_degree1 <- loess(y ~ x, data=df, span=0.5, degree=1)\nsmooth50_degree1 <- predict(loess50_degree1)\nloess50_degree2 <- loess(y ~ x, data=df, span=0.5, degree=2)\nsmooth50_degree2 <- predict(loess50_degree2)\n\n# Create scatterplot with each regression line overlaid\nplot(df$x, df$y, pch=19, main='Loess Regression Models')\nlines(smooth50, x=df$x, col='red')\nlines(smooth75, x=df$x, col='purple')\nlines(smooth90, x=df$x, col='blue')\nlines(smooth50_degree1, x=df$x, col='green')\nlines(smooth50_degree2, x=df$x, col='orange')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n## Empowering You: Try It Yourself!\n\nNow comes the most exciting part â€“ empowering you to wield the magic wand with the `mtcars` dataset or any other dataset of your choice. Encourage your readers to try the code on their own datasets, and witness the transformative power of LOESS regression.\n\n```R\n# Your readers can replace this with their own dataset\nuser_data <- read.csv(\"user_dataset.csv\")\n\n# Fit a LOESS model on their data\nuser_loess_model <- loess(Y ~ X, data = user_data)\n\n# Visualize the results\nuser_predictions <- predict(user_loess_model, newdata = user_data)\nplot(user_data$X, user_data$Y, col = \"green\", main = \"Your Turn: Unleash LOESS Magic\", xlab = \"X\", ylab = \"Y\")\nlines(user_data$X, user_predictions, col = \"purple\", lwd = 2)\n```\n\n# Conclusion\n\nIn this journey, we've walked through the fundamentals of LOESS regression in R, witnessed its magic in action using the iconic `mtcars` dataset, and now it's your turn to wield the wand. As you embark on your own adventures with LOESS, remember that this enchanting technique adapts to the nuances of your data, revealing hidden patterns and smoothing the way for clearer insights.\n\nHappy coding, and may the LOESS magic be with you! ðŸš—âœ¨",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}