{
  "hash": "c3d8d39a64a1d4d5bbd68569f6e0db87",
  "result": {
    "markdown": "---\ntitle: \"Demystifying Dates: Finding the Day of the Week in R with `lubridate`\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-02-09\"\ncategories: [code, rtip, timeseries]\n---\n\n\n# Introduction\n\nHave you ever stared at a date in R and wondered, \"What day of the week was this?!\" Fear not, fellow data wranglers! Today, we embark on a journey to conquer this seemingly simple, yet surprisingly tricky, task. Buckle up, because we're about to become date whisperers with the help of the `lubridate` package.\n\n# The Power of `lubridate`\n\nR's built-in date functions are decent, but `lubridate` takes things to a whole new level. Think of it as a Swiss Army knife for everything date-related. It offers a wider range of functions, clear syntax, and handles different date formats like a champ.\n\n# Unveiling the Mystery: Extracting the Day of the Week\n\nThere are two main approaches to finding the day of the week in `lubridate`:\n\n## Example 1: Using `wday()`\n\nThis function is your go-to for both numeric and character representations of the day. Let's break it down:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\n# Sample date\ndate <- ymd(\"2024-02-09\")\n\n# Numeric day (Monday = 1, Sunday = 7)\nnumeric_day <- wday(date)\nprint(numeric_day)  # Output: 6 (Friday)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nclass(numeric_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n# Character day (full name)\nfull_day <- wday(date, label = TRUE)\nprint(full_day)  # Output: Friday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Fri\nLevels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n```\n:::\n\n```{.r .cell-code}\nclass(full_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ordered\" \"factor\" \n```\n:::\n\n```{.r .cell-code}\n# Character day (abbreviated)\nabbrev_day <- wday(date, label = TRUE, abbr = TRUE)\nprint(abbrev_day)  # Output: Fri\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Fri\nLevels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n```\n:::\n\n```{.r .cell-code}\nclass(abbrev_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ordered\" \"factor\" \n```\n:::\n:::\n\n\n## Example 2. Using `strftime()`\n\nThis function offers more flexibility in formatting dates, including extracting the day of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Same date as before\ndate <- ymd(\"2024-02-09\")\nclass(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\n# Day of the week (full name)\nfull_day <- strftime(date, format = \"%A\")\nprint(full_day)  # Output: Friday\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Friday\"\n```\n:::\n\n```{.r .cell-code}\nclass(full_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Day of the week (abbreviated)\nabbrev_day <- strftime(date, format = \"%a\")\nprint(abbrev_day)  # Output: Fri\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Fri\"\n```\n:::\n\n```{.r .cell-code}\nclass(abbrev_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### Beyond the Basics: Customizing Your Output\n\nBoth `wday()` and `strftime()` offer options to personalize your results. For example, you can change the starting day of the week (default is Monday) or use different formatting codes for the day name.\n\n**Bonus Tip:** Check out the `lubridate` documentation for more advanced options and functionalities!\n\n# Time to Play!\n\nNow it's your turn to experiment! Here are some ideas:\n\n* Find the day of your birthday in R.\n* Analyze historical data and see how weekdays affect specific variables.\n* Create a calendar visualization with the day of the week displayed.\n\nRemember, the more you practice, the more comfortable you'll become with manipulating dates in R. So, dive in, explore, and have fun!\n\n**P.S.** Don't forget to share your creations and questions in the comments below. The R community is always happy to help!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}