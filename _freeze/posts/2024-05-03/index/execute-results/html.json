{
  "hash": "f0f1e146bb9e29227b8d591fe35d335f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring Data with TidyDensity's `tidy_mcmc_sampling()`\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-03\"\ncategories: [code, rtip, tidydensity]\n---\n\n\n# Introduction\n\nIn the area of statistical modeling and Bayesian inference, Markov Chain Monte Carlo (MCMC) methods are indispensable tools for tackling complex problems. The new `tidy_mcmc_sampling()` function in the TidyDensity R package simplifies MCMC sampling and visualization, making it accessible to a broader audience of data enthusiasts and analysts.\n\n# Understanding MCMC\n\nBefore we dive into the practical use of `tidy_mcmc_sampling()`, let's briefly discuss why MCMC is valuable. MCMC methods are particularly useful when dealing with Bayesian statistics, where exact analytical solutions are challenging or impossible due to the complexity of the models involved.\n\nMCMC allows us to draw samples from a probability distribution, especially in cases where direct sampling is impractical. This is achieved by constructing a Markov chain that converges to the desired distribution after a sufficient number of iterations. Once converged, these samples can provide insights into the posterior distribution of parameters, allowing us to make probabilistic inferences.\n\n# Introducing `tidy_mcmc_sampling()`\n\nThe `tidy_mcmc_sampling()` function in TidyDensity harnesses the power of MCMC sampling and presents the results in a tidy format, facilitating further analysis and visualization. Let's explore its usage and capabilities.\n\n# Usage Example\n\nSuppose we have a dataset `data` that we want to analyze using MCMC sampling:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n\n# Generate MCMC samples\nset.seed(123)\ndata <- rnorm(100)\nresult <- tidy_mcmc_sampling(data, .fns = \"median\", .cum_fns = \"cmedian\")\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$mcmc_data\n# A tibble: 4,000 × 3\n   sim_number name                 value\n   <fct>      <fct>                <dbl>\n 1 1          .sample_median    -0.0285 \n 2 1          .cum_stat_cmedian -0.0285 \n 3 2          .sample_median     0.239  \n 4 2          .cum_stat_cmedian  0.105  \n 5 3          .sample_median     0.00576\n 6 3          .cum_stat_cmedian  0.00576\n 7 4          .sample_median    -0.0357 \n 8 4          .cum_stat_cmedian -0.0114 \n 9 5          .sample_median    -0.111  \n10 5          .cum_stat_cmedian -0.0285 \n# ℹ 3,990 more rows\n\n$plt\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn this example:\n- We generate 100 random normal values using `rnorm(100)`.\n- The `tidy_mcmc_sampling()` function is then applied to this data, specifying that we want to compute the median (`\"median\"`) of each MCMC sample and the cumulative median (`\"cmedian\"`) across all samples, here the default sample size is 2000.\n\n# Key Arguments\n\n- **`.x`:** The input data vector for MCMC sampling.\n- **`.fns`:** A character vector specifying the function(s) to apply to each MCMC sample. By default, it computes the mean (`\"mean\"`), but you can customize this to any function that makes sense for your analysis.\n- **`.cum_fns`:** A character vector specifying the function(s) to apply to the cumulative MCMC samples. The default is to compute the cumulative mean (`\"cmean\"`), but you can change this based on your requirements.\n- **`.num_sims`:** The number of MCMC simulations to run. More simulations generally lead to more accurate results but can be computationally expensive. The default is 2000.\n\n# Visualizing Results\n\nThe `tidy_mcmc_sampling()` function not only returns tidy data but also generates a plot to visualize the MCMC samples and cumulative statistics. This visualization is essential for understanding the distribution of samples and how they evolve over iterations.\n\n# Try It Yourself!\n\nIf you're intrigued by the capabilities of MCMC and want to explore it in your data analysis workflow, I encourage you to try out `tidy_mcmc_sampling()` with your own datasets and custom functions. Experiment with different parameters and visualize the results to gain deeper insights into your data.\n\nIn conclusion, `tidy_mcmc_sampling()` extends the functionality of TidyDensity by offering a user-friendly interface for conducting MCMC sampling and analysis. Whether you're new to Bayesian statistics or a seasoned practitioner, this function can streamline your workflow and enhance your understanding of complex datasets. Give it a spin and unlock new possibilities in your data exploration journey!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}