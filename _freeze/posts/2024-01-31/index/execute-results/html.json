{
  "hash": "fb9ccd72c570f162ca689a7ed1d19514",
  "result": {
    "markdown": "---\ntitle: \"Time Flies? Time Travels! Adding Days to Dates in R (Like a Pro)\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-01-31\"\ncategories: [code, rtip, timeseries]\n---\n\n\n# Introduction\n\nEver wished you could skip ahead a few days for that weekend getaway, or rewind to relive a magical moment? While real-life time travel remains a sci-fi dream, in R, adding days to dates is a breeze! Today, we'll explore both base R and the powerful `lubridate` and `timetk` packages to master this handy skill.\n\n# Examples\n\n## Example 1: Base R Basics\n\nLet's start with the classic. Imagine you have a date stored as `my_date <- \"2024-01-31\"` (yes, today!). To add, say, 5 days, you can simply use `my_date + 5`. Voila! You've time-jumped to February 5th, 2024. But wait, this doesn't handle months or leap years like a pro.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a date object\ndate <- as.Date(\"2024-01-31\")\n\n# Add 5 days to the date\nnew_date <- date + 5\n\nprint(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-01-31\"\n```\n:::\n\n```{.r .cell-code}\nprint(new_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-02-05\"\n```\n:::\n\n```{.r .cell-code}\nclass(date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nclass(new_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n\n## Example 2: Enter `lubridate`\n\nThis superhero package offers functions like `as.Date()` and `days()` that understand the nuances of dates. Let's revisit our example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nmy_date <- as.Date(\"2024-01-31\") # Convert string to Date object\nfuture_date <- my_date + days(5) # Add 5 days using days()\n\nfuture_date # \"2024-02-05\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-02-05\"\n```\n:::\n:::\n\n\nSee the magic? `days(5)` tells R to add 5 days specifically. You can even subtract days (imagine reliving that delicious pizza!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\npizza_day <- as.Date(\"2024-01-27\") # Date of pizza bliss\nrelive_pizza <- pizza_day - days(2) # Travel back 2 days\n\nrelive_pizza # \"2024-01-25\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-01-25\"\n```\n:::\n:::\n\n\n## Example 3: Beyond Days: `timetk` Takes the Wheel\n\nWant to add weeks, months, or even years? `timetk` takes things to the next level with functions like `years()`, `wednesdays()`, and more. Check this out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(timetk)\n\ngraduation <- as.Date(\"2025-06-15\") # Your graduation date (hopefully!)\n\ngraduation %+time% \"1 hour 34 seconds\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2025-06-15 01:00:34 UTC\"\n```\n:::\n\n```{.r .cell-code}\ngraduation %+time% \"3 months\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2025-09-15\"\n```\n:::\n\n```{.r .cell-code}\ngraduation %+time% \"1 year 3 months 6 days\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2026-09-21\"\n```\n:::\n\n```{.r .cell-code}\n# Backward (Minus Time)\ngraduation %-time% \"1 hour 34 seconds\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2025-06-14 22:59:26 UTC\"\n```\n:::\n\n```{.r .cell-code}\ngraduation %-time% \"3 months\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2025-03-15\"\n```\n:::\n\n```{.r .cell-code}\ngraduation %-time% \"1 year 3 months 6 days\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-03-09\"\n```\n:::\n:::\n\n\n**Bonus Tip:** Don't forget about formatting! Use `format()` with options like `\"%Y-%m-%d\"` to display your dates in your preferred format.\n\n# Now it's your turn!\n\n* Try adding different units (weeks, months) to existing dates.\n* Use these techniques in your R scripts to analyze time-series data.\n* Challenge yourself: Can you calculate the difference between two dates in days or weeks?\n\nRemember, practice makes perfect. The more you play with dates in R, the more comfortable you'll become with this essential skill. So go forth, explore, and conquer the realm of time in R!\n\n**P.S.** Share your coolest date-manipulation tricks in the comments below. Let's learn from each other and keep the R community thriving!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}