{
  "hash": "384ba019e2760e3ded90982732d38ba9",
  "result": {
    "markdown": "---\ntitle: \"Demystifying the melt() Function in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-02-27\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nThe melt() function in the data.table package is an extremely useful tool for reshaping datasets in R. However, for beginners, understanding how to use melt() can be tricky. In this post, I'll walk through several examples to demonstrate how to use melt() to move from wide to long data formats.\n\n# What is melting data?\n\nMelting data refers to reshaping it from a wide format to a long format. For example, let's say we have a dataset on student test scores like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n\nscores <- data.table(\n  student = c(\"Alice\", \"Bob\", \"Charlie\"),\n  math = c(90, 80, 85), \n  english = c(85, 90, 80)\n)\n\nscores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   student  math english\n    <char> <num>   <num>\n1:   Alice    90      85\n2:     Bob    80      90\n3: Charlie    85      80\n```\n:::\n:::\n\n\nHere each subject is in its own column, with each student in a separate row. This is the wide format. To melt it, we convert it to long format, where there is a single value column and an identifier column for the variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmelted_scores <- melt(scores, id.vars = \"student\", measure.vars = c(\"math\", \"english\"))\n\nmelted_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   student variable value\n    <char>   <fctr> <num>\n1:   Alice     math    90\n2:     Bob     math    80\n3: Charlie     math    85\n4:   Alice  english    85\n5:     Bob  english    90\n6: Charlie  english    80\n```\n:::\n:::\n\n\nNow there is one row per student-subject combination, with the subject in a new \"variable\" column. This makes it easier to analyze and plot the data.\n\n# How to melt data in R with data.table\n\nThe melt() function from data.table makes it easy to melt data. The basic syntax is:\n\n```r \nmelt(data, id.vars, measure.vars)\n```\n\nWhere:\n\n- `data`: the data.table to melt \n- `id.vars`: the column(s) to use as identifier variables\n- `measure.vars`: the column(s) to unpivot into the value column\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\n\n WideTable <- data.table(\n  Id = 1:3,\n  Var1 = c(10, 20, 30),\n  Var2 = c(100, 200, 300)  \n)\n\nmelt(WideTable, id.vars = \"Id\", measure.vars = c(\"Var1\", \"Var2\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Id variable value\n   <int>   <fctr> <num>\n1:     1     Var1    10\n2:     2     Var1    20\n3:     3     Var1    30\n4:     1     Var2   100\n5:     2     Var2   200\n6:     3     Var2   300\n```\n:::\n:::\n\n\nThe `id.vars` define which column(s) to keep fixed, while the `measure.vars` are melted into key-value pairs.\n\n## Casting data back into wide format\n\nOnce data is in long format, you can cast it back into wide format using dcast() from data.table:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmelted <- melt(WideTable, id.vars=\"Id\") \n\ndcast(melted, Id ~ variable)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKey: <Id>\n      Id  Var1  Var2\n   <int> <num> <num>\n1:     1    10   100\n2:     2    20   200\n3:     3    30   300\n```\n:::\n:::\n\n\nThis flexibility allows for easy data manipulation as needed for analysis and visualization.\n\n# Final thoughts\n\nThe melt() function provides a simple yet powerful way to move between wide and long data formats in R. By combining melt() and dcast(), you can wrangle messy datasets into tidy forms for effective data analysis. So give it a try on your own datasets and see how it unlocks new possibilities! Let me know in the comments if you have any other melt() questions.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}