{
  "hash": "e19e5c8427fa341f0b7ebb2692482abb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to Extract Substring Starting from the End of a String in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-07-16\"\ncategories: [code, rtip, operations, strings, regex, stringr, stringi]\ntoc: TRUE\n---\n\n\n# Introduction\n\nHey useR's! Today, we're going to discuss a neat trick: extracting substrings starting from the end of a string. We'll cover how to achieve this using base R, `stringr`, and `stringi`. By the end of this post, you'll have several tools in your R toolbox for string manipulation. Let's get started!\n\n# Extracting Substring from the End of a String\n\n## Using Base R\n\nFirst up, let's use base R functions to extract substrings from the end of a string. The `substr` function is your friend here.\n\nHere's a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a string\nmy_string <- \"Hello, world!\"\n\n# Extract the last 6 characters\nsubstring_from_end <- substr(my_string, nchar(my_string) - 5, nchar(my_string))\n\n# Print the result\nprint(substring_from_end)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"world!\"\n```\n\n\n:::\n:::\n\n\n**Explanation:**\n\n-   `nchar(my_string)` returns the total number of characters in `my_string`.\n-   `nchar(my_string) - 5` calculates the starting position of the substring, counting from the end.\n-   `substr(my_string, start, stop)` extracts the substring from the start position to the stop position.\n\n## Using `stringr`\n\nThe `stringr` package makes string manipulation more straightforward and readable. We'll use the `str_sub` function for this task.\n\nFirst, install and load the `stringr` package if you haven't already:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"stringr\")\nlibrary(stringr)\n```\n:::\n\n\nNow, let's extract a substring from the end:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a string\nmy_string <- \"Hello, world!\"\n\n# Extract the last 6 characters using stringr\nsubstring_from_end <- str_sub(my_string, -6, -1)\n\n# Print the result\nprint(substring_from_end)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"world!\"\n```\n\n\n:::\n:::\n\n\n**Explanation:**\n\n-   `str_sub(my_string, start, end)` extracts the substring from the start to the end position.\n-   Negative indices in `str_sub` count from the end of the string. So `-6` refers to the sixth character from the end, and `-1` refers to the last character.\n\n## Using `stringi`\n\nThe `stringi` package is another powerful tool for string manipulation. We'll use the `stri_sub` function here.\n\nFirst, install and load the `stringi` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"stringi\")\nlibrary(stringi)\n```\n:::\n\n\nLet's extract our substring:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a string\nmy_string <- \"Hello, world!\"\n\n# Extract the last 6 characters using stringi\nsubstring_from_end <- stri_sub(my_string, from = -6, to = -1)\n\n# Print the result\nprint(substring_from_end)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"world!\"\n```\n\n\n:::\n:::\n\n\n**Explanation:**\n\n-   `stri_sub(my_string, from, to)` works similarly to `str_sub`, using `from` and `to` parameters to define the start and end positions.\n-   Negative values count from the end of the string.\n\n# Try It Yourself!\n\nNow it's your turn! Try these methods on your own strings. Here are a few ideas to get you started:\n\n-   Extract the last 3 characters of your name.\n-   Extract the domain from an email address.\n-   Experiment with different lengths and positions.\n\n# Conclusion\n\nWeâ€™ve explored how to extract substrings from the end of a string using base R, `stringr`, and `stringi`. Each method has its own charm, so choose the one that fits your coding style best. String manipulation is a crucial skill in data cleaning and text analysis, so keep practicing and experimenting.\n\n---\n\nHappy coding! ðŸš€",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}