{
  "hash": "86e3437d32fdda794393ef34ff8a9483",
  "result": {
    "markdown": "---\ntitle: \"Taming the Data Jungle: Filtering data.tables and data.frames in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-02-23\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nAh, data! The lifeblood of many an analysis, but sometimes it can feel like you're lost in a tangled jungle. Thankfully, R offers powerful tools to navigate this data wilderness, and filtering is one of the most essential skills in your arsenal. Today, we'll explore how to filter both **data.tables** and **data.frames**, making your data exploration a breeze!\n\n# Filtering data.tables: Precise and Powerful\n\ndata.tables, brought to you by the `data.table` package, are known for their speed and efficiency. Here's how to filter them:\n\n# Examples\n\n## Example 1. Filtering by a single condition:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data.table\nlibrary(data.table)\nmtcars_dt <- as.data.table(mtcars)\n\n# Filter cars with MPG greater than 25\nfiltered_cars <- mtcars_dt[mpg > 25]\nfiltered_cars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n   <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n1:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1\n2:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2\n3:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1\n4:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1\n5:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2\n6:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `mtcars_dt[mpg > 25]` selects rows where the `mpg` column is greater than 25.\n- The result, stored in `filtered_cars`, is a new data.table containing only those rows.\n\n## Example 2. Combining conditions:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter cars with 4 cylinders and horsepower over 150\nfiltered_cars <- mtcars_dt[(cyl == 4) & (hp > 150)]\nfiltered_cars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEmpty data.table (0 rows and 11 cols): mpg,cyl,disp,hp,drat,wt...\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `(cyl == 4) & (hp > 150)` combines two conditions using the `&` operator (AND).\n- Only rows meeting both conditions are included in the filtered data.table.\n\n## Example 3. Filtering by values in a list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter cars with carb in 1 or 2\nfiltered_cars <- mtcars_dt[carb %in% c(1, 2)]\nfiltered_cars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n    <num> <num> <num> <num> <num> <num> <num> <num> <num> <num> <num>\n 1:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1\n 2:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1\n 3:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2\n 4:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1\n 5:  24.4     4 146.7    62  3.69 3.190 20.00     1     0     4     2\n 6:  22.8     4 140.8    95  3.92 3.150 22.90     1     0     4     2\n 7:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1\n 8:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2\n 9:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1\n10:  21.5     4 120.1    97  3.70 2.465 20.01     1     0     3     1\n11:  15.5     8 318.0   150  2.76 3.520 16.87     0     0     3     2\n12:  15.2     8 304.0   150  3.15 3.435 17.30     0     0     3     2\n13:  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3     2\n14:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1\n15:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2\n16:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2\n17:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2\n```\n:::\n:::\n\n\n**Explanation:**\n\n- `%in%` checks if a value belongs to a list.\n- Here, we filter for cars where the `carb` is either 1 or 2.\n\n# Filtering data.frames: Familiar and Flexible\n\ndata.frames are the workhorses of R. Here's how to filter them:\n\n## Example 1. Filtering with logical operators:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter irises with Sepal.Length less than 5 and Petal.Width greater than 2\nfiltered_iris <- iris[iris$Sepal.Length < 5 & iris$Petal.Width > 2,]\nfiltered_iris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species     \n<0 rows> (or 0-length row.names)\n```\n:::\n:::\n\n\n**Explanation:**\n\n- This approach is similar to data.tables, using logical operators (`<`, `>`, `&`) to define conditions.\n- The filtered data.frame is stored in `filtered_iris`.\n\n## Example 2. Subsetting with row indices:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the first 3 and last 2 rows\nfiltered_iris <- iris[1:3, ] # First 3 rows\nfiltered_iris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n```\n:::\n\n```{.r .cell-code}\nfiltered_iris <- iris[nrow(iris) - 1:2, ] # Last 2 rows\nfiltered_iris\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n149          6.2         3.4          5.4         2.3 virginica\n148          6.5         3.0          5.2         2.0 virginica\n```\n:::\n:::\n\n\n**Explanation:**\n\n- You can directly specify row indices within square brackets `[]`.\n- This is useful for selecting specific rows based on their position.\n\n# Ready to Explore?\n\nNow that you're equipped with these filtering techniques, dive into your own data! Try practicing on different datasets and experiment with combining conditions. Remember, the more you practice, the more comfortable you'll become navigating the data jungle.\n\n**Bonus Tip:** Don't forget to explore the `dplyr` package for even more powerful filtering options!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}