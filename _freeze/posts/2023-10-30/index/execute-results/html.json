{
  "hash": "84debb8fc936370f1294496b4aa7fc9a",
  "result": {
    "markdown": "---\ntitle: \"Randomness in R: runif(), punif(), dunif(), and quinf()\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-10-30\"\ncategories: [rtip, distribution]\n---\n\n\n# Introduction\n\nRandomness is an essential part of many statistical and machine learning tasks. In R, there are a number of functions that can be used to generate random numbers, but the `runif()` function is the most commonly used.\n\n## The runif() function\nThe `runif()` function generates random numbers from a uniform distribution. A uniform distribution is a distribution in which all values are equally likely. The `runif()` function takes three arguments:\n\n* `n`: the number of random numbers to generate\n* `min`: the lower bound of the distribution\n* `max`: the upper bound of the distribution\n\nThe default values for `min` and `max` are 0 and 1, respectively.\n\nHere is an example of how to use the `runif()` function to generate 10 random numbers from a uniform distribution between 0 and 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nr <- runif(10)\n```\n:::\n\n\nOutput:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(r)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673 0.0455565 0.5281055\n [8] 0.8924190 0.5514350 0.4566147\n```\n:::\n:::\n\n\nThe `runif()` function can also be used to generate random numbers from other distributions, such as the normal distribution, the Poisson distribution, and the binomial distribution.\n\n## The punif() function\n\nThe `punif()` function calculates the cumulative probability density function (CDF) of the uniform distribution. The CDF is the probability that a random variable will be less than or equal to a certain value.\n\nThe `punif()` function takes three arguments:\n\n* `x`: the value at which to calculate the CDF\n* `min`: the lower bound of the distribution\n* `max`: the upper bound of the distribution\n\nHere is an example of how to use the `punif()` function to calculate the CDF of a uniform distribution between 0 and 1 at the value 0.5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\np <- punif(0.5, min = 0, max = 1)\n```\n:::\n\n\nOutput:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(p)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n:::\n\n\nThis means that there is a 50% chance that a random variable from this distribution will be less than or equal to 0.5.\n\n## The dunif() function\n\nThe `dunif()` function calculates the probability density function (PDF) of the uniform distribution. The PDF is the probability that a random variable will be equal to a certain value.\n\nThe `dunif()` function takes three arguments:\n\n* `x`: the value at which to calculate the PDF\n* `min`: the lower bound of the distribution\n* `max`: the upper bound of the distribution\n\nHere is an example of how to use the `dunif()` function to calculate the PDF of a uniform distribution between 0 and 1 at the value 0.5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nd <- dunif(0.5, min = 0, max = 1)\n```\n:::\n\n\nOutput:\n\n```\nprint(d)\n```\n\nThis means that the probability of a random variable from this distribution being equal to 0.5 is 1.\n\n## The quinf() function\n\nThe `quinf()` function calculates the quantile function of the uniform distribution. The quantile function is the inverse of the CDF. It takes a probability as an input and returns the value that has that probability.\n\nThe `quinf()` function takes two arguments:\n\n* `p`: the probability\n* `min`: the lower bound of the distribution\n* `max`: the upper bound of the distribution\n\nHere is an example of how to use the `quinf()` function to calculate the quantile of a uniform distribution between 0 and 1 at the probability 0.5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nq <- qunif(0.5, min = 0, max = 1)\n```\n:::\n\n\nOutput:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n:::\n\n\nThis means that there is a 50% chance that a random variable\n\nIf you want to easily see different versions of the uniform distribution then you can either code them out or use the `TidyDensity` package. Let's take a quick look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(TidyDensity)\n\nn <- 5000\n\ntidy_uniform(.n = n) |>\n  tidy_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## With TidyDensity\n\nNow different variations can be visualized with the following workflow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_multi_single_dist(\n  .tidy_dist = \"tidy_uniform\",\n  .param_list = list(\n    .n = n,\n    .min = 0,\n    .max = c(1,5,10),\n    .num_sims = 5\n  )\n) |>\n  tidy_multi_dist_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}