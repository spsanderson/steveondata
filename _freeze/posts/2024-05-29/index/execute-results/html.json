{
  "hash": "ad07730e10a26954b655a9950e18274c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introducing `get_provider_meta_data()` in healthyR.data\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-29\"\ncategories: [code, rtip, healthyrdata]\ntoc: TRUE\n---\n\n\n# Introduction\n\nHello, R enthusiasts!\n\nToday, I’m excited to introduce a new function in the **healthyR.data** package: `get_provider_meta_data()`. This function is excellent for anyone working with healthcare datasets, making it easy to fetch and filter metadata from the Centers for Medicare & Medicaid Services (CMS) repository.\n\n# Overview\n\nThe `get_provider_meta_data()` function simplifies the process of retrieving and managing metadata for healthcare datasets. By allowing users to filter data based on various criteria, it streamlines data management and enhances analytical capabilities.\n\n# Syntax and Arguments\n\nThe function syntax is straightforward and highly customizable:\n\n```r\nget_provider_meta_data(\n  .identifier = NULL,\n  .title = NULL,\n  .description = NULL,\n  .keyword = NULL,\n  .issued = NULL,\n  .modified = NULL,\n  .released = NULL,\n  .theme = NULL,\n  .media_type = NULL\n)\n```\n\nHere's a breakdown of the arguments:\n\n-   **.identifier**: A dataset identifier to filter the data.\n-   **.title**: A title to filter the data.\n-   **.description**: A description to filter the data.\n-   **.keyword**: A keyword to filter the data.\n-   **.issued**: A date when the dataset was issued to filter the data.\n-   **.modified**: A date when the dataset was modified to filter the data.\n-   **.released**: A date when the dataset was released to filter the data.\n-   **.theme**: A theme to filter the data.\n-   **.media_type**: A media type to filter the data.\n\n# What It Returns\n\nThe function returns a tidy tibble containing metadata about the datasets. This tibble includes the following columns:\n\n- **identifier**\n- **title**\n- **description**\n- **keyword**\n- **issued**\n- **modified**\n- **released**\n- **theme**\n- **media_type**\n- **download_url**\n- **contact_fn**\n- **contact_email**\n- **publisher_name**\n\n# Details\n\nWhen you call `get_provider_meta_data()`, it fetches JSON data from the CMS metadata URL. The function then processes this data by:\n1. Selecting relevant columns.\n2. Unnesting nested lists.\n3. Cleaning column names.\n4. Processing dates and media types for enhanced usability.\n\n# Practical Example\n\nLet’s walk through an example to see how `get_provider_meta_data()` works in action.\n\nSuppose we want to retrieve metadata for a dataset based upong a specific data identifier? Here’s how we can do it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.data)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Retrieve metadata for a datset with identifier \"3614-1eef\"\nget_provider_meta_data(.identifier = \"3614-1eef\") |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 16\n$ identifier      <chr> \"3614-1eef\"\n$ title           <chr> \"Addiction Medicine Office Visit Costs\"\n$ description     <chr> \"Returns addiction medicine office visit costs per zip…\n$ keyword         <list> \"Addiction Medicine\"\n$ issued          <date> 2022-07-11\n$ modified        <date> 2022-07-11\n$ released        <date> 2023-09-28\n$ landing_page    <chr> \"https://data.medicare.gov/provider-data/dataset/3614-…\n$ theme           <list> \"Physician office visit costs\"\n$ access_level    <chr> \"public\"\n$ archive_exclude <lgl> NA\n$ contact_fn      <chr> \"PPL Dataset\"\n$ contact_email   <chr> \"PPL_Dataset@cms.hhs.gov\"\n$ publisher_name  <chr> \"Centers for Medicare & Medicaid Services (CMS)\"\n$ download_url    <chr> \"https://data.cms.gov/provider-data/sites/default/file…\n$ media_type      <chr> \"text/csv\"\n```\n\n\n:::\n:::\n\nIn this example, we are filtering the metadata based on the dataset identifier \"3614-1eef\". The `glimpse()` function allows us to view the structure of the resulting tibble.\n\nNow, what if we want to filter data that meets a certain keyword? Here’s how we can do that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovider_data_tbl <- get_provider_meta_data(.keyword = \"medic\")\n\n# Let's see all the titles that contain the keyword \"medic\"\nprovider_data_tbl[[\"title\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Addiction Medicine Office Visit Costs\"                                     \n [2] \"Emergency Medicine Office Visit Costs\"                                     \n [3] \"Geriatric Medicine Office Visit Costs\"                                     \n [4] \"Internal Medicine Office Visit Costs\"                                      \n [5] \"Medical Genetics and Genomics Office Visit Costs\"                          \n [6] \"Medical Oncology Office Visit Costs\"                                       \n [7] \"Medical Toxicology Office Visit Costs\"                                     \n [8] \"Nuclear Medicine Office Visit Costs\"                                       \n [9] \"Osteopathic Manipulative Medicine Office Visit Costs\"                      \n[10] \"Pediatric Medicine Office Visit Costs\"                                     \n[11] \"Physical Medicine and Rehabilitation Office Visit Costs\"                   \n[12] \"Preventive Medicine Office Visit Costs\"                                    \n[13] \"Sleep Medicine Office Visit Costs\"                                         \n[14] \"Sports Medicine Office Visit Costs\"                                        \n[15] \"Undersea and Hyperbaric Medicine Office Visit Costs\"                       \n[16] \"Medical Equipment Suppliers\"                                               \n[17] \"Home Health Care - Patient Survey (HHCAHPS) 2022Q4 to 2023Q3\"              \n[18] \"Home Health Care - Patient Survey (HHCAHPS) National Data 2022Q4 to 2023Q3\"\n[19] \"Home Health Care - Patient Survey (HHCAHPS) State Data 2022Q4 to 2023Q3\"   \n[20] \"Home Health Care - Patient Survey (HHCAHPS) Measure Dates 2022Q4 to 2023Q3\"\n[21] \"Medicare Spending Per Beneficiary - Hospital Additional Decimal Places\"    \n[22] \"Hospital Value-Based Purchasing (HVBP) - Efficiency Scores\"                \n[23] \"Medicare Hospital Spending by Claim\"                                       \n[24] \"Medicare Spending Per Beneficiary - Hospital\"                              \n[25] \"Medicare Spending Per Beneficiary - National\"                              \n[26] \"Medicare Spending Per Beneficiary - State\"                                 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Now let's group them by theme\nprovider_data_tbl |>\n  count(theme, sort = TRUE) |>\n  unnest(cols = c(theme))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  theme                            n\n  <chr>                        <int>\n1 Physician office visit costs    15\n2 Hospitals                        6\n3 Home health services             4\n4 Supplier directory               1\n```\n\n\n:::\n:::\n\nIn this example, the metadata is filtered based on the keyword \"medic\". We then extract the titles containing the keyword and group them by theme to see the distribution of themes in the filtered data. Notice that we filtered the keyword not on a full word but on a partial match, which can be useful for broad searches.\n\n# Benefits of Using `get_provider_meta_data()`\n\nThis function is particularly useful for:\n\n- **Data Scientists and Analysts**: Quickly finding relevant datasets without manually searching through large repositories.\n- **Healthcare Researchers**: Accessing comprehensive metadata to support research and analysis.\n- **Developers**: Integrating CMS metadata retrieval into applications or workflows with minimal effort.\n\n# Conclusion\n\nThe `get_provider_meta_data()` function is a robust tool for anyone working with healthcare data. It not only saves time but also provides a cleaner, more efficient way to manage and analyze dataset metadata.\n\nGive it a try and see how it can enhance your data workflows. Happy coding!\n\nFeel free to share your experiences and any creative ways you’re using this function in the comments below. Until next time, keep exploring and innovating with R!\n\n\n---\nSteve",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}