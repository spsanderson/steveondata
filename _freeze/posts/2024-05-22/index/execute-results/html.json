{
  "hash": "93edcdde2706ddaaac453e4fa72958a4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to Split a Number into Digits in R Using `gsub()` and `strsplit()`\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-22\"\ncategories: [code, rtip, operations]\ntoc: TRUE\n---\n\n\n# Introduction\n\nSplitting numbers into individual digits can be a handy trick in data analysis and manipulation. Today, we'll explore how to achieve this using base R functions, specifically `gsub()` and `strsplit()`. Let's walk through the process step by step, explain the syntax of each function, and provide some examples for clarity.\n\n# Syntax\n\n## Understanding `gsub()` and `strsplit()`\n\nFirst, let's get familiar with the two main functions we'll be using:\n\n1. **`gsub(pattern, replacement, x)`**:\n   - **`pattern`**: A regular expression describing the pattern to be matched.\n   - **`replacement`**: The string to replace the matched pattern.\n   - **`x`**: The input vector, which is usually a character string.\n\nThe `gsub()` function replaces all occurrences of the pattern in `x` with the `replacement`.\n\n2. **`strsplit(x, split)`**:\n   - **`x`**: The input vector, which is usually a character string.\n   - **`split`**: The delimiter on which to split the input string.\n\nThe `strsplit()` function splits the elements of a character vector `x` into substrings based on the delimiter specified in `split`.\n\n# Examples\n\n## Splitting a Number into Digits\n\nLet's go through a few examples to see how we can split numbers into digits using these functions.\n\n### Example 1: Basic Splitting of a Single Number\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Convert the number to a character string\nnumber <- 12345\nnumber_str <- as.character(number)\nnumber_str\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"12345\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 2: Use gsub() to insert a delimiter (space) between each digit\nnumber_with_spaces <- gsub(\"(.)\", \"\\\\1 \", number_str)\nnumber_with_spaces\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1 2 3 4 5 \"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 3: Use strsplit() to split the string on the delimiter\ndigits <- strsplit(number_with_spaces, \" \")[[1]]\n\n# Step 4: Convert the result back to numeric\ndigits_numeric <- as.numeric(digits)\n\n# Print the result\nprint(digits_numeric)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n**Explanation**:\n\n1.    We convert the number to a character string using `as.character()`.\n2.    We use `gsub(\"(.)\", \"\\\\1 \", number_str)` to insert a space between each digit. The pattern `(.)` matches any character, and `\\\\1 ` refers to the matched character followed by a space.\n3.    We split the string on spaces using `strsplit(number_with_spaces, \" \")`.\n4.    Finally, we convert the resulting character vector back to numeric using `as.numeric()`.\n\n### Example 2: Splitting Multiple Numbers in a Vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Vector of numbers\nnumbers <- c(6789, 5432)\n\n# Function to split a single number into digits\nsplit_number <- function(number) {\n  number_str <- as.character(number)\n  number_with_spaces <- gsub(\"(.)\", \"\\\\1 \", number_str)\n  digits <- strsplit(number_with_spaces, \" \")[[1]]\n  as.numeric(digits)\n}\n\n# Apply the function to each number in the vector\nsplit_digits <- lapply(numbers, split_number)\n\n# Print the result\nprint(split_digits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 6 7 8 9\n\n[[2]]\n[1] 5 4 3 2\n```\n\n\n:::\n:::\n\n\n**Explanation**:\n\n1.    We define a vector of numbers.\n2.    We create a function `split_number` that takes a number and splits it into digits using the same steps as in Example 1.\n3.    We apply this function to each number in the vector using `lapply()`.\n4.    The result is a list where each element is a vector of digits for each number in the original vector.\n\n# Try It Yourself!\n\nNow that we've gone through the examples, it's your turn to give it a try! Experiment with different numbers, vectors, and even customize the splitting function to handle special cases or additional formatting. The more you practice, the more comfortable you'll become with these handy base R functions.\n\nHappy Coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}