{
  "hash": "3e7f041c4aa502505ce0f5d2b48e5e49",
  "result": {
    "markdown": "---\ntitle: \"TidyDensity Powers Up with Data.table: Speedier Distributions for Your Data Exploration\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-01-12\"\ncategories: [code, benchmark, datatable, tidydensity]\n---\n\n\n# Calling all R enthusiasts who love tidy data and crave efficiency!\n\nI'm thrilled to announce a major upgrade to the TidyDensity package that's sure to accelerate your data analysis workflows. We've integrated the lightning-fast `data.table` package for generating tidy distribution data, resulting in a **jaw-dropping 30% speed boost**. \n\nHere is one of the tests ran during development where v1 was the current and v2 was the version using `data.table`:\n\n```R\nn <- 10000\nbenchmark(\n \"tidy_bernoulli_v2\" = {\n   tidy_bernoulli_v2(n, .5, 1, FALSE)\n },\n \"tidy_bernoulli_v1\" = {\n   TidyDensity::tidy_bernoulli(n, .5, 1)\n },\n replications = 100,\n columns = c(\"test\",\"replications\",\"elapsed\",\"relative\",\"user.self\",\"sys.self\")\n) |>\n arrange(relative)\n               test replications elapsed relative user.self sys.self\n1 tidy_bernoulli_v2          100    2.50    1.000      2.22     0.26\n2 tidy_bernoulli_v1          100    4.67    1.868      4.34     0.31\n```\n\n# Here's what this means for you\n\n- **Faster Generation of Distribution Data:** Whether you're working with normal, binomial, Poisson, or other distributions, TidyDensity now produces results more swiftly than ever. This means less waiting and more time for exploring insights.\n- **Flexible Output Formats:** Choose the format that best suits your needs:\n    - **Tibbles for Seamless Integration with Tidyverse:** Set `.return_tibble = TRUE` to receive the data as a tibble, ready for seamless interaction with your favorite tidyverse tools.\n    - **data.table for Enhanced Performance:** Set `.return_tibble = FALSE` to harness the raw power of data.table objects for memory-efficient and lightning-fast operations.\n- **Enjoy the Speed Boost, No Matter Your Choice:** The speed enhancement shines through regardless of your preferred output format, as the data generation itself leverages `data.table` under the hood.\n\n# How to experience this boost\n\n1. **Update TidyDensity:** Ensure you have the latest version installed: `install.packages(\"TidyDensity\")`\n2. **Choose Your Output Format:** Indicate your preference with the `.return_tibble` parameter:\n   ```R\n   # For a tibble:\n   tidy_data <- tidy_normal(.return_tibble = TRUE)\n  \n   # For a data.table:\n   tidy_data <- tidy_normal(.return_tibble = FALSE)\n   ```\nNo matter which output you choose you will still enjoy the speedup because `data.table` is used to create the data and the conversion to a tibble is done afterwards if that is the output you want.\n\n# Let's see the output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n\n# Generate data\nnormal_tibble <- tidy_normal(.return_tibble = TRUE)\nhead(normal_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  sim_number     x       y    dx       dy      p       q\n  <fct>      <int>   <dbl> <dbl>    <dbl>  <dbl>   <dbl>\n1 1              1  1.05   -2.97 0.000398 0.854   1.05  \n2 1              2  0.0168 -2.84 0.00104  0.507   0.0168\n3 1              3  1.77   -2.72 0.00244  0.961   1.77  \n4 1              4 -1.81   -2.59 0.00518  0.0353 -1.81  \n5 1              5  0.447  -2.46 0.00997  0.673   0.447 \n6 1              6  1.05   -2.33 0.0174   0.854   1.05  \n```\n:::\n\n```{.r .cell-code}\nclass(normal_tibble)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nnormal_dt <- tidy_normal(.return_tibble = FALSE)\nhead(normal_dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   sim_number x           y        dx           dy         p           q\n1:          1 1  2.24103518 -3.424949 0.0002787401 0.9874881  2.24103518\n2:          1 2 -0.12769603 -3.286892 0.0008586864 0.4491948 -0.12769603\n3:          1 3 -0.39666069 -3.148835 0.0022824304 0.3458088 -0.39666069\n4:          1 4  0.89626001 -3.010778 0.0052656793 0.8149430  0.89626001\n5:          1 5  0.04267757 -2.872721 0.0105661984 0.5170207  0.04267757\n6:          1 6  0.53424808 -2.734664 0.0185083421 0.7034150  0.53424808\n```\n:::\n\n```{.r .cell-code}\nclass(normal_dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.table\" \"data.frame\"\n```\n:::\n:::\n\n\n# Ready to unleash the power of TidyDensity and data.table?\n\nDive into your next data exploration project and experience the efficiency firsthand! Share your discoveries and feedback with the community—we're eager to hear how this upgrade empowers your analysis.\n\n**Happy tidy data exploration!** \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}