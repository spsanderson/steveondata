{
  "hash": "c7d8c79baebaac8fd44eb7472735865f",
  "result": {
    "markdown": "---\ntitle: \"Taming Excel Dates in R: From Numbers to Meaningful Dates!\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-02-05\"\ncategories: [code, rtip, timeseries]\n---\n\n\n# Introduction\n\nHave you ever battled with Excel's quirky date formats in your R projects? If so, you're not alone! Those cryptic numbers can be a real headache, but fear not, fellow R warriors! Today, we'll conquer this challenge and transform those numbers into beautiful, usable dates.\n\n**Our Mission:** We'll convert two date columns in a tibble named \"df\":\n\n1. **`date`:** Stored as numbers, representing days since some mysterious date.\n2. **`datetime`:** Also in numberland, but with an additional decimal for time.\n\n**Our Weapons:**\n\n* **`as.Date()`:** This built-in R function is our date-conversion hero, but we need to give it a secret weapon: `origin = \"1899-12-30\"`. This tells `as.Date()` where the Excel date system starts counting days from.\n* **`openxlsx` library:** This package helps us deal with Excel files. We'll use its `convertToDateTime()` function to handle the `datetime` column, which includes both date and time information.\n\n# Let's Code!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load the openxlsx library (if needed)\nif (!require(openxlsx)) install.packages(\"openxlsx\")\nlibrary(openxlsx)\n\n# Our example data\ndf <- data.frame(\n  date = c(44563, 44566, 44635, 44670, 44706, 44716, 44761, 44782, 44864, 44919),\n  datetime = c(44563.17, 44566.51, 44635.64, 44670.40,\n               44706.43, 44716.42, 44761.05, 44782.09,\n               44864.19, 44919.89),\n  sales = c(14, 19, 22, 29, 24, 25, 25, 30, 35, 28)\n)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    date datetime sales\n1  44563 44563.17    14\n2  44566 44566.51    19\n3  44635 44635.64    22\n4  44670 44670.40    29\n5  44706 44706.43    24\n6  44716 44716.42    25\n7  44761 44761.05    25\n8  44782 44782.09    30\n9  44864 44864.19    35\n10 44919 44919.89    28\n```\n:::\n\n```{.r .cell-code}\n# Convert \"date\" column using as.Date() and the magic origin\ndf$date <- as.Date(df$date, origin = \"1899-12-30\")\n\n# Convert \"datetime\" column using openxlsx and convertToDateTime()\ndf$datetime <- convertToDateTime(df$datetime)\n```\n:::\n\n\n# Breaking it Down\n\n1. The first line checks if `openxlsx` is installed and loads it if needed.\n2. We create our sample data frame `df` with the `date` and `datetime` columns.\n3. The magic happens! We use `as.Date()` on `df$date`, specifying the `origin` as \"1899-12-30\". This tells R to interpret the numbers as days since that date.\n4. For `df$datetime`, we use `convertToDateTime()` from the `openxlsx` package. This function handles both date and time information stored as decimals.\n\n**Voila!** Our `df` now has proper date and datetime columns, ready for further analysis and visualization. Let's see the results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date            datetime sales\n1 2022-01-02 2022-01-02 04:04:48    14\n```\n:::\n:::\n\n\n# You're Turn!\n\nNow it's your turn! Grab your own Excel data with mysterious date formats and try this code. Play with different `origin` values if needed (depending on your Excel version). Remember, R is a playground, so have fun exploring and taming those dates!\n\n**Bonus Tip:** Want to format your dates for readability? Use the `format()` function, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$date <- format(df$date, \"%d/%m/%Y\")\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date            datetime sales\n1  02/01/2022 2022-01-02 04:04:48    14\n2  05/01/2022 2022-01-05 12:14:24    19\n3  15/03/2022 2022-03-15 15:21:36    22\n4  19/04/2022 2022-04-19 09:36:00    29\n5  25/05/2022 2022-05-25 10:19:12    24\n6  04/06/2022 2022-06-04 10:04:48    25\n7  19/07/2022 2022-07-19 01:12:00    25\n8  09/08/2022 2022-08-09 02:09:36    30\n9  30/10/2022 2022-10-30 04:33:36    35\n10 24/12/2022 2022-12-24 21:21:36    28\n```\n:::\n:::\n\n\nThis will display your dates in the familiar \"day/month/year\" format.\n\nSo there you have it, fellow R enthusiasts! With these tools, you can confidently handle Excel's date quirks and unleash the power of your data. Happy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}