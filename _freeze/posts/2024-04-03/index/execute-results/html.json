{
  "hash": "51123fc72d02706a0199bc36bc6e6b6d",
  "result": {
    "markdown": "---\ntitle: \"Scaling Your Data in R: Understanding the Range\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-04-03\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nToday, we're diving into a fundamental data pre-processing technique: scaling values. This might sound simple, but it can significantly impact how your data behaves in analyses.\n\n# Why Scale?\n\nImagine you have data on customer ages (in years) and purchase amounts (in dollars). The age range might be 18-80, while purchase amounts could vary from \\$10 to \\$1000. If you use these values directly in a model, the analysis might be biased towards the purchase amount due to its larger scale. Scaling brings both features (age and purchase amount) to a common ground, ensuring neither overpowers the other.\n\n# The `scale()` Function\n\nR offers a handy function called `scale()` to achieve this. Here's the basic syntax:\n\n``` r\nscaled_data <- scale(x, center = TRUE, scale = TRUE)\n```\n\n-   `data`: This is the vector or data frame containing the values you want to scale. A numeric matrix(like object)\n-   `center`: Either a logical value or numeric-alike vector of length equal to the number of columns of x, where ‘numeric-alike’ means that as.numeric(.) will be applied successfully if is.numeric(.) is not true.\n-   `scale`: Either a logical value or numeric-alike vector of length equal to the number of columns of x.\n-   `scaled_data`: This stores the new data frame with scaled values (typically one standard deviation from the mean).\n\n# Example in Action!\n\nLet's see `scale()` in action. We'll generate some sample data for height (in cm) and weight (in kg) of individuals:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)  # For reproducibility\nheight <- rnorm(100, mean = 170, sd = 10)\nweight <- rnorm(100, mean = 70, sd = 15)\ndata <- data.frame(height, weight)\n```\n:::\n\n\nThis creates a data frame (`data`) with 100 rows, where `height` has values around 170 cm with a standard deviation of 10 cm, and `weight` is centered around 70 kg with a standard deviation of 15 kg.\n\n# Visualizing Before and After\n\nNow, let's visualize the distribution of both features before and after scaling. We'll use the `ggplot2` package for this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Make Scaled data and cbind to original\nscaled_data <- scale(data)\nsetNames(cbind(data, scaled_data), c(\"height\", \"weight\", \"height_scaled\", \"weight_scaled\")) -> data\n\n# Tidy data for facet plotting\ndata_long <- pivot_longer(\n  data, \n  cols = c(height, weight, height_scaled, weight_scaled), \n  names_to = \"variable\", \n  values_to = \"value\"\n  )\n\n# Visualize\ndata_long |>\n  ggplot(aes(x = value, fill = variable)) +\n  geom_histogram(\n    bins = 30, \n    alpha = 0.328) +\n  facet_wrap(~variable, scales = \"free\") +\n  labs(\n    title = \"Distribution of Height and Weight Before and After Scaling\"\n    ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nRun this code and see the magic! The histograms before scaling will show a clear difference in spread between height and weight. After scaling, both distributions will have a similar shape, centered around 0 with a standard deviation of 1.\n\n# Try it Yourself!\n\nThis is just a basic example. Get your hands dirty! Try scaling data from your own projects and see how it affects your analysis. Remember, scaling is just one step in data pre-processing. Explore other techniques like centering or normalization depending on your specific needs.\n\nSo, the next time you have features with different scales, consider using `scale()` to bring them to a level playing field and unlock the full potential of your models!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}