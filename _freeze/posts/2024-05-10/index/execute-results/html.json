{
  "hash": "a90d4335362283ce402245743568717a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to Check if a Column Contains a String in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-10\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nWhether you're doing some data cleaning or exploring your dataset, checking if a column contains a specific string can be a crucial task. Today, I'll show you how to do this using both `str_detect()` from the **stringr** package and base R methods. We'll also tackle finding partial strings and counting occurrences. Let's dive right in!\n\n# Using `str_detect` from **stringr**\n\nFirst, we'll use the `str_detect` function. The `stringr` package is part of the **tidyverse** collection, which brings a set of user-friendly functions to text manipulation. We'll start by ensuring it's installed and loaded:\n\n```r\ninstall.packages(\"stringr\")\n```\n\nNow, let's create a sample dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n# Sample data\ndata <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Carol\", \"Dave\", \"Eve\"),\n  description = c(\"Software developer\", \"Data analyst\", \"UX designer\", \"Project manager\", \"Data scientist\")\n)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name        description\n1 Alice Software developer\n2   Bob       Data analyst\n3 Carol        UX designer\n4  Dave    Project manager\n5   Eve     Data scientist\n```\n\n\n:::\n:::\n\n\n# Examples\n\n## Using stringr\n\n### Check for Full String\n\nSuppose we want to check if any of the `description` column contains \"Data analyst\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Detect if 'description' contains 'Data analyst'\ndata$has_data_analyst <- str_detect(data$description, \"Data analyst\")\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name        description has_data_analyst\n1 Alice Software developer            FALSE\n2   Bob       Data analyst             TRUE\n3 Carol        UX designer            FALSE\n4  Dave    Project manager            FALSE\n5   Eve     Data scientist            FALSE\n```\n\n\n:::\n:::\n\n\nIn the output, the `has_data_analyst` column will be `TRUE` for \"Bob\" and `FALSE` for others.\n\n### Check for Partial String\n\nLet's expand our search to any string containing \"Data\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Detect if 'description' contains any word with 'Data'\ndata$has_data <- str_detect(data$description, \"Data\")\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name        description has_data_analyst has_data\n1 Alice Software developer            FALSE    FALSE\n2   Bob       Data analyst             TRUE     TRUE\n3 Carol        UX designer            FALSE    FALSE\n4  Dave    Project manager            FALSE    FALSE\n5   Eve     Data scientist            FALSE     TRUE\n```\n\n\n:::\n:::\n\n\nThis will show `TRUE` for \"Bob\" and \"Eve,\" where both \"Data analyst\" and \"Data scientist\" are detected.\n\n### Count Occurrences\n\nIf you need to count how many times \"Data\" appears, use `str_count`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count occurrences of 'Data'\ndata$data_count <- str_count(data$description, \"Data\")\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name        description has_data_analyst has_data data_count\n1 Alice Software developer            FALSE    FALSE          0\n2   Bob       Data analyst             TRUE     TRUE          1\n3 Carol        UX designer            FALSE    FALSE          0\n4  Dave    Project manager            FALSE    FALSE          0\n5   Eve     Data scientist            FALSE     TRUE          1\n```\n\n\n:::\n:::\n\n\nThis will add a column `data_count` with the exact count of occurrences per row.\n\n## Using Base R\n\nFor those who prefer base R, the **grepl** and **gregexpr** functions can help. \n\n### Check for Full or Partial String\n\n`grepl` is ideal for checking if a string is present:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using grepl for full/partial string detection\ndata$has_data_grepl <- grepl(\"Data\", data$description)\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name        description has_data_analyst has_data data_count has_data_grepl\n1 Alice Software developer            FALSE    FALSE          0          FALSE\n2   Bob       Data analyst             TRUE     TRUE          1           TRUE\n3 Carol        UX designer            FALSE    FALSE          0          FALSE\n4  Dave    Project manager            FALSE    FALSE          0          FALSE\n5   Eve     Data scientist            FALSE     TRUE          1           TRUE\n```\n\n\n:::\n:::\n\n\nThis will yield the same output as `str_detect`.\n\n### Count Occurrences\n\nFor counting occurrences, `gregexpr` is helpful:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count occurrences using gregexpr\nmatches <- gregexpr(\"Data\", data$description)\ndata$data_count_base <- sapply(\n  matches, \n  function(x) ifelse(x[1] == -1, 0, length(x))\n  )\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   name        description has_data_analyst has_data data_count has_data_grepl\n1 Alice Software developer            FALSE    FALSE          0          FALSE\n2   Bob       Data analyst             TRUE     TRUE          1           TRUE\n3 Carol        UX designer            FALSE    FALSE          0          FALSE\n4  Dave    Project manager            FALSE    FALSE          0          FALSE\n5   Eve     Data scientist            FALSE     TRUE          1           TRUE\n  data_count_base\n1               0\n2               1\n3               0\n4               0\n5               1\n```\n\n\n:::\n:::\n\n\nThis will add a new `data_count_base` column containing the count of \"Data\" in each row.\n\n# Give It a Try!\n\nThe best way to master string detection in R is to experiment with different patterns and datasets. Whether you use `str_detect`, `grepl`, or any other approach, you'll find plenty of ways to customize the search. Try it out with your own datasets, and soon you'll be searching like a pro!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}