{
  "hash": "7da05101eb1742ccf52b39cbc008c41c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Converting Text to Uppercase with toupper() in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-08-06\"\ncategories: [code, rtip]\ntoc: TRUE\n---\n\n\n# Introduction\n\nGreetings, useR! Today, we're exploring a handy function from base R that will help with string manipulation: `toupper()`. This little function is the complement to `tolower()` [which I have previously written about.](https://www.spsanderson.com/steveondata/posts/2024-07-30/) Let's take a look!\n\n## What's `toupper()` all about?\n\nAt its core, `toupper()` does one thing exceptionally well: it converts all lowercase letters in a string to uppercase. It's straightforward, efficient, and incredibly versatile in various scenarios.\n\n### Syntax:\n```R\ntoupper(x)\n```\nWhere `x` is the character vector you want to convert to uppercase.\n\nLet's dive into some practical examples to see `toupper()` in action!\n\n# Examples\n\n## Example 1: Basic Usage\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- \"hello, world!\"\nresult <- toupper(text)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"HELLO, WORLD!\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Output: \"HELLO, WORLD!\"\n```\n:::\n\n\nIn this example, we transform a simple greeting into all caps. Notice how `toupper()` affects only the letters, leaving punctuation and spaces untouched.\n\n## Example 2: Working with Vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- c(\"apple\", \"banana\", \"Cherry\")\nupper_fruits <- toupper(fruits)\nprint(upper_fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"APPLE\"  \"BANANA\" \"CHERRY\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Output: \"APPLE\" \"BANANA\" \"CHERRY\"\n```\n:::\n\n\nHere, we apply `toupper()` to a vector of fruit names. It handles each element separately, converting all to uppercase.\n\n## Example 3: Mixed Case and Special Characters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmixed_text <- \"R is AWESOME! It's 2024 :)\"\nresult <- toupper(mixed_text)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"R IS AWESOME! IT'S 2024 :)\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Output: \"R IS AWESOME! IT'S 2024 :)\"\n```\n:::\n\n\nThis example showcases how `toupper()` deals with mixed case text and special characters. It converts lowercase to uppercase but leaves already uppercase letters, numbers, and symbols as they are.\n\n## Pro Tip: Combining with Other Functions\nYou can easily combine `toupper()` with other string functions for more complex operations. For instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- \"   r programming is fun   \"\nresult <- toupper(trimws(text))\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"R PROGRAMMING IS FUN\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Output: \"R PROGRAMMING IS FUN\"\n```\n:::\n\nHere, we first trim whitespace with `trimws()`, then convert to uppercase.\n\n# Why Use `toupper()`?\n\n-   Standardizing text data\n-   Preparing strings for case-insensitive comparisons\n-   Creating eye-catching headers or titles in reports\n\nI encourage you to open your R console and experiment with `toupper()`! Try it on different types of strings, combine it with other functions, and see how it can enhance your text processing workflows.\n\nRemember, `toupper()` is just one of many string manipulation functions in R. As you become more comfortable with it, explore other functions like `tolower()`, `chartr()`, and `substr()` to expand your text processing toolkit.\n\n---\n\nHappy coding, and may your strings always be perfectly cased!\n\n\n```{=html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"spsanderson/steveondata\"\n        data-repo-id=\"R_kgDOIIxnLw\"\n        data-category=\"Comments\"\n        data-category-id=\"DIC_kwDOIIxnL84ChTk8\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"dark\"\n        data-lang=\"en\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}