{
  "hash": "ff56f7ab1359dfa49148971ef982e90f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mastering String Concatenation of Vectors in R: Base R, stringr, stringi, and glue\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-08-13\"\ncategories: [code, rtip, strings, stringr, stringi, glue]\ntoc: TRUE\n---\n\n\n# Introduction\n\nWelcome to another exciting R programming tutorial! Today, we will explore how to concatenate vectors of strings using different methods in R: base R, `stringr`, `stringi`, and `glue`. We'll use a practical example involving a data frame with names, job titles, and salaries. By the end of this post, you'll feel confident using these tools to manipulate and combine strings in your own projects. Let's get started!\n\n## Our Example Data Frame\n\nWe'll start with a simple data frame containing employee names, their job titles, and their salaries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating the data frame\nemployees <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  JobTitle = c(\"Data Scientist\", \"Software Engineer\", \"Product Manager\"),\n  Salary = c(120000, 110000, 105000)\n)\n\nprint(employees)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name          JobTitle Salary\n1   Alice    Data Scientist 120000\n2     Bob Software Engineer 110000\n3 Charlie   Product Manager 105000\n```\n\n\n:::\n:::\n\n\n## Concatenation Using Base R\n\nIn base R, we can concatenate strings using the `paste()` and `paste0()` functions. The `paste()` function combines strings with a specified separator, while `paste0()` does the same without any separator.\n\nTo create a single string for each employee that combines their name, job title, and salary, we can use `paste()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenating using paste()\nemployees$Summary <- paste(\n  employees$Name, \n  \"is a\", employees$JobTitle, \n  \"earning $\", employees$Salary\n  )\n\nprint(employees$Summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Alice is a Data Scientist earning $ 120000\"   \n[2] \"Bob is a Software Engineer earning $ 110000\"  \n[3] \"Charlie is a Product Manager earning $ 105000\"\n```\n\n\n:::\n:::\n\n\nThe `paste()` function automatically adds a space between the elements. If you want to control the separator, you can use the `sep` parameter. For instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenating with a custom separator\nemployees$Summary <- paste(employees$Name, employees$JobTitle, employees$Salary, sep = \" | \")\n\nprint(employees$Summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Alice | Data Scientist | 120000\"    \"Bob | Software Engineer | 110000\"  \n[3] \"Charlie | Product Manager | 105000\"\n```\n\n\n:::\n:::\n\n\n## Concatenation Using stringr\n\nThe `stringr` package provides a more consistent and user-friendly approach to string manipulation. The `str_c()` function is used for concatenation.\n\nFirst, install and load the `stringr` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install if you do not have it\n# install.packages(\"stringr\")\nlibrary(stringr)\n```\n:::\n\n\nNow, let's concatenate the strings using `str_c()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenating using str_c()\nemployees$Summary <- str_c(\n  employees$Name, \n  \"is a\", employees$JobTitle, \"earning $\", \n  employees$Salary, \n  sep = \" \"\n  )\n\nprint(employees$Summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Alice is a Data Scientist earning $ 120000\"   \n[2] \"Bob is a Software Engineer earning $ 110000\"  \n[3] \"Charlie is a Product Manager earning $ 105000\"\n```\n\n\n:::\n:::\n\n\nThe `str_c()` function works similarly to `paste()`, but with a consistent syntax and more intuitive parameter names.\n\n## Concatenation Using stringi\n\nThe `stringi` package is another powerful tool for string manipulation. It offers a wide range of functions, including `stri_c()` for concatenation.\n\nFirst, install and load the `stringi` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install if you do not have it\n# install.packages(\"stringi\")\nlibrary(stringi)\n```\n:::\n\n\nNow, let's concatenate the strings using `stri_c()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenating using stri_c()\nemployees$Summary <- stri_c(\n  employees$Name, \n  \"is a\", employees$JobTitle, \n  \"earning $\", employees$Salary, \n  sep = \" \"\n  )\n\nprint(employees$Summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Alice is a Data Scientist earning $ 120000\"   \n[2] \"Bob is a Software Engineer earning $ 110000\"  \n[3] \"Charlie is a Product Manager earning $ 105000\"\n```\n\n\n:::\n:::\n\n\nThe `stri_c()` function is similar to `str_c()` from the `stringr` package, but it provides additional features for advanced string manipulation.\n\n## Concatenation Using glue\n\nThe `glue` package offers a unique approach to string concatenation by allowing you to embed R expressions directly within strings.\n\nFirst, install and load the `glue` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install if you do not have it\n# install.packages(\"glue\")\nlibrary(glue)\n```\n:::\n\n\nNow, let's use `glue()` to create the summary strings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenating using glue()\nemployees$Summary <- glue(\n  \"{employees$Name} is a {employees$JobTitle} earning ${employees$Salary}\"\n  )\n\nprint(employees$Summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAlice is a Data Scientist earning $120000\nBob is a Software Engineer earning $110000\nCharlie is a Product Manager earning $105000\n```\n\n\n:::\n:::\n\n\nThe `glue()` function makes it easy to embed variable values within strings, providing a clear and readable syntax. It also has in my opinion the nicest output as you will notice there is no space between the salary and the dollar sign.\n\n# Conclusion\n\nWe've covered several methods for concatenating strings in R, including base R functions, the `stringr` package, the `stringi` package, and the `glue` package. Each method has its own strengths and can be useful depending on your specific needs.\n\nI encourage you to try these techniques in your own projects. Experimenting with different methods will help you understand which one works best for your use cases. \n\n---\n\nHappy coding!\n\n\n```{=html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"spsanderson/steveondata\"\n        data-repo-id=\"R_kgDOIIxnLw\"\n        data-category=\"Comments\"\n        data-category-id=\"DIC_kwDOIIxnL84ChTk8\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"dark\"\n        data-lang=\"en\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}