{
  "hash": "bcfc67ddc2ffde901e614b7c864a8303",
  "result": {
    "markdown": "---\ntitle: \"Demystifying `bootstrap_stat_plot()`: Your Ticket to Insightful Data Exploration\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-01-22\"\ncategories: [code, rtip, tidyaml]\n---\n\n\n# Introduction\n\nEver feel like your data is hiding secrets? Like it's whispering truths but you just can't quite grasp them? Well, fear not, fellow data sleuths! Today, we'll crack the code of an R function that's like a magnifying glass for your statistical investigations: `bootstrap_stat_plot()` from the **TidyDensity** package.\n\n**Imagine this:** You have a dataset, say, car mileage (MPG) from the classic `mtcars` dataset. You want to understand the **average** MPG, but what if that average is just a mirage? What if it's skewed by a few outliers or doesn't capture the full story?\n\nEnter **bootstrapping**, a statistical technique that's like taking your data on a wild ride. It creates **multiple copies** of your data, each with a slight twist, and then calculates the statistic you're interested in (e.g., average MPG) for each copy. This gives you a **distribution** of possible averages, revealing the variability and potential biases lurking beneath the surface.\n\n**`bootstrap_stat_plot()`** takes this magic a step further. It not only calculates the distribution but also **visualizes** it, giving you a clear picture of how the statistic fluctuates across different versions of your data. It's like a **magnifying glass** for your statistical investigations!\n\n# Function\n\n## Syntax\n\nLet's take a look at the function:\n\n```R\nbootstrap_stat_plot(\n  .data,\n  .value,\n  .stat = \"cmean\",\n  .show_groups = FALSE,\n  .show_ci_labels = TRUE,\n  .interactive = FALSE\n)\n```\n\n## Arguments\n\n**1. The Data:**\n\n- `.data`: The data frame containing your data.\n\n**2. The Value:**\n\n- `.value`: The variable you want to calculate the statistic for.\n\n**3. The Statistic:**\n\n- `.stat`: The statistic you want to calculate. Options include:\n\n  - `cmean`: The mean\n  - `cmedian`: The median\n  - `cmin`: The minimum\n  - `cmax`: The maximum\n  - `csd`: The standard deviation\n  - `cvar`: The variance\n  - and many others!\n  \n**4. Show Groups:**\n\n- `.show_groups`: Whether to show the groups in the plot. Default is `FALSE`.\n\n**5. Show Confidence Interval Labels:**\n\n- `.show_ci_labels`: Whether to show the confidence interval labels in the plot. Default is `TRUE`.\n\n**6. Interactive:**\n\n- `.interactive`: Whether to make the plot interactive. Default is `FALSE`.\n  \n\n# Examples\n\n# Example 1 - Show replications\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\nlibrary(patchwork)\n\nx <- mtcars$mpg\nns <- 50\n\np1 <- tidy_bootstrap(x, .num_sims = ns) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"cmean\", \n                      .show_groups = TRUE,\n                      .show_ci_label = TRUE\n  ) \n\np2 <- tidy_bootstrap(x, .num_sims = ns) |> \n  bootstrap_stat_plot(y,\n                      .stat = \"cmin\", \n                      .show_groups = TRUE,\n                      .show_ci_label = TRUE\n  )\n\np3 <- tidy_bootstrap(x, .num_sims = ns) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"cmax\", \n                      .show_groups = TRUE,\n                      .show_ci_label = TRUE\n  )\n\np4 <- tidy_bootstrap(x, .num_sims = ns) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"csd\", \n                      .show_groups = TRUE,\n                      .show_ci_label = TRUE\n  )\n\nwrap_plots(\n  p1, p2, p4, p3, \n  ncol = 2, nrow = 2, \n  widths = c(1, 1), heights = c(1, 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nLet's dissect the code to see how it works:\n\n**1. The Data:**\n\n- `.data`: This is where your bootstrapped data lives, usually after using `tidy_bootstrap()` or `bootstrap_unnest_tbl()` to create it.\n\n**2. The Statistic:**\n\n- `.value`: This is the column you want to analyze, like `mpg` in our example.\n- `.stat`: This is the magic spell! It tells the function what statistic to calculate on your chosen value. By default, it's `\"cmean\"` for the **cumulative mean**, but you can choose others like `\"cmin\"` for the minimum, `\"cmax\"` for the maximum, or even `\"csd\"` for the circular standard deviation.\n\n**3. Visualization Options:**\n\n- `.show_groups`: Turn this to `TRUE` if you want to see the distribution for **each bootstrap sample** (think of it as a swarm of data points). By default, it shows just the overall distribution.\n- `.show_ci_labels`: This one displays the **confidence interval** bounds (think of it as the range where the true statistic likely lies). By default, you get the last values of the upper and lower bounds.\n\n**4. Interactive Mode:**\n\n- `.interactive`: Set this to `TRUE` if you want to get a **plotly plot object** back, which you can then customize further. Think of it as a living graph you can play with!\n\n# Example 2 - Hide replications\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- tidy_bootstrap(x) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"cmean\", \n                      .show_groups = FALSE,\n                      .show_ci_label = FALSE\n  )\n\np2 <- tidy_bootstrap(x) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"cmin\", \n                      .show_groups = FALSE,\n                      .show_ci_label = FALSE\n  )\n\np3 <- tidy_bootstrap(x) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"cmax\", \n                      .show_groups = FALSE,\n                      .show_ci_label = FALSE\n  )\n\np4 <- tidy_bootstrap(x) |>\n  bootstrap_stat_plot(y,\n                      .stat = \"csd\", \n                      .show_groups = FALSE,\n                      .show_ci_label = FALSE\n  )\n\nwrap_plots(\n  p1, p2, p4, p3, \n  ncol = 2, nrow = 2, \n  widths = c(1, 1), heights = c(1, 1)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nIn this example we did two things different, we hid the replications, the simulations was left to the default of 2000 and the labels were turned off. This is useful when you want to show a summary of the data.\n\n# Your Turn to Explore\n\nDon't just take our word for it! Try `bootstrap_stat_plot()` on your own data. Experiment with different statistics, explore the interactive mode, and see how it unlocks new insights you might have missed before. Remember, the more you play, the more you discover!\n\n**So, unleash your inner data detective and let `bootstrap_stat_plot()` guide you to a deeper understanding of your data.** Happy exploring!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}