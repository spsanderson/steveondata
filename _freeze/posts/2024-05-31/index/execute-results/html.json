{
  "hash": "bcbb6a1952c5e114da46adaabad59da7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"An Overview of the New AIC Functions in the `TidyDensity` Package\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-31\"\ncategories: [code, rtip, tidydensity]\ntoc: TRUE\n---\n\n\n# Introduction\n\nThe latest update the the `TidyDensity` package introduces several new functions that make it easier to work with data in R. In this article, we'll take a look at the new AIC functions and how they work.\n\n# New Functions\n\nThe set of functions that we will go over are the `util_dist_aic()` functions, where `dist` is the distribution in question, for example `util_negative_binomial_aic()`. These functions calculate the Akaike Information Criterion (AIC) for a given distribution and data. The AIC is a measure of the relative quality of a statistical model for a given set of data. The lower the AIC value, the better the model fits the data. Here is a bit about the functions.\n\n## Usage\n\n```R\nutil_negative_binomial_aic()\n```\n\n## Arguments\n\n-   `.x`: A numeric vector of data values.\n\n## Value\n\nA numeric value representing the AIC for the given data and distribution.\n\n## Details\n\nThis function calculates the Akaike Information Criterion (AIC) for a distribution fitted to the provided data.\n\nThis function fits a distribution to the provided data. It estimates the parameters of the distribution from the data. Then, it calculates the AIC value based on the fitted distribution.\n\nInitial parameter estimates: The function uses the param estimate family of functions in order to estimate the starting point of the parameters. For example `util_negative_binomial_param_estimate()`.\n\nOptimization method: Since the parameters are directly calculated from the data, no optimization is needed.\n\nGoodness-of-fit: While AIC is a useful metric for model comparison, it's recommended to also assess the goodness-of-fit of the chosen model using visualization and other statistical tests.\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n\nset.seed(123)\n# Generate some data\nx <- rnorm(100)\n\n# Calculate the AIC for a negative binomial distribution\ncat(\n  \" AIC of rnorm() using TidyDensity: \", util_normal_aic(x), \"\\n\",\n  \"AIC of rnorm() using fitdistrplus: \", \n  fitdistrplus::fitdist(x, \"norm\")$aic\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n AIC of rnorm() using TidyDensity:  268.5385 \n AIC of rnorm() using fitdistrplus:  268.5385\n```\n\n\n:::\n:::\n\n\n## New AIC Functions\n\nHere is a listing of all of the new AIC functions:\n\n-   `util_negative_binomial_aic()`\n-   `util_zero_truncated_negative_binomial_aic()`\n-   `util_zero_truncated_poisson_aic()`\n-   `util_f_aic()`\n-   `util_zero_truncated_geometric_aic()`\n-   `util_t_aic()`\n-   `util_pareto1_aic()`\n-   `util_paralogistic_aic()`\n-   `util_inverse_weibull_aic()`\n-   `util_pareto_aic()`\n-   `util_inverse_burr_aic()`\n-   `util_generalized_pareto_aic()`\n-   `util_generalized_beta_aic()`\n-   `util_zero_truncated_binomial_aic()`\n\n# Conclusion\n\nThanks for reading. I hope you find these new functions useful in your work. If you have any questions or feedback, please feel free to reach out. I worked hard to ensure where I could that results would come back identical to what would be calculated from the amazing `fitdistrplus` package.\n\nHappy Coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}