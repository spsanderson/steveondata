{
  "hash": "cfe8690e4ba782679355b8a3c470f31f",
  "result": {
    "markdown": "---\ntitle: \"Unveiling the Time Traveler: Plotting Time Series in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-12-28\"\ncategories: [rtip, timeseries]\n---\n\n\n# Introduction\n\n**Ready to journey through time with R?** Buckle up, because we're about to explore the art of visualizing time-dependent data, known as time series analysis. Whether you're tracking monthly sales patterns or analyzing yearly climate trends, R has your back with powerful tools to visualize these stories through time.\n\n**Our Flight Plan:**\n\n1. **Loading Up with Data:** Grabbing our trusty dataset, AirPassengers.\n2. **Taking Off with Base R:** Creating a basic time series plot using base R functions.\n3. **Soaring with ggplot2:** Crafting a visually stunning time series plot using the ggplot2 library.\n4. **Navigating Date Formatting:** Customizing axis labels with scale_x_date() for clarity.\n5. **Landing with Your Own Exploration:** Encouraging you to take the controls and create your own time series plots!\n\n**1. Ready for Takeoff: Loading Data**\n\nWe'll start by loading the built-in AirPassengers dataset, which chronicles monthly passenger totals from 1949 to 1960:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAirPassengers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1949 112 118 132 129 121 135 148 148 136 119 104 118\n1950 115 126 141 135 125 149 170 170 158 133 114 140\n1951 145 150 178 163 172 178 199 199 184 162 146 166\n1952 171 180 193 181 183 218 230 242 209 191 172 194\n1953 196 196 236 235 229 243 264 272 237 211 180 201\n1954 204 188 235 227 234 264 302 293 259 229 203 229\n1955 242 233 267 269 270 315 364 347 312 274 237 278\n1956 284 277 317 313 318 374 413 405 355 306 271 306\n1957 315 301 356 348 355 422 465 467 404 347 305 336\n1958 340 318 362 348 363 435 491 505 404 359 310 337\n1959 360 342 406 396 420 472 548 559 463 407 362 405\n1960 417 391 419 461 472 535 622 606 508 461 390 432\n```\n:::\n:::\n\n\n**2. Base R: The Simple and Straightforward Route**\n\nBase R offers a direct path to creating a time series plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(AirPassengers)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThis generates a basic line plot, revealing an upward trend in air passengers over time.\n\n**3. ggplot2: The High-Flying, Visually Staggering Journey**\n\nFor more customization and visual appeal, we'll turn to the ggplot2 library and the healthyR.ts library to first convert the AirPassengers Data set into a tibble:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(healthyR.ts)\n\ndf <- ts_to_tbl(AirPassengers)\n\nggplot(df, aes(x = date_col, y = value)) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"Monthly Air Passengers (1949-1960)\",\n       x = \"Year\",\n       y = \"Passengers\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis creates a more refined plot with informative labels and a sleeker aesthetic.\n\n**4. Mastering Time with scale_x_date()**\n\nTo fine-tune the x-axis date labels, ggplot2 offers the versatile scale_x_date() function. Let's display years and abbreviated months:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = date_col, y = value)) +\n  geom_line() +\n  theme_minimal() +\n  scale_x_date(date_labels = \"%b %Y\") +\n  labs(title = \"Monthly Air Passengers (1949-1960)\",\n       y = \"Passengers\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n**5. Your Turn to Pilot: Experiment and Explore!**\n\nR is your playground for time series visualization! Try these challenges:\n\n- Explore other time series datasets in R.\n- Customize plots further with colors, themes, and annotations.\n- Use scale_x_date() to display different date formats.\n- Combine multiple time series in a single plot.\n\nUnleash your creativity and uncover the captivating stories hidden within time series data! For a start here are some resources:\n\n- [scale_x_date()](https://ggplot2.tidyverse.org/reference/scale_date.html)\n\nThe `scale_x_date()` functiontakes the following arguments:\n\n*    %d: Day as a number between 0 and 31\n*    %a: Abbreviated weekday (e.g. “Tue”)\n*    %A: Unabbreviated weekday (e.g. “Tuesday”)\n*    %m: Month between 0 and 12\n*    %b: Abbreviated month (e.g. “Jan”)\n*    %B: Unabbreviated month (e.g. “January”)\n*    %y: 2-digit year (e.g. “21”)\n*    %Y: 4-digit year (e.g. “2021”)\n*    %W: Week of the year between 0 and 52\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}