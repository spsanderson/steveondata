{
  "hash": "4e88c1c01d802dc2458886fd3b7cc471",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to Select Random Samples in R with Examples\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2025-05-19\"\ncategories: [code, rtip]\ntoc: TRUE\ndescription: \"Meta Description: Learn how to select random samples in R with clear examples using the sample() function. This tutorial covers sampling from vectors, data.frames, and matrices—with and without replacement—for R programmers.\"\nkeywords: [Programming, How to Select Random Samples in R, Random Sampling in R, R Sample Function, Select Random Rows in R, Random Samples in R Examples, Sampling Without Replacement in R, Sampling With Replacement in R, Random Sampling from Data Frames in R, Sampling from R Vectors, Sampling from Matrices in R, How to Sample Random Rows from a Data Frame in R, Step-by-Step Guide to Using sample() in R, How to Sample from Vectors and Matrices in R, Working Examples of R Random Sampling With and Without Replacement, Tutorial on Reproducible Random Sampling in R]\n---\n\n\n\n# Introduction\n\nRandom sampling is a fundamental technique in statistics, simulation, and data analysis. Whether you are building a model, testing a hypothesis, or simulating data, learning how to randomly select samples from your dataset is a must. In R, the built-in `sample()` function is an easy and powerful way to obtain random samples from vectors, data.frames, and even matrices.\n\nIn this article, we will explain the `sample()` function in detail, provide working examples, and show you how to perform both sampling with and without replacement. By the end, you will be able to confidently use random sampling to support your data analysis tasks in R.\n\nRandom sampling is useful for many tasks. With random samples, you can:\n\n- **Test hypotheses:** Evaluate if a sample represents the population.\n- **Split data:** Create training and test sets for machine learning models.\n- **Bootstrap samples:** Resample your data to estimate uncertainty.\n- **Shuffle data:** Randomize the order of data for simulation studies.\n\nIn R, the `sample()` function is a versatile tool that lets you randomly draw items from a collection—whether that collection is a simple vector, a data.frame, or even a matrix. In the following sections, we will explain the syntax of `sample()`, show examples with and without replacement, and provide sample code for various data structures.\n\n# Understanding the `sample()` Function\n\nThe basic syntax of the `sample()` function in R is as follows:\n\n```r\nsample(x, size, replace = FALSE, prob = NULL)\n```\n\nLet’s break down the arguments:\n\n- **x:** The input vector (or sometimes more complex data structures) from which to sample.\n- **size:** The number of items you want to pick.\n- **replace:** A logical value indicating whether sampling is with replacement (set to `TRUE`) or without (the default value `FALSE`).\n- **prob:** An optional vector of probability weights for performing weighted sampling.\n\nThis function works by randomly shuffling the elements of `x` when `size` is not specified. When you set the `size` argument, `sample()` returns a random subset of the elements from `x`.\n\nFor more examples and detailed explanations on `sample()`, many great resources are available (https://www.statology.org/random-sample-in-r/) (https://www.r-bloggers.com/2024/03/mastering-random-sampling-in-r-with-the-sample-function/).\n\n# Sampling from Vectors\n\nVectors are the simplest data structure in R. Let’s start with a few examples that show how to use the `sample()` function to draw random samples from a vector.\n\n## Simple Random Sampling (Without Replacement)\n\nIn simple random sampling, each element is only selected once. Here’s how you can sample 5 elements from a vector of numbers without replacement:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector with numbers 1 through 10\nnumbers <- 1:10\n\n# Draw a random sample of 5 elements without replacement\nsample_without_replacement <- sample(numbers, 5)\n\n# Print the sampled values\nprint(sample_without_replacement)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7  9 10  4  5\n```\n\n\n:::\n:::\n\n\n\nEvery time you run this script, you will see a different order for the five unique elements chosen from 1 to 10. This is because sampling without replacement means no element is repeated (https://www.r-bloggers.com/2024/03/mastering-random-sampling-in-r-with-the-sample-function/).\n\n## Random Sampling with Replacement\n\nWhen sampling with replacement, the same element can be selected more than once. This is useful if you need to simulate scenarios where an observation might appear multiple times. To sample with replacement, simply set `replace = TRUE`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Draw a sample of 5 elements with replacement from the same vector\nsample_with_replacement <- sample(numbers, 5, replace = TRUE)\n\n# Print the sampled values\nprint(sample_with_replacement)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  2 10 10\n```\n\n\n:::\n:::\n\n\n\nBecause replacement is allowed, you might see the same number appear more than once (for instance, you might get ` 3 3 7 2 9`). This method is also commonly used in bootstrapping methods .\n\n# Sampling from Data Frames\n\nOften you need to randomly select rows from a data.frame instead of just sampling from a vector of numbers. This is very useful when splitting data into training and testing sets, or when you need a subset for exploratory analysis.\n\nImagine you have the following data.frame:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a simple data.frame with names and ages\ndf <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),\n  Age = c(25, 30, 35, 28, 22)\n)\n\n# Randomly select 3 rows from the data.frame without replacement\ndf_sample <- df[sample(nrow(df), 3), ]\n\n# Print the sampled data.frame\nprint(df_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Age\n4 Diana  28\n5   Eve  22\n2   Bob  30\n```\n\n\n:::\n:::\n\n\n\n## Explanation:\n\n1. **nrow(df):** This function inside `sample()` returns the total number of rows in the data.frame.\n2. **sample(nrow(df), 3):** This random function selects 3 unique row numbers from the total available.\n3. **df[ ... , ]:** We then subset the original data.frame using the randomly chosen row numbers.\n\nThis will return a new data.frame with 3 randomly selected rows, which might be useful for quick exploratory analysis or as input for further processing. Sampling rows using this technique is common when the dataset is large and you need to quickly check a random subset .\n\n# Sampling from a Matrix\n\nMatrices in R are two-dimensional arrays, and you can also use the `sample()` function to work with them. The following examples demonstrate two common approaches to sampling from a matrix: sampling random elements from the entire matrix and sampling random rows.\n\n## Sampling Random Elements from a Matrix\n\nYou might want to pick random elements from a matrix regardless of rows and columns. For example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a 3x3 matrix with numbers from 1 to 9\nmatrix_data <- matrix(1:9, nrow = 3, byrow = TRUE)\nprint(matrix_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n\n\n:::\n\n```{.r .cell-code}\n# Sample 4 random elements from the matrix (note: the matrix is treated as a vector)\nrandom_elements <- sample(matrix_data, 4)\n\n# Print the sampled elements\nprint(random_elements)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 2 5 6\n```\n\n\n:::\n:::\n\n\n\n**Explanation:**\n- R internally treats the matrix as a vector when passed to `sample()`. Hence, the function picks 4 random values from all values in the matrix.\n  \n## Sampling Rows of a Matrix\n\nIf you need to randomly select rows (maintaining the matrix structure), you can do this by sampling the row indices:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample 2 random rows from the matrix\nrandom_rows <- matrix_data[sample(nrow(matrix_data), 2), ]\n\n# Print the sampled rows, which still keep the matrix-like structure\nprint(random_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    4    5    6\n[2,]    1    2    3\n```\n\n\n:::\n:::\n\n\n\n**Explanation:**\n\n- **nrow(matrix_data):** Returns the number of rows in the matrix.\n- **sample(nrow(matrix_data), 2):** Randomly selects 2 row indices.\n- **matrix_data[ ... , ]:** Subsets the matrix by these rows and returns a matrix.\n\nThis technique is particularly useful when dealing with multivariate data stored as a matrix and you wish to preserve entire rows for subsequent analysis  .\n\n# Weighted Random Sampling\n\nSometimes, you need elements to have a higher chance of being selected. This is where the `prob` argument comes into play. For example, let’s say you have a vector representing four options and they should not all have the same chance of appearing in the sample:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a vector representing four different items\nitems <- c(\"Apple\", \"Banana\", \"Cherry\", \"Date\")\n\n# Define the weights so that \"Date\" has the highest probability of selection\nweights <- c(0.1, 0.2, 0.3, 0.4)\n\n# Sample 3 elements from items using the weights (without replacement)\nweighted_sample <- sample(items, 3, replace = FALSE, prob = weights)\n\n# Print the weighted sample\nprint(weighted_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"   \"Cherry\" \"Apple\" \n```\n\n\n:::\n:::\n\n\n\n**Explanation:**\n\n- The `prob` parameter assigns selection probabilities. In this example, “Date” (with the highest weight of 0.4) is more likely to be picked.\n- Using weighted sampling can be very useful, for example, when you simulate real-world scenarios where some events occur more frequently than others.\n\n# Using `set.seed()` for Reproducible Results\n\nIn random sampling, you might want to generate the same random output each time you run your code—especially when sharing code with colleagues or including examples in your reports. R’s `set.seed()` function lets you do exactly that.\n\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set the seed to ensure reproducibility\nset.seed(42)\n\n# Sample 5 numbers without replacement from 1 to 10\nreproducible_sample <- sample(1:10, 5)\nprint(reproducible_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  5 10  8  2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Re-run with the same seed to see the same sample\nset.seed(42)\nreproducible_sample <- sample(1:10, 5)\nprint(reproducible_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  5 10  8  2\n```\n\n\n:::\n:::\n\n\n\nUsing `set.seed()` guarantees that the random sequence is the same in every run, which is important for debugging and sharing reproducible research .\n\n# Your Turn\n\nNow that we have covered the basics and more advanced examples of using the `sample()` function, it’s time for you to practice! Here are some exercises to try on your own:\n\n<details>\n  <summary>Click to see solution.</summary>\n\n**Exercise 1:**  \nGenerate a random sample of 10 elements from the letters of the English alphabet without replacement.\n\n*Hint:* Use `letters` (a built-in vector in R) and the `sample()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answer:\nsample_letters <- sample(letters, 10, replace = FALSE)\nprint(sample_letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"d\" \"r\" \"q\" \"o\" \"g\" \"z\" \"e\" \"n\" \"y\" \"w\"\n```\n\n\n:::\n:::\n\n\n\n**Exercise 2:**  \nSample 5 elements with replacement from the vector `c(10, 20, 30, 40, 50)`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answer:\nsample_numbers <- sample(c(10, 20, 30, 40, 50), 5, replace = TRUE)\nprint(sample_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30 10 10 30 40\n```\n\n\n:::\n:::\n\n\n\n**Exercise 3:**  \nCreate a vector of weights and perform weighted random sampling to select 3 elements from the vector `c(\"apple\", \"banana\", \"orange\", \"grape\")`.  \n*Make sure that \"orange\" has the highest probability of being selected.*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Answer:\nfruit_items <- c(\"apple\", \"banana\", \"orange\", \"grape\")\nfruit_weights <- c(0.2, 0.2, 0.4, 0.2)\nweighted_fruit_sample <- sample(fruit_items, 3, replace = FALSE, prob = fruit_weights)\nprint(weighted_fruit_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"orange\" \"apple\"  \"banana\"\n```\n\n\n:::\n:::\n\n\n\nExperiment with these exercises by changing the parameters. This will help solidify your understanding of random sampling in R.\n</details>\n\n# Key Takeaways\n\n- **`sample()` Function:**  \n  The `sample()` function in R is robust for drawing random elements from vectors, data.frames, and even matrices.\n\n- **With vs. Without Replacement:**  \n  – Use `replace = FALSE` for unique sampling.  \n  – Use `replace = TRUE` when you allow repeated values in the sample.\n\n- **Working with Complex Data Structures:**  \n  You can sample rows from data.frames or from entire matrices by using functions such as `nrow()` to index your data.\n\n- **Weighted Sampling:**  \n  The `prob` argument allows you to specify weights for elements, making some more likely to be sampled than others.\n\n- **Reproducibility:**  \n  Use `set.seed()` to ensure that your random samples are the same across multiple runs, which is critical for reproducible research.\n\nThese points will help guide your use of random sampling.\n\n# Frequently Asked Questions (FAQs)\n\n**Q1: What does sampling with replacement mean?**  \nA: Sampling with replacement means that when you choose an element, it is “put back” into the pool of values. This allows the same element to be selected more than once. For example, using `sample(numbers, 5, replace = TRUE)` might select one number twice while missing another .\n\n**Q2: How is weighted random sampling useful?**  \nA: Weighted random sampling allows you to assign different probabilities to each element in your vector. This is useful in simulations where certain outcomes are more likely than others. By using the `prob` argument, you can simulate more realistic scenarios where not all elements have an equal chance of being selected.\n\n**Q3: Can I use the `sample()` function on data.frames?**  \nA: Yes, you can. By sampling the row indices using `sample(nrow(your_dataframe), size)`, you can randomly select rows from a data.frame. This method is especially useful for creating training and testing sets.\n\n**Q4: How do I ensure that my random sampling is reproducible?**  \nA: Use the `set.seed()` function at the start of your script. Setting a seed (e.g., `set.seed(42)`) ensures that the sequence of random numbers—and thus your samples—is the same each time you run your code.\n\n**Q5: What if I try to sample more elements than are available in my vector?**  \nA: If you attempt to sample without replacement more elements than exist in the vector, R will return an error. To prevent this, either ensure that the requested `size` does not exceed the length of the vector or set `replace = TRUE` if duplicates are acceptable.\n\n# Conclusion\n\nRandom sampling is an essential skill for any R programmer. Whether you’re working with simple vectors, data.frames, or matrices, the `sample()` function allows you to extract random subsets of your data with ease. In this article, we covered how to use `sample()` for both non-repetitive selection (without replacement) and for allowing repeated values (with replacement). We also touched on weighted sampling—useful when some elements should be more likely to appear—and demonstrated how to achieve reproducibility using `set.seed()`.\n\nMake sure to experiment with the different options provided by the `sample()` function as part of your workflow.\n\n*If you found this article helpful, please feel free to comment below, share it on your favorite social media channels, or subscribe for more R programming tutorials.*\n\n# What We Covered\n\n- ✅ Syntax and arguments of the `sample()` function  \n- ✅ Sampling from a vector (with and without replacement)  \n- ✅ Sampling rows from a data.frame  \n- ✅ Sampling elements and rows from a matrix  \n- ✅ Weighted random sampling using the `prob` argument  \n- ✅ Reproducibility using `set.seed()`  \n- ✅ Interactive “Your Turn” exercises  \n- ✅ FAQs to clarify common doubts  \n- ✅ Clear, step-by-step code examples with explanations  \n\n------------------------------------------------------------------------\n\nHappy Coding! 🚀\n\n![Sample Time...Again](todays_post.png)\n\n------------------------------------------------------------------------\n\n*You can connect with me at any one of the below*:\n\n*Telegram Channel here*: <https://t.me/steveondata>\n\n*LinkedIn Network here*: <https://www.linkedin.com/in/spsanderson/>\n\n*Mastadon Social here*: [https://mstdn.social/\\@stevensanderson](https://mstdn.social/@stevensanderson)\n\n*RStats Network here*: [https://rstats.me/\\@spsanderson](https://rstats.me/@spsanderson)\n\n*GitHub Network here*: <https://github.com/spsanderson>\n\n*Bluesky Network here*: <https://bsky.app/profile/spsanderson.com>\n\n*My Book: Extending Excel with Python and R* here: <https://packt.link/oTyZJ>\n\n*You.com Referral Link*: <https://you.com/join/EHSLDTL6>\n\n------------------------------------------------------------------------\n\n\n\n```{=html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"spsanderson/steveondata\"\n        data-repo-id=\"R_kgDOIIxnLw\"\n        data-category=\"Comments\"\n        data-category-id=\"DIC_kwDOIIxnL84ChTk8\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"dark\"\n        data-lang=\"en\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}