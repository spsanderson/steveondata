{
  "hash": "3a7ec2a350a25f20450eac4415f3f311",
  "result": {
    "markdown": "---\ntitle: \"Mastering Lowess Smoothing in R: A Step-by-Step Guide\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-01-02\"\ncategories: [rtip, timeseries]\n---\n\n\n# Introduction\n\nHey fellow R enthusiasts! Today, let's dive into the fascinating world of Lowess smoothing and learn how to harness its power for creating smooth visualizations of your data. Whether you're new to R or a seasoned pro, this step-by-step guide will walk you through the process of performing Lowess smoothing, generating data, visualizing the model, and comparing different models with varying smoother spans.\n\n# What is Lowess Smoothing?\n\nLocally Weighted Scatterplot Smoothing, or Lowess, is a powerful technique for capturing trends in noisy data. It's particularly useful when dealing with datasets that exhibit complex patterns that might be missed by other methods. So, let's get our hands dirty and start coding!\n\n# Example\n\n## Step 1: Generate Data\n\nBefore we can smooth anything, we need some data to work with. Let's create a synthetic dataset using the `rnorm` function and introduce a non-linear trend:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed for reproducibility\nset.seed(42)\n\n# Generate data\nx <- seq(1, 100, by = 1)\ny <- sin(x/10) + rnorm(100, sd = 0.5)\n\n# Plot the raw data\nplot(x, y, main = \"Raw Data with Non-linear Trend\", col = \"blue\", pch = 16)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n## Step 2: Perform Lowess Smoothing\n\nNow that we have our data, let's apply Lowess smoothing using the `lowess` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply Lowess smoothing\nsmoothed_data <- lowess(x, y)\n\n# Plot the smoothed data\nplot(x, y, main = \"Lowess Smoothed\", col = \"blue\", pch = 16)\nlines(smoothed_data, col = \"red\", lwd = 2)\nlegend(\"topleft\", legend = c(\"Raw Data\", \"Lowess Smoothed\"), col = c(\"blue\", \"red\"), lwd = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Step 3: Visualize the Model and Residuals\n\nTo better understand our smoothed model, let's visualize the fitted values along with the residuals:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get fitted values and residuals\nfitted_values <- smoothed_data$y\nresiduals <- y - fitted_values\n\n# Plot the model\nplot(x, fitted_values, main = \"Lowess Smoothed Model with Residuals\", col = \"red\", type = \"l\", lwd = 2)\npoints(x, residuals, col = \"green\", pch = 16)\nlegend(\"topleft\", legend = c(\"Smoothed Model\", \"Residuals\"), col = c(\"red\", \"green\"), lwd = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Step 4: Compare Different Models\n\nNow, let's take our Lowess smoothing to the next level by experimenting with different smoother spans. We'll create three models with varying spans and visualize the differences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate three smoothed models with different spans\nmodel_1 <- lowess(x, y, f = 0.2)\nmodel_2 <- lowess(x, y, f = 0.5)\nmodel_3 <- lowess(x, y, f = 0.8)\n\n# Plot the original data\nplot(x, y, main = \"Comparison of Lowess Models\", col = \"blue\", pch = 16)\n\n# Plot the smoothed models\nlines(model_1, col = \"red\", lty = 2, lwd = 2)\nlines(model_2, col = \"green\", lty = 3, lwd = 2)\nlines(model_3, col = \"purple\", lty = 4, lwd = 2)\n\n# Add a legend\nlegend(\"bottomleft\", legend = c(\"Raw Data\", \"Model 1\", \"Model 2\", \"Model 3\"), col = c(\"blue\", \"red\", \"green\", \"purple\"), lwd = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Conclusion\n\nAnd there you have it â€“ a quick on performing Lowess smoothing in R! Feel free to tweak the parameters and explore the nuances of different models. Happy coding!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}