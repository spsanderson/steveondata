{
  "hash": "0601dd8bb29b2adb90f763ba81a4582b",
  "result": {
    "markdown": "---\ntitle: \"Level Up Your Data Wrangling: Adding Index Columns in R like a Pro!\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-02-16\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nData wrangling in R is like cooking: you have your ingredients (data), and you use tools (functions) to prepare them (clean, transform) for analysis (consumption!). One essential tool is adding an \"index column\" – a unique identifier for each row. This might seem simple, but there are several ways to do it in base R and tidyverse packages like `dplyr` and `tibble`. Let's explore and spice up your data wrangling skills!\n\n# Examples\n\n## Adding Heat with Base R\n\n### Ex 1: **The Sequencer:** \n\nImagine lining up your rows. `cbind(df, 1:nrow(df))` adds a new column with numbers 1 to n, where n is the number of rows in your data frame (`df`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\ndf <- data.frame(name = c(\"Alice\", \"Bob\", \"Charlie\"), age = c(25, 30, 28))\n\n# Add index using cbind\ndf_with_index <- cbind(index = 1:nrow(df), df)\ndf_with_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  index    name age\n1     1   Alice  25\n2     2     Bob  30\n3     3 Charlie  28\n```\n:::\n:::\n\n\n### Ex 2: **Row Name Shuffle:** \n\nPrefer names over numbers? `rownames(df) <- 1:nrow(df)` assigns row numbers as your index, replacing existing row names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\ndf <- data.frame(name = c(\"Alice\", \"Bob\", \"Charlie\"), age = c(25, 30, 28))\n\ndf_with_index <- cbind(index = rownames(df), df)\ndf_with_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  index    name age\n1     1   Alice  25\n2     2     Bob  30\n3     3 Charlie  28\n```\n:::\n:::\n\n\n### Ex 3: **The All-Seeing Eye:** \n\n`seq_len(nrow(df))` generates a sequence of numbers, perfect for adding as a new column named \"index\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\ndf <- data.frame(name = c(\"Alice\", \"Bob\", \"Charlie\"), age = c(25, 30, 28))\n\ndf_with_index <- cbind(index = seq_len(nrow(df)), df)\ndf_with_index\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  index    name age\n1     1   Alice  25\n2     2     Bob  30\n3     3 Charlie  28\n```\n:::\n:::\n\n\n##  The Tidyverse Twist:\n\nThe `tidyverse` offers unique approaches:\n\n### Ex 1: **Tibble Magic:** \n\n`tibble::rowid_to_column(df)` adds a column named \"row_id\" with unique row identifiers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\n# Convert df to tibble\ndf_tib <- as_tibble(df)\n\n# Add row_id\ndf_tib_indexed <- rowid_to_column(df_tib)\ndf_tib_indexed\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  rowid name      age\n  <int> <chr>   <dbl>\n1     1 Alice      25\n2     2 Bob        30\n3     3 Charlie    28\n```\n:::\n:::\n\n\n### Ex 2: **dplyr's Ranking System:** \n\n`dplyr::row_number()` assigns ranks (starting from 1) based on the order of your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n# Add row number\ndf_tib_ranked <- df_tib |>\n  mutate(rowid = row_number()) |>\n  select(rowid, everything())\n\ndf_tib_ranked\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  rowid name      age\n  <int> <chr>   <dbl>\n1     1 Alice      25\n2     2 Bob        30\n3     3 Charlie    28\n```\n:::\n:::\n\n\n# Choose Your Champion:\n\nExperiment and see what suits your workflow! Base R offers flexibility, while `tidyverse` provides concise and consistent syntax.\n\n# Now You Try!\n\n1. Create your own data frame with different data types.\n2. Apply the methods above to add index columns.\n3. Explore customizing column names and data types.\n4. Share your creations and challenges in the R community!\n\nRemember, data wrangling is a journey, not a destination. Keep practicing, and you'll be adding those index columns like a seasoned R pro in no time!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}