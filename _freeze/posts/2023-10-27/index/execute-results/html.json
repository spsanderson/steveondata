{
  "hash": "175ece1ba8fdafee7e42cda7dd79aaf1",
  "result": {
    "markdown": "---\ntitle: \"Plotting Log Log Plots In Base R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-10-27\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nA log-log plot is a type of graph where both the x-axis and y-axis are in logarithmic scales. This is particularly useful when dealing with data that spans several orders of magnitude. By taking the logarithm of the data, we can compress large values and reveal patterns that might be hidden on a linear scale.\n\nLet's start with a simple example using base R.\n\n# Examples\n\n## Example 1: Scatter Plot with Log-Log Scales\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\nx <- c(1, 10, 100, 1000)\ny <- c(0.1, 1, 10, 100)\n\n# Create a log-log plot\nplot(x, y, log = \"xy\", main = \"Log-Log Plot Example\", \n     xlab = \"X (log scale)\", ylab = \"Y (log scale)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn this code, we create a scatter plot with log scales for both the x and y-axes using the `plot` function. The `log = \"xy\"` argument specifies that both axes should be in logarithmic scale. This makes it easier to visualize the relationship between x and y.\n\n## Example 2: Line Plot with Log-Log Scales\n\nLet's say you have data for a power law relationship, where y is proportional to x raised to a power. A log-log plot can help you confirm this relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate data for a power law relationship\nx <- 1:10\ny <- 2 * x^2\n\n# Create a log-log plot\nplot(x, y, log = \"xy\", type = \"b\", pch = 19, col = \"blue\", \n     main = \"Log-Log Plot for Power Law\", xlab = \"X (log scale)\", ylab = \"Y (log scale)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nHere, we generate data for a power law relationship (y = 2 * x^2) and create a log-log plot. The `type = \"b\"` argument adds both points and lines, making the plot easier to interpret. You can see that on a log-log scale, this power law relationship appears as a straight line.\n\n## Example 3: Customizing Log-Log Plots\n\nYou can further customize your log-log plots with various options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Customizing a log-log plot\nx <- c(1, 10, 100, 1000)\ny <- c(0.1, 1, 10, 100)\n\nplot(x, y, log = \"xy\", main = \"Custom Log-Log Plot\",\n     xlab = \"X (log scale)\", ylab = \"Y (log scale)\",\n     xlim = c(0.1, 1000), ylim = c(0.1, 100), col = \"red\", pch = 15)\n\n# Adding grid lines\ngrid()\n\n# Adding a trendline (linear regression)\nabline(lm(log10(y) ~ log10(x)), col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn this example, we customize the log-log plot by setting axis limits, changing the point color and type, adding grid lines, and even fitting a trendline using linear regression.\n\n# Exploration\n\nLog-log plots are powerful tools for visualizing data, especially when dealing with a wide range of values. I encourage you to try creating log-log plots with your own datasets. It's an excellent way to gain insights into your data and discover underlying patterns that may not be apparent on a linear scale.\n\nRemember, the key is to use the `log` argument with \"xy\" to set both axes to logarithmic scales. Experiment with different types of data and customize your plots to make them more informative and engaging. Happy plotting!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}