{
  "hash": "81a076be9599ba2f2cc97a156ff83940",
  "result": {
    "markdown": "---\ntitle: \"Unveiling Car Specs with Multidimensional Scaling in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-04-04\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nVisualizing similarities between data points can be tricky, especially when dealing with many features. This is where multidimensional scaling (MDS) comes in handy. It allows us to explore these relationships in a lower-dimensional space, typically 2D or 3D for easier interpretation. In R, the `cmdscale()` function from base R and is a great tool for performing classical MDS.\n\n# cmdscale()\n\nHere's a breakdown of its arguments:\n\n* `distance_matrix`: This is the key argument. It represents a matrix containing the pairwise distances between your data points. You can calculate this using the `dist()` function.\n* `eig`: A logical value indicating whether you want the function to return the eigenvalues (default is `FALSE`). Eigenvalues help assess the quality of the dimensionality reduction.\n* `k`: This specifies the number of dimensions for the resulting low-dimensional space (default is 2). You can choose higher values for more complex data, but visualization becomes trickier.\n* `...`: Additional arguments can be used for fine-tuning the MDS process, but these are less common for basic applications.\n\n# Car Specs with MDS: A Step-by-Step Example\n\nLet's use the built-in `mtcars` dataset in R to demonstrate the power of MDS. This dataset contains information about various car models, including aspects like horsepower, mileage, and weight. While these features provide valuable insights, visualizing all of them simultaneously can be challenging. MDS will help us explore the relationships between these car specifications in a 2D space.\n\nHere's the code with explanations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select relevant numerical features (exclude car names)\ncar_features <- mtcars[, c(3:11)]\n\n# Calculate pairwise distances between car features\ndistance_matrix <- dist(car_features)\nhead(distance_matrix, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0.6153251 54.8426385 98.1117059\n```\n:::\n\n```{.r .cell-code}\n# Perform MDS to get a 2D representation\nmds_results <- cmdscale(distance_matrix, k = 2)\nhead(mds_results, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    [,1]      [,2]\nMazda RX4      -79.62307  2.157120\nMazda RX4 Wag  -79.62522  2.172370\nDatsun 710    -133.87165 -5.033323\n```\n:::\n\n```{.r .cell-code}\n# Create a base R plot\nplot(mds_results[, 1], mds_results[, 2], \n     xlab = \"Dimension 1\", ylab = \"Dimension 2\",\n     main = \"MDS of Car Specs (mtcars)\")\n\n# Add text labels for car names (optional)\ntext(mds_results, labels = rownames(mtcars), col = \"blue\", cex = 0.62,\n     pos = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n1. We load the `mtcars` dataset using `data(mtcars)`.\n2. We select relevant numerical features from the dataset (excluding car names) and store them in `car_features`.\n3. The `dist()` function calculates the pairwise distances between data points based on the chosen features and stores them in the `distance_matrix`.\n4. We run `cmdscale()` on the distance matrix, specifying two dimensions (`k = 2`) for the output. The results are stored in `mds_results`.\n5. Finally, we use the base R `plot()` function to create a scatter plot. We set axis labels and a main title for the plot.\n\n_Optional Step:_\n\n* We can add text labels for each car model (using car names from `mtcars$mpg`) on the plot using the `text()` function. We set the `pos` argument to 1 to position the text labels above the data points and we set the `cex` argument to `0.62` so the size of the text decreases.\n\nThis plot can reveal interesting patterns. Cars closer together might share similar characteristics in terms of horsepower, weight, and other specifications. You might also observe some separation based on fuel efficiency reflected by the optional text labels.\n\n# Experiment and Discover!\n\nMDS is a powerful tool for exploring data similarity in R. Now that you've seen the basics of `cmdscale()` and base R plotting functions, why not try it on your dataset? Remember to calculate the distance matrix appropriately based on the features you're interested in. Play around with the number of dimensions (`k`) to see how it affects the visualization. By experimenting with MDS, you might uncover hidden relationships within your car data or any other dataset you choose to explore!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}