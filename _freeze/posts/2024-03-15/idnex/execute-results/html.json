{
  "hash": "7cad3a910f95134566908edcdc3d342a",
  "result": {
    "markdown": "---\ntitle: \"Plotting Training and Testing Predictions with tidyAML\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-03-15\"\ncategories: [tidyaml, r, data-analysis, data-science]\n---\n\n\n# Introduction\n\nIn the realm of machine learning, visualizing model predictions is essential for understanding the performance and behavior of our algorithms. When it comes to regression tasks, plotting predictions alongside actual values provides valuable insights into how well our model is capturing the underlying patterns in the data. With the `plot_regression_predictions()` function in tidyAML, this process becomes seamless and informative.\n\n# Introducing `plot_regression_predictions()`\n\nThe `plot_regression_predictions()` function is a powerful tool for visualizing regression predictions in R. Developed as part of the tidyAML package, it leverages the capabilities of ggplot2 to create insightful plots that compare actual values with model predictions, both for training and testing datasets.\n\n# Syntax and Arguments\n\nLet's break down the syntax and arguments of `plot_regression_predictions()`:\n\n```r\nplot_regression_predictions(.data, .output = \"list\")\n```\n\n- `.data`: This argument takes the data from the output of the `extract_regression_residuals()` function.\n- `.output`: By default, this argument is set to \"list\", which returns a list of plots. Alternatively, you can choose \"facet\", which returns a single faceted plot.\n\n# Example Usage\n\nTo illustrate how `plot_regression_predictions()` works in practice, let's consider an example using the `mtcars` dataset and a simple linear regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyAML)\nlibrary(recipes)\n\n# Define the recipe\nrec_obj <- recipe(mpg ~ ., data = mtcars)\n\n# Train the model\nfrt_tbl <- fast_regression(\n  mtcars,\n  rec_obj\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Setting default kernel parameters  \n Setting default kernel parameters  \n```\n:::\n:::\n\n\nIn this example, we've created a recipe for predicting `mpg` based on other variables in the `mtcars` dataset. We then trained a fast regression model using `fast_regression()` from the recipes package.\n\nNow, let's use `extract_wflw_pred()` to extract the predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract predictions\npreds <- extract_wflw_pred(frt_tbl, 1:nrow(frt_tbl))\nhead(preds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 4\n  .model_type     .data_category .data_type .value\n  <chr>           <chr>          <chr>       <dbl>\n1 lm - linear_reg actual         actual       15.2\n2 lm - linear_reg actual         actual       30.4\n3 lm - linear_reg actual         actual       21.4\n4 lm - linear_reg actual         actual       33.9\n5 lm - linear_reg actual         actual       19.7\n6 lm - linear_reg actual         actual       10.4\n```\n:::\n\n```{.r .cell-code}\nunique(preds$.model_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"lm - linear_reg\"            \"brulee - linear_reg\"       \n [3] \"glm - linear_reg\"           \"stan - linear_reg\"         \n [5] \"dbarts - bart\"              \"xgboost - boost_tree\"      \n [7] \"rpart - decision_tree\"      \"earth - mars\"              \n [9] \"nnet - mlp\"                 \"brulee - mlp\"              \n[11] \"kknn - nearest_neighbor\"    \"ranger - rand_forest\"      \n[13] \"randomForest - rand_forest\" \"LiblineaR - svm_linear\"    \n[15] \"kernlab - svm_linear\"       \"kernlab - svm_poly\"        \n[17] \"kernlab - svm_rbf\"         \n```\n:::\n:::\n\n\nWith the predictions extracted, we can now plot the regression predictions using `plot_regression_predictions()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot regression predictions\nextract_wflw_pred(frt_tbl, 1:6) |>\n  plot_regression_predictions(.output = \"facet\")\n```\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nextract_wflw_pred(frt_tbl, 1:6) |>\n  plot_regression_predictions(.output = \"list\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n```\n:::\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[2]]\n```\n:::\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[3]]\n```\n:::\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[4]]\n```\n:::\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[5]]\n```\n:::\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-6.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n[[6]]\n```\n:::\n\n::: {.cell-output-display}\n![](idnex_files/figure-html/unnamed-chunk-3-7.png){width=672}\n:::\n:::\n\n\nThis will generate a set of plots comparing actual values with model predictions for both the training and testing datasets.\n\n# Interpreting the Plots\n\nThe plots produced by `plot_regression_predictions()` offer valuable insights into the performance of our regression model. Here's what you can expect to see:\n\n- **Actual vs. Predicted Values**: The main plot compares the actual values (y-axis) with the predicted values also (y-axis). This allows you to see how \nthe model performs across the range of observed values both in training and\nin testing.\n  \n- **Training vs. Testing**: If you choose the \"facet\" output option, you'll see separate plots for training and testing data sets by model type.\n\n# Conclusion\n\nIn summary, `plot_regression_predictions()` is a valuable tool for visualizing regression predictions in R. Whether you're assessing model performance, diagnosing errors, or communicating results to stakeholders, these plots provide a clear and intuitive way to understand how well your model is capturing the underlying patterns in the data. So next time you're working on a regression task with tidyAML, don't forget to leverage the power of visualization with `plot_regression_predictions()`!",
    "supporting": [
      "idnex_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}