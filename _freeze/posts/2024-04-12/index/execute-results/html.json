{
  "hash": "48005d11246fc722ffc52dbed2bef0e5",
  "result": {
    "markdown": "---\ntitle: \"Taking the data out of the glue with regex in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-04-12\"\ncategories: [code, rtip, operations, glue, unglue]\n---\n\n\n# Introduction\n\nRegular expressions, or regex, are incredibly powerful tools for pattern matching and extracting specific information from text data. Today, we'll explore how to harness the might of regex in R with a practical example.\n\nLet's dive into a scenario where we have data that needs cleaning and extracting numerical values from strings. Our data, stored in a dataframe named `df`, consists of four columns (`x1`, `x2`, `x3`, `x4`) with strings containing numerical values along with percentage values enclosed in parentheses. Our goal is to extract these numerical values and compute a total for each row.\n\n# Loading Libraries\n\nBefore we begin, we need to load the necessary libraries. We'll be using the `tidyverse` package for data manipulation, along with `glue` and `unglue` for string manipulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Library Loading\npacman::p_load(tidyverse, glue, unglue)\n```\n:::\n\n\n# Exploring the Data\n\nLet's take a sneak peek at our data using the `head()` function to understand its structure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  x1 = rep(\"Unit A\", 11),\n  x2 = c(glue(\"{11:20} ({1:10}%)\"),  glue(\"{251} ({13}%)\")),\n  x3 = c(glue(\"{21:30} ({11:20}%)\"), glue(\"{252} ({14}%)\")),\n  x4 = c(glue(\"{31:40} ({21:30}%)\"), glue(\"{253} ({15}%)\"))\n)\n\nhead(df, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  x1     x2      x3       x4      \n  <chr>  <chr>   <chr>    <chr>   \n1 Unit A 11 (1%) 21 (11%) 31 (21%)\n2 Unit A 12 (2%) 22 (12%) 32 (22%)\n3 Unit A 13 (3%) 23 (13%) 33 (23%)\n```\n:::\n:::\n\n\nThis command displays the first three rows of our dataframe `df`, giving us an idea of how our data looks like.\n\n# Creating a Regex Function\n\nNow, we'll define a custom function named `reg_val_fns` to extract numerical values from strings using regular expressions. This function takes two parameters: `.col_data` (column data) and `.pattern` (regex pattern). If no pattern is provided, it defaults to extracting any sequence of digits followed by non-word characters or the end of the string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make regex function\nreg_val_fns <- function(.col_data, .pattern = NULL){\n  ptrn <- .pattern\n  if(is.null(ptrn)){\n    ptrn <- \"\\\\d+(?=\\\\W|$)\"\n  }\n  \n  reged_val <- .col_data |>\n    str_extract(ptrn) |>\n    as.numeric()\n\n  return(reged_val)\n}\n```\n:::\n\n\n# Applying the Regex Function\n\nWith our regex function defined, we apply it across desired columns using the `mutate(across())` function from the `dplyr` package. This extracts numerical values from strings in each column, converting them into numeric format. Additionally, we compute the total value for each row using `rowSums()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply the function across the desired columns\ndf |>\n  mutate(across(-x1, reg_val_fns)) |>\n  mutate(total_val = rowSums(across(-x1)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 5\n   x1        x2    x3    x4 total_val\n   <chr>  <dbl> <dbl> <dbl>     <dbl>\n 1 Unit A    11    21    31        63\n 2 Unit A    12    22    32        66\n 3 Unit A    13    23    33        69\n 4 Unit A    14    24    34        72\n 5 Unit A    15    25    35        75\n 6 Unit A    16    26    36        78\n 7 Unit A    17    27    37        81\n 8 Unit A    18    28    38        84\n 9 Unit A    19    29    39        87\n10 Unit A    20    30    40        90\n11 Unit A   251   252   253       756\n```\n:::\n:::\n\n\n# Alternative Approach: Using unglue\n\nAn alternative method to extract values from strings is using the `unglue` package. Here, we apply the `unglue_data()` function across columns (excluding `x1`) to extract values and percentages separately, then unnest the resulting dataframe and compute the total value for each row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use unglue\ndf |>\n  mutate(across(-x1, \\(x) unglue_data(x, \"{val} ({pct}%)\"))) |> \n  unnest(cols = everything(), names_sep = \"_\") |>\n  mutate(across(.cols = contains(\"val\"), \\(x) as.numeric(x))) |>\n  mutate(total_val = rowSums(across(where(is.numeric))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 8\n   x1     x2_val x2_pct x3_val x3_pct x4_val x4_pct total_val\n   <chr>   <dbl> <chr>   <dbl> <chr>   <dbl> <chr>      <dbl>\n 1 Unit A     11 1          21 11         31 21            63\n 2 Unit A     12 2          22 12         32 22            66\n 3 Unit A     13 3          23 13         33 23            69\n 4 Unit A     14 4          24 14         34 24            72\n 5 Unit A     15 5          25 15         35 25            75\n 6 Unit A     16 6          26 16         36 26            78\n 7 Unit A     17 7          27 17         37 27            81\n 8 Unit A     18 8          28 18         38 28            84\n 9 Unit A     19 9          29 19         39 29            87\n10 Unit A     20 10         30 20         40 30            90\n11 Unit A    251 13        252 14        253 15           756\n```\n:::\n:::\n\n\n# Conclusion\n\nIn this tutorial, we've explored how to leverage the power of regular expressions in R to extract numerical values from strings within a dataframe. By defining custom regex functions and using packages like `dplyr` and `unglue`, we can efficiently clean and manipulate text data for further analysis.\n\nI encourage you to try out these techniques on your own datasets and explore the endless possibilities of regex in R. Happy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}