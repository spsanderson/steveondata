{
  "hash": "a3c7e9df507b1147f0dcd3663722423b",
  "result": {
    "markdown": "---\ntitle: \"Wrangling Data with R: A Guide to the tapply() Function\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-03-25\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nHey R enthusiasts! Today we're diving into the world of data manipulation with a fantastic function called `tapply()`. This little gem lets you apply a function of your choice to different subgroups within your data. \n\nImagine you have a dataset on trees, with a column for tree height and another for species. You might want to know the average height for each species. `tapply()` comes to the rescue!\n\n# Understanding the Syntax\n\nLet's break down the syntax of `tapply()`:\n\n```R\ntapply(X, INDEX, FUN, simplify = TRUE)\n```\n\n* **X**: This is the vector or variable you want to perform the function on. \n* **INDEX**: This is the factor variable that defines the groups. Each level in the factor acts as a subgroup for applying the function.\n* **FUN**: This is the function you want to apply to each subgroup. It can be built-in functions like `mean()` or `sd()`, or even custom functions you write!\n* **simplify (optional)**: By default, `simplify = TRUE` (recommended for most cases). This returns a nice, condensed output that's easy to work with. Setting it to `FALSE` gives you a more complex structure.\n\n# Examples in Action\n\n## Example 1: Average Tree Height by Species\n\nLet's say we have a data frame `trees` with columns \"height\" (numeric) and \"species\" (factor):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\ntrees <- data.frame(height = c(20, 30, 25, 40, 15, 28),\n                    species = c(\"Oak\", \"Oak\", \"Maple\", \"Pine\", \"Maple\", \"Pine\"))\n\n# Average height per species\naverage_height <- tapply(trees$height, trees$species, mean)\nprint(average_height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMaple   Oak  Pine \n   20    25    34 \n```\n:::\n:::\n\n\nThis code calculates the average height for each species in the \"species\" column and stores the results in `average_height`. The output will be a named vector showing the average height for each unique species.\n\n## Example 2: Exploring Distribution with Summary Statistics\n\nWe can use `tapply()` with `summary()` to get a quick overview of how a variable is distributed within groups. Here, we'll see the distribution of height within each species:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_by_species <- tapply(trees$height, trees$species, summary)\nprint(summary_by_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Maple\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   15.0    17.5    20.0    20.0    22.5    25.0 \n\n$Oak\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   20.0    22.5    25.0    25.0    27.5    30.0 \n\n$Pine\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n     28      31      34      34      37      40 \n```\n:::\n:::\n\n\nThis code applies the `summary()` function to each subgroup defined by the \"species\" factor. The output will be a data frame showing various summary statistics (like minimum, maximum, quartiles) for the height of each species.\n\n## Example 3: Custom Function for Identifying Tall Trees\n\nLet's create a custom function to find trees that are taller than the average height of their species:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntall_trees <- function(height, avg_height) {\n    height > avg_height\n}\n\n# Find tall trees within each species\ntall_trees_by_species <- tapply(trees$height, trees$species, mean(trees$height),FUN=tall_trees)\nprint(tall_trees_by_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$Maple\n[1] FALSE FALSE\n\n$Oak\n[1] FALSE  TRUE\n\n$Pine\n[1] TRUE TRUE\n```\n:::\n:::\n\n\nHere, we define a function `tall_trees()` that takes a tree's height and the average height (passed as arguments) and returns TRUE if the tree's height is greater.  We then use `tapply()` with this custom function. The crucial difference here is that we use `mean(trees$height)` within the `FUN` argument to calculate the average height for each group **outside** of the custom function. This ensures the average height is calculated correctly for each subgroup before being compared to individual tree heights. The output will be a logical vector for each species, indicating which trees are taller than the average.\n\n# Give it a Try!\n\nThis is just a taste of what `tapply()` can do.  There are endless possibilities for grouping data and applying functions. Try it out on your own datasets! Here are some ideas:\n\n* Calculate the median income for different age groups.\n* Find the most frequent word used in emails sent by different departments.\n* Group customers by purchase history and analyze their average spending.\n\nRemember, R is all about exploration. So dive in, play with `tapply()`, and see what insights you can uncover from your data!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}