{
  "hash": "f54517451e5026c9399a267860e618c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Estimating Chisquare Parameters with TidyDensity\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-02\"\ncategories: [code, rtip, tidydensity]\n---\n\n\n# Introduction\n\nHello R users! Today, let's explore the latest addition to the TidyDensity package: `util_chisquare_param_estimate()`. This function is designed to estimate parameters for a Chi-square distribution from your data, providing valuable insights into the underlying distribution characteristics.\n\n# Understanding the Purpose\n\nThe `util_chisquare_param_estimate()` function is a powerful tool for analyzing data that conforms to a Chi-square distribution. It utilizes maximum likelihood estimation (MLE) to infer the degrees of freedom (dof) and non-centrality parameter (ncp) of the Chi-square distribution based on your input vector.\n\n# Getting Started\n\nTo begin, let's generate a dataset that conforms to a Chi-square distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n\n# Generate Chi-square distributed data\nset.seed(123)\ndata <- rchisq(250, 10, 2)\n\n# Call util_chisquare_param_estimate()\nresult <- util_chisquare_param_estimate(data)\n```\n:::\n\n\nBy default, the function will automatically generate empirical distribution data if `.auto_gen_empirical` is set to `TRUE`. This means you'll not only get the Chi-square parameters but also a combined table of empirical and Chi-square distribution data.\n\n# Exploring the Output\n\nLet's unpack what the function returns:\n\n-   `dist_type`: Identifies the type of distribution, which will be \"Chisquare\" for this analysis.\n-   `samp_size`: Indicates the sample size, i.e., the number of data points in your vector `.x`.\n-   `min`, `max`, `mean`: Basic statistics summarizing your data.\n-   `dof`: The estimated degrees of freedom for the Chi-square distribution.\n-   `ncp`: The estimated non-centrality parameter for the Chi-square distribution.\n\nThis comprehensive output allows you to gain deeper insights into your data's distribution characteristics, particularly when the Chi-square distribution is a potential model.\n\nLet's now take a look at the output itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nresult$combined_data_tbl |>\n  head(5) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5\nColumns: 8\n$ sim_number <fct> 1, 1, 1, 1, 1\n$ x          <int> 1, 2, 3, 4, 5\n$ y          <dbl> 12.716908, 17.334453, 11.913559, 15.252845, 7.208524\n$ dx         <dbl> -2.100590, -1.952295, -1.803999, -1.655704, -1.507408\n$ dy         <dbl> 2.741444e-05, 3.676673e-05, 4.930757e-05, 6.515313e-05, 8.6…\n$ p          <dbl> 0.640, 0.848, 0.576, 0.744, 0.204\n$ q          <dbl> 2.765968, 3.205658, 3.297085, 3.567437, 3.869764\n$ dist_type  <fct> \"Empirical\", \"Empirical\", \"Empirical\", \"Empirical\", \"Empiri…\n```\n\n\n:::\n\n```{.r .cell-code}\nresult$combined_data_tbl |>\n  tidy_distribution_summary_tbl(dist_type) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2\nColumns: 13\n$ dist_type  <fct> \"Empirical\", \"Chisquare c(9.961, 1.979)\"\n$ mean_val   <dbl> 11.95263, 12.04686\n$ median_val <dbl> 10.79615, 11.48777\n$ std_val    <dbl> 5.438087, 5.349567\n$ min_val    <dbl> 2.765968, 1.922223\n$ max_val    <dbl> 29.95844, 30.43480\n$ skewness   <dbl> 0.9344797, 0.6903444\n$ kurtosis   <dbl> 3.790972, 3.243122\n$ range      <dbl> 27.19248, 28.51258\n$ iqr        <dbl> 7.469292, 7.282262\n$ variance   <dbl> 29.57279, 28.61787\n$ ci_low     <dbl> 4.010739, 3.997601\n$ ci_high    <dbl> 26.33689, 23.60014\n```\n\n\n:::\n:::\n\n\n# Behind the Scenes: MLE Optimization\n\nUnder the hood, the function leverages MLE through the `optim()` function to estimate the Chi-square parameters. It minimizes the negative log-likelihood function to obtain the best-fitting degrees of freedom (`dof`) and non-centrality parameter (`ncp`) for your data.\n\nInitial values for the optimization are intelligently set based on your data's sample variance and mean, ensuring a robust estimation process.\n\n# Visualizing the Results\n\nOne of the strengths of TidyDensity is its seamless integration with visualization tools like `ggplot2`. With the combined output from `util_chisquare_param_estimate()`, you can easily create insightful plots that compare the empirical distribution with the estimated Chi-square distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult$combined_data_tbl |>\n  tidy_combined_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis example demonstrates how you can visualize the empirical data overlaid with the fitted Chi-square distribution, providing a clear representation of your dataset's fit to the model.\n\n# Conclusion\n\nIn summary, `util_chisquare_param_estimate()` from TidyDensity is a versatile tool for estimating Chi-square distribution parameters from your data. Whether you're exploring the underlying distribution of your dataset or conducting statistical inference, this function equips you with the necessary tools to gain valuable insights.\n\nIf you haven't already, give it a try and let us know how you're using TidyDensity to enhance your data analysis workflows! Stay tuned for more updates and insights from the world of R programming. Happy coding!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}