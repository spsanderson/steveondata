{
  "hash": "7fc8f1614916a884689a024e643c0759",
  "result": {
    "markdown": "---\ntitle: \"How to Simulate & Plot a Bivariate Normal Distribution in R: A Hands-on Guide\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-11-08\"\ncategories: [rtip, distribution]\n---\n\n\n# Introduction\n\nWelcome to the fascinating world of bivariate normal distributions! In this blog post, we'll embark on a journey to understand, simulate, and visualize these distributions using the powerful R programming language. Whether you're a seasoned R expert or a curious beginner, this guide will equip you with the necessary tools to explore this intriguing aspect of probability theory.\n\n# Understanding Bivariate Normal Distributions\n\nImagine two variables, like height and weight, that exhibit a joint distribution. The bivariate normal distribution captures the relationship between these variables, describing how their values tend to cluster around certain means and how they vary together. It's like a two-dimensional bell curve, where the peak represents the most likely combination of values for both variables.\n\n# Simulating a Bivariate Normal Distribution\n\nNow, let's bring this distribution to life using R. The `MASS` package provides the `mvrnorm()` function, which generates random samples from a multivariate normal distribution. We'll use this function to simulate a bivariate normal distribution with mean vector `[10, 20]` and covariance matrix `[[5, 3], [3, 6]]`. These parameters determine the center and shape of the distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\n\n# Simulate 100 observations from a bivariate normal distribution\nset.seed(123) # Set a seed for reproducibility\nbvnData <- mvrnorm(\n  n = 100, \n  mu = c(10, 20), \n  Sigma = matrix(c(5, 3, 3, 6), \n                 ncol = 2)\n  )\n```\n:::\n\n\n# Visualizing the Bivariate Normal Distribution\n\nTo truly appreciate the beauty of the bivariate normal distribution, let's visualize it using the `plot()` and `density()` functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mnormt)\n\nx <- bvnData[,1] |> sort()\ny <- bvnData[,2] |> sort()\nmu <- c(10, 20)\nsigma <- matrix(c(5, 3, 3, 6), \n                 ncol = 2)\nf <- function(x, y) dmnorm(cbind(x, y), mu, sigma)\nz <- outer(x,y,f)\ncontour(x,y,z)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Create a density plot of the simulated data\nplot(density(bvnData))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\nThis plot should reveal an elliptical shape, with the highest density concentrated around the mean values. The contours represent the regions of equal probability.\n\n# Try It On Your Own!\n\nNow, it's your turn to experiment! Change the mean vector, covariance matrix, and sample size to see how they affect the shape and spread of the distribution. Play with different visualization options to explore different perspectives of the data.\n\nRemember, R is a vast and ever-evolving language, so there's always more to learn. Keep exploring, asking questions, and seeking out new challenges to become a master R programmer.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}