{
  "hash": "e5ca558c0fbd4dc785727bd676721211",
  "result": {
    "markdown": "---\ntitle: \"Data Frame Merging in R (With Examples)\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-04-08\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nMerging multiple data frames is a pivotal skill in data manipulation. Whether you're handling small-scale datasets or large-scale ones, mastering the art of merging can significantly enhance your efficiency. In this tutorial, we'll delve into various methods of merging data frames in R, using straightforward examples to demystify the process.\n\n# Understanding the Data\n\nBefore we dive into merging data frames, let's familiarize ourselves with the data at hand. We have a list named `random_list`, which comprises three samples (`sample1`, `sample2`, and `sample3`). Each sample consists of 50 random numbers generated from a normal distribution using the `rnorm()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_list <- list(\n  sample1 = rnorm(50), \n  sample2 = rnorm(50), \n  sample3 = rnorm(50)\n  )\n```\n:::\n\n\n## Method 1: Using `cbind()` and `rbind()`\n\nOne approach to merge data frames is by combining them column-wise using `cbind()` or row-wise using `rbind()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating data frames from the list\ndf1 <- data.frame(ID = 1:50, Value = random_list$sample1)\ndf2 <- data.frame(ID = 1:50, Value = random_list$sample2)\ndf3 <- data.frame(ID = 1:50, Value = random_list$sample3)\n\n# Merging data frames column-wise\ncbined_df <- cbind(df1, df2$Value, df3$Value)\nhead(cbined_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID      Value  df2$Value  df3$Value\n1  1 -0.8828435 -1.5116620  1.4729716\n2  2  0.7371127  0.1140000  0.6455959\n3  3  0.7611256  0.9740632 -0.2355084\n4  4  2.0613462 -1.0748615 -0.4654242\n5  5  0.1966095 -0.2415080  0.1059656\n6  6  0.3217213 -1.3252347  0.9432906\n```\n:::\n\n```{.r .cell-code}\n# Merging data frames row-wise\nrbined_df <- rbind(df1, df2, df3)\nhead(rbined_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ID      Value\n1  1 -0.8828435\n2  2  0.7371127\n3  3  0.7611256\n4  4  2.0613462\n5  5  0.1966095\n6  6  0.3217213\n```\n:::\n:::\n\n\nIn the first example, `cbind()` combines `df1`, `df2`, and `df3` column-wise, creating a new data frame `combined_df`. In the second example, `rbind()` stacks `df1`, `df2`, and `df3` row-wise, appending the rows to create `combined_df`.\n\n## Method 2: Using `purrr::map()` and `data.frame()`\n\nWith the `purrr` package, you can efficiently merge data frames within a list using `map()` and `data.frame()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\n# Merging data frames within the list\nmerged_list <- map(random_list, data.frame)\n\n# Combining data frames row-wise\ncombined_df <- do.call(rbind, merged_list)\nhead(combined_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             .x..i..\nsample1.1 -0.8828435\nsample1.2  0.7371127\nsample1.3  0.7611256\nsample1.4  2.0613462\nsample1.5  0.1966095\nsample1.6  0.3217213\n```\n:::\n:::\n\n\nHere, `map()` iterates over each element of `random_list` and converts them into data frames using `data.frame()`. Then, `do.call(rbind, merged_list)` combines the data frames row-wise, creating `combined_df`.\n\n## Method 3: Using `purrr::map_df()`\n\nAnother `purrr` function, `map_df()`, directly merges data frames within a list, producing a single combined data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merging data frames within the list\ncombined_df <- map_df(random_list, cbind)\nhead(combined_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 Ã— 3\n  sample1[,1] sample2[,1] sample3[,1]\n        <dbl>       <dbl>       <dbl>\n1      -0.883      -1.51        1.47 \n2       0.737       0.114       0.646\n3       0.761       0.974      -0.236\n4       2.06       -1.07       -0.465\n5       0.197      -0.242       0.106\n6       0.322      -1.33        0.943\n```\n:::\n:::\n\n\nBy employing `map_df()` with `cbind`, we merge data frames within `random_list`, resulting in `combined_df`, which is a single merged data frame.\n\n# Encouragement to Try on Your Own\n\nNow that you've explored different methods of merging data frames in R, I encourage you to experiment with your datasets. Practice merging data frames using various columns and explore how different merge methods influence the resulting data frame. The more hands-on experience you gain, the more proficient you'll become in data manipulation with R.\n\nIn conclusion, merging multiple data frames in R is a foundational skill for any data analyst or scientist. By understanding the principles behind various merge methods and experimenting with real datasets, you'll enhance your data manipulation capabilities and streamline your workflow.\n\nHappy coding!\n\n# Bonus Section\n\nOne more method of this for you and I think I like this one the best. It's very simple and adds the name of the list item as a value in a column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstacked_list <- utils::stack(random_list)\nhead(stacked_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      values     ind\n1 -0.8828435 sample1\n2  0.7371127 sample1\n3  0.7611256 sample1\n4  2.0613462 sample1\n5  0.1966095 sample1\n6  0.3217213 sample1\n```\n:::\n:::\n\n\nHere is yet another method to merge data frames in R. This method is simple and effective, providing a straightforward way to combine data frames within a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merging data frames within the list\nmapped_list <- map(random_list, \\(x) data.frame(x)) |>\n  list_rbind()\nhead(mapped_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           x\n1 -0.8828435\n2  0.7371127\n3  0.7611256\n4  2.0613462\n5  0.1966095\n6  0.3217213\n```\n:::\n:::\n\n\nThis next method comes courtesy of a reader who suggested using the `list2DF` function from base R. This method is concise and efficient, making it a valuable addition to your data manipulation toolkit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist2DF(random_list) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     sample1    sample2    sample3\n1 -0.8828435 -1.5116620  1.4729716\n2  0.7371127  0.1140000  0.6455959\n3  0.7611256  0.9740632 -0.2355084\n4  2.0613462 -1.0748615 -0.4654242\n5  0.1966095 -0.2415080  0.1059656\n6  0.3217213 -1.3252347  0.9432906\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}