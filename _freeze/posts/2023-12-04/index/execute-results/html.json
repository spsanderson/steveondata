{
  "hash": "a1d1ab511a82607f385f1bf85d38a153",
  "result": {
    "markdown": "---\ntitle: \"Understanding Spline Regression\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-12-04\"\ncategories: [rtip, regression]\n---\n\n\n# Introduction\n\nSpline regression is particularly useful when the relationship between the independent and dependent variables is not adequately captured by a linear model. It involves fitting a piecewise continuous curve (spline) to the data. Let's dive into the process using R.\n\n# Example\n\n## Step 1: Load the Necessary Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load the required libraries\n# install.packages(\"splines\")\nlibrary(splines)\n```\n:::\n\n\n## Step 2: Generate Sample Data\n\nFor our example, let's create a hypothetical dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate sample data\nset.seed(123)\nx <- seq(1, 10, length.out = 100)\ny <- 3 * sin(x) + rnorm(100, mean = 0, sd = 0.5)\n```\n:::\n\n\n## Step 3: Fit a Spline Regression Model\n\nNow, let's fit a spline regression model to our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a spline regression model\nspline_model <- lm(y ~ ns(x, df = 4))\n```\n:::\n\n\nHere, `ns` from the `splines` package is used to create a natural spline basis with 4 degrees of freedom.\n\n## Step 4: Visualize the Results\n\nVisualizing the data and the fitted spline is crucial for understanding the model's performance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualize the data and fitted spline\nplot(x, y, main = \"Spline Regression Example\", xlab = \"X\", ylab = \"Y\")\nlines(x, predict(spline_model), col = \"red\", lwd = 2)\nlegend(\"topright\", legend = \"Fitted Spline\", col = \"red\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis code generates a plot with the original data points and overlays the fitted spline.\n\n## Step 5: Examine Residuals\n\nChecking residuals helps assess the model's goodness of fit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examine residuals\nresiduals <- residuals(spline_model)\nplot(x, residuals, main = \"Residuals of Spline Regression\", xlab = \"X\", \n     ylab = \"Residuals\")\nabline(h = 0, col = \"red\", lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis plot shows the residuals (the differences between observed and predicted values) against the independent variable.\n\n# You Try!\n\nNow that you've seen the basics, I encourage you to try spline regression on your own datasets. Experiment with different degrees of freedom (`df` parameter) in the `ns` function to observe how it affects the fit.\n\nRemember, the power of spline regression lies in its ability to capture complex patterns in your data. Don't hesitate to tweak the code and visualize the results to gain a deeper understanding.\n\nFeel free to share your experiences or ask questions in the comments. Happy coding!\n\nThat wraps up our journey into spline regression in R. I hope you found this tutorial helpful and inspiring for your data analysis endeavors.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}