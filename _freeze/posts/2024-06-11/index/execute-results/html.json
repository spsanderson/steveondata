{
  "hash": "805b78134c1f6ac69f9638c21451b5ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Extracting Numbers from Strings in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-06-11\"\ncategories: [code, rtip, operations, strings]\ntoc: TRUE\n---\n\n\n# Introduction\n\nHello! Today, we'll jump into something I think is a pretty neat task in data processing: extracting numbers from strings. We'll explore three different methods using base R, the `stringr` package, and the `stringi` package. Each method has its own strengths, so let's get started!\n\n# Examples\n\n## Extracting Numbers with Base R\n\nBase R provides powerful tools to manipulate strings, and you can use regular expressions to extract numbers. Here's a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample string\ntext <- \"The price is 45 dollars and 50 cents.\"\n\n# Extract numbers using regular expressions\nnumbers <- gregexpr(\"[0-9]+\", text)\nresult <- regmatches(text, numbers)\n\n# Convert to numeric\nnumeric_result <- as.numeric(unlist(result))\n\nprint(numeric_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45 50\n```\n\n\n:::\n:::\n\n\n**Explanation:**\n\n1. `gregexpr(\"[0-9]+\", text)` finds all sequences of digits in the text.\n2. `regmatches(text, numbers)` extracts these sequences from the text.\n3. `unlist(result)` flattens the list of matches.\n4. `as.numeric()` converts the character strings to numeric values.\n\n## Extracting Numbers with `stringr`\n\nThe `stringr` package offers a more user-friendly approach to string manipulation. Here's how you can extract numbers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\n# Sample string\ntext <- \"The price is 45 dollars and 50 cents.\"\n\n# Extract numbers using stringr\nnumbers <- str_extract_all(text, \"\\\\d+\")\n\n# Convert to numeric\nnumeric_result <- as.numeric(unlist(numbers))\n\nprint(numeric_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45 50\n```\n\n\n:::\n:::\n\n\n**Explanation:**\n\n1. `str_extract_all(text, \"\\\\d+\")` extracts all sequences of digits from the text. `\\\\d+` is a regular expression that matches one or more digits.\n2. `unlist(numbers)` and `as.numeric()` convert the result to numeric, as explained in the base R method.\n\n### Extracting Numbers with `stringi`\n\nThe `stringi` package is another excellent tool for string manipulation, providing robust and efficient functions. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringi)\n\n# Sample string\ntext <- \"The price is 45 dollars and 50 cents.\"\n\n# Extract numbers using stringi\nnumbers <- stri_extract_all_regex(text, \"\\\\d+\")\n\n# Convert to numeric\nnumeric_result <- as.numeric(unlist(numbers))\n\nprint(numeric_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 45 50\n```\n\n\n:::\n:::\n\n\n**Explanation:**\n\n1. `stri_extract_all_regex(text, \"\\\\d+\")` extracts all sequences of digits from the text using regular expressions.\n2. As before, `unlist(numbers)` and `as.numeric()` are used to convert the result to numeric values.\n\n# Comparison and Conclusion\n\n-   **Base R** is flexible and does not require additional packages, but the syntax can be a bit cumbersome.\n-   **stringr** simplifies the process with intuitive functions, making the code easier to read and write.\n-   **stringi** offers powerful and efficient string operations, suitable for performance-critical tasks.\n\n# Try It Yourself!\n\nI encourage you to try these methods on your own data. Extracting numbers from strings is a useful skill, especially when working with messy data. Experiment with different strings and see which method you prefer. Happy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}