{
  "hash": "93deb16e931e647f3e78aaa38ff6df1d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mastering Normal Distributions in R: A Comprehensive Guide to rnorm(), TidyDensity, and Statistical Analysis\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2025-06-23\"\ncategories: [code, rtip]\ntoc: TRUE\ndescription: \"Learn how to generate normal distributions in R using rnorm() and TidyDensity functions with practical examples and visualizations.\"\nkeywords: [Programming, Normal Distribution in R, rnorm() function, TidyDensity package, Statistical Analysis in R, Random Number Generation, Parameter Estimation in R, Visualizing Normal Distributions, Hypothesis Testing with R, AIC for Normal Distribution, Tidy Data in R, How to generate a normal distribution using rnorm() in R, Visualizing normal distributions with TidyDensity in R, Estimating parameters of a normal distribution from data in R, Using AIC to evaluate normal distribution fits in R, Step-by-step guide to statistical analysis with normal distributions in R]\n---\n\n\n\n> This guide covers normal distribution generation in R using the base `rnorm()` function and the TidyDensity package's specialized functions. You'll learn each function's syntax, parameters, and practical applications with code examples and visualizations.\n\n# Introduction\n\nNormal distributions are among the most commonly used probability distributions in statistical programming. R offers several methods to generate, analyze, and visualize normal distributions, from the base `rnorm()` function to specialized tools in the TidyDensity package. This guide walks through these functions with practical examples to help you incorporate normal distributions in your R workflows.\n\n# Base R: Using `rnorm()` Function\n\nThe `rnorm()` function is R's built-in method for generating random numbers from a normal distribution. It's part of base R and requires no additional packages.\n\n## Syntax and Parameters\n\n```r\nrnorm(n, mean = 0, sd = 1)\n```\n\n| Parameter | Description | Default | Required |\n|-----------|-------------|---------|----------|\n| `n` | Number of observations | None | Yes |\n| `mean` | Mean of the distribution | 0 | No |\n| `sd` | Standard deviation | 1 | No |\n\n## Basic Examples\n\nGenerate 10 random values from a standard normal distribution (mean=0, sd=1):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Standard normal distribution\nrnorm(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -0.6034933  0.0570314 -1.4114139 -1.4458639  0.1759349  1.3702679\n [7]  0.7680125  0.5288952 -0.9041921  0.2244687\n```\n\n\n:::\n:::\n\n\n\nGenerate values from a normal distribution with specified parameters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Normal distribution with mean=100, sd=15\nrnorm(5, mean=100, sd=15)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 104.58449 100.48635  83.55449 109.67438  96.21077\n```\n\n\n:::\n:::\n\n\n\n## Visualizing Normal Distributions\n\nHere's how to generate and visualize two normal distributions with different parameters:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate and plot standard normal distribution\nstd_normal <- data.frame(value = rnorm(1000))\nhist(std_normal$value, prob=TRUE, main=\"Standard Normal Distribution\",\n     xlab=\"Value\", col=\"lightblue\", border=\"white\")\nlines(density(std_normal$value), col=\"darkblue\", lwd=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/rnorm_3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Generate and plot normal with mean=100, sd=15\ncustom_normal <- data.frame(value = rnorm(1000, mean=100, sd=15))\nhist(custom_normal$value, prob=TRUE, main=\"Normal Distribution (mean=100, sd=15)\",\n     xlab=\"Value\", col=\"lightblue\", border=\"white\")\nlines(density(custom_normal$value), col=\"darkblue\", lwd=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/rnorm_3-2.png){width=672}\n:::\n:::\n\n\n\n# TidyDensity Package: Enhanced Normal Distribution Tools\n\nThe TidyDensity package extends R's capabilities with functions that generate tidy data structures for normal distributions and provide additional utility functions for analysis.\n\n## Using `tidy_normal()` Function\n\nThe `tidy_normal()` function generates random samples from a normal distribution and returns them in a tidy tibble format with additional information .\n\n### Syntax and Parameters\n\n```r\ntidy_normal(.n = 50, .mean = 0, .sd = 1, .num_sims = 1, .return_tibble = TRUE)\n```\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `.n` | Number of random points | 50 |\n| `.mean` | Mean of the distribution | 0 |\n| `.sd` | Standard deviation | 1 |\n| `.num_sims` | Number of simulation runs | 1 |\n| `.return_tibble` | Return as tibble? | TRUE |\n\n### Example Output\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\ntidy_normal()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 7\n   sim_number     x       y    dx       dy      p       q\n   <fct>      <int>   <dbl> <dbl>    <dbl>  <dbl>   <dbl>\n 1 1              1 -1.26   -3.36 0.000390 0.104  -1.26  \n 2 1              2  0.559  -3.22 0.00106  0.712   0.559 \n 3 1              3 -1.63   -3.08 0.00260  0.0514 -1.63  \n 4 1              4  1.67   -2.94 0.00574  0.953   1.67  \n 5 1              5  1.12   -2.80 0.0115   0.869   1.12  \n 6 1              6 -0.0232 -2.67 0.0207   0.491  -0.0232\n 7 1              7 -0.0430 -2.53 0.0342   0.483  -0.0430\n 8 1              8  1.28   -2.39 0.0517   0.900   1.28  \n 9 1              9 -1.67   -2.25 0.0724   0.0472 -1.67  \n10 1             10  0.217  -2.12 0.0949   0.586   0.217 \n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\nHere's a visualization of data generated using `tidy_normal()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate and visualize normal distribution data\ntidy_normal(.n = 100) |>\n  tidy_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/tidy_normal-1.png){width=672}\n:::\n:::\n\n\n\n## Understanding the Output Columns\n\nThe tibble returned by tidy_normal() includes:\n\n- `sim_number`: Simulation identifier\n- `x`: Index of the generated point\n- `y`: The randomly generated value\n- `dx`, `dy`: Density values from `stats::density()`\n- `p`: Cumulative probability (`pnorm`)\n- `q`: Quantile value (`qnorm`)\n\nThis structure provides a comprehensive dataset for analysis and visualization in a single function call.\n\n## Parameter Estimation with `util_normal_param_estimate()`\n\nThe `util_normal_param_estimate()` function estimates normal distribution parameters from a numeric vector of data .\n\n### Syntax and Parameters\n\n```r\nutil_normal_param_estimate(.x, .auto_gen_empirical = TRUE)\n```\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `.x` | Numeric vector | Required |\n| `.auto_gen_empirical` | Generate empirical data comparison? | TRUE |\n\n### Example Usage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimate parameters from mtcars mpg data\nx <- mtcars$mpg\noutput <- util_normal_param_estimate(x)\noutput$parameter_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  dist_type samp_size   min   max method              mu stan_dev shape_ratio\n  <chr>         <int> <dbl> <dbl> <chr>            <dbl>    <dbl>       <dbl>\n1 Gaussian         32  10.4  33.9 EnvStats_MME_MLE  20.1     5.93        3.39\n2 Gaussian         32  10.4  33.9 EnvStats_MVUE     20.1     6.03        3.33\n```\n\n\n:::\n:::\n\n\n\nThe function provides parameter estimates using two methods:\n- **MLE (Maximum Likelihood Estimation)/MME (Method of Moments Estimation)**: Returns the sample mean and standard deviation\n- **MVUE (Minimum Variance Unbiased Estimation)**: Returns unbiased estimates for the parameters\n\n## Distribution Statistics with `util_normal_stats_tbl()`\n\nThe `util_normal_stats_tbl()` function computes a comprehensive set of distribution statistics from a tidy normal distribution tibble .\n\n### Example Usage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ntidy_normal() |>\n  util_normal_stats_tbl() |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 17\n$ tidy_function     <chr> \"tidy_gaussian\"\n$ function_call     <chr> \"Gaussian c(0, 1)\"\n$ distribution      <chr> \"Gaussian\"\n$ distribution_type <chr> \"continuous\"\n$ points            <dbl> 50\n$ simulations       <dbl> 1\n$ mean              <dbl> 0\n$ median            <dbl> -0.2635105\n$ mode              <dbl> 0\n$ std_dv            <dbl> 1\n$ coeff_var         <dbl> Inf\n$ skewness          <dbl> 0\n$ kurtosis          <dbl> 3\n$ computed_std_skew <dbl> -0.03932958\n$ computed_std_kurt <dbl> 2.638299\n$ ci_lo             <dbl> -2.012057\n$ ci_hi             <dbl> 1.693464\n```\n\n\n:::\n:::\n\n\n\nThe returned tibble includes a wealth of statistics:\n\n- Basic measures: mean, median, mode\n- Dispersion measures: standard deviation, coefficient of variation\n- Shape measures: skewness, kurtosis\n- Confidence intervals\n\n## Model Selection with `util_normal_aic()`\n\nThe `util_normal_aic()` function estimates normal distribution parameters from data and calculates the Akaike Information Criterion (AIC) .\n\n### Syntax\n\n```r\nutil_normal_aic(.x)\n```\n\n### Example Usage\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate AIC for normal fit to mpg data\nutil_normal_aic(mtcars$mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 208.7555\n```\n\n\n:::\n\n```{.r .cell-code}\n# Returns the AIC value as a scalar\n```\n:::\n\n\n\nThe AIC value helps in model selection when comparing multiple distribution fits to the same data. Lower AIC values indicate better model fit.\n\n# Practical Applications of Normal Distributions in R\n\n## 1. Random Data Generation and Simulation\n\nNormal distributions are frequently used in simulation studies to generate synthetic data. For example, to simulate experimental results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate 1000 experimental measurements with instrument error\ntrue_value <- 100\nmeasurement_error <- 2.5\nmeasurements <- rnorm(1000, mean=true_value, sd=measurement_error)\n\n# Calculate summary statistics\nmean(measurements)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100.0614\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(measurements)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.523131\n```\n\n\n:::\n:::\n\n\n\n## 2. Statistical Inference and Hypothesis Testing\n\nMany statistical tests assume normality of the data. You can use `rnorm()` to simulate control and treatment groups:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simulate control and treatment groups\ncontrol <- rnorm(30, mean=10, sd=2)\ntreatment <- rnorm(30, mean=12, sd=2)\n\n# Perform t-test\nt.test(control, treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tWelch Two Sample t-test\n\ndata:  control and treatment\nt = -3.3845, df = 52.285, p-value = 0.001359\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -2.6448455 -0.6761244\nsample estimates:\nmean of x mean of y \n 10.16769  11.82818 \n```\n\n\n:::\n:::\n\n\n\n## 3. Parameter Estimation\n\nEstimating parameters of a normal distribution from observed data is a common task in statistical analysis. The `util_normal_param_estimate()` function provides convenient methods:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimate parameters from data\nset.seed(42)\ndata <- rnorm(100, mean = 2, sd = 2)\nparams <- util_normal_param_estimate(data)\nparams$parameter_tbl |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2\nColumns: 8\n$ dist_type   <chr> \"Gaussian\", \"Gaussian\"\n$ samp_size   <int> 100, 100\n$ min         <dbl> -3.98618, -3.98618\n$ max         <dbl> 6.573291, 6.573291\n$ method      <chr> \"EnvStats_MME_MLE\", \"EnvStats_MVUE\"\n$ mu          <dbl> 2.06503, 2.06503\n$ stan_dev    <dbl> 2.072274, 2.082714\n$ shape_ratio <dbl> 0.9965041, 0.9915090\n```\n\n\n:::\n:::\n\n\n\n## 4. Model Selection and Goodness-of-Fit\n\nThe `util_normal_aic()` function helps determine if a normal distribution is appropriate for your data:\n\n```r\n# Compare AIC for different distributions\nnormal_aic <- util_normal_aic(data)\n# Compare with other distributions...\n```\n\n## 5. Tidy Data Workflows\n\nThe TidyDensity package integrates well with the tidyverse, enabling seamless workflows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\n# Generate normal data\ntidy_normal(.n=100, .mean=5, .sd=1.5) |>\n  # Compute statistics\n  util_normal_stats_tbl() |>\n  # Select key statistics\n  select(mean, median, std_dv, ci_lo, ci_hi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n   mean median std_dv ci_lo ci_hi\n  <dbl>  <dbl>  <dbl> <dbl> <dbl>\n1     5   5.13    1.5  1.36  7.62\n```\n\n\n:::\n:::\n\n\n\n# Comparing rnorm() and tidy_normal()\n\nWhen deciding which function to use for normal distribution generation, consider these differences:\n\n| Feature | `rnorm()` | `tidy_normal()` |\n|---------|-----------|-----------------|\n| **Output type** | Numeric vector | Tibble with multiple columns |\n| **Additional info** | None | Density, probability, quantiles |\n| **Memory usage** | Lower | Higher (more data stored) |\n| **Workflow integration** | Base R | Tidyverse-friendly |\n| **Performance** | Fastest | Slightly more overhead |\n\n# Advanced Applications\n\n## Monte Carlo Simulation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estimate probability using Monte Carlo simulation\nset.seed(123)\ntidy_mcmc_sampling(rnorm(100))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$mcmc_data\n# A tibble: 4,000 × 3\n   sim_number name              value\n   <fct>      <fct>             <dbl>\n 1 1          .sample_mean     0.0732\n 2 1          .cum_stat_cmean  0.0732\n 3 2          .sample_mean     0.162 \n 4 2          .cum_stat_cmean  0.118 \n 5 3          .sample_mean     0.0961\n 6 3          .cum_stat_cmean  0.110 \n 7 4          .sample_mean     0.0711\n 8 4          .cum_stat_cmean  0.101 \n 9 5          .sample_mean    -0.0186\n10 5          .cum_stat_cmean  0.0768\n# ℹ 3,990 more rows\n\n$plt\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Bootstrap Confidence Intervals\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bootstrap confidence interval for mean\ndata <- rnorm(30, mean=10, sd=2)\nboot_means <- replicate(1000, mean(sample(data, replace=TRUE)))\nquantile(boot_means, c(0.025, 0.975))  # 95% CI\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     2.5%     97.5% \n 9.358964 10.645430 \n```\n\n\n:::\n:::\n\n\n\n## Probability Density Function Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate x-values\nx <- seq(-4, 4, length=1000)\n# Calculate density values\ny <- dnorm(x)\n# Plot PDF\nplot(x, y, type=\"l\", lwd=2, col=\"blue\", \n     main=\"Standard Normal Probability Density Function\", \n     xlab=\"z\", ylab=\"Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n# Your Turn!\n\nTry generating a mixture of two normal distributions in R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a mixture of two normal distributions\nn <- 1000\nmixture <- c(rnorm(n/2, mean=0, sd=1), rnorm(n/2, mean=5, sd=1))\nhist(mixture, breaks=30, prob=TRUE, main=\"Mixture of Two Normal Distributions\")\nlines(density(mixture), col=\"red\", lwd=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n<details><summary>See Solution</summary>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a mixture of two normal distributions\nset.seed(123)\nn <- 1000\nmixture <- c(rnorm(n/2, mean=0, sd=1), rnorm(n/2, mean=5, sd=1))\nhist(mixture, breaks=30, prob=TRUE, main=\"Mixture of Two Normal Distributions\")\nlines(density(mixture), col=\"red\", lwd=2)\n\n# You can also visualize the component distributions:\nx <- seq(-4, 9, length=1000)\ny1 <- dnorm(x, mean=0, sd=1) * 0.5  # Scaling by 0.5 for mixture proportion\ny2 <- dnorm(x, mean=5, sd=1) * 0.5\nlines(x, y1, col=\"blue\", lwd=1.5, lty=2)\nlines(x, y2, col=\"green\", lwd=1.5, lty=2)\nlegend(\"topright\", c(\"Mixture\", \"Component 1\", \"Component 2\"), \n       col=c(\"red\", \"blue\", \"green\"), lwd=c(2, 1.5, 1.5), lty=c(1, 2, 2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n</details>\n\n# Key Takeaways\n\n- `rnorm()` is the fastest and simplest way to generate random normal values in base R\n- `tidy_normal()` creates enhanced tibbles with density, probability, and quantile information\n- `util_normal_param_estimate()` offers multiple methods to estimate distribution parameters from data\n- `util_normal_stats_tbl()` provides comprehensive statistics for normal distributions\n- `util_normal_aic()` helps with model selection through AIC calculation\n- Performance differences between methods are minor for typical dataset sizes\n- Each function serves different purposes in a statistical workflow, from data generation to analysis\n\n# Conclusion\n\nThe R programming language provides multiple approaches to generate and analyze normal distributions. Whether you prefer the simplicity of base R's `rnorm()` or the comprehensive tibble output of TidyDensity's `tidy_normal()` and utility functions, you can easily incorporate normal distributions in your statistical analysis workflows.\n\nFor straightforward random number generation, `rnorm()` is fast and efficient. For more complex analyses requiring additional statistics and tidy data structures, the TidyDensity package's functions offer integrated solutions that work well within modern R programming paradigms.\n\n# FAQ\n\n**Q: How do I generate the same random normal values every time?**  \nA: Use `set.seed()` before calling `rnorm()` or `tidy_normal()` to ensure reproducibility:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nrnorm(5)  # Will always produce the same 5 values\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.56047565 -0.23017749  1.55870831  0.07050839  0.12928774\n```\n\n\n:::\n:::\n\n\n\n**Q: Can I generate multivariate normal distributions?**  \nA: Yes, use the `MASS::mvrnorm()` function from the MASS package:\n\n\n::: {.cell messge='false'}\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'MASS'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n\n\n:::\n\n```{.r .cell-code}\nsigma <- matrix(c(1, 0.5, 0.5, 1), nrow=2)\nmvrnorm(n=100, mu=c(0, 0), Sigma=sigma) |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           [,1]         [,2]\n[1,]  1.5078037  1.462775985\n[2,]  0.7916174  0.006712909\n[3,] -0.2616042 -1.929546135\n[4,] -0.4047188 -0.784945279\n[5,] -0.8454529  0.073543717\n[6,]  1.3477594  0.772412452\n```\n\n\n:::\n:::\n\n\n\n**Q: How can I check if my data follows a normal distribution?**  \nA: Use the Shapiro-Wilk test or QQ plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshapiro.test(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tShapiro-Wilk normality test\n\ndata:  data\nW = 0.98244, p-value = 0.8861\n```\n\n\n:::\n\n```{.r .cell-code}\nqqnorm(data); qqline(data)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n**Q: What's the difference between MLE and MVUE parameter estimation?**  \nA: MLE uses maximum likelihood estimation while MVUE provides minimum variance unbiased estimates. For normal distributions, they primarily differ in how they calculate the standard deviation.\n\n**Q: How many data points should I generate for accurate simulations?**  \nA: It depends on your purpose, but typically 1,000+ points provide good distribution shape, while sensitive statistical tests might require 10,000+ samples for stability.\n\n# References\n\n1. [R Project for Statistical Computing](https://www.r-project.org/) - Official website for the R programming language.\n2. [Normal Distribution in R Documentation](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Normal.html) - Official documentation for `rnorm()` and related normal distribution functions.\n3. [R Manuals and Documentation](https://cran.r-project.org/manuals.html) - Comprehensive list of all documentation for R functions and packages.\n\n4. [TidyDensity Package on CRAN](https://cran.r-project.org/web/packages/TidyDensity/index.html) - Official CRAN page with documentation and vignettes.\n5. [TidyDensity Reference Manual (PDF)](https://cran.r-project.org/web/packages/TidyDensity/TidyDensity.pdf) - Complete reference guide for all TidyDensity functions.\n6. [TidyDensity GitHub Repository](https://github.com/spsanderson/TidyDensity) - Source code and additional documentation.\n\n------------------------------------------------------------------------\n\nHappy Coding! 🚀\n\n![R your data normal?](todays_post.png)\n\n------------------------------------------------------------------------\n\n*You can connect with me at any one of the below*:\n\n*Telegram Channel here*: <https://t.me/steveondata>\n\n*LinkedIn Network here*: <https://www.linkedin.com/in/spsanderson/>\n\n*Mastadon Social here*: [https://mstdn.social/\\@stevensanderson](https://mstdn.social/@stevensanderson)\n\n*RStats Network here*: [https://rstats.me/\\@spsanderson](https://rstats.me/@spsanderson)\n\n*GitHub Network here*: <https://github.com/spsanderson>\n\n*Bluesky Network here*: <https://bsky.app/profile/spsanderson.com>\n\n*My Book: Extending Excel with Python and R* here: <https://packt.link/oTyZJ>\n\n*You.com Referral Link*: <https://you.com/join/EHSLDTL6>\n\n------------------------------------------------------------------------\n\n\n\n```{=html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"spsanderson/steveondata\"\n        data-repo-id=\"R_kgDOIIxnLw\"\n        data-category=\"Comments\"\n        data-category-id=\"DIC_kwDOIIxnL84ChTk8\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"dark\"\n        data-lang=\"en\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}