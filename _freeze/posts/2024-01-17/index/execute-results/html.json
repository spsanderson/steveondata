{
  "hash": "5904abd61c422fafdcceb2b119d649c9",
  "result": {
    "markdown": "---\ntitle: \"Using .drop_na in Fast Classification and Regression\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-01-17\"\ncategories: [code, rtip, tidyaml]\n---\n\n\n# Introduction\n\nIn the newest release of tidyAML there has been an addition of a new parameter to the functions `fast_classification()` and `fast_regression()`. The parameter is `.drop_na` and it is a logical value that defaults to `TRUE`. This parameter is used to determine if the function should drop rows with missing values from the output if a model cannot be built for some reason. Let's take a look at the function and it's arguments.\n\n```R\nfast_regression(\n  .data,\n  .rec_obj,\n  .parsnip_fns = \"all\",\n  .parsnip_eng = \"all\",\n  .split_type = \"initial_split\",\n  .split_args = NULL,\n  .drop_na = TRUE\n)\n```\n## Arguments\n\n`.data` - The data being passed to the function for the regression problem\n`.rec_obj` - The recipe object being passed.\n`.parsnip_fns` - The default is 'all' which will create all possible regression model specifications supported.\n`.parsnip_eng` - The default is 'all' which will create all possible regression model specifications supported.\n`.split_type` - The default is 'initial_split', you can pass any type of split supported by rsample\n`.split_args` - The default is NULL, when NULL then the default parameters of the split type will be executed for the rsample split type.\n`.drop_na` - The default is TRUE, which will drop all NA's from the data.\n\nNow let's see this in action.\n\n# Example\n\nWe are going to use the `mtcars` dataset for this example. We will create a regression problem where we are trying to predict `mpg` using all other variables in the dataset. We will not load in all the libraries that are supported causing the function to return NULL for some models and we will set the parameter `.drop_na` to `FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyAML)\nlibrary(tidymodels)\nlibrary(tidyverse)\n\ntidymodels::tidymodels_prefer()\n\n# Create regression problem\nrec_obj <- recipe(mpg ~ ., data = mtcars)\nfrt_tbl <- fast_regression(\n  mtcars,\n  rec_obj,\n  .parsnip_eng = c(\"lm\",\"glm\",\"gee\"),\n  .parsnip_fns = \"linear_reg\",\n  .drop_na = FALSE\n  )\n\nglimpse(frt_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3\nColumns: 8\n$ .model_id       <int> 1, 2, 3\n$ .parsnip_engine <chr> \"lm\", \"gee\", \"glm\"\n$ .parsnip_mode   <chr> \"regression\", \"regression\", \"regression\"\n$ .parsnip_fns    <chr> \"linear_reg\", \"linear_reg\", \"linear_reg\"\n$ model_spec      <list> [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…\n$ wflw            <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ fitted_wflw     <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ pred_wflw       <list> [<tbl_df[64 x 3]>], <NULL>, [<tbl_df[64 x 3]>]\n```\n:::\n\n```{.r .cell-code}\nextract_wflw(frt_tbl, 1:nrow(frt_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\n\n[[2]]\nNULL\n\n[[3]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: glm \n```\n:::\n:::\n\n\nHere we can see that the function returned NULL for the `gee` model because we did not load in the `multilevelmod` library. We can also see that the function did not drop that model from the output because `.drop_na` was set to `FALSE`. Now let's set it back to `TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrt_tbl <- fast_regression(\n  mtcars,\n  rec_obj,\n  .parsnip_eng = c(\"lm\",\"glm\",\"gee\"),\n  .parsnip_fns = \"linear_reg\",\n  .drop_na = TRUE\n  )\n\nglimpse(frt_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2\nColumns: 8\n$ .model_id       <int> 1, 3\n$ .parsnip_engine <chr> \"lm\", \"glm\"\n$ .parsnip_mode   <chr> \"regression\", \"regression\"\n$ .parsnip_fns    <chr> \"linear_reg\", \"linear_reg\"\n$ model_spec      <list> [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…\n$ wflw            <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ fitted_wflw     <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ pred_wflw       <list> [<tbl_df[64 x 3]>], [<tbl_df[64 x 3]>]\n```\n:::\n\n```{.r .cell-code}\nextract_wflw(frt_tbl, 1:nrow(frt_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\n\n[[2]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: glm \n```\n:::\n:::\n\n\nHere we can see that the `gee` model was dropped from the output because the function could not build the model due to the `multilevelmod` library not being loaded. This is a great way to drop models that cannot be built due to missing libraries or other reasons.\n\n# Conclusion\n\nThe `.drop_na` parameter is a great way to drop models that cannot be built due to missing libraries or other reasons. This is a great addition to the `fast_classification()` and `fast_regression()` functions.\n\nHappy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}