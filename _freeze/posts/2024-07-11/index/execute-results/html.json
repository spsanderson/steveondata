{
  "hash": "8d00afd015ef2414bdb657a2b9e92806",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring Random Walks with TidyDensity in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-07-11\"\ncategories: [code, rtip, tidydensity]\ntoc: TRUE\n---\n\n\n# Introduction\n\nWelcome back, data enthusiasts! Today, we're diving into the fascinating world of random walks using the TidyDensity R package. If you're working with time series data, financial modeling, or stochastic processes, understanding random walks is essential. And with TidyDensity, implementing and visualizing these walks has never been easier.\n\n# Random Walks\n\nA random walk is a mathematical object that describes a path consisting of a succession of random steps. It's a cornerstone concept in fields like physics, economics, and biology. In finance, for example, the random walk hypothesis suggests that stock market prices evolve according to a random walk and thus cannot be predicted.\n\n# TidyDensity and the `tidy_random_walk()` Function\n\nTidyDensity simplifies the generation and manipulation of random walks with its intuitive `tidy_random_walk()` function. This function can be used in conjunction with any `tidy_` distribution function, allowing for flexible and powerful random walk simulations.\n\n# Function Call\n\n```r\ntidy_random_walk(\n  .data,\n  .initial_value = 0,\n  .sample = FALSE,\n  .replace = FALSE,\n  .value_type = \"cum_prod\"\n)\n```\n\n## Arguments Breakdown\n\n-   **`.data`**: The dataset from a `tidy_` distribution function. This forms the basis of your random walk.\n-   **`.initial_value`**: The starting value of the random walk. The default is 0, but you can set it to any numeric value.\n-   **`.sample`**: A boolean indicating whether to sample the `y` values from the `tidy_` distribution. Defaults to `FALSE`.\n-   **`.replace`**: If both `.sample` and `.replace` are `TRUE`, sampling is done with replacement. Defaults to `FALSE`.\n-   **`.value_type`**: Determines how the walk is computed. Options are:\n  -   `\"cum_prod\"`: Computes the cumulative product of `y`.\n  -   `\"cum_sum\"`: Computes the cumulative sum of `y`.\n\n# Practical Examples\n\nLet's see `tidy_random_walk()` in action with some practical examples.\n\n## Example 1: Simple Random Walk with Cumulative Sum\n\nFirst, let's create a simple random walk using a normal distribution and compute the cumulative sum.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n\nset.seed(123)\ntidy_normal(.num_sims = 25, .n = 100) |>\n  tidy_random_walk(.value_type = \"cum_sum\") |>\n  tidy_random_walk_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn this example, we generate 25 simulations of 100 points each from a normal distribution. The `tidy_random_walk()` function then computes the cumulative sum of these points, simulating a simple random walk. The `tidy_random_walk_autoplot()` function is used to visualize the random walk.\n\n## Example 2: Random Walk with Sampling\n\nNext, we'll explore a random walk where values are sampled.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntidy_normal(.num_sims = 25, .n = 100) |>\n  tidy_random_walk(.value_type = \"cum_sum\", .sample = TRUE) |>\n  tidy_random_walk_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nHere, setting `.sample` to `TRUE` ensures that each step in the random walk is taken by randomly sampling from the original dataset. This can introduce additional variability and randomness to the walk.\n\n## Example 3: Random Walk with Sampling and Replacement\n\nFinally, let's create a random walk with sampling and replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\ntidy_normal(.num_sims = 25, .n = 100) |>\n  tidy_random_walk(\n    .value_type = \"cum_sum\", \n    .sample = TRUE, \n    .replace = TRUE\n    ) |>\n  tidy_random_walk_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn this example, setting both `.sample` and `.replace` to `TRUE` ensures that values are sampled with replacement. This can be useful in bootstrapping scenarios or when simulating more complex stochastic processes.\n\n## Bonus Section: Comparing Different Random Walk Sampling Methods\n\nTo wrap up, let's combine multiple random walks and visualize them using `ggplot2`. This bonus section will show you how different sampling methods impact the random walks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n\nset.seed(123)\ndf <- rbind(\n  tidy_normal(.num_sims = 25, .n = 100) |>\n    tidy_random_walk(.value_type = \"cum_sum\") |>\n    mutate(type = \"No_Sample\"),\n  tidy_normal(.num_sims = 25, .n = 100) |>\n    tidy_random_walk(.value_type = \"cum_sum\", .sample = TRUE) |>\n    mutate(type = \"Sample_No_Replace\"),\n  tidy_normal(.num_sims = 25, .n = 100) |>\n    tidy_random_walk(.value_type = \"cum_sum\", .sample = TRUE, .replace = TRUE) |>\n    mutate(type = \"Sample_Replace\")\n) |>\n  select(sim_number, x, random_walk_value, type) |>\n  mutate(\n    low_ci = -1.96 * sqrt(x),\n    hi_ci = 1.96 * sqrt(x)\n  )\n\natb <- attributes(df)\n\ndf |>\n  ggplot(aes(\n    x = x, \n    y = random_walk_value, \n    group = sim_number, \n    color = factor(type))\n  ) +\n  geom_line(aes(alpha = 0.382)) +\n  geom_line(aes(y = low_ci, group = sim_number), \n            linetype = \"dashed\", size = 0.6, color = \"black\") +\n  geom_line(aes(y = hi_ci, group = sim_number), \n            linetype = \"dashed\", size = 0.6, color = \"black\") +\n  theme_minimal() +\n  theme(legend.position=\"none\") +\n  facet_wrap(~type) +\n  labs(\n    x = \"Time\",\n    y = \"Random Walk Value\",\n    title = \"Random Walk with Different Sampling Methods\",\n    subtitle = paste0(\"Simulations: \", atb$all$.num_sims, \n                      \" | Steps: \", atb$all$.n,\n                      \" | Distribution: \", atb$all$dist_with_params\n                      )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Code Explanation\n\n1.    **Generating Data**: We generate three sets of random walks using different sampling methods:\n   - No sampling.\n   - Sampling without replacement.\n   - Sampling with replacement.\n   \n   Each set consists of 25 simulations of 100 steps.\n\n2.    **Combining Data**: The results are combined into a single data frame, with a new column `type` to indicate the sampling method used.\n\n3.    **Calculating Confidence Intervals**: We calculate the 95% confidence intervals for each step.\n\n4.    **Plotting**: Using `ggplot2`, we plot the random walks, coloring by sampling method and adding dashed lines to indicate the confidence intervals. We also facet the plot by `type` to separate the different sampling methods visually.\n\n# Conclusion\n\nRandom walks are a powerful tool for modeling and understanding various phenomena. With TidyDensity and the `tidy_random_walk()` function, you can easily generate and visualize these processes in R. Whether you're conducting financial analysis, simulating biological processes, or exploring theoretical concepts, TidyDensity offers a flexible and user-friendly approach.\n\nStay tuned for more tutorials and deep dives into the capabilities of TidyDensity. Happy coding!\n\n---\n\nFeel free to try out these examples and explore the versatility of `tidy_random_walk()`. Share your insights and results with us in the comments below or on social media using #TidyDensity. Until next time, keep experimenting and learning!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}