{
  "hash": "38d1dabe3dab500f69d33a135f628b75",
  "result": {
    "markdown": "---\ntitle: \"Wrangling Names in R: Your Guide to the make.names() Function\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-03-11\"\ncategories: [code, rtip, operations]\n---\n\n\n# Introduction\n\nEver tried to use a number or special character as a name for a variable or column in R, only to be met with an error? R has specific rules for what constitutes a valid name, and the `make.names` function is your knight in shining armor when it comes to wrangling these names into something R understands.\n\n# What is make.names?\n\nThink of `make.names` as a name janitor. It takes a vector of characters (potential names) and ensures they comply with R's naming conventions. These conventions say a valid name:\n\n* Must start with a letter or a dot (\".\")\n* Can only contain letters, numbers, periods, and underscores\n* Cannot be a reserved word in R (like `if`, `else`, or `for`)\n\n# How to Use make.names\n\nUsing `make.names` is straightforward. You simply provide it with a character vector containing your desired names, and it returns a new vector with valid names. Here's the basic syntax:\n\n```R\nnew_names <- make.names(old_names)\n```\n\n# Making Names Unique (Optional)\n\nBy default, `make.names` doesn't guarantee unique names. If you have duplicates, it might just keep them. To ensure unique names, add the `unique = TRUE` argument:\n\n```R\nunique_names <- make.names(old_names, unique = TRUE)\n```\n\nThis will modify duplicate names slightly to make them distinct.\n\n# Examples in Action!\n\nLet's see `make.names` in action with some examples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 1: Fix numeric names\nnumbers <- c(10, 20, 30)\nvalid_names <- make.names(numbers)\nprint(valid_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"X10\" \"X20\" \"X30\"\n```\n:::\n:::\n\n\nIn this case, `make.names` prepends an \"X\" to each number to make them valid names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 2: Handle special characters\nspecial_chars <- c(\"data#1\", \"result$\", \"graph!\")\nclean_names <- make.names(special_chars)\nprint(clean_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.1\"  \"result.\" \"graph.\" \n```\n:::\n:::\n\n\nHere, `make.names` removes special characters and replaces them with periods (except for \"$\" which is removed).\n\n# Give it a Try!\n\nR is a playground for exploration. Here are some challenges to try with `make.names`:\n\n1. Create a vector with names containing spaces and underscores. Use `make.names` to see how it handles them.\n2. Try using `make.names` on a data frame's column names. What happens?\n3. Explore the `unique = TRUE` argument. Can you think of situations where it might be necessary?\n\nRemember, `make.names` is your friend when dealing with non-standard names in R. By understanding its purpose and using it effectively, you can keep your R code clean and error-free. Happy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}