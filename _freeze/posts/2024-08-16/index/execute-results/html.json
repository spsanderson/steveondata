{
  "hash": "ba5a700494e1f4fa25d85c12061fb47e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mastering grepl with Multiple Patterns in Base R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-08-16\"\ncategories: [code, rtip, strings]\ntoc: TRUE\n---\n\n\n# Introduction\n\nHello, fellow useRs! Today, we're going to expand on previous uses of the `grepl()` function where we looked for a single pattern and move onto to a search for multiple patterns within strings. Whether you're cleaning data, conducting text analysis, `grepl` can be your go-to tool. Letâ€™s break down the syntax, offer a practical example, and guide you on a path to proficiency.\n\n## Understanding `grepl`\n\nThe `grepl` function in R is used to search for patterns within strings. The basic syntax is:\n\n```r\ngrepl(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)\n```\n\n### Key Arguments:\n\n-   **pattern**: The regular expression or string to search for.\n-   **x**: The character vector to be searched.\n-   **ignore.case**: If `TRUE`, the case of the pattern and the string will be ignored.\n-   **perl**: If `TRUE`, Perl-compatible regex is used.\n-   **fixed**: If `TRUE`, `pattern` is a string to be matched as is.\n-   **useBytes**: If `TRUE`, matching is done byte-by-byte.\n\n## Searching with Multiple Patterns\n\nBy default, `grepl` only searches for a single pattern. However, we can cleverly expand this to handle multiple patterns using a regular expression trick: combining patterns with the OR operator `|`.\n\n### Practical Example\n\nImagine you have a list of phrases, and you want to find those that contain either \"cat\" or \"dog\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\nphrases <- c(\"The cat is sleeping\", \"A dog barked loudly\", \"The sun is shining\", \"Cats and dogs are pets\", \"Birds are chirping\")\n\n# Patterns to search\npatterns <- c(\"cat\", \"dog\")\n\n# Combine patterns using OR operator\ncombined_pattern <- paste(patterns, collapse = \"|\")\n\n# Use grepl to find matches\nmatches <- grepl(combined_pattern, phrases, ignore.case = TRUE)\n\n# Show results\nresult <- phrases[matches]\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"The cat is sleeping\"    \"A dog barked loudly\"    \"Cats and dogs are pets\"\n```\n\n\n:::\n:::\n\n\n### Explanation:\n\n1.    **Data Preparation**: We start with a vector `phrases` containing several sentences.\n2.    **Pattern Combination**: We combine our patterns into a single string using `paste()` with `collapse = \"|\"`. This creates a regular expression `\"cat|dog\"`, which `grepl` interprets as \"find either 'cat' or 'dog'\".\n3.    **Search Operation**: `grepl` is then used to search for the combined pattern within `phrases`. The argument `ignore.case = TRUE` ensures the search is case-insensitive.\n4.    **Extract Matches**: We use the result of `grepl` to subset the `phrases` vector, displaying only those elements that contain either \"cat\" or \"dog\".\n\n# Try it Yourself!\n\nThis approach is powerful and flexible, perfect for searching through text data with multiple conditions. I encourage you to give it a try with your own data or patterns. Experiment with different combinations and see how `grepl` can simplify your text processing tasks in R. \n\n---\n\nHappy coding!\n\n\n```{=html}\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"spsanderson/steveondata\"\n        data-repo-id=\"R_kgDOIIxnLw\"\n        data-category=\"Comments\"\n        data-category-id=\"DIC_kwDOIIxnL84ChTk8\"\n        data-mapping=\"url\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"dark\"\n        data-lang=\"en\"\n        data-loading=\"lazy\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}