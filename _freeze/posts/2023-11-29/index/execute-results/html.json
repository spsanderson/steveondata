{
  "hash": "af8e328b53969b37c1f915f977cfabf3",
  "result": {
    "markdown": "---\ntitle: \"Navigating Quantile Regression with R: A Comprehensive Guide\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-11-29\"\ncategories: [rtip, regression]\n---\n\n\n# Introduction\n\nQuantile regression is a robust statistical method that goes beyond traditional linear regression by allowing us to model the relationship between variables at different quantiles of the response distribution. In this blog post, we'll explore how to perform quantile regression in R using the quantreg library.\n\n# Setting the Stage\n\nFirst things first, let's create some data to work with. We'll generate a data frame `df` with two variables: 'hours' and 'score'. The relationship between 'hours' and 'score' will have a bit of noise to make things interesting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data frame\nhours <- runif(100, 1, 10)\nscore <- 60 + 2 * hours + rnorm(100, mean = 0, sd = 0.45 * hours)\ndf <- data.frame(hours, score)\n```\n:::\n\n\n# Visualizing the Data\n\nBefore we jump into regression, it's always a good idea to visualize our data. Let's start with a scatter plot to get a sense of the relationship between hours and scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot\nplot(df$hours, df$score, \n     main = \"Scatter Plot of Hours vs. Score\", \n     xlab = \"Hours\", ylab = \"Score\"\n     )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNow that we've got a clear picture of our data, it's time to perform quantile regression.\n\n# Quantile Regression with quantreg\n\nWe'll use the `quantreg` library to perform quantile regression. The key function here is `rq()` (Quantile Regression). We'll run quantile regression for a few quantiles, say 0.25, 0.5, and 0.75.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install and load quantreg if not already installed\n# install.packages(\"quantreg\")\nlibrary(quantreg)\n\n# Quantile regression\nquant_reg_25 <- rq(score ~ hours, data = df, tau = 0.25)\nquant_reg_50 <- rq(score ~ hours, data = df, tau = 0.5)\nquant_reg_75 <- rq(score ~ hours, data = df, tau = 0.75)\n\npurrr::map(list(quant_reg_25, quant_reg_50, quant_reg_75), broom::tidy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 2 × 5\n  term        estimate conf.low conf.high   tau\n  <chr>          <dbl>    <dbl>     <dbl> <dbl>\n1 (Intercept)    60.3     59.0      61.1   0.25\n2 hours           1.56     1.33      1.82  0.25\n\n[[2]]\n# A tibble: 2 × 5\n  term        estimate conf.low conf.high   tau\n  <chr>          <dbl>    <dbl>     <dbl> <dbl>\n1 (Intercept)    60.2     59.6      60.5    0.5\n2 hours           1.96     1.86      2.20   0.5\n\n[[3]]\n# A tibble: 2 × 5\n  term        estimate conf.low conf.high   tau\n  <chr>          <dbl>    <dbl>     <dbl> <dbl>\n1 (Intercept)    59.9     59.5      60.7   0.75\n2 hours           2.36     2.16      2.53  0.75\n```\n:::\n\n```{.r .cell-code}\npurrr::map(list(quant_reg_25, quant_reg_50, quant_reg_75), broom::glance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 1 × 5\n    tau logLik      AIC   BIC df.residual\n  <dbl> <logLik>  <dbl> <dbl>       <int>\n1  0.25 -259.6364  523.  528.          98\n\n[[2]]\n# A tibble: 1 × 5\n    tau logLik      AIC   BIC df.residual\n  <dbl> <logLik>  <dbl> <dbl>       <int>\n1   0.5 -249.6752  503.  509.          98\n\n[[3]]\n# A tibble: 1 × 5\n    tau logLik      AIC   BIC df.residual\n  <dbl> <logLik>  <dbl> <dbl>       <int>\n1  0.75 -252.0106  508.  513.          98\n```\n:::\n:::\n\n\n# Visualizing Model Performance\n\nNow, let's visualize how well our quantile regression models perform. We'll overlay the regression lines on our scatter plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot with regression lines\n# Scatter plot with regression lines\nplot(df$hours, df$score, \n     main = \"Quantile Regression: Hours vs. Score\", \n     xlab = \"Hours\", ylab = \"Score\")\nabline(a = coef(quant_reg_25), \n       b = coef(quant_reg_25)[\"hours\"], \n       col = \"red\", lty = 2)\nabline(a = coef(quant_reg_50), \n       b = coef(quant_reg_50)[\"hours\"], \n       col = \"blue\", lty = 2)\nabline(a = coef(quant_reg_75), \n       b = coef(quant_reg_75)[\"hours\"], \n       col = \"green\", lty = 2)\nlegend(\"topleft\", legend = c(\"Quantile 0.25\", \"Quantile 0.5\", \"Quantile 0.75\"),\n       col = c(\"red\", \"blue\", \"green\"), lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Conclusion\n\nIn this blog post, we delved into the fascinating world of quantile regression using R and the quantreg library. We generated some synthetic data, visualized it, and then performed quantile regression at different quantiles. The final touch was overlaying the regression lines on our scatter plot to visualize how well our models fit the data.\n\nQuantile regression provides a more nuanced view of the relationship between variables, especially when dealing with skewed or non-normally distributed data. It's a valuable tool in your statistical toolkit. Happy coding, and may your regressions be ever quantile-wise accurate!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}