{
  "hash": "c4f8ba9735736acdc83486bf72457214",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to Drop or Select Rows with a Specific String in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-05-23\"\ncategories: [code, rtip, operations]\ntoc: TRUE\n---\n\n\n# Introduction\n\n*Good morning, everyone!*\n\nToday, we're going to talk about how to handle rows in your dataset that contain a specific string. This is a common task in data cleaning and can be easily accomplished using both base R and the `dplyr` package. We'll go through examples for each method and break down the code so you can understand and apply it to your own data.\n\n# Examples \n\n## Using Base R\n\nFirst, let's see how to select and drop rows containing a specific string using base R. We'll use the `grep()` function for this.\n\n### Example Data\n\nLet's create a simple data frame to work with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(\n  id = 1:5,\n  name = c(\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"),\n  stringsAsFactors = FALSE\n)\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id       name\n1  1      apple\n2  2     banana\n3  3     cherry\n4  4       date\n5  5 elderberry\n```\n\n\n:::\n:::\n\n\n### Selecting Rows with a Specific String\n\nSuppose we want to select rows where the name contains the letter \"a\". We can use `grep()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_rows <- data[grep(\"a\", data$name), ]\nprint(selected_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id   name\n1  1  apple\n2  2 banana\n4  4   date\n```\n\n\n:::\n:::\n\n\n**Explanation:** \n\n-   `grep(\"a\", data$name)` searches for the letter \"a\" in the `name` column and returns the indices of the rows that match. \n-   `data[grep(\"a\", data$name), ]` uses these indices to subset the original data frame.\n\n### Dropping Rows with a Specific String\n\nTo drop rows that contain the letter \"a\", we can use the `-grep()` notation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndropped_rows <- data[-grep(\"a\", data$name), ]\nprint(dropped_rows)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id       name\n3  3     cherry\n5  5 elderberry\n```\n\n\n:::\n:::\n\n\n**Explanation:** \n\n-   `-grep(\"a\", data$name)` returns the indices of the rows that do not match the search term. \n-   `data[-grep(\"a\", data$name), ]` subsets the original data frame by excluding these rows.\n\n## Using dplyr\n\nThe `dplyr` package makes these tasks even more straightforward with its intuitive functions.\n\n### Example Data\n\nWe'll use the same data frame as before. First, make sure you have `dplyr` installed and loaded:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"dplyr\")\nlibrary(dplyr)\n```\n:::\n\n\n### Selecting Rows with a Specific String\n\nUsing `dplyr`, we can select rows containing \"a\" with the `filter()` function combined with `str_detect()` from the `stringr` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\nselected_rows_dplyr <- data %>%\n  filter(str_detect(name, \"a\"))\nprint(selected_rows_dplyr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id   name\n1  1  apple\n2  2 banana\n3  4   date\n```\n\n\n:::\n:::\n\n\n**Explanation:** \n\n-   `%>%` is the pipe operator, allowing us to chain functions together. \n-   `filter(str_detect(name, \"a\"))` filters rows where the `name` column contains the letter \"a\".\n\n### Dropping Rows with a Specific String\n\nTo drop rows containing \"a\" using `dplyr`, we use `filter()` with the negation operator `!`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndropped_rows_dplyr <- data %>%\n  filter(!str_detect(name, \"a\"))\nprint(dropped_rows_dplyr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id       name\n1  3     cherry\n2  5 elderberry\n```\n\n\n:::\n:::\n\n\n**Explanation:** \n\n-   `!str_detect(name, \"a\")` negates the condition, filtering out rows where the `name` column contains the letter \"a\".\n\n# Summary\n\nBoth base R and `dplyr` provide powerful ways to select and drop rows based on specific strings. The `grep()` function in base R and the combination of `filter()` and `str_detect()` in `dplyr` are versatile tools for your data manipulation needs.\n\nGive these examples a try with your own datasets! Experimenting with different strings and data structures will help reinforce these concepts and improve your data manipulation skills.\n\nHappy coding!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}