{
  "hash": "68de8221fd1d7b4774f006919529e730",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating Summary Tables in R with tidyquant and dplyr\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2024-07-26\"\ncategories: [code, rtip, operations]\ntoc: TRUE\n---\n\n\n# Introduction\n\nCreating summary tables is a key part of data analysis, allowing you to see trends and patterns in your data. In this post, we'll explore how to create these tables using **tidyquant** and **dplyr** in R. These packages make it easy to manipulate and summarize your data.\n\n# Examples\n\n## Using tidyquant for Summary Tables\n\n**tidyquant** is a versatile package that extends the tidyverse for financial and time series analysis. It simplifies working with data by integrating tidy principles.\n\n### Example: Calculating Average Price by Month\n\nHere's an example of how to calculate the average price by month using tidyquant:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(tidyquant)\nlibrary(dplyr)\n\n# Sample data: Daily stock prices\ndata <- tibble(\n  date = seq(as.Date('2023-01-01'), as.Date('2023-06-30'), by = 'day'),\n  price = runif(181, 100, 200)\n)\n\n# Create a summary table with average closing price by month\nsummary_table <- data |>\n  mutate(month = floor_date(date, \"month\")) |>\n  pivot_table(\n    .rows = month, \n    .values = ~ mean(price, na.rm = TRUE)\n  ) |>\n  setNames(c(\"date\", \"avg_price\"))\n\nprint(summary_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  date       avg_price\n  <date>         <dbl>\n1 2023-01-01      149.\n2 2023-02-01      162.\n3 2023-03-01      151.\n4 2023-04-01      151.\n5 2023-05-01      145.\n6 2023-06-01      149.\n```\n\n\n:::\n:::\n\n\nIn this example:\n\n1.    **tidyquant** and **tibble** are loaded to handle data manipulation.\n2.    We create a sample dataset with daily stock prices.\n3.    The `mutate` function adds a new column `month`, which extracts the month from each date.\n4.    `pivot_table` calculates the average price for each month.\n5.    Finally, we rename the columns for clarity.\n\n## Using dplyr for Summary Tables\n\n**dplyr** is a core tidyverse package known for its powerful data manipulation functions. It helps streamline the process of filtering, summarizing, and mutating data.\n\n### Example: Calculating Average Closing Price by Month\n\nHere's a similar example using dplyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(dplyr)\nlibrary(lubridate)\n\n# Sample data: Daily stock prices\ndata <- tibble(\n  date = seq(as.Date('2023-01-01'), as.Date('2023-06-30'), by = 'day'),\n  price = runif(181, 100, 200)\n)\n\n# Create a summary table with average closing price by month\nsummary_table <- data %>%\n  mutate(month = floor_date(date, \"month\")) %>%\n  group_by(month) %>%\n  summarise(avg_close = mean(price))\n\nprint(summary_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  month      avg_close\n  <date>         <dbl>\n1 2023-01-01      149.\n2 2023-02-01      140.\n3 2023-03-01      147.\n4 2023-04-01      146.\n5 2023-05-01      147.\n6 2023-06-01      151.\n```\n\n\n:::\n:::\n\n\nIn this dplyr example:\n\n1.    We load **dplyr** and **lubridate** for data manipulation and date handling.\n2.    The dataset creation process is the same.\n3.    The `mutate` function is used to add a `month` column.\n4.    We group the data by month using `group_by` and then calculate the average closing price for each group using `summarise`.\n\n# Your Turn!\n\nUsing packages like **tidyquant** and **dplyr** simplifies data analysis tasks, making it easier to work with large datasets. These examples show just one way to create summary tables; there are many other functions and methods to explore. Give these examples a try with your own data and see how you can summarize and gain insights from your datasets. \n\n---\n\nHappy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}