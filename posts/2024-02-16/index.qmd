---
title: "Level Up Your Data Wrangling: Adding Index Columns in R like a Pro!"
author: "Steven P. Sanderson II, MPH"
date: "2024-02-16"
categories: [code, rtip, operations]
---

# Introduction

Data wrangling in R is like cooking: you have your ingredients (data), and you use tools (functions) to prepare them (clean, transform) for analysis (consumption!). One essential tool is adding an "index column" â€“ a unique identifier for each row. This might seem simple, but there are several ways to do it in base R and tidyverse packages like `dplyr` and `tibble`. Let's explore and spice up your data wrangling skills!

# Examples

## Adding Heat with Base R

### Ex 1: **The Sequencer:** 

Imagine lining up your rows. `cbind(df, 1:nrow(df))` adds a new column with numbers 1 to n, where n is the number of rows in your data frame (`df`).

```{r}
# Sample data
df <- data.frame(name = c("Alice", "Bob", "Charlie"), age = c(25, 30, 28))

# Add index using cbind
df_with_index <- cbind(index = 1:nrow(df), df)
df_with_index
```

### Ex 2: **Row Name Shuffle:** 

Prefer names over numbers? `rownames(df) <- 1:nrow(df)` assigns row numbers as your index, replacing existing row names.

```{r}
# Sample data
df <- data.frame(name = c("Alice", "Bob", "Charlie"), age = c(25, 30, 28))

df_with_index <- cbind(index = rownames(df), df)
df_with_index
```

### Ex 3: **The All-Seeing Eye:** 

`seq_len(nrow(df))` generates a sequence of numbers, perfect for adding as a new column named "index".

```{r}
# Sample data
df <- data.frame(name = c("Alice", "Bob", "Charlie"), age = c(25, 30, 28))

df_with_index <- cbind(index = seq_len(nrow(df)), df)
df_with_index
```

##  The Tidyverse Twist:

The `tidyverse` offers unique approaches:

### Ex 1: **Tibble Magic:** 

`tibble::rowid_to_column(df)` adds a column named "row_id" with unique row identifiers.

```{r message=FALSE, warning=FALSE}
library(tibble)

# Convert df to tibble
df_tib <- as_tibble(df)

# Add row_id
df_tib_indexed <- rowid_to_column(df_tib)
df_tib_indexed
```

### Ex 2: **dplyr's Ranking System:** 

`dplyr::row_number()` assigns ranks (starting from 1) based on the order of your data.

```{r warning=FALSE, message=FALSE}
library(dplyr)
# Add row number
df_tib_ranked <- df_tib |>
  mutate(rowid = row_number()) |>
  select(rowid, everything())

df_tib_ranked
```

# Choose Your Champion:

Experiment and see what suits your workflow! Base R offers flexibility, while `tidyverse` provides concise and consistent syntax.

# Now You Try!

1. Create your own data frame with different data types.
2. Apply the methods above to add index columns.
3. Explore customizing column names and data types.
4. Share your creations and challenges in the R community!

Remember, data wrangling is a journey, not a destination. Keep practicing, and you'll be adding those index columns like a seasoned R pro in no time!