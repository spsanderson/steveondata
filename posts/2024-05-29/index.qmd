---
title: "Introducing `get_provider_meta_data()` in healthyR.data"
author: "Steven P. Sanderson II, MPH"
date: "2024-05-29"
categories: [code, rtip, healthyrdata]
toc: TRUE
---

# Introduction

Hello, R enthusiasts!

Today, I’m excited to introduce a new function in the **healthyR.data** package: `get_provider_meta_data()`. This function is excellent for anyone working with healthcare datasets, making it easy to fetch and filter metadata from the Centers for Medicare & Medicaid Services (CMS) repository.

# Overview

The `get_provider_meta_data()` function simplifies the process of retrieving and managing metadata for healthcare datasets. By allowing users to filter data based on various criteria, it streamlines data management and enhances analytical capabilities.

# Syntax and Arguments

The function syntax is straightforward and highly customizable:

```r
get_provider_meta_data(
  .identifier = NULL,
  .title = NULL,
  .description = NULL,
  .keyword = NULL,
  .issued = NULL,
  .modified = NULL,
  .released = NULL,
  .theme = NULL,
  .media_type = NULL
)
```

Here's a breakdown of the arguments:

-   **.identifier**: A dataset identifier to filter the data.
-   **.title**: A title to filter the data.
-   **.description**: A description to filter the data.
-   **.keyword**: A keyword to filter the data.
-   **.issued**: A date when the dataset was issued to filter the data.
-   **.modified**: A date when the dataset was modified to filter the data.
-   **.released**: A date when the dataset was released to filter the data.
-   **.theme**: A theme to filter the data.
-   **.media_type**: A media type to filter the data.

# What It Returns

The function returns a tidy tibble containing metadata about the datasets. This tibble includes the following columns:

- **identifier**
- **title**
- **description**
- **keyword**
- **issued**
- **modified**
- **released**
- **theme**
- **media_type**
- **download_url**
- **contact_fn**
- **contact_email**
- **publisher_name**

# Details

When you call `get_provider_meta_data()`, it fetches JSON data from the CMS metadata URL. The function then processes this data by:
1. Selecting relevant columns.
2. Unnesting nested lists.
3. Cleaning column names.
4. Processing dates and media types for enhanced usability.

# Practical Example

Let’s walk through an example to see how `get_provider_meta_data()` works in action.

Suppose we want to retrieve metadata for a dataset based upong a specific data identifier? Here’s how we can do it:

```{r message=FALSE, warning=FALSE}
library(healthyR.data)
library(dplyr)
library(tidyr)

# Retrieve metadata for a datset with identifier "3614-1eef"
get_provider_meta_data(.identifier = "3614-1eef") |>
  glimpse()
```
In this example, we are filtering the metadata based on the dataset identifier "3614-1eef". The `glimpse()` function allows us to view the structure of the resulting tibble.

Now, what if we want to filter data that meets a certain keyword? Here’s how we can do that:

```{r message=FALSE, warning=FALSE}
provider_data_tbl <- get_provider_meta_data(.keyword = "medic")

# Let's see all the titles that contain the keyword "medic"
provider_data_tbl[["title"]]

# Now let's group them by theme
provider_data_tbl |>
  count(theme, sort = TRUE) |>
  unnest(cols = c(theme))
```
In this example, the metadata is filtered based on the keyword "medic". We then extract the titles containing the keyword and group them by theme to see the distribution of themes in the filtered data. Notice that we filtered the keyword not on a full word but on a partial match, which can be useful for broad searches.

# Benefits of Using `get_provider_meta_data()`

This function is particularly useful for:

- **Data Scientists and Analysts**: Quickly finding relevant datasets without manually searching through large repositories.
- **Healthcare Researchers**: Accessing comprehensive metadata to support research and analysis.
- **Developers**: Integrating CMS metadata retrieval into applications or workflows with minimal effort.

# Conclusion

The `get_provider_meta_data()` function is a robust tool for anyone working with healthcare data. It not only saves time but also provides a cleaner, more efficient way to manage and analyze dataset metadata.

Give it a try and see how it can enhance your data workflows. Happy coding!

Feel free to share your experiences and any creative ways you’re using this function in the comments below. Until next time, keep exploring and innovating with R!

---
Steve