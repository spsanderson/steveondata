---
title: "How to Drop or Select Rows with a Specific String in R"
author: "Steven P. Sanderson II, MPH"
date: "2024-05-23"
categories: [code, rtip, operations]
toc: TRUE
---

# Introduction

*Good morning, everyone!*

Today, we're going to talk about how to handle rows in your dataset that contain a specific string. This is a common task in data cleaning and can be easily accomplished using both base R and the `dplyr` package. We'll go through examples for each method and break down the code so you can understand and apply it to your own data.

# Examples 

## Using Base R

First, let's see how to select and drop rows containing a specific string using base R. We'll use the `grep()` function for this.

### Example Data

Let's create a simple data frame to work with:

```{r}
data <- data.frame(
  id = 1:5,
  name = c("apple", "banana", "cherry", "date", "elderberry"),
  stringsAsFactors = FALSE
)
print(data)
```

### Selecting Rows with a Specific String

Suppose we want to select rows where the name contains the letter "a". We can use `grep()`:

```{r}
selected_rows <- data[grep("a", data$name), ]
print(selected_rows)
```

**Explanation:** 

-   `grep("a", data$name)` searches for the letter "a" in the `name` column and returns the indices of the rows that match. 
-   `data[grep("a", data$name), ]` uses these indices to subset the original data frame.

### Dropping Rows with a Specific String

To drop rows that contain the letter "a", we can use the `-grep()` notation:

```{r}
dropped_rows <- data[-grep("a", data$name), ]
print(dropped_rows)
```

**Explanation:** 

-   `-grep("a", data$name)` returns the indices of the rows that do not match the search term. 
-   `data[-grep("a", data$name), ]` subsets the original data frame by excluding these rows.

## Using dplyr

The `dplyr` package makes these tasks even more straightforward with its intuitive functions.

### Example Data

We'll use the same data frame as before. First, make sure you have `dplyr` installed and loaded:

```{r message=FALSE, warning=FALSE}
#install.packages("dplyr")
library(dplyr)
```

### Selecting Rows with a Specific String

Using `dplyr`, we can select rows containing "a" with the `filter()` function combined with `str_detect()` from the `stringr` package:

```{r message=FALSE, warning=FALSE}
library(stringr)

selected_rows_dplyr <- data %>%
  filter(str_detect(name, "a"))
print(selected_rows_dplyr)
```

**Explanation:** 

-   `%>%` is the pipe operator, allowing us to chain functions together. 
-   `filter(str_detect(name, "a"))` filters rows where the `name` column contains the letter "a".

### Dropping Rows with a Specific String

To drop rows containing "a" using `dplyr`, we use `filter()` with the negation operator `!`:

```{r}
dropped_rows_dplyr <- data %>%
  filter(!str_detect(name, "a"))
print(dropped_rows_dplyr)
```

**Explanation:** 

-   `!str_detect(name, "a")` negates the condition, filtering out rows where the `name` column contains the letter "a".

# Summary

Both base R and `dplyr` provide powerful ways to select and drop rows based on specific strings. The `grep()` function in base R and the combination of `filter()` and `str_detect()` in `dplyr` are versatile tools for your data manipulation needs.

Give these examples a try with your own datasets! Experimenting with different strings and data structures will help reinforce these concepts and improve your data manipulation skills.

Happy coding!
