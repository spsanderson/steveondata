{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Working with Excel Spreadsheets in Python: A Complete Beginner's Guide to openpyxl\"\n",
        "author: \"Steven P. Sanderson II, MPH\"\n",
        "date: \"2025-09-10\"\n",
        "categories: [code, python]\n",
        "toc: TRUE\n",
        "description: \"Learn how to automate Excel spreadsheets with Python using openpyxl in this beginner-friendly guide. Discover step-by-step examples for creating, reading, and formatting Excel files, plus tips for working with data, formulas, and charts—perfect for new Python programmers!\"\n",
        "keywords: [Programming, openpyxl, Python Excel, Excel automation, Excel spreadsheets, Python spreadsheet library, automate Excel with Python, read Excel files Python, write Excel files Python, Excel data analysis Python, beginner Python Excel tutorial, how to automate Excel spreadsheets with Python and openpyxl, step-by-step guide to using openpyxl for Excel automation, beginner tutorial for reading and writing Excel files in Python, best practices for formatting Excel spreadsheets with openpyxl, creating charts and formulas in Excel using Python openpyxl]\n",
        "---\n",
        "\n",
        "\n",
        "**Authors Note: I am learning as I write this series, so I might make mistakes or do things that are not optimal. If you find any of these situations, please comment so readers have the correct or better knowledge and I too can learn.**\n",
        "\n",
        "> **Key Takeaway:** openpyxl is a powerful Python library that lets you create, read, and modify Excel files without needing Microsoft Excel installed. Perfect for automating repetitive spreadsheet tasks!\n",
        "\n",
        "Excel spreadsheets are everywhere in the business world, and as a Python programmer, you'll often need to work with them. Whether you're analyzing sales data, creating reports, or automating data entry, the **openpyxl** library is your gateway to Excel automation. This guide will teach you everything you need to know to start working with Excel files using Python.\n",
        "\n",
        "---\n",
        "\n",
        "# What is openpyxl?\n",
        "\n",
        "**openpyxl** is a Python library that allows you to read, write, and modify Excel 2010 xlsx/xlsm/xltx/xltm files . Think of it as your Python toolkit for Excel automation. Unlike other libraries, openpyxl doesn't require Microsoft Excel to be installed on your computer, making it perfect for servers and automated systems.\n",
        "\n",
        "## Why Use openpyxl?\n",
        "\n",
        "• **No Excel Required**: Works without Microsoft Excel installed\n",
        "• **Full Feature Support**: Handles formulas, charts, styling, and more\n",
        "• **Active Development**: Regularly updated and well-maintained\n",
        "• **Beginner Friendly**: Simple syntax that's easy to learn\n",
        "\n",
        "# Excel Terminology Made Simple\n",
        "\n",
        "Before diving into code, let's understand the basic Excel terms you'll encounter:\n",
        "\n",
        "| Term | Explanation | Example |\n",
        "|------|-------------|---------|\n",
        "| **Workbook** | The main Excel file you work with | `mydata.xlsx` |\n",
        "| **Worksheet** | A single sheet within a workbook | Sheet1, Sheet2 |\n",
        "| **Column** | Vertical line, labeled with letters | A, B, C, D... |\n",
        "| **Row** | Horizontal line, labeled with numbers | 1, 2, 3, 4... |\n",
        "| **Cell** | Intersection of column and row | A1, B2, C3... |\n",
        "\n",
        "# Getting Started: Installation\n",
        "\n",
        "Installing openpyxl is straightforward. Open your terminal or command prompt and run:\n",
        "\n",
        "```bash\n",
        "pip install openpyxl\n",
        "```\n",
        "\n",
        "That's it! You're ready to start working with Excel files in Python.\n",
        "\n",
        "# Creating Your First Excel File\n",
        "\n",
        "Let's start with the basics - creating a new Excel workbook and adding some data:\n"
      ],
      "id": "fdbdb115"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from openpyxl import Workbook\n",
        "\n",
        "# Create a new workbook\n",
        "workbook = Workbook()\n",
        "sheet = workbook.active\n",
        "\n",
        "# Add some data\n",
        "sheet[\"A1\"] = \"Product\"\n",
        "sheet[\"B1\"] = \"Price\" \n",
        "sheet[\"C1\"] = \"Stock\"\n",
        "\n",
        "# Add product information\n",
        "sheet[\"A2\"] = \"Laptop\"\n",
        "sheet[\"B2\"] = 999.99\n",
        "sheet[\"C2\"] = 15\n",
        "\n",
        "# Save the file\n",
        "workbook.save(\"products.xlsx\")"
      ],
      "id": "9d47bb61",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This creates a new Excel file called `products.xlsx` with a simple product table .\n",
        "\n",
        "# Reading Existing Excel Files\n",
        "\n",
        "Reading data from existing Excel files is just as simple:\n"
      ],
      "id": "c4b52417"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from openpyxl import load_workbook\n",
        "\n",
        "# Load an existing workbook\n",
        "workbook = load_workbook(\"products.xlsx\")\n",
        "sheet = workbook.active\n",
        "\n",
        "# Read cell values\n",
        "product_name = sheet[\"A2\"].value\n",
        "price = sheet[\"B2\"].value\n",
        "\n",
        "print(f\"Product: {product_name}, Price: ${price}\")\n",
        "# Output: Product: Laptop, Price: $999.99"
      ],
      "id": "4f61be77",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Reading Multiple Cells at Once\n",
        "\n",
        "For larger datasets, you can iterate through rows efficiently:\n"
      ],
      "id": "89a30b34"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Read all data from the spreadsheet\n",
        "for row in sheet.iter_rows(values_only=True):\n",
        "    print(row)"
      ],
      "id": "8dc867b0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This prints each row as a tuple, making it easy to process data in bulk .\n",
        "\n",
        "# Working with Cells and Data\n",
        "\n",
        "## Accessing Cells in Different Ways\n",
        "\n",
        "openpyxl gives you multiple ways to access cells:\n"
      ],
      "id": "8299d9b8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Method 1: Cell reference (like in Excel)\n",
        "sheet[\"A1\"] = \"Hello\"\n",
        "value = sheet[\"A1\"].value\n",
        "\n",
        "# Method 2: Row and column numbers (1-based indexing)\n",
        "sheet.cell(row=1, column=1, value=\"Hello\")\n",
        "value = sheet.cell(row=1, column=1).value\n",
        "\n",
        "# Method 3: Appending rows (great for adding data)\n",
        "sheet.append([\"Mouse\", 29.99, 150])\n",
        "\n",
        "# Read all data from the spreadsheet\n",
        "for row in sheet.iter_rows(values_only=True):\n",
        "    print(row)"
      ],
      "id": "ba5d10d1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data Types and Conversion\n",
        "\n",
        "openpyxl automatically handles different data types:\n",
        "\n",
        "• **Text**: `sheet[\"A1\"] = \"Product Name\"`\n",
        "• **Numbers**: `sheet[\"B1\"] = 299.99`\n",
        "• **Dates**: `sheet[\"C1\"] = datetime.date(2024, 1, 15)`\n",
        "• **Formulas**: `sheet[\"D1\"] = \"=B1*C1\"`\n",
        "\n",
        "# Adding Style and Formatting\n",
        "\n",
        "Making your spreadsheets look professional is important. Here's how to add formatting:\n"
      ],
      "id": "ab699016"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from openpyxl.styles import Font, PatternFill, Alignment\n",
        "\n",
        "# Make headers bold and centered\n",
        "sheet[\"A1\"].font = Font(bold=True)\n",
        "sheet[\"A1\"].alignment = Alignment(horizontal='center')\n",
        "\n",
        "# Add background color\n",
        "sheet[\"A1\"].fill = PatternFill(start_color=\"366092\", \n",
        "                               end_color=\"366092\", \n",
        "                               fill_type=\"solid\")\n",
        "\n",
        "# Format numbers as currency\n",
        "sheet[\"B2\"].number_format = '$#,##0.00'"
      ],
      "id": "66b42a03",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Common Formatting Options\n",
        "\n",
        "| Format Type | Code Example | Result |\n",
        "|------------|--------------|---------|\n",
        "| **Bold Text** | `Font(bold=True)` | **Bold** |\n",
        "| **Currency** | `'$#,##0.00'` | $1,234.56 |\n",
        "| **Percentage** | `'0.00%'` | 25.50% |\n",
        "| **Date** | `'YYYY-MM-DD'` | 2024-01-15 |\n",
        "\n",
        "# Working with Multiple Worksheets\n",
        "\n",
        "Most real-world Excel files have multiple sheets. Here's how to manage them:\n"
      ],
      "id": "a737f519"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Create additional sheets\n",
        "data_sheet = workbook.create_sheet(title=\"Sales Data\")\n",
        "summary_sheet = workbook.create_sheet(title=\"Summary\")\n",
        "\n",
        "# Switch between sheets\n",
        "current_sheet = workbook[\"Sales Data\"]\n",
        "\n",
        "# List all sheet names\n",
        "print(workbook.sheetnames)  # ['Sheet', 'Sales Data', 'Summary']\n",
        "\n",
        "# Rename a sheet\n",
        "summary_sheet.title = \"Monthly Summary\""
      ],
      "id": "1bce495d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Adding Formulas and Calculations\n",
        "\n",
        "One of Excel's most powerful features is automatic calculations. openpyxl makes this easy:\n"
      ],
      "id": "e05154a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Add formulas (Excel will calculate them)\n",
        "sheet[\"D1\"] = \"Total Value\"\n",
        "sheet[\"D2\"] = \"=B2*C2\"  # Price × Stock\n",
        "\n",
        "# Create summary calculations\n",
        "sheet[\"B5\"] = \"=SUM(B2:B4)\"  # Sum of prices\n",
        "sheet[\"C5\"] = \"=AVERAGE(C2:C4)\"  # Average stock"
      ],
      "id": "bcbdb7c5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "**Important Note**: openpyxl stores formulas as text. Excel calculates the results when you open the file .\n",
        "\n",
        "# Creating Simple Charts\n",
        "\n",
        "Visual data representation makes reports more compelling:\n"
      ],
      "id": "3ad4a94d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from openpyxl.chart import BarChart, Reference\n",
        "\n",
        "# Create a bar chart\n",
        "chart = BarChart()\n",
        "chart.title = \"Product Stock Levels\"\n",
        "chart.x_axis.title = \"Products\"\n",
        "chart.y_axis.title = \"Stock Quantity\"\n",
        "\n",
        "# Define data range\n",
        "data = Reference(sheet, min_col=3, min_row=1, max_row=4)\n",
        "categories = Reference(sheet, min_col=1, min_row=2, max_row=4)\n",
        "\n",
        "chart.add_data(data, titles_from_data=True)\n",
        "chart.set_categories(categories)\n",
        "\n",
        "# Add chart to worksheet\n",
        "sheet.add_chart(chart, \"E2\")\n",
        "# Save the workbook\n",
        "workbook.save(\"products.xlsx\")"
      ],
      "id": "8670a58c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Best Practices for Beginners\n",
        "\n",
        "## Essential Tips\n",
        "\n",
        "• **Always save your workbook**: Use `workbook.save(\"filename.xlsx\")` after making changes\n",
        "• **Use descriptive variable names**: `student_worksheet` instead of `ws1`\n",
        "• **Test with small datasets first**: Verify your code works before processing large files\n",
        "• **Handle errors gracefully**: Use try-except blocks for file operations\n",
        "• **Keep backups**: Always backup important files before modifying them\n",
        "\n",
        "## Common Mistakes to Avoid\n",
        "\n",
        "| Mistake | Why It Happens | Solution |\n",
        "|---------|----------------|----------|\n",
        "| **Forgetting to save** | Code runs but file doesn't update | Always call `workbook.save()` |\n",
        "| **Wrong file extension** | Using `.xls` instead of `.xlsx` | openpyxl only works with `.xlsx` |\n",
        "| **1-based vs 0-based indexing** | Excel uses 1-based indexing | Remember: A1 is row=1, column=1 |\n",
        "\n",
        "# Practical Example: Sales Report\n",
        "\n",
        "Let's put everything together with a real-world example:\n"
      ],
      "id": "59e29970"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from openpyxl import Workbook\n",
        "from openpyxl.styles import Font\n",
        "import datetime\n",
        "\n",
        "# Create sales report\n",
        "wb = Workbook()\n",
        "ws = wb.active\n",
        "ws.title = \"Sales Report\"\n",
        "\n",
        "# Add headers with formatting\n",
        "headers = ['Date', 'Product', 'Quantity', 'Unit Price', 'Total']\n",
        "ws.append(headers)\n",
        "\n",
        "# Make headers bold\n",
        "for cell in ws[1]:\n",
        "    cell.font = Font(bold=True)\n",
        "\n",
        "# Add sales data\n",
        "sales_data = [\n",
        "    [datetime.date(2024, 1, 15), 'Laptop', 2, 999.99],\n",
        "    [datetime.date(2024, 1, 16), 'Mouse', 5, 29.99],\n",
        "    [datetime.date(2024, 1, 17), 'Keyboard', 3, 79.99]\n",
        "]\n",
        "\n",
        "for row in sales_data:\n",
        "    ws.append(row)\n",
        "\n",
        "# Add total formulas\n",
        "for row in range(2, 5):\n",
        "    ws.cell(row=row, column=5).value = f'=C{row}*D{row}'\n",
        "    ws.cell(row=row, column=5).number_format = '$#,##0.00'\n",
        "    ws.cell(row=row, column=4).number_format = '$#,##0.00'\n",
        "\n",
        "# Save the report\n",
        "wb.save('sales_report.xlsx')"
      ],
      "id": "9d531108",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Quick Reference Table\n",
        "\n",
        "| Task | Code Example | Description |\n",
        "|------|--------------|-------------|\n",
        "| **Create workbook** | `wb = Workbook()` | New Excel file |\n",
        "| **Load workbook** | `wb = load_workbook('file.xlsx')` | Open existing file |\n",
        "| **Access sheet** | `ws = wb.active` | Get current sheet |\n",
        "| **Read cell** | `value = ws['A1'].value` | Get cell value |\n",
        "| **Write cell** | `ws['A1'] = 'Hello'` | Set cell value |\n",
        "| **Add row** | `ws.append(['A', 'B', 'C'])` | Add data row |\n",
        "| **Save file** | `wb.save('file.xlsx')` | Save changes |\n",
        "\n",
        "# Conclusion\n",
        "\n",
        "Working with Excel spreadsheets in Python using openpyxl opens up endless possibilities for data automation and analysis. You've learned how to create, read, and modify Excel files, add formatting and charts, and follow best practices that will serve you well in real-world projects.\n",
        "\n",
        "The key to mastering openpyxl is practice. Start with simple tasks like reading data from existing files, then gradually work up to creating complex reports with multiple sheets, formulas, and charts. Remember to always test your code with small datasets first, handle errors properly, and keep backups of important files.\n",
        "\n",
        "**Ready to automate your Excel workflows?** Start with the examples in this guide and gradually build more complex solutions. Your future self will thank you for learning this valuable skill!\n",
        "\n",
        "# References\n",
        "\n",
        "Based on the research findings and best practices for digital content citations, here's a properly formatted references section with four working, relevant clickable links for the Excel/openpyxl tutorial:\n",
        "\n",
        "# References\n",
        "\n",
        "1. **openpyxl Official Documentation** - The comprehensive official documentation for the openpyxl library, including installation guides, API reference, and advanced features.  \n",
        "   [https://openpyxl.readthedocs.io/](https://openpyxl.readthedocs.io/) \n",
        "\n",
        "2. **A Guide to Excel Spreadsheets in Python With openpyxl – Real Python** - An in-depth tutorial covering practical use cases, detailed code examples, and best practices for manipulating Excel spreadsheets using Python.  \n",
        "   [https://realpython.com/openpyxl-excel-spreadsheets-python/](https://realpython.com/openpyxl-excel-spreadsheets-python/) \n",
        "\n",
        "3. **Reading an Excel File Using Python openpyxl Module – GeeksforGeeks** - A step-by-step beginner's guide with code snippets for reading and extracting data from Excel files using the openpyxl library.  \n",
        "   [https://www.geeksforgeeks.org/python/python-reading-excel-file-using-openpyxl-module/](https://www.geeksforgeeks.org/python/python-reading-excel-file-using-openpyxl-module/) \n",
        "\n",
        "4. **How to Read Excel File in Python using Openpyxl – Medium** - An accessible tutorial explaining the fundamentals of reading Excel files, accessing worksheets, and retrieving data with openpyxl for Python beginners.  \n",
        "   [https://medium.com/@vidvatek/how-to-read-excel-file-in-python-using-openpyxl-354f3729b1cf](https://medium.com/@vidvatek/how-to-read-excel-file-in-python-using-openpyxl-354f3729b1cf) \n",
        "\n",
        "---\n",
        "\n",
        "*Have you tried automating Excel tasks with Python? Share your experiences and questions in the comments below, and don't forget to share this guide with fellow Python beginners on social media!*\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "Happy Coding! 🚀\n",
        "\n",
        "![Excel Spreadsheets with Python](todays_post.png)\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "*You can connect with me at any one of the below*:\n",
        "\n",
        "*Telegram Channel here*: <https://t.me/steveondata>\n",
        "\n",
        "*LinkedIn Network here*: <https://www.linkedin.com/in/spsanderson/>\n",
        "\n",
        "*Mastadon Social here*: [https://mstdn.social/\\@stevensanderson](https://mstdn.social/@stevensanderson)\n",
        "\n",
        "*RStats Network here*: [https://rstats.me/\\@spsanderson](https://rstats.me/@spsanderson)\n",
        "\n",
        "*GitHub Network here*: <https://github.com/spsanderson>\n",
        "\n",
        "*Bluesky Network here*: <https://bsky.app/profile/spsanderson.com>\n",
        "\n",
        "*My Book: Extending Excel with Python and R* here: <https://packt.link/oTyZJ>\n",
        "\n",
        "*You.com Referral Link*: <https://you.com/join/EHSLDTL6>\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "\n",
        "```{=html}\n",
        "<script src=\"https://giscus.app/client.js\"\n",
        "        data-repo=\"spsanderson/steveondata\"\n",
        "        data-repo-id=\"R_kgDOIIxnLw\"\n",
        "        data-category=\"Comments\"\n",
        "        data-category-id=\"DIC_kwDOIIxnL84ChTk8\"\n",
        "        data-mapping=\"url\"\n",
        "        data-strict=\"0\"\n",
        "        data-reactions-enabled=\"1\"\n",
        "        data-emit-metadata=\"0\"\n",
        "        data-input-position=\"top\"\n",
        "        data-theme=\"dark\"\n",
        "        data-lang=\"en\"\n",
        "        data-loading=\"lazy\"\n",
        "        crossorigin=\"anonymous\"\n",
        "        async>\n",
        "</script>\n",
        "```"
      ],
      "id": "b125da91"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\ssanders\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}