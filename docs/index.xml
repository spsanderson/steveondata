<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Fri, 16 Aug 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Mastering grepl with Multiple Patterns in Base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-16/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow useRs! Today, we’re going to expand on previous uses of the <code>grepl()</code> function where we looked for a single pattern and move onto to a search for multiple patterns within strings. Whether you’re cleaning data, conducting text analysis, <code>grepl</code> can be your go-to tool. Let’s break down the syntax, offer a practical example, and guide you on a path to proficiency.</p>
<section id="understanding-grepl" class="level2">
<h2 class="anchored" data-anchor-id="understanding-grepl">Understanding <code>grepl</code></h2>
<p>The <code>grepl</code> function in R is used to search for patterns within strings. The basic syntax is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(pattern, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useBytes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<section id="key-arguments" class="level3">
<h3 class="anchored" data-anchor-id="key-arguments">Key Arguments:</h3>
<ul>
<li><strong>pattern</strong>: The regular expression or string to search for.</li>
<li><strong>x</strong>: The character vector to be searched.</li>
<li><strong>ignore.case</strong>: If <code>TRUE</code>, the case of the pattern and the string will be ignored.</li>
<li><strong>perl</strong>: If <code>TRUE</code>, Perl-compatible regex is used.</li>
<li><strong>fixed</strong>: If <code>TRUE</code>, <code>pattern</code> is a string to be matched as is.</li>
<li><strong>useBytes</strong>: If <code>TRUE</code>, matching is done byte-by-byte.</li>
</ul>
</section>
</section>
<section id="searching-with-multiple-patterns" class="level2">
<h2 class="anchored" data-anchor-id="searching-with-multiple-patterns">Searching with Multiple Patterns</h2>
<p>By default, <code>grepl</code> only searches for a single pattern. However, we can cleverly expand this to handle multiple patterns using a regular expression trick: combining patterns with the OR operator <code>|</code>.</p>
<section id="practical-example" class="level3">
<h3 class="anchored" data-anchor-id="practical-example">Practical Example</h3>
<p>Imagine you have a list of phrases, and you want to find those that contain either “cat” or “dog”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb2-2">phrases <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The cat is sleeping"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A dog barked loudly"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The sun is shining"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cats and dogs are pets"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Birds are chirping"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Patterns to search</span></span>
<span id="cb2-5">patterns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dog"</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine patterns using OR operator</span></span>
<span id="cb2-8">combined_pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(patterns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use grepl to find matches</span></span>
<span id="cb2-11">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(combined_pattern, phrases, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show results</span></span>
<span id="cb2-14">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> phrases[matches]</span>
<span id="cb2-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "The cat is sleeping"    "A dog barked loudly"    "Cats and dogs are pets"</code></pre>
</div>
</div>
</section>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation:</h3>
<ol type="1">
<li><strong>Data Preparation</strong>: We start with a vector <code>phrases</code> containing several sentences.</li>
<li><strong>Pattern Combination</strong>: We combine our patterns into a single string using <code>paste()</code> with <code>collapse = "|"</code>. This creates a regular expression <code>"cat|dog"</code>, which <code>grepl</code> interprets as “find either ‘cat’ or ‘dog’”.</li>
<li><strong>Search Operation</strong>: <code>grepl</code> is then used to search for the combined pattern within <code>phrases</code>. The argument <code>ignore.case = TRUE</code> ensures the search is case-insensitive.</li>
<li><strong>Extract Matches</strong>: We use the result of <code>grepl</code> to subset the <code>phrases</code> vector, displaying only those elements that contain either “cat” or “dog”.</li>
</ol>
</section>
</section>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try it Yourself!</h1>
<p>This approach is powerful and flexible, perfect for searching through text data with multiple conditions. I encourage you to give it a try with your own data or patterns. Experiment with different combinations and see how <code>grepl</code> can simplify your text processing tasks in R.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-16/</guid>
  <pubDate>Fri, 16 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Matrix Concatenation in R: A Guide to rbind() and cbind()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-15/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow useRs! Today, we’re going to discuss the art of concatenating matrices in R. Concatenating matrices is all about combining smaller pieces into a larger whole, and in R, the functions <code>rbind()</code> and <code>cbind()</code> are your go-to tools for this task. Whether you’re aligning matrices by rows or columns, these functions are efficient and straightforward. Let’s explore how you can use them with some examples.</p>
<section id="understanding-rbind-and-cbind" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rbind-and-cbind">Understanding <code>rbind()</code> and <code>cbind()</code></h2>
<p>Before we jump into examples, let’s clarify what these functions do:</p>
<ul>
<li><p><strong><code>rbind()</code></strong>: This function stands for “row bind” and is used to combine matrices or vectors by rows. It stacks them one on top of the other.</p></li>
<li><p><strong><code>cbind()</code></strong>: This function stands for “column bind” and is used to combine matrices or vectors by columns, positioning them side by side.</p></li>
</ul>
<p>Both functions are incredibly useful when you need to adjust the shape of your data for analysis or visualization.</p>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-concatenating-by-rows-with-rbind" class="level2">
<h2 class="anchored" data-anchor-id="example-1-concatenating-by-rows-with-rbind">Example 1: Concatenating by Rows with <code>rbind()</code></h2>
<p>Let’s start with a basic example of <code>rbind()</code>. Suppose we have two matrices, and we want to create a single matrix by stacking them on top of each other.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define two matrices</span></span>
<span id="cb1-2">matrix1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-3">matrix2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the matrices</span></span>
<span id="cb1-6">matrix1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">matrix2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    7    9   11
[2,]    8   10   12</code></pre>
</div>
</div>
<p>Now let’s use <code>rbind()</code> to concatenate these matrices by rows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use rbind() to concatenate by rows</span></span>
<span id="cb5-2">combined_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(matrix1, matrix2)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(combined_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    3    5
[2,]    2    4    6
[3,]    7    9   11
[4,]    8   10   12</code></pre>
</div>
</div>
<section id="what-happens-here" class="level3">
<h3 class="anchored" data-anchor-id="what-happens-here">What Happens Here?</h3>
<p>So what just happened? Let’s break it down:</p>
<ol type="1">
<li><strong><code>matrix1</code> and <code>matrix2</code></strong> are defined with 2 rows and 3 columns.</li>
<li><strong><code>rbind(matrix1, matrix2)</code></strong> stacks <code>matrix2</code> below <code>matrix1</code>, creating a new matrix with 4 rows and 3 columns.</li>
</ol>
</section>
</section>
<section id="example-2-concatenating-by-columns-with-cbind" class="level2">
<h2 class="anchored" data-anchor-id="example-2-concatenating-by-columns-with-cbind">Example 2: Concatenating by Columns with <code>cbind()</code></h2>
<p>Now, suppose we want to concatenate matrices by columns. Here’s how you can do it using <code>cbind()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define two matrices</span></span>
<span id="cb7-2">matrix1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-3">matrix2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5">matrix1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    1    3
[2,]    2    4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">matrix2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    5    7
[2,]    6    8</code></pre>
</div>
</div>
<p>Now, let’s use <code>cbind()</code> to combine these matrices by columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use cbind() to concatenate by columns</span></span>
<span id="cb11-2">combined_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(matrix1, matrix2)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(combined_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8</code></pre>
</div>
</div>
<section id="whats-happening-here" class="level3">
<h3 class="anchored" data-anchor-id="whats-happening-here">What’s Happening Here?</h3>
<p>So here’s what’s going on in this example:</p>
<ol type="1">
<li><strong><code>matrix1</code> and <code>matrix2</code></strong> each have 2 rows and 2 columns.</li>
<li><strong><code>cbind(matrix1, matrix2)</code></strong> places <code>matrix2</code> to the right of <code>matrix1</code>, resulting in a new matrix with 2 rows and 4 columns.</li>
</ol>
</section>
</section>
<section id="example-3-combining-vectors" class="level2">
<h2 class="anchored" data-anchor-id="example-3-combining-vectors">Example 3: Combining Vectors</h2>
<p>These functions aren’t just for matrices; you can also use them with vectors. Let’s see how:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define two vectors</span></span>
<span id="cb13-2">vector1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb13-3">vector2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine vectors by rows</span></span>
<span id="cb13-6">row_combined <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(vector1, vector2)</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine vectors by columns</span></span>
<span id="cb13-9">column_combined <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(vector1, vector2)</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the results</span></span>
<span id="cb13-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(row_combined)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        [,1] [,2] [,3]
vector1    1    2    3
vector2    4    5    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(column_combined)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     vector1 vector2
[1,]       1       4
[2,]       2       5
[3,]       3       6</code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<ul>
<li><strong>Row Combination</strong>: <code>rbind(vector1, vector2)</code> results in a matrix with each vector as a row.</li>
<li><strong>Column Combination</strong>: <code>cbind(vector1, vector2)</code> results in a matrix with each vector as a column.</li>
</ul>
</section>
</section>
<section id="your-turn" class="level2">
<h2 class="anchored" data-anchor-id="your-turn">Your Turn!</h2>
<p>Now that you have a handle on concatenating matrices in R, it’s time to experiment! Try creating your own matrices or vectors and see how you can combine them using <code>rbind()</code> and <code>cbind()</code>. Pay attention to the dimensions to ensure compatibility. Remember, practice is key to mastering these techniques, so don’t hesitate to explore further.</p>
<p>Feel free to share your experiences or any questions you might have in the comments below.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-15/</guid>
  <pubDate>Thu, 15 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Opening an Excel Workbook with VBA and Calling it from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-14/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, we’ll cover how to open an Excel workbook using VBA and then call this VBA code from R. This guide will help you automate tasks in Excel directly from R, combining the strengths of both tools. We’ll break down the VBA code and the R script step by step to make the process clear and easy to follow.</p>
<section id="step-1-writing-the-vba-code" class="level2">
<h2 class="anchored" data-anchor-id="step-1-writing-the-vba-code">Step 1: Writing the VBA Code</h2>
<p>First, let’s create the VBA code that will open an Excel workbook. VBA, or Visual Basic for Applications, is a programming language integrated into Excel, allowing for automation of repetitive tasks. Below is a simple VBA script to open a workbook from a specified path:</p>
<pre class="vba"><code>Sub OpenWorkbook()
    Dim workbookPath As String
    Dim workbook As Workbook
    
    ' Specify the path to your workbook
    workbookPath = "C:\Path\To\Your\Workbook.xlsx"
    
    ' Open the workbook
    Set workbook = Workbooks.Open(workbookPath)
    
    ' Optional: Make the workbook visible
    workbook.Application.Visible = True
End Sub</code></pre>
<p><strong>Explanation:</strong></p>
<ul>
<li><strong>Dim workbookPath As String</strong>: This line declares a variable named <code>workbookPath</code> to store the file path of the workbook.</li>
<li><strong>Dim workbook As Workbook</strong>: This declares a variable <code>workbook</code> that will hold the workbook object after it’s opened.</li>
<li><strong>workbookPath = “C:.xlsx”</strong>: Replace the placeholder path with the actual path to your Excel file.</li>
<li><strong>Set workbook = Workbooks.Open(workbookPath)</strong>: This line opens the workbook and assigns it to the <code>workbook</code> variable.</li>
<li><strong>workbook.Application.Visible = True</strong>: This optional line makes the Excel application visible after opening the workbook.</li>
</ul>
</section>
<section id="step-2-testing-the-vba-code" class="level2">
<h2 class="anchored" data-anchor-id="step-2-testing-the-vba-code">Step 2: Testing the VBA Code</h2>
<p>Before proceeding to the R script, it’s important to test the VBA code directly in Excel to ensure it works correctly.</p>
<ol type="1">
<li>Open Excel and press <code>ALT + F11</code> to access the VBA editor.</li>
<li>Insert a new module by clicking <code>Insert &gt; Module</code>.</li>
<li>Copy and paste the above VBA code into the module.</li>
<li>Run the <code>OpenWorkbook</code> macro by pressing <code>F5</code> or by selecting <code>Run &gt; Run Sub/UserForm</code>.</li>
</ol>
<p>If the workbook opens successfully, you’re ready to move on to integrating this with R.</p>
</section>
<section id="step-3-calling-the-vba-code-from-r" class="level2">
<h2 class="anchored" data-anchor-id="step-3-calling-the-vba-code-from-r">Step 3: Calling the VBA Code from R</h2>
<p>Now that we have the VBA macro ready, let’s call it from R using the <code>RDCOMClient</code> package. The following R code will initialize Excel, run the VBA macro to open the workbook, and then optionally close Excel.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the COM object for Excel</span></span>
<span id="cb2-4">excelApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the Excel workbook</span></span>
<span id="cb2-7">fn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Path</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">To</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Your</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Workbook.xlsx"</span></span>
<span id="cb2-8">xlWbk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excelApp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Workbooks</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(fn)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Excel visible (optional)</span></span>
<span id="cb2-11">excelApp[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visible"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional: Close Excel after running the script</span></span>
<span id="cb2-14">excelApp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span></code></pre></div>
<p><strong>Explanation:</strong></p>
<ul>
<li><strong>library(RDCOMClient)</strong>: This loads the <code>RDCOMClient</code> package, enabling R to interact with Excel via COM (Component Object Model).</li>
<li><strong>COMCreate(“Excel.Application”)</strong>: This line creates a COM object representing the Excel application, which allows R to control Excel.</li>
<li><strong>fn &lt;- “C:\Path\To\Your\Workbook.xlsx”</strong>: Replace this with the actual path to your Excel file. Note that double backslashes (<code>\\</code>) are required to correctly format the path in R.</li>
<li><strong>xlWbk &lt;- excelApp<img src="https://latex.codecogs.com/png.latex?Workbooks()">Open(fn)</strong>: This line opens the specified Excel workbook using the path stored in <code>fn</code>.</li>
<li><strong>excelApp[[“Visible”]] &lt;- TRUE</strong>: This optional line makes the Excel application visible, allowing you to see the workbook open.</li>
<li><strong>excelApp$Quit()</strong>: This line closes Excel after the script runs. If you prefer to keep Excel open, you can omit or comment out this line.</li>
</ul>
</section>
<section id="step-4-running-the-r-script" class="level2">
<h2 class="anchored" data-anchor-id="step-4-running-the-r-script">Step 4: Running the R Script</h2>
<p>Once the R script is ready, you can run it in your R environment to open the workbook using the VBA macro. This integration between R and Excel is powerful for automating tasks, especially when you need to handle Excel files programmatically.</p>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>This guide gives you a solid foundation to start automating Excel tasks using R and VBA. I encourage you to experiment with the code provided and adapt it to your specific needs. For example, you could expand the VBA macro to perform additional actions, such as manipulating data in the workbook, or explore other functionalities of the <code>RDCOMClient</code> package to further enhance your workflows.</p>
<p>By experimenting with these tools, you’ll gain greater control over your Excel automation tasks and streamline your work processes. If you encounter any issues, reviewing the code or referring to relevant documentation can help you overcome them.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>vba</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-14/</guid>
  <pubDate>Wed, 14 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering String Concatenation of Vectors in R: Base R, stringr, stringi, and glue</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-13/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to another exciting R programming tutorial! Today, we will explore how to concatenate vectors of strings using different methods in R: base R, <code>stringr</code>, <code>stringi</code>, and <code>glue</code>. We’ll use a practical example involving a data frame with names, job titles, and salaries. By the end of this post, you’ll feel confident using these tools to manipulate and combine strings in your own projects. Let’s get started!</p>
<section id="our-example-data-frame" class="level2">
<h2 class="anchored" data-anchor-id="our-example-data-frame">Our Example Data Frame</h2>
<p>We’ll start with a simple data frame containing employee names, their job titles, and their salaries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating the data frame</span></span>
<span id="cb1-2">employees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">JobTitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data Scientist"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Software Engineer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product Manager"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Salary =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105000</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(employees)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name          JobTitle Salary
1   Alice    Data Scientist 120000
2     Bob Software Engineer 110000
3 Charlie   Product Manager 105000</code></pre>
</div>
</div>
</section>
<section id="concatenation-using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="concatenation-using-base-r">Concatenation Using Base R</h2>
<p>In base R, we can concatenate strings using the <code>paste()</code> and <code>paste0()</code> functions. The <code>paste()</code> function combines strings with a specified separator, while <code>paste0()</code> does the same without any separator.</p>
<p>To create a single string for each employee that combines their name, job title, and salary, we can use <code>paste()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenating using paste()</span></span>
<span id="cb3-2">employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb3-3">  employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Name, </span>
<span id="cb3-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is a"</span>, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>JobTitle, </span>
<span id="cb3-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"earning $"</span>, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Salary</span>
<span id="cb3-6">  )</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice is a Data Scientist earning $ 120000"   
[2] "Bob is a Software Engineer earning $ 110000"  
[3] "Charlie is a Product Manager earning $ 105000"</code></pre>
</div>
</div>
<p>The <code>paste()</code> function automatically adds a space between the elements. If you want to control the separator, you can use the <code>sep</code> parameter. For instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenating with a custom separator</span></span>
<span id="cb5-2">employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Name, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>JobTitle, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Salary, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" | "</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice | Data Scientist | 120000"    "Bob | Software Engineer | 110000"  
[3] "Charlie | Product Manager | 105000"</code></pre>
</div>
</div>
</section>
<section id="concatenation-using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="concatenation-using-stringr">Concatenation Using stringr</h2>
<p>The <code>stringr</code> package provides a more consistent and user-friendly approach to string manipulation. The <code>str_c()</code> function is used for concatenation.</p>
<p>First, install and load the <code>stringr</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install if you do not have it</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("stringr")</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</div>
<p>Now, let’s concatenate the strings using <code>str_c()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenating using str_c()</span></span>
<span id="cb8-2">employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(</span>
<span id="cb8-3">  employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Name, </span>
<span id="cb8-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is a"</span>, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>JobTitle, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"earning $"</span>, </span>
<span id="cb8-5">  employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Salary, </span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice is a Data Scientist earning $ 120000"   
[2] "Bob is a Software Engineer earning $ 110000"  
[3] "Charlie is a Product Manager earning $ 105000"</code></pre>
</div>
</div>
<p>The <code>str_c()</code> function works similarly to <code>paste()</code>, but with a consistent syntax and more intuitive parameter names.</p>
</section>
<section id="concatenation-using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="concatenation-using-stringi">Concatenation Using stringi</h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation. It offers a wide range of functions, including <code>stri_c()</code> for concatenation.</p>
<p>First, install and load the <code>stringi</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install if you do not have it</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("stringi")</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span></code></pre></div>
</div>
<p>Now, let’s concatenate the strings using <code>stri_c()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenating using stri_c()</span></span>
<span id="cb11-2">employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(</span>
<span id="cb11-3">  employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Name, </span>
<span id="cb11-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is a"</span>, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>JobTitle, </span>
<span id="cb11-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"earning $"</span>, employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Salary, </span>
<span id="cb11-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span></span>
<span id="cb11-7">  )</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice is a Data Scientist earning $ 120000"   
[2] "Bob is a Software Engineer earning $ 110000"  
[3] "Charlie is a Product Manager earning $ 105000"</code></pre>
</div>
</div>
<p>The <code>stri_c()</code> function is similar to <code>str_c()</code> from the <code>stringr</code> package, but it provides additional features for advanced string manipulation.</p>
</section>
<section id="concatenation-using-glue" class="level2">
<h2 class="anchored" data-anchor-id="concatenation-using-glue">Concatenation Using glue</h2>
<p>The <code>glue</code> package offers a unique approach to string concatenation by allowing you to embed R expressions directly within strings.</p>
<p>First, install and load the <code>glue</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install if you do not have it</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("glue")</span></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span></code></pre></div>
</div>
<p>Now, let’s use <code>glue()</code> to create the summary strings:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenating using glue()</span></span>
<span id="cb14-2">employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(</span>
<span id="cb14-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{employees$Name} is a {employees$JobTitle} earning ${employees$Salary}"</span></span>
<span id="cb14-4">  )</span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(employees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Alice is a Data Scientist earning $120000
Bob is a Software Engineer earning $110000
Charlie is a Product Manager earning $105000</code></pre>
</div>
</div>
<p>The <code>glue()</code> function makes it easy to embed variable values within strings, providing a clear and readable syntax. It also has in my opinion the nicest output as you will notice there is no space between the salary and the dollar sign.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We’ve covered several methods for concatenating strings in R, including base R functions, the <code>stringr</code> package, the <code>stringi</code> package, and the <code>glue</code> package. Each method has its own strengths and can be useful depending on your specific needs.</p>
<p>I encourage you to try these techniques in your own projects. Experimenting with different methods will help you understand which one works best for your use cases.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>strings</category>
  <category>stringr</category>
  <category>stringi</category>
  <category>glue</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-13/</guid>
  <pubDate>Tue, 13 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering String Concatenation in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-12/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>String concatenation is a fundamental operation in data manipulation and cleaning. If you are working in R, mastering string concatenation will significantly enhance your data processing capabilities. This blog post will cover different ways to concatenate strings using base R, the <code>stringr</code>, <code>stringi</code>, and <code>glue</code> packages. Let’s go!</p>
<section id="concatenating-strings-in-base-r" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-in-base-r">Concatenating Strings in Base R</h2>
<p>Base R provides the <code>paste()</code> and <code>paste0()</code> functions for string concatenation. These functions are straightforward and versatile.</p>
<section id="paste" class="level3">
<h3 class="anchored" data-anchor-id="paste"><code>paste()</code></h3>
<p>The <code>paste()</code> function concatenates strings with a separator specified by you.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb1-2">str1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span></span>
<span id="cb1-3">str2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World"</span></span>
<span id="cb1-4">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(str1, str2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>str1</code> and <code>str2</code> are the strings to be concatenated.</li>
<li><code>sep = " "</code> specifies a space separator between the strings.</li>
</ul>
</section>
<section id="paste0" class="level3">
<h3 class="anchored" data-anchor-id="paste0"><code>paste0()</code></h3>
<p>The <code>paste0()</code> function works like <code>paste()</code> but without any separator by default.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb3-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(str1, str2)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>paste0(str1, str2)</code> concatenates <code>str1</code> and <code>str2</code> directly without any separator.</li>
</ul>
</section>
</section>
<section id="concatenating-strings-with-stringr" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-stringr">Concatenating Strings with <code>stringr</code></h2>
<p>The <code>stringr</code> package provides a consistent and easy-to-use set of functions for string manipulation. The <code>str_c()</code> function is used for concatenation.</p>
<section id="str_c" class="level3">
<h3 class="anchored" data-anchor-id="str_c"><code>str_c()</code></h3>
<p>The <code>str_c()</code> function is similar to <code>paste()</code> and <code>paste0()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringr package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb5-5">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(str1, str2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>str_c(str1, str2, sep = " ")</code> concatenates <code>str1</code> and <code>str2</code> with a space separator.</li>
</ul>
<p>You can also concatenate multiple strings and set a different separator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb7-2">str3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span></span>
<span id="cb7-3">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(str1, str2, str3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld!"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld!"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>str_c(str1, str2, str3, sep = "")</code> concatenates <code>str1</code>, <code>str2</code>, and <code>str3</code> directly without any separator.</li>
</ul>
</section>
</section>
<section id="concatenating-strings-with-stringi" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-stringi">Concatenating Strings with <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation. The <code>stri_c()</code> function is used for concatenation.</p>
<section id="stri_c" class="level3">
<h3 class="anchored" data-anchor-id="stri_c"><code>stri_c()</code></h3>
<p>The <code>stri_c()</code> function is quite similar to <code>str_c()</code> in <code>stringr</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringi package</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb9-5">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(str1, str2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb9-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>stri_c(str1, str2, sep = " ")</code> concatenates <code>str1</code> and <code>str2</code> with a space separator.</li>
</ul>
<p>The <code>stringi</code> package also allows concatenating multiple strings with different separators:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb11-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(str1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, str2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello-World!"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello-World!"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>stri_c(str1, "-", str2, "!", sep = "")</code> concatenates <code>str1</code>, <code>-</code>, <code>str2</code>, and <code>!</code> directly without any separator.</li>
</ul>
</section>
</section>
<section id="concatenating-strings-with-glue" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-glue">Concatenating Strings with <code>glue</code></h2>
<p>The <code>glue</code> package offers a unique approach to string concatenation by allowing embedded expressions within strings.</p>
<section id="glue" class="level3">
<h3 class="anchored" data-anchor-id="glue"><code>glue()</code></h3>
<p>The <code>glue()</code> function simplifies string concatenation by using curly braces <code>{}</code> to embed R expressions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the glue package</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glue)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb13-5">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{str1} {str2}"</span>)</span>
<span id="cb13-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello World</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>glue("{str1} {str2}")</code> concatenates <code>str1</code> and <code>str2</code> with a space using curly braces for embedding.</li>
</ul>
<p>You can also include other expressions within the string:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example:</span></span>
<span id="cb15-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{str1}-{str2}!"</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello-World!"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello-World!</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>glue("{str1}-{str2}!")</code> concatenates <code>str1</code>, <code>-</code>, <code>str2</code>, and <code>!</code> by embedding them within curly braces.</li>
</ul>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>String concatenation is a vital skill in R programming. Whether you use base R functions like <code>paste()</code> and <code>paste0()</code>, or use packages like <code>stringr</code>, <code>stringi</code>, or <code>glue</code>, you can efficiently manage and manipulate text data. Each method has its advantages, and you can choose the one that best fits your needs and style.</p>
<p>Now it’s your turn to explore these functions and experiment with different scenarios to help with your own understanding.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>strings</category>
  <category>stringr</category>
  <category>stringi</category>
  <category>glue</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-12/</guid>
  <pubDate>Mon, 12 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Character Counting in R: Base R, stringr, and stringi</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-09/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Counting the occurrences of a specific character within a string is a common task in data processing and text manipulation. Whether you’re working with base R or leveraging the power of packages like <code>stringr</code> or <code>stringi</code>, R provides efficient ways to accomplish this. In this post, we’ll explore how to do this using three different methods.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-counting-characters-with-base-r" class="level2">
<h2 class="anchored" data-anchor-id="example-1-counting-characters-with-base-r">Example 1: Counting Characters with Base R</h2>
<p>Base R offers a straightforward way to count occurrences of a character using the <code>gregexpr()</code> function. This function returns the positions of the pattern in the string, which we can then count.</p>
<p><strong>Example:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the string</span></span>
<span id="cb1-2">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use gregexpr to find occurrences of 'o'</span></span>
<span id="cb1-5">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, text)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count the number of matches</span></span>
<span id="cb1-8">count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(matches) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-9">count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>gregexpr()</code> searches for a pattern (in this case, the character <code>"o"</code>) within a string and returns the positions of all matches.</li>
<li><code>unlist()</code> is used to convert the list of positions into a vector.</li>
<li><code>sum(unlist(matches) &gt; 0)</code> counts the number of positions where a match was found.</li>
</ul>
<p>This method is direct and effective, especially when you need to stick with base R functionality.</p>
</section>
<section id="example-2-counting-characters-with-stringr" class="level2">
<h2 class="anchored" data-anchor-id="example-2-counting-characters-with-stringr">Example 2: Counting Characters with <code>stringr</code></h2>
<p>The <code>stringr</code> package, part of the tidyverse, provides a more user-friendly syntax for string manipulation. The <code>str_count()</code> function is perfect for counting characters.</p>
<p><strong>Example:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringr package</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the string</span></span>
<span id="cb3-5">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use str_count to count occurrences of 'o'</span></span>
<span id="cb3-8">count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_count</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>)</span>
<span id="cb3-9">count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>str_count()</code> counts the number of times a pattern appears in a string.</li>
<li>The first argument is the string to search, and the second is the pattern to count.</li>
</ul>
<p>This method is concise and integrates well with other tidyverse functions.</p>
</section>
<section id="example-3-counting-characters-with-stringi" class="level2">
<h2 class="anchored" data-anchor-id="example-3-counting-characters-with-stringi">Example 3: Counting Characters with <code>stringi</code></h2>
<p>The <code>stringi</code> package offers comprehensive and powerful tools for string manipulation, and it’s known for its efficiency. The <code>stri_count_fixed()</code> function allows you to count fixed patterns.</p>
<p><strong>Example:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringi package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the string</span></span>
<span id="cb5-5">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use stri_count_fixed to count occurrences of 'o'</span></span>
<span id="cb5-8">count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_count_fixed</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>)</span>
<span id="cb5-9">count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>stri_count_fixed()</code> counts the exact occurrences of a fixed pattern within the string.</li>
<li>The function is optimized for performance, making it suitable for large-scale text processing tasks.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Each method has its strengths, depending on the context in which you’re working. Base R is always available, making it reliable for quick tasks. <code>stringr</code> offers simplicity and integration with tidyverse workflows, while <code>stringi</code> shines in performance and extensive functionality.</p>
<p>Feel free to try out these methods in your projects. By understanding these different approaches, you’ll be well-equipped to handle text manipulation in R, no matter the scale or complexity.</p>
<hr>
<p>Happy Coding! 🚀</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>strings</category>
  <category>stringr</category>
  <category>stringi</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-09/</guid>
  <pubDate>Fri, 09 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if a String Contains Specific Characters in R: A Comprehensive Guide with Base R, string &amp; stringi</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-08/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to another exciting blog post where we walk into the world of R programming. Today, we’re going to explore how to check if a string contains specific characters using three different approaches: base R, stringr, and stringi. Whether you’re a beginner or an experienced R user, this guide will should be of some use and provide you with some practical examples.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="base-r-approach">Base R Approach</h2>
<p>Let’s start with the base R approach. In base R, we can use the <code>grepl</code> function to check if a string contains specific characters. The syntax of the <code>grepl</code> function is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(pattern, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useBytes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>Here, <code>pattern</code> is the pattern we want to search for, and <code>x</code> is the input vector. The <code>grepl</code> function returns a logical vector indicating whether a match was found for each element of the input vector.</p>
<section id="example" class="level3">
<h3 class="anchored" data-anchor-id="example">Example</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"how"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"are"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"you"</span>)</span>
<span id="cb2-2">contains_o <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, text)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(contains_o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE  TRUE FALSE  TRUE</code></pre>
</div>
</div>
<p>In this example, we create a vector of strings and use <code>grepl</code> to check if each string contains the character “o”. The result will be a logical vector indicating which strings contain the character “o”.</p>
</section>
</section>
<section id="stringr-approach" class="level2">
<h2 class="anchored" data-anchor-id="stringr-approach">stringr Approach</h2>
<p>Moving on to the stringr package, we can use the <code>str_detect</code> function to achieve the same result in a more user-friendly manner. The syntax of the <code>str_detect</code> function is as follows:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(string, pattern)</span></code></pre></div>
<p>Here, <code>string</code> is the input vector of strings, and <code>pattern</code> is the pattern we want to search for. The <code>str_detect</code> function returns a logical vector indicating whether a match was found for each element of the input vector.</p>
<section id="example-1" class="level3">
<h3 class="anchored" data-anchor-id="example-1">Example</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb5-2">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"how"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"are"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"you"</span>)</span>
<span id="cb5-3">contains_o <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(contains_o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE  TRUE FALSE  TRUE</code></pre>
</div>
</div>
<p>In this example, we use the <code>str_detect</code> function from the stringr package to check if each string in the vector contains the character “o”. The result will be a logical vector indicating which strings contain the character “o”.</p>
</section>
</section>
<section id="stringi-approach" class="level2">
<h2 class="anchored" data-anchor-id="stringi-approach">stringi Approach</h2>
<p>Finally, let’s explore the stringi package, which provides powerful string processing capabilities. In stringi, we can use the <code>stri_detect</code> function to check if a string contains specific characters. The syntax of the <code>stri_detect</code> function is as follows:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect</span>(string, regex)</span></code></pre></div>
<p>Here, <code>string</code> is the input vector of strings, and <code>regex</code> is the regular expression pattern we want to search for. The <code>stri_detect</code> function returns a logical vector indicating whether a match was found for each element of the input vector.</p>
<section id="example-2" class="level3">
<h3 class="anchored" data-anchor-id="example-2">Example</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb8-2">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"how"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"are"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"you"</span>)</span>
<span id="cb8-3">contains_o <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regex =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(contains_o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE  TRUE FALSE  TRUE</code></pre>
</div>
</div>
<p>In this example, we use the <code>stri_detect</code> function from the stringi package to check if each string in the vector contains the character “o”. The result will be a logical vector indicating which strings contain the character “o”.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we’ve covered three different approaches to check if a string contains specific characters in R: base R, stringr, and stringi. Each approach offers its own advantages, and the choice of method depends on your specific requirements and preferences. I encourage you to try out these examples on your own and explore the vast possibilities of string manipulation in R.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>strings</category>
  <category>stringr</category>
  <category>stringi</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-08/</guid>
  <pubDate>Thu, 08 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking If a Workbook is Open Using VBA and Executing from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-07/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data analysis and automation, Excel and R are powerful tools that can work in tandem to streamline workflows. One common task is to check if a specific Excel workbook is open. This can be done using VBA (Visual Basic for Applications) and executed from R, creating a seamless bridge between these two platforms. In this blog post, we will delve into the details of this process, empowering you to incorporate this functionality into your own projects.</p>
<section id="checking-if-a-workbook-is-open-using-vba" class="level2">
<h2 class="anchored" data-anchor-id="checking-if-a-workbook-is-open-using-vba">Checking if a Workbook is Open Using VBA</h2>
<p>VBA is an excellent tool for automating tasks within Excel, and checking if a workbook is open is a straightforward process. Here’s how you can achieve this:</p>
<ol type="1">
<li><strong>Open the VBA Editor</strong>
<ul>
<li>Press <code>ALT + F11</code> to open the VBA editor.</li>
<li>In the editor, insert a new module by clicking <code>Insert</code> &gt; <code>Module</code>.</li>
</ul></li>
<li><strong>Write the VBA Function</strong>
<ul>
<li>In the new module, write the following function to check if a workbook is open:</li>
</ul></li>
</ol>
<pre class="vba"><code>Sub CheckWorkbookOpen()
    Dim resultCheck As Boolean
    Dim wb As Workbook
    Dim specific_wb As String

    On Error Resume Next
    specific_wb = InputBox("Check if this workbook is open:")

    Set wb = Application.Workbooks.Item(specific_wb)
    resultCheck = Not wb Is Nothing

    If resultCheck Then
        MsgBox "Workbook is open"
    Else
        MsgBox "Workbook is not open"
    End If
End Sub</code></pre>
<p>This function takes the name of the workbook as an argument and returns <code>True</code> if the workbook is open, and <code>False</code> otherwise.</p>
</section>
<section id="executing-the-vba-code-from-r" class="level2">
<h2 class="anchored" data-anchor-id="executing-the-vba-code-from-r">Executing the VBA Code from R</h2>
<p>R is a versatile statistical programming language, and integrating it with Excel can enhance your data processing capabilities. To execute the VBA code from R, you can use the <code>RDCOMClient</code> package, which allows R to interact with COM objects, such as Excel.</p>
<ol type="1">
<li><strong>Install RDCOMClient Package</strong>
<ul>
<li>If you haven’t already installed the <code>RDCOMClient</code> package, you can do so by running:</li>
</ul></li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>)) {</span>
<span id="cb2-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.omegahat.net/R"</span>)</span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb2-4">}</span></code></pre></div>
<ol start="2" type="1">
<li><strong>Create the R Script</strong>
<ul>
<li>Write the following R script to execute the VBA function:</li>
</ul></li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an instance of Excel application</span></span>
<span id="cb3-4">excel_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Excel visible (optional)</span></span>
<span id="cb3-7">excel_app[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visible"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the Excel workbook containing the VBA code</span></span>
<span id="cb3-10">workbook_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> path_to_your_workbook_with_vba.xlsm</span>
<span id="cb3-11">workbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Workbooks</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(workbook_path)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the macro name</span></span>
<span id="cb3-14">macro_name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CheckWorkbookOpen"</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the macro</span></span>
<span id="cb3-17">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(macro_name)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the workbook without saving</span></span>
<span id="cb3-20">workbook<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Close</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit the Excel application</span></span>
<span id="cb3-23">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span></code></pre></div>
<p>Replace <code>"path_to_your_workbook_with_vba.xlsm"</code> with the actual path to your workbook. This script creates an instance of Excel, opens the specified workbook, runs the <code>TestIsWorkbookOpen</code> macro, and then closes Excel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-08-07/what_workbook.PNG" class="img-fluid figure-img"></p>
<figcaption>Workbook Name to Check</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-08-07/open.PNG" class="img-fluid figure-img"></p>
<figcaption>Open</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-08-07/not_open.PNG" class="img-fluid figure-img"></p>
<figcaption>Not Open</figcaption>
</figure>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Combining the strengths of VBA and R can significantly enhance your automation capabilities. By following the steps detailed in this post, you can easily check if a workbook is open using VBA and execute this check from R. I encourage you to try this on your own and explore the potential of integrating these two powerful tools. Experiment with different scenarios and customize the code to fit your specific needs.</p>
<hr>
<p>Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>excel</category>
  <category>vba</category>
  <category>automation</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-07/</guid>
  <pubDate>Wed, 07 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Converting Text to Uppercase with toupper() in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-06/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings, useR! Today, we’re exploring a handy function from base R that will help with string manipulation: <code>toupper()</code>. This little function is the complement to <code>tolower()</code> <a href="https://www.spsanderson.com/steveondata/posts/2024-07-30/">which I have previously written about.</a> Let’s take a look!</p>
<section id="whats-toupper-all-about" class="level2">
<h2 class="anchored" data-anchor-id="whats-toupper-all-about">What’s <code>toupper()</code> all about?</h2>
<p>At its core, <code>toupper()</code> does one thing exceptionally well: it converts all lowercase letters in a string to uppercase. It’s straightforward, efficient, and incredibly versatile in various scenarios.</p>
<section id="syntax" class="level3">
<h3 class="anchored" data-anchor-id="syntax">Syntax:</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(x)</span></code></pre></div>
<p>Where <code>x</code> is the character vector you want to convert to uppercase.</p>
<p>Let’s dive into some practical examples to see <code>toupper()</code> in action!</p>
</section>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="example-1-basic-usage">Example 1: Basic Usage</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello, world!"</span></span>
<span id="cb2-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(text)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HELLO, WORLD!"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HELLO, WORLD!"</span></span></code></pre></div>
</div>
<p>In this example, we transform a simple greeting into all caps. Notice how <code>toupper()</code> affects only the letters, leaving punctuation and spaces untouched.</p>
</section>
<section id="example-2-working-with-vectors" class="level2">
<h2 class="anchored" data-anchor-id="example-2-working-with-vectors">Example 2: Working with Vectors</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span>)</span>
<span id="cb5-2">upper_fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(fruits)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(upper_fruits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "APPLE"  "BANANA" "CHERRY"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "APPLE" "BANANA" "CHERRY"</span></span></code></pre></div>
</div>
<p>Here, we apply <code>toupper()</code> to a vector of fruit names. It handles each element separately, converting all to uppercase.</p>
</section>
<section id="example-3-mixed-case-and-special-characters" class="level2">
<h2 class="anchored" data-anchor-id="example-3-mixed-case-and-special-characters">Example 3: Mixed Case and Special Characters</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mixed_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R is AWESOME! It's 2024 :)"</span></span>
<span id="cb8-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(mixed_text)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "R IS AWESOME! IT'S 2024 :)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "R IS AWESOME! IT'S 2024 :)"</span></span></code></pre></div>
</div>
<p>This example showcases how <code>toupper()</code> deals with mixed case text and special characters. It converts lowercase to uppercase but leaves already uppercase letters, numbers, and symbols as they are.</p>
</section>
<section id="pro-tip-combining-with-other-functions" class="level2">
<h2 class="anchored" data-anchor-id="pro-tip-combining-with-other-functions">Pro Tip: Combining with Other Functions</h2>
<p>You can easily combine <code>toupper()</code> with other string functions for more complex operations. For instance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"   r programming is fun   "</span></span>
<span id="cb11-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toupper</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trimws</span>(text))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "R PROGRAMMING IS FUN"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "R PROGRAMMING IS FUN"</span></span></code></pre></div>
</div>
<p>Here, we first trim whitespace with <code>trimws()</code>, then convert to uppercase.</p>
</section>
</section>
<section id="why-use-toupper" class="level1">
<h1>Why Use <code>toupper()</code>?</h1>
<ul>
<li>Standardizing text data</li>
<li>Preparing strings for case-insensitive comparisons</li>
<li>Creating eye-catching headers or titles in reports</li>
</ul>
<p>I encourage you to open your R console and experiment with <code>toupper()</code>! Try it on different types of strings, combine it with other functions, and see how it can enhance your text processing workflows.</p>
<p>Remember, <code>toupper()</code> is just one of many string manipulation functions in R. As you become more comfortable with it, explore other functions like <code>tolower()</code>, <code>chartr()</code>, and <code>substr()</code> to expand your text processing toolkit.</p>
<hr>
<p>Happy coding, and may your strings always be perfectly cased!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-06/</guid>
  <pubDate>Tue, 06 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Systematic Sampleing in R with Base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-05/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, we will explore systematic sampling in R using base R functions. Systematic sampling is a technique where you select every (k^{th}) element from a list or dataset. This method is straightforward and useful when you want a representative sample without the complexity of more advanced sampling techniques.</p>
<p>Let’s dive into an example to understand how it works.</p>
</section>
<section id="what-is-systematic-sampling" class="level1">
<h1>What is Systematic Sampling?</h1>
<p>Systematic sampling involves selecting every (k^{th}) element from a dataset after a random start. The value of (k) is calculated as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ak%20=%20%5Cfrac%7BN%7D%7Bn%7D%0A"></p>
<p>where (N) is the population size and (n) is the sample size.</p>
</section>
<section id="example-sampling-a-dataset" class="level1">
<h1>Example: Sampling a Dataset</h1>
<p>Imagine we have a dataset of 1000 elements, and we want to select a sample of 100 elements using systematic sampling.</p>
<ol type="1">
<li><strong>Generate a Dataset</strong></li>
</ol>
<p>First, let’s create a dataset with 1000 elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting seed for reproducibility, although with this </span></span>
<span id="cb1-2">               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># example it doesn't matter</span></span>
<span id="cb1-3">population <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span></code></pre></div>
</div>
<p>Here, <code>population</code> is a sequence of numbers from 1 to 1000.</p>
<ol start="2" type="1">
<li><strong>Define Sample Size</strong></li>
</ol>
<p>Define the number of elements you want to sample.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sample_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li><strong>Calculate Interval (k)</strong></li>
</ol>
<p>Calculate the interval (k) as the ratio of the population size to the sample size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(population) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_size</span></code></pre></div>
</div>
<ol start="4" type="1">
<li><strong>Random Start Point</strong></li>
</ol>
<p>Choose a random starting point between 1 and (k).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<ol start="5" type="1">
<li><strong>Select Every (k^{th}) Element</strong></li>
</ol>
<p>Use a sequence to select every (k^{th}) element starting from the chosen start point.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">systematic_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> population[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(start, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(population), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> k)]</span></code></pre></div>
</div>
<ol start="6" type="1">
<li><strong>Check the Sample</strong></li>
</ol>
<p>Print the first few elements of the sample to check.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(systematic_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  3 13 23 33 43 53</code></pre>
</div>
</div>
<p>Here is the complete code in one block:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Generate a Dataset</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting seed for reproducibility</span></span>
<span id="cb8-3">population <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Define Sample Size</span></span>
<span id="cb8-6">sample_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Calculate Interval k</span></span>
<span id="cb8-9">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(population) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sample_size</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Random Start Point</span></span>
<span id="cb8-12">start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 5: Select Every k-th Element</span></span>
<span id="cb8-15">systematic_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> population[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(start, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(population), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> k)]</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 6: Check the Sample</span></span>
<span id="cb8-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(systematic_sample)</span></code></pre></div>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Systematic sampling is a simple yet powerful technique. By following the steps above, you can apply it to your datasets. Experiment with different sample sizes and starting points to see how the samples vary. This method can be particularly useful when dealing with large datasets where random sampling might be cumbersome.</p>
<p>Give it a go and see how systematic sampling can be a handy tool in your data analysis toolkit!</p>
<hr>
<p>Happy Coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-05/</guid>
  <pubDate>Mon, 05 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Cluster Sampling in R: A Simple Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-02/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Cluster sampling is a useful technique when dealing with large datasets spread across different groups or clusters. It involves dividing the population into clusters, randomly selecting some clusters, and then sampling all or some members from these selected clusters. This method can save time and resources compared to simple random sampling.</p>
<p>In this post, we’ll walk through how to perform cluster sampling in R. We’ll use a sample dataset and break down the code step-by-step. By the end, you’ll have a clear understanding of how to implement cluster sampling in your projects.</p>
<section id="example-scenario" class="level2">
<h2 class="anchored" data-anchor-id="example-scenario">Example Scenario</h2>
<p>Let’s say we have a dataset of students from different schools, and we want to estimate the average test score. Sampling every student would be too time-consuming, so we’ll use cluster sampling.</p>
<section id="step-1-create-a-sample-dataset" class="level3">
<h3 class="anchored" data-anchor-id="step-1-create-a-sample-dataset">Step 1: Create a Sample Dataset</h3>
<p>First, let’s create a sample dataset to work with.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducibility</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb1-8">schools <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">student_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>,</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">school_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test_score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb1-12">)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first few rows of the dataset</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(schools)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  student_id school_id test_score
1          1         1   69.39524
2          2         1   72.69823
3          3         1   90.58708
4          4         1   75.70508
5          5         1   76.29288
6          6         1   92.15065</code></pre>
</div>
</div>
</section>
<section id="step-2-divide-the-population-into-clusters" class="level3">
<h3 class="anchored" data-anchor-id="step-2-divide-the-population-into-clusters">Step 2: Divide the Population into Clusters</h3>
<p>Our population is already divided into clusters by <code>school_id</code>. Each school represents a cluster.</p>
</section>
<section id="step-3-randomly-select-clusters" class="level3">
<h3 class="anchored" data-anchor-id="step-3-randomly-select-clusters">Step 3: Randomly Select Clusters</h3>
<p>Next, we’ll randomly select some clusters. Let’s say we want to select 3 out of the 10 schools.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of clusters to select</span></span>
<span id="cb3-2">num_clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly select clusters</span></span>
<span id="cb3-5">selected_clusters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(schools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>school_id), num_clusters)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display selected clusters</span></span>
<span id="cb3-8">selected_clusters</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1 10  2</code></pre>
</div>
</div>
</section>
<section id="step-4-sample-members-from-selected-clusters" class="level3">
<h3 class="anchored" data-anchor-id="step-4-sample-members-from-selected-clusters">Step 4: Sample Members from Selected Clusters</h3>
<p>Now, we’ll sample students from the selected schools.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the dataset to include only the selected clusters</span></span>
<span id="cb5-2">sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> schools <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(school_id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> selected_clusters)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first few rows of the sampled data</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  student_id school_id test_score
1          1         1   69.39524
2          2         1   72.69823
3          3         1   90.58708
4          4         1   75.70508
5          5         1   76.29288
6          6         1   92.15065</code></pre>
</div>
</div>
</section>
<section id="step-5-analyze-the-sampled-data" class="level3">
<h3 class="anchored" data-anchor-id="step-5-analyze-the-sampled-data">Step 5: Analyze the Sampled Data</h3>
<p>Finally, we can analyze the sampled data to estimate the average test score.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the mean test score</span></span>
<span id="cb7-2">mean_test_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sampled_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>test_score)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the mean test score</span></span>
<span id="cb7-5">mean_test_score</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 74.87889</code></pre>
</div>
</div>
</section>
</section>
<section id="explanation-of-code-blocks" class="level2">
<h2 class="anchored" data-anchor-id="explanation-of-code-blocks">Explanation of Code Blocks</h2>
<ul>
<li><strong>Step 1</strong>: We create a sample dataset with 1000 students, each belonging to one of 10 schools. Each student has a test score.</li>
<li><strong>Step 2</strong>: The <code>school_id</code> column naturally divides our dataset into clusters.</li>
<li><strong>Step 3</strong>: We randomly select 3 out of the 10 schools using the <code>sample</code> function.</li>
<li><strong>Step 4</strong>: We filter the dataset to include only students from the selected schools.</li>
<li><strong>Step 5</strong>: We calculate the mean test score of the sampled students to estimate the overall average.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Cluster sampling is a powerful method for efficiently sampling large populations. By dividing the population into clusters and sampling within those clusters, you can obtain reliable estimates with less effort.</p>
<p>Feel free to try this method on your own datasets. Experiment with different numbers of clusters and sample sizes to see how it affects your results.</p>
<hr>
<p>Happy coding!</p>
<p>If you have any questions or need further clarification, drop a comment below!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-02/</guid>
  <pubDate>Fri, 02 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Automate Your Blog Workflow with a Custom R Function: Creating QMD Files</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-08-01/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As a blogger who uses R for content creation, I’ve found it incredibly useful to automate some of the repetitive tasks. One such task is creating Quarto Markdown (QMD) files for new blog posts. To simplify this, I’ve added a custom R function that not only creates the necessary file structure. Let’s take a look at this function and how you can integrate it into your own workflow.</p>
</section>
<section id="the-function" class="level1">
<h1>The Function</h1>
<p>Here’s the function I’ve been using:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">create_qmd_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index.qmd"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>(), </span>
<span id="cb1-2">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">categories =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtip"</span>)) {</span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the base path</span></span>
<span id="cb1-4">  base_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>(),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/posts"</span>)</span>
<span id="cb1-5">  </span>
<span id="cb1-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert date to string and create the full directory path</span></span>
<span id="cb1-7">  date_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(date)</span>
<span id="cb1-8">  full_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(base_path, date_str)</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the directory if it doesn't exist</span></span>
<span id="cb1-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.exists</span>(full_path)) {</span>
<span id="cb1-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(full_path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">recursive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Directory created: "</span>, full_path)</span>
<span id="cb1-14">  }</span>
<span id="cb1-15">  </span>
<span id="cb1-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the full file path</span></span>
<span id="cb1-17">  file_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(full_path, filename)</span>
<span id="cb1-18">  </span>
<span id="cb1-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the content to be written in the file</span></span>
<span id="cb1-20">  content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb1-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title: "'</span>, title, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author: "Steven P. Sanderson II, MPH"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date: "'</span>, date_str, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"categories: ["</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(categories, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toc: TRUE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;script src="https://giscus.app/client.js"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-repo="Yours_Here"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-repo-id="Yours_Here"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-category="Comments"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-32">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-category-id="Yours_Here"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-33">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-mapping="url"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-34">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-strict="0"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-reactions-enabled="1"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-emit-metadata="0"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-input-position="top"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-theme="dark"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-lang="en"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        data-loading="lazy"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        crossorigin="anonymous"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'        async&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;/script&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb1-44">  )</span>
<span id="cb1-45">  </span>
<span id="cb1-46">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write the content to the file</span></span>
<span id="cb1-47">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(content, file_path)</span>
<span id="cb1-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"QMD file created: "</span>, file_path)</span>
<span id="cb1-49">}</span></code></pre></div>
<section id="how-it-works" class="level2">
<h2 class="anchored" data-anchor-id="how-it-works">How It Works</h2>
<ol type="1">
<li><p><strong>Setting the Base Path</strong>: The function starts by defining the base path where blog posts will be stored, appending <code>"/posts"</code> to the current working directory. This centralizes all posts in one location.</p></li>
<li><p><strong>Creating Directories</strong>: It then converts the date to a string and uses it to create a directory path. If this directory doesn’t exist, the function creates it. This helps in organizing posts by date.</p></li>
<li><p><strong>File Path Definition</strong>: The function then defines the full path for the QMD file, defaulting the filename to “index.qmd” if none is provided.</p></li>
<li><p><strong>Content Creation</strong>: The main content for the QMD file is generated next. This includes a YAML front matter section with metadata like title, author, date, and categories. The function also adds a script for Giscus, which handles the comments section.</p></li>
<li><p><strong>File Writing</strong>: Finally, the function writes the generated content to the specified file path and informs you that the file has been created.</p></li>
</ol>
</section>
<section id="automating-with-.rprofile" class="level2">
<h2 class="anchored" data-anchor-id="automating-with-.rprofile">Automating with .Rprofile</h2>
<p>To make this function available every time you start your project, you can use the <code>.Rprofile</code> file. This file is sourced whenever you start a new R session, making it perfect for setting up your environment.</p>
<p>Here’s the relevant <code>.Rprofile</code> setup:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>(),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/create_qmd_file.R"</span>))</span></code></pre></div>
<p>By sourcing the <code>create_qmd_file.R</code> script, the function is loaded automatically, so you don’t have to manually source it each time.</p>
</section>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give It a Try!</h1>
<p>This function has saved me a lot of time, and I encourage you to try something similar if you’re managing content or projects with R. You can customize the function to suit your specific needs, whether that’s adjusting the metadata, changing the file structure, or adding other automated features. It’s a great way to streamline your workflow and focus more on the creative aspects of your work.</p>
<p>If you have any questions or run into any issues, feel free to reach out. Happy coding!</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>automation</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-08-01/</guid>
  <pubDate>Thu, 01 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to List All Open Workbooks Using VBA and Call It from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-31/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R useRs! Today, we’re going to discuss a fascinating topic that bridges the gap between VBA (Visual Basic for Applications) and R. We’ll explore how to get a list of all open workbooks in Excel using VBA and then call this VBA code from R. This can be particularly useful if you’re working with multiple Excel files and need to manage them efficiently from R.</p>
</section>
<section id="prerequisites" class="level1">
<h1>Prerequisites</h1>
<section id="step-1-writing-the-vba-code" class="level2">
<h2 class="anchored" data-anchor-id="step-1-writing-the-vba-code">Step 1: Writing the VBA Code</h2>
<p>First, let’s write a simple VBA macro to list all open workbooks. Open Excel, press Alt + F11 to open the VBA editor, and insert a new module. Here’s the VBA code:</p>
<pre class="vba"><code>Sub ListAllOpenWorkbooks()
    Dim wb As Workbook
    Dim wbNames As String
    wbNames = "Open Workbooks:" &amp; vbCrLf
    
    For Each wb In Application.Workbooks
        wbNames = wbNames &amp; wb.Name &amp; vbCrLf
    Next wb
    
    MsgBox wbNames
End Sub</code></pre>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation:</h3>
<ul>
<li>Sub ListAllOpenWorkbooks(): This starts our macro.</li>
<li>Dim wb As Workbook: Declares a variable wb to represent each workbook.</li>
<li>Dim wbNames As String: Declares a string variable to store the names of open workbooks.</li>
<li>For Each wb In Application.Workbooks: Loops through each open workbook.</li>
<li>wbNames = wbNames &amp; wb.Name &amp; vbCrLf: Appends the name of each workbook to the wbNames string.</li>
<li>MsgBox wbNames: Displays the names of all open workbooks in a message box.</li>
</ul>
</section>
</section>
<section id="step-2-saving-the-vba-macro" class="level2">
<h2 class="anchored" data-anchor-id="step-2-saving-the-vba-macro">Step 2: Saving the VBA Macro</h2>
<p>Save your VBA macro by clicking File &gt; Save. Make sure to save your Excel file as a macro-enabled workbook (.xlsm).</p>
</section>
<section id="step-3-calling-the-vba-macro-from-r" class="level2">
<h2 class="anchored" data-anchor-id="step-3-calling-the-vba-macro-from-r">Step 3: Calling the VBA Macro from R</h2>
<p>Now, let’s move to R. We’ll use the RDCOMClient package to interact with Excel and call our VBA macro. If you haven’t installed this package yet, you can do so using:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.omegahat.net/R"</span>)</span></code></pre></div>
<p>Here’s the R code to call our VBA macro:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a COM object to interact with Excel</span></span>
<span id="cb3-4">excel_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Excel visible (optional)</span></span>
<span id="cb3-7">excel_app[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visible"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the workbook containing the VBA macro</span></span>
<span id="cb3-10">workbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excel_app[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Workbooks"</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">path</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">to</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">your</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">workbook.xlsm"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the VBA macro</span></span>
<span id="cb3-13">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ListAllOpenWorkbooks"</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the workbook without saving</span></span>
<span id="cb3-16">workbook<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Close</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit Excel</span></span>
<span id="cb3-19">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span></code></pre></div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation:</h3>
<ul>
<li>library(RDCOMClient): Loads the RDCOMClient package.</li>
<li>COMCreate(“Excel.Application”): Creates a COM object to interact with Excel.</li>
<li>excel_app[[“Visible”]] &lt;- TRUE: Makes Excel visible (optional).</li>
<li>excel_app[[“Workbooks”]]$Open(“C:.xlsm”): Opens the workbook containing the VBA macro. Replace “C:\path\to\your\workbook.xlsm” with the actual path to your workbook.</li>
<li>excel_app$Run(“ListAllOpenWorkbooks”): Runs the VBA macro.</li>
<li>workbook$Close(FALSE): Closes the workbook without saving changes.</li>
<li>excel_app$Quit(): Quits Excel.</li>
</ul>
<p>Here are some sample outputs for me:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-31/Capture.PNG" class="img-fluid figure-img"></p>
<figcaption>Many Open Workbooks</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-31/Capture_2.PNG" class="img-fluid figure-img"></p>
<figcaption>Two Open Workbook</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>And there you have it! You’ve successfully listed all open workbooks using VBA and called this macro from R. This approach can be incredibly powerful for automating tasks that involve both R and Excel. Give it a try and see how what happens!</p>
<p>Feel free to experiment with the code and adapt it to your needs.</p>
<hr>
<p>Happy coding! 🚀</p>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-31/</guid>
  <pubDate>Wed, 31 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering String Conversion to Lowercase in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-30/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data analysis and manipulation, handling text data is a common task. One of the essential operations you might need to perform is converting strings to lowercase. In R, this is easily done using the <code>tolower()</code> function. Let’s explore how to convert your text data into lowercase, along with practical examples and a real-world use case.</p>
</section>
<section id="the-tolower-function" class="level1">
<h1>The <code>tolower()</code> Function</h1>
<p>The <code>tolower()</code> function converts all characters in a string to lowercase. Here’s the basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(string)</span></code></pre></div>
<ul>
<li><code>string</code>: This is the input string or character vector that you want to convert to lowercase.</li>
</ul>
</section>
<section id="why-convert-to-lowercase" class="level1">
<h1>Why Convert to Lowercase?</h1>
<p>Converting strings to lowercase is useful for standardizing text data. It helps in comparison and searching, ensuring consistency, especially when dealing with user inputs, names, or categories.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-converting-a-single-string" class="level2">
<h2 class="anchored" data-anchor-id="example-1-converting-a-single-string">Example 1: Converting a Single String</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World!"</span></span>
<span id="cb2-2">lower_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(text)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lower_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "hello world!"</code></pre>
</div>
</div>
</section>
<section id="example-2-converting-a-vector-of-strings" class="level2">
<h2 class="anchored" data-anchor-id="example-2-converting-a-vector-of-strings">Example 2: Converting a Vector of Strings</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span>)</span>
<span id="cb4-2">lower_fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(fruits)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lower_fruits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"  "banana" "cherry"</code></pre>
</div>
</div>
</section>
<section id="example-3-handling-mixed-case-strings" class="level2">
<h2 class="anchored" data-anchor-id="example-3-handling-mixed-case-strings">Example 3: Handling Mixed Case Strings</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mixed_case <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ThiS Is A MiXeD CaSe StrIng."</span></span>
<span id="cb6-2">lower_case <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(mixed_case)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lower_case)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "this is a mixed case string."</code></pre>
</div>
</div>
</section>
<section id="practical-use-checking-users-favorite-color" class="level2">
<h2 class="anchored" data-anchor-id="practical-use-checking-users-favorite-color">Practical Use: Checking User’s Favorite Color</h2>
<p>A practical application of converting strings to lowercase is in user input validation. Let’s consider a simple function that checks a user’s favorite color and responds accordingly. By converting the input to lowercase, we can ensure that the function handles different cases uniformly.</p>
<p>Here’s the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check user's favorite color</span></span>
<span id="cb8-2">check_favorite_color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(color) {</span>
<span id="cb8-3">  color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(color)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert input to lowercase</span></span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) {</span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue is my favorite color!"</span>)</span>
<span id="cb8-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) {</span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red is not a good choice!"</span>)</span>
<span id="cb8-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"That's a nice color too!"</span>)</span>
<span id="cb8-10">  }</span>
<span id="cb8-11">}</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb8-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_favorite_color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLUE"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works with uppercase</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Blue is my favorite color!"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_favorite_color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red"</span>))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works with mixed case</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Red is not a good choice!"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_favorite_color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works with lowercase</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "That's a nice color too!"</code></pre>
</div>
</div>
<p>In this function, we use <code>tolower()</code> to ensure that the input is in lowercase, making it easier to compare against predefined color choices. This approach helps handle inputs consistently, regardless of how the user types them.</p>
<section id="understanding-the-code" class="level3">
<h3 class="anchored" data-anchor-id="understanding-the-code">Understanding the Code</h3>
<p>The <code>tolower()</code> function converts uppercase characters to lowercase in a given string or vector of strings. It only affects alphabetic characters, leaving other characters unchanged. This makes it an essential tool for standardizing text data.</p>
</section>
</section>
</section>
<section id="try-it-out" class="level1">
<h1>Try It Out</h1>
<p>Now it’s your turn! Experiment with different strings or scenarios where converting to lowercase can simplify your code and improve data consistency. Whether it’s for user input validation, data cleaning, or any other purpose, mastering this simple function can be incredibly useful in your R programming journey.</p>
<p>Feel free to share your experiences or any interesting use cases you’ve come across.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-30/</guid>
  <pubDate>Tue, 30 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Stratified Sampling in R: A Practical Guide with Base R and dplyr</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-29/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Stratified sampling is a technique used to ensure that different subgroups (strata) within a population are represented in a sample. This method is particularly useful when certain strata are underrepresented in a simple random sample. In this post, we’ll explore how to perform stratified sampling in R using both base R and the <code>dplyr</code> package. We’ll walk through examples and explain the code, so you can try these techniques on your own data.</p>
</section>
<section id="what-is-stratified-sampling" class="level1">
<h1>What is Stratified Sampling?</h1>
<p>In stratified sampling, the population is divided into different strata based on a specific characteristic (e.g., age, gender, income level). A random sample is then taken from each stratum. This method ensures that the sample represents the population accurately, especially when the strata are significantly different in size or characteristics.</p>
<section id="stratified-sampling-with-base-r" class="level2">
<h2 class="anchored" data-anchor-id="stratified-sampling-with-base-r">Stratified Sampling with Base R</h2>
<p>Let’s start with an example using base R. Suppose we have a dataset with information about individuals, including their gender and income. We want to sample a specific number of individuals from each gender group.</p>
<p>Here’s how we can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb1-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gender =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the first few rows of the data</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Gender   Income
1  1   Male 52533.19
2  2   Male 49714.53
3  3   Male 49571.30
4  4 Female 63686.02
5  5   Male 47742.29
6  6 Female 65164.71</code></pre>
</div>
</div>
<p>In this dataset, we have a column for <code>Gender</code> and another for <code>Income</code>. Let’s say we want to sample 10 males and 10 females.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stratified sampling function</span></span>
<span id="cb3-2">stratified_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, strat_column, size_per_stratum) {</span>
<span id="cb3-3">  strata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(data[[strat_column]])</span>
<span id="cb3-4">  sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(strata, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(stratum) {</span>
<span id="cb3-5">    subset_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[data[[strat_column]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> stratum, ]</span>
<span id="cb3-6">    subset_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(subset_data), size_per_stratum), ]</span>
<span id="cb3-7">  }))</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(sampled_data)</span>
<span id="cb3-9">}</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform stratified sampling</span></span>
<span id="cb3-12">sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stratified_sample</span>(data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the sampled data</span></span>
<span id="cb3-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sampled_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Gender)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Female   Male 
    10     10 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID Gender   Income
45   45   Male 63606.52
69   69   Male 41502.96
83   83   Male 50412.33
29   29   Male 51813.03
49   49   Male 47643.00
100 100   Male 37129.70</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li>We first create a function <code>stratified_sample</code> that takes the data, the column to stratify by, and the number of samples per stratum.</li>
<li>The function identifies unique strata, then samples the specified number of rows from each stratum.</li>
<li>The result is a combined dataset with samples from each group.</li>
</ul>
</section>
<section id="stratified-sampling-with-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="stratified-sampling-with-dplyr">Stratified Sampling with <code>dplyr</code></h2>
<section id="using-sample_n" class="level3">
<h3 class="anchored" data-anchor-id="using-sample_n">Using <code>sample_n</code></h3>
<p>The <code>dplyr</code> package makes data manipulation straightforward and efficient. Here’s how to do stratified sampling using <code>dplyr</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stratified sampling with sample_n()</span></span>
<span id="cb7-4">sampled_data_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Gender) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the sampled data</span></span>
<span id="cb7-9">sampled_data_n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Gender)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
# Groups:   Gender [2]
  Gender     n
  &lt;chr&gt;  &lt;int&gt;
1 Female    10
2 Male      10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data_n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
# Groups:   Gender [1]
     ID Gender Income
  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;
1    81 Female 64446.
2     6 Female 65165.
3     8 Female 55846.
4    22 Female 26908.
5    98 Female 56879.
6    11 Female 53796.</code></pre>
</div>
</div>
<p>In this approach:</p>
<ul>
<li>We use <code>group_by()</code> to group the data by the <code>Gender</code> column.</li>
<li><code>sample_n()</code> is used to take 10 samples from each group.</li>
<li><code>count()</code> helps us verify the number of samples from each group.</li>
</ul>
</section>
<section id="using-sample_frac-for-proportional-sampling" class="level3">
<h3 class="anchored" data-anchor-id="using-sample_frac-for-proportional-sampling">Using <code>sample_frac()</code> for Proportional Sampling</h3>
<p>If you want to sample a proportion of each stratum, you can use the <code>sample_frac()</code> function. For example, if you want to sample 20% of each gender group:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stratified sampling with sample_frac()</span></span>
<span id="cb11-2">sampled_data_frac <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Gender) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_frac</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the sampled data</span></span>
<span id="cb11-7">sampled_data_frac <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Gender)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 2
# Groups:   Gender [2]
  Gender     n
  &lt;chr&gt;  &lt;int&gt;
1 Female     9
2 Male      11</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data_frac)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
# Groups:   Gender [1]
     ID Gender Income
  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;
1    71 Female 51176.
2    92 Female 47378.
3    13 Female 46668.
4    48 Female 65326.
5    42 Female 55484.
6    76 Female 43481.</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>sample_frac()</code> is used to take 20% of the rows from each group.</li>
<li>This is useful when you want the sample size to be proportional to the size of each stratum.</li>
</ul>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Stratified sampling is a powerful technique to ensure representation from all subgroups in your sample. Whether you’re using base R or <code>dplyr</code>, the process is straightforward and allows you to draw balanced samples from your data.</p>
<p>Feel free to try these methods on your data! Experimenting with different sizes and strata can help you understand how stratified sampling affects your analyses. Don’t hesitate to dive into the code and see how you can adapt it to your needs.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>dplyr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-29/</guid>
  <pubDate>Mon, 29 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating Summary Tables in R with tidyquant and dplyr</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-26/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Creating summary tables is a key part of data analysis, allowing you to see trends and patterns in your data. In this post, we’ll explore how to create these tables using <strong>tidyquant</strong> and <strong>dplyr</strong> in R. These packages make it easy to manipulate and summarize your data.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-tidyquant-for-summary-tables" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyquant-for-summary-tables">Using tidyquant for Summary Tables</h2>
<p><strong>tidyquant</strong> is a versatile package that extends the tidyverse for financial and time series analysis. It simplifies working with data by integrating tidy principles.</p>
<section id="example-calculating-average-price-by-month" class="level3">
<h3 class="anchored" data-anchor-id="example-calculating-average-price-by-month">Example: Calculating Average Price by Month</h3>
<p>Here’s an example of how to calculate the average price by month using tidyquant:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyquant)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data: Daily stock prices</span></span>
<span id="cb1-6">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-06-30'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">181</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a summary table with average closing price by month</span></span>
<span id="cb1-12">summary_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor_date</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_table</span>(</span>
<span id="cb1-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.rows =</span> month, </span>
<span id="cb1-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.values =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-17">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"avg_price"</span>))</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  date       avg_price
  &lt;date&gt;         &lt;dbl&gt;
1 2023-01-01      149.
2 2023-02-01      162.
3 2023-03-01      151.
4 2023-04-01      151.
5 2023-05-01      145.
6 2023-06-01      149.</code></pre>
</div>
</div>
<p>In this example:</p>
<ol type="1">
<li><strong>tidyquant</strong> and <strong>tibble</strong> are loaded to handle data manipulation.</li>
<li>We create a sample dataset with daily stock prices.</li>
<li>The <code>mutate</code> function adds a new column <code>month</code>, which extracts the month from each date.</li>
<li><code>pivot_table</code> calculates the average price for each month.</li>
<li>Finally, we rename the columns for clarity.</li>
</ol>
</section>
</section>
<section id="using-dplyr-for-summary-tables" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr-for-summary-tables">Using dplyr for Summary Tables</h2>
<p><strong>dplyr</strong> is a core tidyverse package known for its powerful data manipulation functions. It helps streamline the process of filtering, summarizing, and mutating data.</p>
<section id="example-calculating-average-closing-price-by-month" class="level3">
<h3 class="anchored" data-anchor-id="example-calculating-average-closing-price-by-month">Example: Calculating Average Closing Price by Month</h3>
<p>Here’s a similar example using dplyr:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data: Daily stock prices</span></span>
<span id="cb3-6">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-06-30'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>),</span>
<span id="cb3-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">181</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb3-9">)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a summary table with average closing price by month</span></span>
<span id="cb3-12">summary_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor_date</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(month) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg_close =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price))</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  month      avg_close
  &lt;date&gt;         &lt;dbl&gt;
1 2023-01-01      149.
2 2023-02-01      140.
3 2023-03-01      147.
4 2023-04-01      146.
5 2023-05-01      147.
6 2023-06-01      151.</code></pre>
</div>
</div>
<p>In this dplyr example:</p>
<ol type="1">
<li>We load <strong>dplyr</strong> and <strong>lubridate</strong> for data manipulation and date handling.</li>
<li>The dataset creation process is the same.</li>
<li>The <code>mutate</code> function is used to add a <code>month</code> column.</li>
<li>We group the data by month using <code>group_by</code> and then calculate the average closing price for each group using <code>summarise</code>.</li>
</ol>
</section>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Using packages like <strong>tidyquant</strong> and <strong>dplyr</strong> simplifies data analysis tasks, making it easier to work with large datasets. These examples show just one way to create summary tables; there are many other functions and methods to explore. Give these examples a try with your own data and see how you can summarize and gain insights from your datasets.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-26/</guid>
  <pubDate>Fri, 26 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Wildcard Searches in R with grep()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-25/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In R, finding patterns in text is a common task, and one of the most powerful functions to do this is <code>grep()</code>. This function is used to search for patterns in strings, allowing you to locate elements that match a specific pattern. Today, we’ll explore how to use wildcard characters with <code>grep()</code> to enhance your string searching capabilities. Let’s dive in!</p>
<section id="understanding-grep" class="level2">
<h2 class="anchored" data-anchor-id="understanding-grep">Understanding <code>grep()</code></h2>
<p>At its core, <code>grep()</code> is a function that searches for matches to a pattern (regular expression) within a vector of strings. It returns the indices of the elements that contain the pattern. Here’s a basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(pattern, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><strong>pattern</strong>: A character string containing a regular expression.</li>
<li><strong>x</strong>: A character vector where the search is performed.</li>
<li><strong>ignore.case</strong>: If TRUE, the search will be case-insensitive.</li>
<li><strong>value</strong>: If TRUE, <code>grep()</code> returns the matching elements instead of their indices.</li>
</ul>
<section id="using-wildcards-in-grep" class="level3">
<h3 class="anchored" data-anchor-id="using-wildcards-in-grep">Using Wildcards in <code>grep()</code></h3>
<p>Wildcard characters are incredibly useful in searching for patterns that may not be exactly known. In regular expressions, which <code>grep()</code> uses, wildcards are represented in specific ways:</p>
<ul>
<li><strong><code>^</code></strong>: Asserts the start of a string.</li>
<li><strong><code>$</code></strong>: Asserts the end of a string.</li>
<li><strong><code>.</code></strong>: Matches any single character.</li>
<li><strong><code>.*</code></strong>: Matches any number of any characters (including none).</li>
</ul>
<p>Let’s look at some practical examples to see these in action!</p>
</section>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="strings-that-start-with-a-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strings-that-start-with-a-pattern">Strings that Start with a Pattern</h2>
<p>To find strings that start with a specific pattern, use <code>^</code> at the beginning of your pattern. For instance, if you’re looking for words starting with “data”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataframe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analytics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visualization"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^data"</span>, words)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
</div>
<p>This code will return the indices of “data”, “dataframe”, and “database” because they all start with “data”. If you set <code>value = TRUE</code>, it will return the matching elements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^data"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data"      "dataframe" "database" </code></pre>
</div>
</div>
</section>
<section id="strings-that-end-with-a-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strings-that-end-with-a-pattern">Strings that End with a Pattern</h2>
<p>To find strings ending with a certain pattern, use <code>$</code> at the end of your pattern. For example, to find words ending with “base”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base$"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "database"</code></pre>
</div>
</div>
</section>
<section id="strings-that-contain-a-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strings-that-contain-a-pattern">Strings that Contain a Pattern</h2>
<p>To find strings containing a pattern anywhere within them, use the pattern directly. For example, to find words containing “viz”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visualization"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analyze"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predict"</span>)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vis"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "visualization"</code></pre>
</div>
</div>
</section>
<section id="combining-patterns-with-." class="level2">
<h2 class="anchored" data-anchor-id="combining-patterns-with-.">Combining Patterns with <code>.*</code></h2>
<p>The combination of <code>.*</code> can be used to match any number of characters, making it useful for finding patterns within strings. For instance, to find words containing “a” followed by “z”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a.*z"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "visualization" "analyze"      </code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn! 🚀</h1>
<p>Regular expressions can seem intimidating at first, but with a bit of practice, they become a powerful tool in your R toolkit. I encourage you to play around with different patterns and see what you can find in your datasets. Try searching for different starting and ending patterns, or look for specific sequences within your strings. The <code>grep()</code> function is incredibly versatile, and mastering it can save you a lot of time when working with text data.</p>
<p>Feel free to share your discoveries or any interesting patterns you find.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-25/</guid>
  <pubDate>Thu, 25 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting the Workbook Name in VBA and Calling It from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-24/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with Excel, it’s often useful to know the name of the workbook you’re working in, especially if you’re managing multiple files. Today, we’ll look at how to retrieve the workbook name using VBA (Visual Basic for Applications) and then call this VBA code from R. This post will walk you through the steps with clear examples and explanations. Let’s get to it!</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="getting-the-workbook-name-using-vba" class="level2">
<h2 class="anchored" data-anchor-id="getting-the-workbook-name-using-vba">Getting the Workbook Name Using VBA</h2>
<p>First, we’ll start with a simple VBA script to get the workbook name. VBA is a powerful tool integrated into Microsoft Office applications, allowing you to automate tasks and interact with various elements in your documents.</p>
<p>Here’s a basic example of VBA code that retrieves the name of the active workbook:</p>
<pre class="vba"><code>Sub GetWorkbookName()
    Dim wbName As String
    wbName = ThisWorkbook.Name
    MsgBox "The name of the active workbook is: " &amp; wbName
End Sub</code></pre>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>Sub GetWorkbookName()</strong>: This line defines a new subroutine named <code>GetWorkbookName</code>. A subroutine in VBA is a block of code that performs a specific task.</li>
<li><strong>Dim wbName As String</strong>: This line declares a variable <code>wbName</code> that will hold the workbook’s name as a string.</li>
<li><strong>wbName = ThisWorkbook.Name</strong>: Here, we’re assigning the name of the active workbook (the one where this VBA code is being run) to the <code>wbName</code> variable.</li>
<li><strong>MsgBox “The name of the active workbook is:” &amp; wbName</strong>: Finally, we use a message box to display the workbook name.</li>
</ol>
</section>
<section id="calling-vba-code-from-r" class="level2">
<h2 class="anchored" data-anchor-id="calling-vba-code-from-r">Calling VBA Code from R</h2>
<p>Now that we have our VBA macro, the next step is to call it from R. This is particularly useful if you’re integrating Excel operations into your R workflows.</p>
<p>We’ll use the <code>RDCOMClient</code> package in R, which allows us to interact with COM (Component Object Model) objects, such as Excel. If you haven’t installed this package, you can do so with:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>)</span></code></pre></div>
<p>Here’s a simple R script to call our VBA subroutine:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an instance of the Excel application</span></span>
<span id="cb3-4">excel_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># File Path</span></span>
<span id="cb3-7">f_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/path_to/workbook_name.xlsm"</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the workbook (replace 'f_path' with the actual path)</span></span>
<span id="cb3-10">workbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Workbooks</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(f_path)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the VBA macro</span></span>
<span id="cb3-13">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetWorkbookName"</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the workbook without saving changes</span></span>
<span id="cb3-16">workbook<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Close</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit Excel</span></span>
<span id="cb3-19">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Release the object</span></span>
<span id="cb3-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(excel_app)</span></code></pre></div>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>library(RDCOMClient)</strong>: This line loads the <code>RDCOMClient</code> package.</li>
<li><strong>COMCreate(“Excel.Application”)</strong>: We create an instance of the Excel application.</li>
<li><strong>workbook &lt;- excel_app<img src="https://latex.codecogs.com/png.latex?Workbooks()">Open(“f_path”)</strong>: This line opens the specified workbook. Replace <code>"f_path"</code> with the path to your actual Excel file.</li>
<li><strong>excel_app$Run(“GetWorkbookName”)</strong>: Here, we call the VBA subroutine <code>GetWorkbookName</code> to display the workbook’s name.</li>
<li><strong>workbook$Close(FALSE)</strong>: We close the workbook without saving any changes.</li>
<li><strong>excel_app$Quit()</strong>: This closes the Excel application.</li>
<li><strong>rm(excel_app)</strong>: Finally, we release the Excel application object to free up resources.</li>
</ol>
<p>Here is a picture of the message:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-24/Capture.PNG" class="img-fluid figure-img"></p>
<figcaption>VBA Workbook Name</figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>With these simple steps, you’ve learned how to retrieve the name of an Excel workbook using VBA and how to call this VBA code from R. This combination can be quite powerful, especially when automating data processing tasks that involve both Excel and R.</p>
<p>Feel free to try this on your own. Experiment with different VBA scripts and see how you can integrate them into your R workflows. It’s a great way to streamline your work and make the most of both tools.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-24/</guid>
  <pubDate>Wed, 24 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking if a String Contains Multiple Substrings in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-23/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R programmers! Today, we’re looking at a practical topic that often comes up when dealing with text data: how to check if a string contains multiple substrings. We’ll cover how to do this in base R, as well as using the <code>stringr</code> and <code>stringi</code> packages. Each approach has its own advantages, so let’s explore them together.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="base-r-approach">Base R Approach</h2>
<p>First, let’s start with base R. Suppose we have a string and we want to check if it contains both “apple” and “banana”. Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our main string</span></span>
<span id="cb1-2">main_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have an apple and a banana."</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substrings to check</span></span>
<span id="cb1-5">substrings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all substrings are in the main string</span></span>
<span id="cb1-8">contains_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(substrings, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(x, main_string)))</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output the result</span></span>
<span id="cb1-11">contains_all</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(substrings, grepl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> main_string)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> apple banana 
  TRUE   TRUE </code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<ol type="1">
<li><strong><code>main_string</code></strong>: This is the string we are checking.</li>
<li><strong><code>substrings</code></strong>: A vector containing the substrings we are looking for.</li>
<li><strong><code>sapply(substrings, function(x) grepl(x, main_string))</code></strong>: We use <code>sapply</code> to apply <code>grepl</code> (which checks if a pattern is found in a string) to each substring. This returns a logical vector indicating if each substring is present.</li>
<li><strong><code>all()</code></strong>: This function checks if all values in the logical vector are <code>TRUE</code>.</li>
</ol>
<p>By combining these functions, we can efficiently check if all the substrings are present in our main string.</p>
</section>
</section>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using <code>stringr</code></h2>
<p>The <code>stringr</code> package provides a set of functions designed to make string manipulation easier and more intuitive. Here’s how we can use it to achieve the same goal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringr package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our main string</span></span>
<span id="cb5-5">main_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have an apple and a banana."</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substrings to check</span></span>
<span id="cb5-8">substrings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all substrings are in the main string</span></span>
<span id="cb5-11">contains_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(main_string, substrings))</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output the result</span></span>
<span id="cb5-14">contains_all</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(main_string, substrings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE TRUE</code></pre>
</div>
</div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation</h3>
<ol type="1">
<li><strong><code>library(stringr)</code></strong>: Loads the <code>stringr</code> package.</li>
<li><strong><code>str_detect(main_string, substrings)</code></strong>: The <code>str_detect</code> function checks if each pattern in <code>substrings</code> is found in <code>main_string</code>. It returns a logical vector.</li>
<li><strong><code>all()</code></strong>: As before, <code>all</code> checks if all values in the logical vector are <code>TRUE</code>.</li>
</ol>
<p>The <code>stringr</code> package simplifies the syntax and makes the code more readable.</p>
</section>
</section>
<section id="using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="using-stringi">Using <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation. It offers a highly efficient way to handle strings. Here’s how we can use <code>stringi</code> to check for multiple substrings:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringi package</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our main string</span></span>
<span id="cb9-5">main_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have an apple and a banana."</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substrings to check</span></span>
<span id="cb9-8">substrings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all substrings are in the main string</span></span>
<span id="cb9-11">contains_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect_fixed</span>(main_string, substrings))</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output the result</span></span>
<span id="cb9-14">contains_all</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect_fixed</span>(main_string, substrings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE TRUE</code></pre>
</div>
</div>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation</h3>
<ol type="1">
<li><strong><code>library(stringi)</code></strong>: Loads the <code>stringi</code> package.</li>
<li><strong><code>stri_detect_fixed(main_string, substrings)</code></strong>: The <code>stri_detect_fixed</code> function checks if each fixed pattern in <code>substrings</code> is found in <code>main_string</code>. This function is optimized for fixed patterns and is very fast.</li>
<li><strong><code>all()</code></strong>: Again, we use <code>all</code> to check if all values in the logical vector are <code>TRUE</code>.</li>
</ol>
<p><code>stringi</code> provides highly optimized functions that can be very useful for handling large datasets or performance-critical applications.</p>
</section>
</section>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Now that we’ve walked through the different methods to check if a string contains multiple substrings, I encourage you to try these approaches on your own. Experiment with different strings and substrings to get a feel for how these functions work. Understanding these techniques can greatly enhance your text data manipulation skills in R.</p>
<p>Happy coding, and feel free to share your experiences and any questions you might have in the comments!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-23/</guid>
  <pubDate>Tue, 23 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Concatenate Strings in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-22/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, R users! Today, we’re going to talk about a fundamental yet essential aspect of data manipulation: concatenating strings. String concatenation is the process of joining two or more strings together. It doesn’t matter if you’re working with text data, creating labels, or generating dynamic outputs, knowing how to concatenate strings efficiently is a must. We’ll explore how to do this using base R, the <code>stringr</code> package, and the <code>stringi</code> package. Let’s get started!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="concatenating-strings-in-base-r" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-in-base-r">Concatenating Strings in Base R</h2>
<p>Base R provides a straightforward way to concatenate strings using the <code>paste()</code> and <code>paste0()</code> functions. Here’s how you can use them:</p>
<section id="using-paste" class="level3">
<h3 class="anchored" data-anchor-id="using-paste">Using <code>paste()</code></h3>
<p>The <code>paste()</code> function combines strings and adds a separator (default is a space).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb1-2">string1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span></span>
<span id="cb1-3">string2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World"</span></span>
<span id="cb1-4">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(string1, string2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p>In this example, <code>paste(string1, string2)</code> joins “Hello” and “World” with a space in between.</p>
</section>
<section id="using-paste0" class="level3">
<h3 class="anchored" data-anchor-id="using-paste0">Using <code>paste0()</code></h3>
<p>The <code>paste0()</code> function is similar to <code>paste()</code>, but it doesn’t add a separator by default.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb3-2">result_no_space <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(string1, string2)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_no_space)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p>Here, <code>paste0(string1, string2)</code> joins “Hello” and “World” without any spaces.</p>
</section>
<section id="custom-separator" class="level3">
<h3 class="anchored" data-anchor-id="custom-separator">Custom Separator</h3>
<p>You can also specify a custom separator with <code>paste()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb5-2">result_custom_sep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(string1, string2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_custom_sep)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello, World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello, World"</code></pre>
</div>
</div>
<p>By setting <code>sep = ", "</code>, we add a comma and a space between the strings.</p>
</section>
</section>
<section id="concatenating-strings-with-stringr" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-stringr">Concatenating Strings with <code>stringr</code></h2>
<p>The <code>stringr</code> package offers a more consistent and user-friendly way to handle strings in R. For concatenation, we use the <code>str_c()</code> function.</p>
<section id="using-str_c" class="level3">
<h3 class="anchored" data-anchor-id="using-str_c">Using <code>str_c()</code></h3>
<p>The <code>str_c()</code> function from <code>stringr</code> is similar to <code>paste0()</code> but provides more control over the process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load stringr package</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb7-5">result_str_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(string1, string2)</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_str_c)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p>This example is equivalent to <code>paste0()</code>.</p>
</section>
<section id="custom-separator-1" class="level3">
<h3 class="anchored" data-anchor-id="custom-separator-1">Custom Separator</h3>
<p>To add a separator, use the <code>sep</code> argument in <code>str_c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example with separator</span></span>
<span id="cb9-2">result_str_c_sep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(string1, string2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_str_c_sep)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p>Here, <code>sep = " "</code> adds a space between the strings.</p>
</section>
</section>
<section id="concatenating-strings-with-stringi" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-stringi">Concatenating Strings with <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation in R. For concatenation, we use the <code>stri_c()</code> function.</p>
<section id="using-stri_c" class="level3">
<h3 class="anchored" data-anchor-id="using-stri_c">Using <code>stri_c()</code></h3>
<p>The <code>stri_c()</code> function works similarly to <code>paste0()</code> and <code>str_c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load stringi package</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb11-5">result_stri_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(string1, string2)</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_stri_c)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p>This joins “Hello” and “World” without spaces.</p>
</section>
<section id="custom-separator-2" class="level3">
<h3 class="anchored" data-anchor-id="custom-separator-2">Custom Separator</h3>
<p>To include a separator, use the <code>sep</code> argument in <code>stri_c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example with separator</span></span>
<span id="cb13-2">result_stri_c_sep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(string1, string2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_stri_c_sep)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p>The <code>sep</code> argument adds a space between the strings.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>String concatenation is a simple yet vital task in data manipulation. Whether you prefer base R functions like <code>paste()</code> and <code>paste0()</code>, or the more specialized <code>stringr</code> and <code>stringi</code> packages, you have multiple options to choose from. Each method has its unique advantages, and understanding them will help you handle strings more effectively in your R projects.</p>
<p>Feel free to try these examples on your own and see how they work with your data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-22/</guid>
  <pubDate>Mon, 22 Jul 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
