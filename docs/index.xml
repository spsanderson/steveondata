<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description>Steve&#39;s Data Tips and Tricks in R, C, SQL and Linux</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Thu, 23 Jan 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>How to Remove Rows in R: A Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-23/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data manipulation is a crucial skill in R programming, and knowing how to effectively remove rows from your datasets is fundamental. Whether you’re cleaning data, filtering observations, or preparing your dataset for analysis, understanding different methods to remove rows can significantly improve your workflow.</p>
<p>In this comprehensive guide, we’ll explore three powerful approaches to remove rows in R:</p>
<ul>
<li>Base R methods</li>
<li>dplyr functions</li>
<li>data.table operations</li>
</ul>
</section>
<section id="methods-overview" class="level1">
<h1>Methods Overview</h1>
<p>Before diving into specific examples, let’s understand our toolkit. R provides several ways to remove rows from a data frame. We’ll cover three main approaches:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example dataset</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb1-6">)</span>
<span id="cb1-7">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  1    10        a
2  2    NA        b
3  3    30        c
4  4    NA        d
5  5    50        e</code></pre>
</div>
</div>
</section>
<section id="using-base-r-to-remove-rows" class="level1">
<h1>Using Base R to Remove Rows</h1>
<section id="remove-rows-by-number" class="level2">
<h2 class="anchored" data-anchor-id="remove-rows-by-number">Remove Rows by Number</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove first row</span></span>
<span id="cb3-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span>
<span id="cb3-3">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
2  2    NA        b
3  3    30        c
4  4    NA        d
5  5    50        e</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove multiple rows</span></span>
<span id="cb5-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), ]</span>
<span id="cb5-3">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
2  2    NA        b
4  4    NA        d
5  5    50        e</code></pre>
</div>
</div>
</section>
<section id="remove-rows-by-condition" class="level2">
<h2 class="anchored" data-anchor-id="remove-rows-by-condition">Remove Rows by Condition</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows where value &gt; 20</span></span>
<span id="cb7-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, ]</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using subset()</span></span>
<span id="cb7-5">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(df, value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb7-6">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  1    10        a</code></pre>
</div>
</div>
</section>
<section id="remove-na-values" class="level2">
<h2 class="anchored" data-anchor-id="remove-na-values">Remove NA Values</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any NA</span></span>
<span id="cb9-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(df)</span>
<span id="cb9-3">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  1    10        a
3  3    30        c
5  5    50        e</code></pre>
</div>
</div>
</section>
</section>
<section id="using-dplyr-to-remove-rows" class="level1">
<h1>Using dplyr to Remove Rows</h1>
<p>The dplyr package offers a more intuitive and readable syntax for data manipulation.</p>
<section id="remove-rows-by-number-1" class="level2">
<h2 class="anchored" data-anchor-id="remove-rows-by-number-1">Remove Rows by Number</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove first row</span></span>
<span id="cb11-4">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-5">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  2    NA        b
2  3    30        c
3  4    NA        d
4  5    50        e</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove multiple rows</span></span>
<span id="cb13-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb13-3">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  2    NA        b
2  4    NA        d
3  5    50        e</code></pre>
</div>
</div>
</section>
<section id="remove-rows-by-condition-1" class="level2">
<h2 class="anchored" data-anchor-id="remove-rows-by-condition-1">Remove Rows by Condition</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows where value &gt; 20</span></span>
<span id="cb15-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb15-3">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  1    10        a</code></pre>
</div>
</div>
</section>
<section id="remove-na-values-1" class="level2">
<h2 class="anchored" data-anchor-id="remove-na-values-1">Remove NA Values</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any NA</span></span>
<span id="cb17-4">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>()</span>
<span id="cb17-5">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  1    10        a
2  3    30        c
3  5    50        e</code></pre>
</div>
</div>
</section>
</section>
<section id="using-data.table-to-remove-rows" class="level1">
<h1>Using data.table to Remove Rows</h1>
<p>data.table is known for its high performance with large datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb19-2">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb19-3">dt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id value category
   &lt;int&gt; &lt;num&gt;   &lt;char&gt;
1:     1    10        a
2:     2    NA        b
3:     3    30        c
4:     4    NA        d
5:     5    50        e</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Remove Rows by Number</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove first row</span></span>
<span id="cb21-3">dt_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-4">dt_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id value category
   &lt;int&gt; &lt;num&gt;   &lt;char&gt;
1:     2    NA        b
2:     3    30        c
3:     4    NA        d
4:     5    50        e</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Remove Rows by Condition</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows where value &gt; 20</span></span>
<span id="cb23-3">dt_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span>
<span id="cb23-4">dt_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id value category
   &lt;int&gt; &lt;num&gt;   &lt;char&gt;
1:     1    10        a</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">### Remove NA Values</span></span>
<span id="cb25-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any NA</span></span>
<span id="cb25-3">dt_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(dt)</span>
<span id="cb25-4">dt_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id value category
   &lt;int&gt; &lt;num&gt;   &lt;char&gt;
1:     1    10        a
2:     3    30        c
3:     5    50        e</code></pre>
</div>
</div>
</section>
<section id="performance-considerations" class="level1">
<h1>Performance Considerations</h1>
<p>When working with large datasets, performance becomes crucial. Here are some guidelines:</p>
<ul>
<li>For small datasets (&lt;10,000 rows), any method works well</li>
<li>For medium datasets, dplyr offers good performance and readable syntax</li>
<li>For large datasets (&gt;1M rows), data.table typically provides the best performance</li>
</ul>
</section>
<section id="common-pitfalls-and-solutions" class="level1">
<h1>Common Pitfalls and Solutions</h1>
<ol type="1">
<li>Factor Levels</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remember to drop unused levels after removing rows</span></span>
<span id="cb27-2">df_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">droplevels</span>(df_new)</span>
<span id="cb27-3">df_new</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value category
1  1    10        a
2  3    30        c
3  5    50        e</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Memory Management</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use in-place modification when possible</span></span>
<span id="cb29-2">dt[, row_to_remove <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>]</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in `[.data.table`(dt, , `:=`(row_to_remove, NULL)): Tried to assign
NULL to column 'row_to_remove', but this column does not exist to remove</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">dt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id value category
   &lt;int&gt; &lt;num&gt;   &lt;char&gt;
1:     1    10        a
2:     2    NA        b
3:     3    30        c
4:     4    NA        d
5:     5    50        e</code></pre>
</div>
</div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try this exercise:</p>
<p>Problem: Create a data frame with 10 rows, including some NA values, and: 1. Remove rows 3 and 7 2. Remove rows where a numeric column is greater than the mean 3. Remove NA values</p>
<details>
<summary>
Click hre for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create practice data</span></span>
<span id="cb33-2">practice_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb33-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb33-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb33-5">)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Remove rows 3 and 7</span></span>
<span id="cb33-8">result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), ]</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Remove rows &gt; mean</span></span>
<span id="cb33-11">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[practice_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(practice_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), ]</span>
<span id="cb33-12"></span>
<span id="cb33-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Remove NA values</span></span>
<span id="cb33-14">result3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(practice_df)</span></code></pre></div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Base R uses indexing and subset() for row removal</li>
<li>dplyr provides intuitive functions like filter() and drop_na()</li>
<li>data.table offers high-performance solutions for large datasets</li>
<li>Always consider factor levels and memory management</li>
<li>Choose the method based on your dataset size and needs</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p>Q: Which method is fastest for large datasets? A: data.table typically provides the best performance for large datasets.</p></li>
<li><p>Q: How do I remove duplicate rows? A: Use distinct() in dplyr or unique() in base R.</p></li>
<li><p>Q: Can I remove rows based on multiple conditions? A: Yes, use &amp; (and) or | (or) operators in any method.</p></li>
<li><p>Q: Will removing rows affect my factor levels? A: Yes, use droplevels() to remove unused levels after filtering.</p></li>
<li><p>Q: How do I remove rows with NA in specific columns only? A: Use drop_na() with column names in dplyr or na.omit() with subset in base R.</p></li>
</ol>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did you find this guide helpful? Share your experiences with row removal in R in the comments below! If you learned something new, consider sharing this guide with your network. For more R programming tips, follow our blog and join our community of R enthusiasts.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>“How to Delete Rows in R? Explained with Examples” - Spark By Examples
<ul>
<li>URL: https://sparkbyexamples.com/r-programming/drop-dataframe-rows-in-r/</li>
</ul></li>
<li>“Remove Specific Row in R: How to Examples with dplyr” - Marsja.se
<ul>
<li>URL: https://www.marsja.se/remove-specific-row-in-r-how-to-examples-with-dplyr/</li>
</ul></li>
<li>“Remove Rows from the data frame in R” - R-bloggers
<ul>
<li>URL: https://www.r-bloggers.com/2022/06/remove-rows-from-the-data-frame-in-r/</li>
<li>URL: https://www.statology.org/dplyr-remove-rows/</li>
</ul></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-23/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Removing Rows in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-23/</guid>
  <pubDate>Thu, 23 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Advanced Mathematics in C Programming: A Complete Guide for Beginners</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-22/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Are you ready to unlock the power of advanced mathematics in C programming? Whether you’re developing scientific applications or solving complex computational problems, understanding C’s mathematical capabilities is essential for becoming a proficient programmer. This comprehensive guide will walk you through everything you need to know about implementing advanced math in C.</p>
<section id="essential-math-libraries-in-c" class="level2">
<h2 class="anchored" data-anchor-id="essential-math-libraries-in-c">Essential Math Libraries in C</h2>
<p>Before diving into advanced mathematical operations, you’ll need to include the necessary header files in your program:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;math.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">   </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// For mathematical functions</span></span>
<span id="cb1-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// For random number generation</span></span>
<span id="cb1-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;time.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">   </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// For time-based random seed</span></span></code></pre></div>
<section id="understanding-math.h" class="level3">
<h3 class="anchored" data-anchor-id="understanding-math.h">Understanding math.h</h3>
<p>The <code>math.h</code> library provides a wide range of mathematical functions for complex calculations. This library is your go-to resource for trigonometric, logarithmic, and exponential operations.</p>
</section>
<section id="the-role-of-stdlib.h" class="level3">
<h3 class="anchored" data-anchor-id="the-role-of-stdlib.h">The Role of stdlib.h</h3>
<p>While <code>stdlib.h</code> isn’t primarily a math library, it provides essential functions for random number generation and memory management, which are helpful for mathematical applications.</p>
</section>
</section>
<section id="basic-mathematical-functions" class="level2">
<h2 class="anchored" data-anchor-id="basic-mathematical-functions">Basic Mathematical Functions</h2>
<p>Let’s explore the fundamental mathematical functions that form the building blocks of advanced calculations in C.</p>
<section id="floor-and-ceiling-functions" class="level3">
<h3 class="anchored" data-anchor-id="floor-and-ceiling-functions">Floor and Ceiling Functions</h3>
<p>These functions help you round floating-point numbers to integers:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">18.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> floor_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> floor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns 18.0</span></span>
<span id="cb2-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> ceil_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ceil<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns 19.0</span></span></code></pre></div>
</section>
<section id="absolute-value-function" class="level3">
<h3 class="anchored" data-anchor-id="absolute-value-function">Absolute Value Function</h3>
<p>The <code>fabs()</code> function returns the absolute value of a floating-point number:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> negative <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> absolute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fabs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>negative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns 25.0</span></span></code></pre></div>
</section>
<section id="power-and-square-root-operations" class="level3">
<h3 class="anchored" data-anchor-id="power-and-square-root-operations">Power and Square Root Operations</h3>
<p>For calculations involving powers and square roots:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> power_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 4 raised to power 3 (64.0)</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sqrt_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">64.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Square root of 64 (8.0)</span></span></code></pre></div>
</section>
</section>
<section id="working-with-random-numbers" class="level2">
<h2 class="anchored" data-anchor-id="working-with-random-numbers">Working with Random Numbers</h2>
<p>Random number generation is crucial for simulations, games, and statistical applications.</p>
<section id="setting-up-random-number-generation" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-random-number-generation">Setting Up Random Number Generation</h3>
<p>Here’s how to properly initialize and use random numbers:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;time.h&gt;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Seed the random number generator</span></span>
<span id="cb5-4">srand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate a random number</span></span>
<span id="cb5-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> random_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div>
</section>
<section id="generating-numbers-within-ranges" class="level3">
<h3 class="anchored" data-anchor-id="generating-numbers-within-ranges">Generating Numbers Within Ranges</h3>
<p>To generate random numbers within a specific range:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate random number between 1 and 100</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> random_1_to_100 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</section>
</section>
<section id="trigonometric-operations" class="level2">
<h2 class="anchored" data-anchor-id="trigonometric-operations">Trigonometric Operations</h2>
<section id="converting-degrees-to-radians" class="level3">
<h3 class="anchored" data-anchor-id="converting-degrees-to-radians">Converting Degrees to Radians</h3>
<p>Since C’s trigonometric functions work with radians, here’s how to convert degrees to radians:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> degreesToRadians<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>M_PI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="using-trigonometric-functions" class="level3">
<h3 class="anchored" data-anchor-id="using-trigonometric-functions">Using Trigonometric Functions</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> angle_degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> angle_radians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> degreesToRadians<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>angle_degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sine_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>angle_radians<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> cosine_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>angle_radians<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</section>
<section id="basic-trigonometric-functions-in-c" class="level3">
<h3 class="anchored" data-anchor-id="basic-trigonometric-functions-in-c">Basic Trigonometric Functions in C</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 17%">
<col style="width: 23%">
<col style="width: 26%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Description</th>
<th>Example Usage</th>
<th>Common Use Cases</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>sin(x)</code></td>
<td>Returns the sine of angle <code>x</code> (in radians)</td>
<td><code>double result = sin(0.523);</code></td>
<td>• Periodic motion calculations<br>• Wave simulations<br>• Signal processing</td>
</tr>
<tr class="even">
<td><code>cos(x)</code></td>
<td>Returns the cosine of angle <code>x</code> (in radians)</td>
<td><code>double result = cos(1.047);</code></td>
<td>• Circular motion<br>• Game physics<br>• Coordinate rotations</td>
</tr>
<tr class="odd">
<td><code>tan(x)</code></td>
<td>Returns the tangent of angle <code>x</code> (in radians)</td>
<td><code>double result = tan(0.785);</code></td>
<td>• Slope calculations<br>• Angular measurements<br>• Navigation systems</td>
</tr>
</tbody>
</table>
</section>
<section id="inverse-arc-trigonometric-functions" class="level3">
<h3 class="anchored" data-anchor-id="inverse-arc-trigonometric-functions">Inverse (Arc) Trigonometric Functions</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 19%">
<col style="width: 25%">
<col style="width: 28%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Description</th>
<th>Example Usage</th>
<th>Return Range</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>asin(x)</code></td>
<td>Returns the arc sine (inverse sine) of <code>x</code></td>
<td><code>double angle = asin(0.5);</code></td>
<td>[2, π/2] radians</td>
</tr>
<tr class="even">
<td><code>acos(x)</code></td>
<td>Returns the arc cosine (inverse cosine) of <code>x</code></td>
<td><code>double angle = acos(0.5);</code></td>
<td>[0, π] radians</td>
</tr>
<tr class="odd">
<td><code>atan(x)</code></td>
<td>Returns the arc tangent (inverse tangent) of <code>x</code></td>
<td><code>double angle = atan(1.0);</code></td>
<td>[π/2] radians</td>
</tr>
</tbody>
</table>
</section>
<section id="helper-functions-for-angle-conversion" class="level3">
<h3 class="anchored" data-anchor-id="helper-functions-for-angle-conversion">Helper Functions for Angle Conversion</h3>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert degrees to radians</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> degreesToRadians<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>M_PI <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert radians to degrees</span></span>
<span id="cb9-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> radiansToDegrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> radians<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> radians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> M_PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="important-notes" class="level3">
<h3 class="anchored" data-anchor-id="important-notes">Important Notes:</h3>
<ol type="1">
<li>All trigonometric functions require <code>#include &lt;math.h&gt;</code> and might require the use of <code>#define _USE_MATH_DEFINES</code></li>
<li>Input angles must be in radians</li>
<li>Return values are of type <code>double</code></li>
<li>When compiling, use the <code>-lm</code> flag to link the math library</li>
</ol>
</section>
</section>
<section id="logarithmic-and-exponential-operations" class="level2">
<h2 class="anchored" data-anchor-id="logarithmic-and-exponential-operations">Logarithmic and Exponential Operations</h2>
<section id="natural-logarithm" class="level3">
<h3 class="anchored" data-anchor-id="natural-logarithm">Natural Logarithm</h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> natural_log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns natural logarithm (ln) of value</span></span></code></pre></div>
</section>
<section id="base-10-logarithm" class="level3">
<h3 class="anchored" data-anchor-id="base-10-logarithm">Base-10 Logarithm</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb11-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> base10_log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log10<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns base-10 logarithm</span></span></code></pre></div>
<p>Based on the research reports and following the best practices for creating technical documentation tables, I’ll create a comprehensive table for C Logarithmic Functions.</p>
</section>
</section>
<section id="c-logarithmic-and-exponential-functions-reference-guide" class="level2">
<h2 class="anchored" data-anchor-id="c-logarithmic-and-exponential-functions-reference-guide">C Logarithmic and Exponential Functions Reference Guide</h2>
<section id="core-functions-overview" class="level3">
<h3 class="anchored" data-anchor-id="core-functions-overview">Core Functions Overview</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 19%">
<col style="width: 25%">
<col style="width: 28%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Description</th>
<th>Example Usage</th>
<th>Return Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>exp(x)</code></td>
<td>Returns ( e^x ), where ( e ) is Euler’s number (~2.718)</td>
<td><code>double result = exp(2.0);</code></td>
<td>Returns ( e^2 ) ≈ 7.389</td>
</tr>
<tr class="even">
<td><code>log(x)</code></td>
<td>Returns natural logarithm (base ( e )) of x</td>
<td><code>double result = log(5.0);</code></td>
<td>Returns ( (5) ) ≈ 1.609</td>
</tr>
<tr class="odd">
<td><code>log10(x)</code></td>
<td>Returns base-10 logarithm of x</td>
<td><code>double result = log10(1000.0);</code></td>
<td>Returns 3.000</td>
</tr>
</tbody>
</table>
</section>
<section id="common-applications-and-use-cases" class="level3">
<h3 class="anchored" data-anchor-id="common-applications-and-use-cases">Common Applications and Use Cases</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 30%">
<col style="width: 30%">
<col style="width: 23%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Primary Applications</th>
<th>Real-World Examples</th>
<th>Industry Usage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>exp(x)</code></td>
<td>• Growth calculations<br>• Compound interest<br>• Scientific computations</td>
<td>• Population modeling<br>• Financial calculations<br>• Physical decay processes</td>
<td>• Finance<br>• Biology<br>• Physics</td>
</tr>
<tr class="even">
<td><code>log(x)</code></td>
<td>• Natural growth analysis<br>• Entropy calculations<br>• Scale transformations</td>
<td>• Sound intensity (dB)<br>• Information theory<br>• Algorithm complexity</td>
<td>• Signal processing<br>• Data compression<br>• Algorithm design</td>
</tr>
<tr class="odd">
<td><code>log10(x)</code></td>
<td>• Order of magnitude<br>• Scientific notation<br>• Scale measurements</td>
<td>• pH calculations<br>• Richter scale<br>• Decibel measurements</td>
<td>• Chemistry<br>• Geology<br>• Audio engineering</td>
</tr>
</tbody>
</table>
</section>
<section id="implementation-guidelines" class="level3">
<h3 class="anchored" data-anchor-id="implementation-guidelines">Implementation Guidelines</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 22%">
<col style="width: 38%">
<col style="width: 38%">
</colgroup>
<thead>
<tr class="header">
<th>Aspect</th>
<th>Requirements</th>
<th>Example Code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Header Files</td>
<td><code>#include &lt;math.h&gt;</code></td>
<td><code>#include &lt;math.h&gt; #include &lt;errno.h&gt;</code></td>
</tr>
<tr class="even">
<td>Error Checking</td>
<td>Check for domain errors</td>
<td><code>if (x &lt;= 0) {     errno = EDOM;     return -HUGE_VAL; }</code></td>
</tr>
<tr class="odd">
<td>Compilation</td>
<td>Use <code>-lm</code> flag</td>
<td><code>gcc program.c -lm</code></td>
</tr>
</tbody>
</table>
</section>
<section id="limitations-and-error-handling" class="level3">
<h3 class="anchored" data-anchor-id="limitations-and-error-handling">Limitations and Error Handling</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 27%">
<col style="width: 29%">
<col style="width: 43%">
</colgroup>
<thead>
<tr class="header">
<th>Issue Type</th>
<th>Description</th>
<th>Prevention/Solution</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Domain Errors</td>
<td>• <code>log(x)</code> and <code>log10(x)</code> require x &gt; 0<br>• Negative inputs cause errors</td>
<td>Validate input before calculation</td>
</tr>
<tr class="even">
<td>Overflow</td>
<td>• <code>exp(x)</code> may overflow for large x</td>
<td>Check result against <code>HUGE_VAL</code></td>
</tr>
<tr class="odd">
<td>Precision</td>
<td>• Results are double precision</td>
<td>Use appropriate comparison methods</td>
</tr>
</tbody>
</table>
</section>
<section id="best-practices" class="level3">
<h3 class="anchored" data-anchor-id="best-practices">Best Practices</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 40%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th>Practice</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Input Validation</td>
<td>Always check if input is within valid domain</td>
<td><code>if (x &gt; 0) {     result = log(x); }</code></td>
</tr>
<tr class="even">
<td>Error Handling</td>
<td>Check errno after calculations</td>
<td><code>errno = 0; result = log(x); if (errno != 0) {     // Handle error }</code></td>
</tr>
<tr class="odd">
<td>Performance</td>
<td>Cache frequently used results</td>
<td><code>static double cached_result; if (need_recalculation) {     cached_result = log(x); }</code></td>
</tr>
</tbody>
</table>
</section>
<section id="important-notes-1" class="level3">
<h3 class="anchored" data-anchor-id="important-notes-1">Important Notes:</h3>
<ol type="1">
<li>All functions return double precision floating-point values</li>
<li>Include proper error handling for robust applications</li>
<li>Consider performance implications in critical sections</li>
<li>Use appropriate data types for accuracy</li>
<li>Always validate input values before calculation</li>
</ol>
</section>
</section>
<section id="best-practices-and-common-pitfalls" class="level2">
<h2 class="anchored" data-anchor-id="best-practices-and-common-pitfalls">Best Practices and Common Pitfalls</h2>
<p>To ensure reliable mathematical computations, keep these important points in mind:</p>
<ol type="1">
<li><strong>Input Validation</strong>: Always validate inputs to mathematical functions to prevent domain errors.</li>
<li><strong>Type Considerations</strong>: Use appropriate data types (<code>double</code> for most calculations) to maintain precision.</li>
<li><strong>Error Handling</strong>: Implement proper error checking for mathematical operations that could fail.</li>
<li><strong>Compiler Flags</strong>: Include the <code>-lm</code> flag when compiling programs that use math functions.</li>
</ol>
</section>
<section id="your-turn" class="level2">
<h2 class="anchored" data-anchor-id="your-turn">Your Turn!</h2>
<p>Let’s put your knowledge to the test with a practical exercise:</p>
<p>Challenge: Create a program that:</p>
<ol type="1">
<li>Generates 5 random numbers between 1-100</li>
<li>Calculates the square root of each number</li>
<li>Converts the results to degrees (assuming they’re in radians)</li>
</ol>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Your solution here</span></span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb13-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb13-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define _USE_MATH_DEFINES</span></span>
<span id="cb13-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;math.h&gt;</span></span>
<span id="cb13-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb13-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;time.h&gt;</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-8">    srand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-9">    </span>
<span id="cb13-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> random_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-12">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> sqrt_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>random_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-13">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqrt_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">180.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> M_PI<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-14">        </span>
<span id="cb13-15">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Square Root: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Degrees: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-16">               random_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sqrt_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-22/solution.png" class="img-fluid figure-img"></p>
<figcaption>Solution in my terminal</figcaption>
</figure>
</div>
</details>
</section>
<section id="quick-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="quick-takeaways">Quick Takeaways</h2>
<ul>
<li>Always include <code>math.h</code> for mathematical functions and <code>stdlib.h</code> for random number generation</li>
<li>Use proper type casting and error checking for mathematical operations</li>
<li>Remember to seed your random number generator with <code>srand(time(NULL))</code></li>
<li>Convert degrees to radians when using trigonometric functions</li>
<li>Implement proper error handling for mathematical operations</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Advanced mathematics in C programming opens up a world of possibilities for creating sophisticated applications. By mastering these fundamental concepts and following best practices, you’ll be well-equipped to handle complex mathematical computations in your C programs.</p>
</section>
<section id="faqs" class="level2">
<h2 class="anchored" data-anchor-id="faqs">FAQs</h2>
<ol type="1">
<li><p><strong>Q: Why do I need to use the -lm flag when compiling?</strong> A: The -lm flag links the math library to your program, which is required for using mathematical functions from math.h.</p></li>
<li><p><strong>Q: How can I ensure different random numbers each time?</strong> A: Use srand(time(NULL)) to seed the random number generator with the current time.</p></li>
<li><p><strong>Q: Why do trigonometric functions use radians instead of degrees?</strong> A: Radians are the standard unit for angular measurements in mathematics and provide more precise calculations.</p></li>
</ol>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-22/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Math with C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-22/</guid>
  <pubDate>Wed, 22 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Append Rows to a Data Frame in R: A Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-21/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data manipulation is a crucial skill in R programming, and one of the most common tasks is adding new rows to existing data frames. Whether you’re collecting real-time data, combining multiple datasets, or building a data frame iteratively, knowing how to append rows efficiently is useful. This comprehensive guide will explore various methods to append rows to data frames in R, complete with practical examples and best practices.</p>
</section>
<section id="understanding-data-frames-in-r" class="level1">
<h1>Understanding Data Frames in R</h1>
<p>Before looking into row appending techniques, let’s refresh our understanding of data frames. In R, a data frame is a two-dimensional table-like structure where:</p>
<ul>
<li>Each column can contain different types of data (numeric, character, factor, etc.)</li>
<li>All columns must have the same length</li>
<li>Each column has a unique name</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a simple data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"London"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paris"</span>)</span>
<span id="cb1-6">)</span></code></pre></div>
</div>
</section>
<section id="method-1-using-rbind-function" class="level1">
<h1>Method 1: Using rbind() Function</h1>
<p>The <code>rbind()</code> function is the most traditional and widely used method for appending rows to a data frame.</p>
<section id="basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax">Basic Syntax</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic rbind syntax</span></span>
<span id="cb2-2">new_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(existing_df, new_rows)</span></code></pre></div>
</section>
<section id="single-row-addition" class="level2">
<h2 class="anchored" data-anchor-id="single-row-addition">Single Row Addition</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding a single row</span></span>
<span id="cb3-2">new_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emma"</span>,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tokyo"</span></span>
<span id="cb3-6">)</span>
<span id="cb3-7">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, new_row)</span></code></pre></div>
</div>
</section>
<section id="multiple-rows-addition" class="level2">
<h2 class="anchored" data-anchor-id="multiple-rows-addition">Multiple Rows Addition</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding multiple rows</span></span>
<span id="cb4-2">multiple_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sarah"</span>),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Berlin"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Madrid"</span>)</span>
<span id="cb4-6">)</span>
<span id="cb4-7">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, multiple_rows)</span>
<span id="cb4-8">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age     city
1  John  25 New York
2 Alice  30   London
3   Bob  28    Paris
4  Emma  27    Tokyo
5 David  32   Berlin
6 Sarah  29   Madrid</code></pre>
</div>
</div>
</section>
</section>
<section id="method-2-using-add_row-function" class="level1">
<h1>Method 2: Using add_row() Function</h1>
<p>The <code>add_row()</code> function from the <code>tibble</code> package offers a more modern and flexible approach.</p>
<section id="installation-and-setup" class="level2">
<h2 class="anchored" data-anchor-id="installation-and-setup">Installation and Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load tibble package</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to tibble</span></span>
<span id="cb6-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df)</span></code></pre></div>
</div>
</section>
<section id="basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="basic-usage">Basic Usage</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding a row with add_row()</span></span>
<span id="cb7-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_row</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michael"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sydney"</span>)</span>
<span id="cb7-4">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 3
  name      age city    
  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   
1 John       25 New York
2 Alice      30 London  
3 Bob        28 Paris   
4 Emma       27 Tokyo   
5 David      32 Berlin  
6 Sarah      29 Madrid  
7 Michael    31 Sydney  </code></pre>
</div>
</div>
</section>
</section>
<section id="method-3-using-vectors-with-rbind" class="level1">
<h1>Method 3: Using Vectors with rbind()</h1>
<p>You can also append rows using vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a vector and appending it</span></span>
<span id="cb9-2">new_row_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lisa"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chicago"</span>)</span>
<span id="cb9-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, new_row_vector)</span>
<span id="cb9-4">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 8 × 3
  name    age   city    
  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   
1 John    25    New York
2 Alice   30    London  
3 Bob     28    Paris   
4 Emma    27    Tokyo   
5 David   32    Berlin  
6 Sarah   29    Madrid  
7 Michael 31    Sydney  
8 Lisa    26    Chicago </code></pre>
</div>
</div>
</section>
<section id="working-with-lists-and-data-frames" class="level1">
<h1>Working with Lists and Data Frames</h1>
<p>Sometimes you’ll need to append rows from a list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Converting list to data frame and appending</span></span>
<span id="cb11-2">list_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alex"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Toronto"</span>)</span>
<span id="cb11-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(list_data))))</span>
<span id="cb11-4">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  name    age   city    
  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;   
1 John    25    New York
2 Alice   30    London  
3 Bob     28    Paris   
4 Emma    27    Tokyo   
5 David   32    Berlin  
6 Sarah   29    Madrid  
7 Michael 31    Sydney  
8 Lisa    26    Chicago 
9 Alex    33    Toronto </code></pre>
</div>
</div>
</section>
<section id="appending-rows-in-a-loop" class="level1">
<h1>Appending Rows in a Loop</h1>
<p>When working with iterations, you might need to append rows in a loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of appending in a loop</span></span>
<span id="cb13-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb13-3">  new_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb13-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person_"</span>, i),</span>
<span id="cb13-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i,</span>
<span id="cb13-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown"</span></span>
<span id="cb13-7">  )</span>
<span id="cb13-8">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, new_row)</span>
<span id="cb13-9">}</span>
<span id="cb13-10"></span>
<span id="cb13-11">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 12 × 3
   name     age   city    
   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;   
 1 John     25    New York
 2 Alice    30    London  
 3 Bob      28    Paris   
 4 Emma     27    Tokyo   
 5 David    32    Berlin  
 6 Sarah    29    Madrid  
 7 Michael  31    Sydney  
 8 Lisa     26    Chicago 
 9 Alex     33    Toronto 
10 Person_1 21    Unknown 
11 Person_2 22    Unknown 
12 Person_3 23    Unknown </code></pre>
</div>
</div>
</section>
<section id="best-practices-and-performance-considerations" class="level1">
<h1>Best Practices and Performance Considerations</h1>
<ol type="1">
<li>Pre-allocate space when possible</li>
<li>Use <code>data.table</code> for large datasets</li>
<li>Avoid row-by-row binding in loops</li>
<li>Consider using <code>dplyr::bind_rows()</code> for multiple data frames</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better performance with data.table</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb15-3">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb15-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dt, new_row))</span>
<span id="cb15-5">dt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        name    age     city
      &lt;char&gt; &lt;char&gt;   &lt;char&gt;
 1:     John     25 New York
 2:    Alice     30   London
 3:      Bob     28    Paris
 4:     Emma     27    Tokyo
 5:    David     32   Berlin
 6:    Sarah     29   Madrid
 7:  Michael     31   Sydney
 8:     Lisa     26  Chicago
 9:     Alex     33  Toronto
10: Person_1     21  Unknown
11: Person_2     22  Unknown
12: Person_3     23  Unknown
13: Person_3     23  Unknown</code></pre>
</div>
</div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try this exercise to test your understanding:</p>
<p>Problem: Create a data frame with three columns (product, price, quantity) and three rows. Then append two new rows with the following data: - Row 1: (“Laptop”, 999.99, 1) - Row 2: (“Mouse”, 29.99, 5)</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial data frame</span></span>
<span id="cb18-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monitor"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Headphones"</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">299.99</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">89.99</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">59.99</span>),</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quantity =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb18-6">)</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Appending new rows</span></span>
<span id="cb18-9">new_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb18-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>),</span>
<span id="cb18-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">999.99</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.99</span>),</span>
<span id="cb18-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quantity =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb18-13">)</span>
<span id="cb18-14"></span>
<span id="cb18-15">final_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, new_rows)</span>
<span id="cb18-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(final_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     product  price quantity
1    Monitor 299.99        2
2   Keyboard  89.99        3
3 Headphones  59.99        4
4     Laptop 999.99        1
5      Mouse  29.99        5</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><code>rbind()</code> is the traditional method for appending rows</li>
<li><code>add_row()</code> provides a modern, tidyverse-compatible solution</li>
<li>Pre-allocate space for better performance</li>
<li>Consider using <code>data.table</code> for large datasets</li>
<li>Always ensure matching column names and data types</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Why does rbind() sometimes give an error about column names?</strong> A: This usually occurs when the column names or order don’t match between the existing data frame and new rows.</p></li>
<li><p><strong>Q: How can I append rows with missing values?</strong> A: Use NA for missing values while maintaining the correct column structure.</p></li>
<li><p><strong>Q: What’s the fastest method to append many rows?</strong> A: For large datasets, data.table’s rbindlist() is typically the most efficient.</p></li>
<li><p><strong>Q: Can I append rows with different column orders?</strong> A: Yes, but you should explicitly match columns using column names.</p></li>
<li><p><strong>Q: How do I append rows from a CSV file?</strong> A: First read the CSV using read.csv(), then use rbind() or bind_rows().</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering row appending in R is crucial for effective data manipulation. Whether you choose <code>rbind()</code>, <code>add_row()</code>, or other methods depends on your specific needs and data size. Remember to consider performance implications when working with large datasets and always ensure data consistency.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>R Documentation: <a href="https://www.rdocumentation.org">rbind function</a></li>
<li>Tidyverse Documentation: <a href="https://tidyverse.org">add_row function</a></li>
<li>R-bloggers: <a href="https://www.r-bloggers.com">Data Frame Operations</a></li>
</ol>
<hr>
<p><strong><em>Did you find this tutorial helpful? Share it with your network and leave a comment below with your questions or experiences with data frame manipulation in R!</em></strong></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-21/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Append those rows!</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-21/</guid>
  <pubDate>Tue, 21 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Add an Empty Column to a Data Frame in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-20/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data manipulation is a crucial skill in R programming, and adding empty columns to data frames is a common operation. This comprehensive guide will demonstrate multiple approaches using base R, dplyr, and data.table packages to efficiently add empty columns to your data frames.</p>
</section>
<section id="understanding-data-frames-in-r" class="level1">
<h1>Understanding Data Frames in R</h1>
<p>Before diving into the methods, let’s understand what a data frame is in R. A data frame is a two-dimensional table-like structure where:</p>
<ul>
<li>Each column can contain different types of data</li>
<li>All columns must have the same length</li>
<li>Each column has a unique name</li>
</ul>
</section>
<section id="base-r-methods" class="level1">
<h1>Base R Methods</h1>
<section id="using-operator" class="level2">
<h2 class="anchored" data-anchor-id="using-operator">Using $ Operator</h2>
<p>The simplest way to add an empty column in base R is using the $ operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>),</span>
<span id="cb1-3">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>))</span>
<span id="cb1-4">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age
1  John  25
2 Alice  30
3   Bob  35</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using $ operator</span></span>
<span id="cb3-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>new_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb3-3">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age new_column
1  John  25         NA
2 Alice  30         NA
3   Bob  35         NA</code></pre>
</div>
</div>
</section>
<section id="using-square-bracket-notation" class="level2">
<h2 class="anchored" data-anchor-id="using-square-bracket-notation">Using Square Bracket Notation</h2>
<p>Another base R approach uses square bracket notation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using square brackets</span></span>
<span id="cb5-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"new_column2"</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb5-3">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age new_column new_column2
1  John  25         NA          NA
2 Alice  30         NA          NA
3   Bob  35         NA          NA</code></pre>
</div>
</div>
</section>
<section id="using-cbind-function" class="level2">
<h2 class="anchored" data-anchor-id="using-cbind-function">Using cbind() Function</h2>
<p>The cbind() function allows you to bind columns together:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using cbind()</span></span>
<span id="cb7-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_column3 =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb7-3">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age new_column new_column2 new_column3
1  John  25         NA          NA          NA
2 Alice  30         NA          NA          NA
3   Bob  35         NA          NA          NA</code></pre>
</div>
</div>
</section>
</section>
<section id="modern-approaches-with-dplyr" class="level1">
<h1>Modern Approaches with dplyr</h1>
<section id="add_column-function" class="level2">
<h2 class="anchored" data-anchor-id="add_column-function">add_column() Function</h2>
<p>The tibble package provides a clean and intuitive way to add columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using add_column()</span></span>
<span id="cb9-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_column</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_column4 =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age new_column new_column2 new_column3 new_column4
1  John  25         NA          NA          NA          NA
2 Alice  30         NA          NA          NA          NA
3   Bob  35         NA          NA          NA          NA</code></pre>
</div>
</div>
</section>
<section id="mutate-function" class="level2">
<h2 class="anchored" data-anchor-id="mutate-function">mutate() Function</h2>
<p>Another dplyr approach uses the mutate() function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using mutate()</span></span>
<span id="cb11-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_column5 =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb11-4"></span>
<span id="cb11-5">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age new_column new_column2 new_column3 new_column4 new_column5
1  John  25         NA          NA          NA          NA          NA
2 Alice  30         NA          NA          NA          NA          NA
3   Bob  35         NA          NA          NA          NA          NA</code></pre>
</div>
</div>
</section>
</section>
<section id="data.table-methods" class="level1">
<h1>Data.table Methods</h1>
<section id="operator" class="level2">
<h2 class="anchored" data-anchor-id="operator">:= Operator</h2>
<p>Data.table provides efficient methods for large datasets:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb13-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb13-5">dt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name   age new_column new_column2 new_column3 new_column4 new_column5
   &lt;char&gt; &lt;num&gt;     &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;
1:   John    25         NA          NA          NA          NA          NA
2:  Alice    30         NA          NA          NA          NA          NA
3:    Bob    35         NA          NA          NA          NA          NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using :=</span></span>
<span id="cb15-2">dt[, new_column6 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>]</span>
<span id="cb15-3">dt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name   age new_column new_column2 new_column3 new_column4 new_column5
   &lt;char&gt; &lt;num&gt;     &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;
1:   John    25         NA          NA          NA          NA          NA
2:  Alice    30         NA          NA          NA          NA          NA
3:    Bob    35         NA          NA          NA          NA          NA
   new_column6
        &lt;lgcl&gt;
1:          NA
2:          NA
3:          NA</code></pre>
</div>
</div>
</section>
<section id="set-function" class="level2">
<h2 class="anchored" data-anchor-id="set-function">set() Function</h2>
<p>The set() function offers another approach:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty column using set()</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(dt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">j =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"new_column7"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb17-3">dt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name   age new_column new_column2 new_column3 new_column4 new_column5
   &lt;char&gt; &lt;num&gt;     &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;      &lt;lgcl&gt;
1:   John    25         NA          NA          NA          NA          NA
2:  Alice    30         NA          NA          NA          NA          NA
3:    Bob    35         NA          NA          NA          NA          NA
   new_column6 new_column7
        &lt;lgcl&gt;      &lt;lgcl&gt;
1:          NA          NA
2:          NA          NA
3:          NA          NA</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<ol type="1">
<li>Always initialize columns with the appropriate data type</li>
<li>Use meaningful column names</li>
<li>Consider memory efficiency for large datasets</li>
<li>Document your code</li>
<li>Use consistent naming conventions</li>
</ol>
</section>
<section id="common-pitfalls" class="level1">
<h1>Common Pitfalls</h1>
<ul>
<li>Mixing data types unexpectedly</li>
<li>Not handling missing values properly</li>
<li>Forgetting to assign the result when using certain functions</li>
<li>Ignoring column name conflicts</li>
</ul>
</section>
<section id="performance-considerations" class="level1">
<h1>Performance Considerations</h1>
<p>For large datasets:</p>
<ul>
<li>data.table methods are typically fastest</li>
<li>Base R operations are generally faster than dplyr</li>
<li>Avoid growing data frames incrementally</li>
</ul>
</section>
<section id="your-turn-practice-examples" class="level1">
<h1>Your Turn! Practice Examples</h1>
<p>Try solving this problem:</p>
<p>Create a data frame with three columns (name, age, city) and add two empty columns named “salary” and “department”.</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution:</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base R</span></span>
<span id="cb19-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb19-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peter"</span>),</span>
<span id="cb19-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),</span>
<span id="cb19-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"London"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paris"</span>)</span>
<span id="cb19-7">)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add empty columns</span></span>
<span id="cb19-10">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>salary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb19-11">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>department <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify</span></span>
<span id="cb19-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age     city salary department
1  John  25 New York     NA         NA
2  Mary  30   London     NA         NA
3 Peter  35    Paris     NA         NA</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Multiple methods exist for adding empty columns</li>
<li>Choose the appropriate method based on your needs</li>
<li>Consider performance for large datasets</li>
<li>Maintain consistent coding practices</li>
<li>Handle missing values appropriately</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Which method is fastest for large datasets?</strong> A: Data.table methods are typically the most efficient for large datasets.</p></li>
<li><p><strong>Q: Can I add multiple empty columns at once?</strong> A: Yes, using dplyr’s mutate() or data.table’s := operator.</p></li>
<li><p><strong>Q: Should I initialize empty columns with NULL or NA?</strong> A: NA is generally preferred as it maintains the vector structure.</p></li>
<li><p><strong>Q: How do I specify the data type of an empty column?</strong> A: Use type-specific NA values (NA_character_, NA_integer_, etc.).</p></li>
<li><p><strong>Q: Can I add empty columns to a tibble?</strong> A: Yes, using the same dplyr functions as with regular data frames.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Adding empty columns to data frames in R can be accomplished through various methods, each with its own advantages. Choose the approach that best fits your needs, considering factors like code readability, performance, and maintenance.</p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Have you found this guide helpful? Share your experiences or questions in the comments below! Don’t forget to bookmark this page for future reference and share it with fellow R programmers.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.statology.org/add-empty-column-to-data-frame-r/">How to Add an Empty Column to a Data Frame in R - Statology</a></p></li>
<li><p><a href="https://www.geeksforgeeks.org/how-to-add-an-empty-column-to-dataframe-in-r/">How to Add an Empty Column to DataFrame in R? - GeeksforGeeks</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/26684072/add-columns-to-an-empty-data-frame-in-r">Add Columns to an Empty Data Frame in R - Stack Overflow</a></p></li>
<li><p><a href="https://sparkbyexamples.com/r-programming/add-empty-column-to-dataframe-in-r/">How to Add Empty Column to DataFrame in R? - Spark By Examples</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-20/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Create an Empty column in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-20/</guid>
  <pubDate>Mon, 20 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Text Processing in Linux: A Beginner’s Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-17/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Text processing is a fundamental aspect of Linux system administration and daily usage. In Linux, everything is treated as a file, making text processing tools essential for manipulating, analyzing, and transforming data. This comprehensive guide will introduce you to the most powerful text processing commands in Linux and show you how to use them effectively.</p>
</section>
<section id="basic-text-processing-commands" class="level1">
<h1>Basic Text Processing Commands</h1>
<section id="cat---the-swiss-army-knife-of-text-display" class="level2">
<h2 class="anchored" data-anchor-id="cat---the-swiss-army-knife-of-text-display">cat - The Swiss Army Knife of Text Display</h2>
<p>The <code>cat</code> command is primarily used for: - Displaying file contents - Concatenating multiple files - Creating simple text files - Viewing non-printing characters with <code>-A</code> option</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> file.txt    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows non-printing characters</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> file1 file2    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenates and displays multiple files</span></span></code></pre></div>
</section>
<section id="sort---organizing-your-data" class="level2">
<h2 class="anchored" data-anchor-id="sort---organizing-your-data">sort - Organizing Your Data</h2>
<p>The <code>sort</code> command helps organize text files by: - Sorting lines alphabetically - Performing numeric sorting with <code>-n</code> - Reverse sorting with <code>-r</code> - Sorting by specific fields using <code>-k</code></p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> numbers.txt          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numeric sort</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-k</span> 2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span> users.txt   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort by second field, delimited by colon</span></span></code></pre></div>
</section>
<section id="uniq---handling-duplicate-lines" class="level2">
<h2 class="anchored" data-anchor-id="uniq---handling-duplicate-lines">uniq - Handling Duplicate Lines</h2>
<p><code>uniq</code> works with sorted text to:</p>
<ul>
<li>Remove duplicate lines</li>
<li>Count occurrences with <code>-c</code></li>
<li>Show only duplicate lines with <code>-d</code></li>
<li>Display unique lines with <code>-u</code></li>
</ul>
</section>
</section>
<section id="advanced-text-processing-tools" class="level1">
<h1>Advanced Text Processing Tools</h1>
<section id="cut---extracting-text-sections" class="level2">
<h2 class="anchored" data-anchor-id="cut---extracting-text-sections">cut - Extracting Text Sections</h2>
<p>The <code>cut</code> command allows you to:</p>
<ul>
<li>Extract specific columns from files</li>
<li>Work with delimited files</li>
<li>Select character ranges</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> 1 /etc/passwd   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract usernames from passwd file</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 1-10 file.txt          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract first 10 characters of each line</span></span></code></pre></div>
</section>
<section id="paste---merging-file-contents" class="level2">
<h2 class="anchored" data-anchor-id="paste---merging-file-contents">paste - Merging File Contents</h2>
<p><code>paste</code> helps you:</p>
<ul>
<li>Combine files side by side</li>
<li>Merge lines from multiple files</li>
<li>Create structured text data</li>
</ul>
</section>
<section id="join---combining-files-based-on-common-fields" class="level2">
<h2 class="anchored" data-anchor-id="join---combining-files-based-on-common-fields">join - Combining Files Based on Common Fields</h2>
<p>Use <code>join</code> to:</p>
<ul>
<li>Merge files based on a shared key</li>
<li>Create relational data structures</li>
<li>Combine data from multiple sources</li>
</ul>
</section>
</section>
<section id="text-comparison-tools" class="level1">
<h1>Text Comparison Tools</h1>
<section id="diff---finding-file-differences" class="level2">
<h2 class="anchored" data-anchor-id="diff---finding-file-differences">diff - Finding File Differences</h2>
<p>The <code>diff</code> command is essential for:</p>
<ul>
<li>Comparing two files</li>
<li>Creating patches</li>
<li>Identifying changes between versions</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> old_file new_file    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unified diff format</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> dir1 dir2           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare directories recursively</span></span></code></pre></div>
</section>
<section id="tr---character-translation" class="level2">
<h2 class="anchored" data-anchor-id="tr---character-translation">tr - Character Translation</h2>
<p>Use <code>tr</code> to:</p>
<ul>
<li>Convert case (uppercase/lowercase)</li>
<li>Delete specific characters</li>
<li>Squeeze repeated characters</li>
</ul>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tr</span> a-z A-Z    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to uppercase</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tr</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'\r'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> dos_file        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove carriage returns</span></span></code></pre></div>
</section>
</section>
<section id="your-turn-practice-section" class="level1">
<h1>Your Turn! Practice Section</h1>
<p>Try this exercise:</p>
<ol type="1">
<li>Create a file with duplicate lines</li>
<li>Sort the file</li>
<li>Remove duplicates using uniq</li>
<li>Extract specific columns using cut</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<p><strong>Solution:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create file</span></span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple\nbanana\napple\ncherry"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> fruits.txt</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort and remove duplicates</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> fruits.txt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uniq</span></span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract first 3 characters</span></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 1-3 fruits.txt</span></code></pre></div>
<p></p>
</details></section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Text processing commands are powerful tools for data manipulation</li>
<li>Most commands can be combined using pipes</li>
<li>Regular expressions enhance text processing capabilities</li>
<li>Commands like <code>sed</code> and <code>tr</code> can automate text transformations</li>
<li>File comparison tools help track changes and create patches</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Why use command-line text processing instead of a text editor?</strong> A: Command-line tools are faster, automatable, and can handle large files more efficiently.</p></li>
<li><p><strong>Q: How can I process multiple files at once?</strong> A: Use wildcards or xargs to process multiple files, or write shell scripts to automate the process.</p></li>
<li><p><strong>Q: What’s the difference between <code>sed</code> and <code>tr</code>?</strong> A: <code>sed</code> is a stream editor for complex text transformations, while <code>tr</code> is specifically for character-by-character translation.</p></li>
<li><p><strong>Q: Can these tools handle large files?</strong> A: Yes, most Linux text processing tools are designed to handle large files efficiently by processing them line by line.</p></li>
<li><p><strong>Q: How can I learn more about regular expressions?</strong> A: Practice with tools like <code>grep</code> and <code>sed</code>, and consult their man pages and online tutorials.</p></li>
</ol>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p>Shotts, W. (2008). “The Linux Command Line - Chapter 20: Text Processing.”</p></li>
<li><p><a href="https://www.geeksforgeeks.org/tag/linux-text-processing-commands/">GeeksforGeeks. (n.d.). “Linux Text Processing Commands.”</a></p>
<ul>
<li>Comprehensive guide on various text processing commands in Linux</li>
<li>Includes practical examples and use cases</li>
</ul></li>
<li><p><a href="https://learnbyexample.gitbooks.io/linux-command-line/content/Text_Processing.html">Learn By Example. (n.d.). “Linux Command Line Text Processing.”</a></p>
<ul>
<li>Detailed tutorials on command line text processing</li>
<li>Includes advanced techniques and best practices</li>
</ul></li>
<li><p><a href="https://everythingdevops.dev/linux-text-processing-commands/">Everything DevOps. (n.d.). “Linux Text Processing Commands.”</a></p>
<ul>
<li>Modern perspective on text processing in DevOps context</li>
<li>Practical applications in automation and scripting</li>
</ul></li>
</ol>
<p>These sources provide comprehensive coverage of Linux text processing commands, from basic usage to advanced applications, making them valuable references for both beginners and experienced users.</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-17/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Text Processing in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-17/</guid>
  <pubDate>Fri, 17 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating Empty Data Frames in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-16/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data frames are the backbone of data manipulation in R, and knowing how to create them efficiently is crucial for any R programmer. While most tutorials focus on creating data frames with existing data, there are many scenarios where you need to start with an empty data frame. This comprehensive guide will walk you through various methods to create empty data frames using base R, dplyr, and data.table approaches.</p>
</section>
<section id="basic-concepts" class="level1">
<h1>Basic Concepts</h1>
<p>Before diving into the methods, let’s understand what we mean by an empty data frame. An empty data frame is a structure with defined columns but no rows, or with a specific number of rows but no actual data. This is particularly useful when:</p>
<ul>
<li>Building data frames dynamically</li>
<li>Creating templates for data collection</li>
<li>Setting up structures for loop results</li>
<li>Initializing containers for streaming data</li>
</ul>
</section>
<section id="method-1-creating-empty-data-frames-in-base-r" class="level1">
<h1>Method 1: Creating Empty Data Frames in Base R</h1>
<section id="basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax">Basic Syntax</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a basic empty data frame</span></span>
<span id="cb1-2">empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  0 variables</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create with column names</span></span>
<span id="cb3-2">empty_df_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">column3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(),</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df_cols)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ column1: chr 
 $ column2: num 
 $ column3: logi </code></pre>
</div>
</div>
</section>
<section id="with-column-specifications" class="level2">
<h2 class="anchored" data-anchor-id="with-column-specifications">With Column Specifications</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create with specific column types and names</span></span>
<span id="cb5-2">empty_df_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>(),</span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb5-7">)</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df_spec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ name  : chr 
 $ age   : num 
 $ active: logi </code></pre>
</div>
</div>
</section>
</section>
<section id="method-2-empty-data-frames-with-dplyr" class="level1">
<h1>Method 2: Empty Data Frames with dplyr</h1>
<section id="using-tibble" class="level2">
<h2 class="anchored" data-anchor-id="using-tibble">Using tibble</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty tibble</span></span>
<span id="cb7-4">empty_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb7-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb7-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb7-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>()</span>
<span id="cb7-8">)</span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_tibble)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [0 × 3] (S3: tbl_df/tbl/data.frame)
 $ name  : chr(0) 
 $ age   : num(0) 
 $ active: logi(0) </code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative method</span></span>
<span id="cb9-2">empty_tibble_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.rows =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_tibble_2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [0 × 0] (S3: tbl_df/tbl/data.frame)
 Named list()</code></pre>
</div>
</div>
</section>
<section id="advanced-dplyr-techniques" class="level2">
<h2 class="anchored" data-anchor-id="advanced-dplyr-techniques">Advanced dplyr Techniques</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create with specific column types</span></span>
<span id="cb11-2">empty_tibble_advanced <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timestamp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span>(),</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>(),</span>
<span id="cb11-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>()</span>
<span id="cb11-7">)</span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_tibble_advanced)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tibble [0 × 4] (S3: tbl_df/tbl/data.frame)
 $ id       : int(0) 
 $ timestamp: chr(0) 
 $ value    : num(0) 
 $ category : Factor w/ 0 levels: </code></pre>
</div>
</div>
</section>
</section>
<section id="method-3-data.table-solutions" class="level1">
<h1>Method 3: data.table Solutions</h1>
<section id="basic-data.table-creation" class="level2">
<h2 class="anchored" data-anchor-id="basic-data.table-creation">Basic data.table Creation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty data.table</span></span>
<span id="cb13-4">empty_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>()</span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classes 'data.table' and 'data.frame':  0 obs. of  0 variables
 - attr(*, ".internal.selfref")=&lt;externalptr&gt; </code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create with column specifications</span></span>
<span id="cb15-2">empty_dt_spec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb15-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb15-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb15-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb15-6">)</span>
<span id="cb15-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_dt_spec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classes 'data.table' and 'data.frame':  0 obs. of  3 variables:
 $ id   : int 
 $ name : chr 
 $ score: num 
 - attr(*, ".internal.selfref")=&lt;externalptr&gt; </code></pre>
</div>
</div>
</section>
<section id="performance-optimized-approach" class="level2">
<h2 class="anchored" data-anchor-id="performance-optimized-approach">Performance-Optimized Approach</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create with set column types and allocation</span></span>
<span id="cb17-2">empty_dt_perf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setnames</span>(empty_dt_perf, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>))</span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_dt_perf)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classes 'data.table' and 'data.frame':  0 obs. of  3 variables:
 $ id   : logi 
 $ name : logi 
 $ score: logi 
 - attr(*, ".internal.selfref")=&lt;externalptr&gt; </code></pre>
</div>
</div>
</section>
</section>
<section id="advanced-techniques" class="level1">
<h1>Advanced Techniques</h1>
<section id="preserving-column-types" class="level2">
<h2 class="anchored" data-anchor-id="preserving-column-types">Preserving Column Types</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a template data frame</span></span>
<span id="cb19-2">template_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb19-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb19-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()),</span>
<span id="cb19-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb19-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb19-8">)</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify column types</span></span>
<span id="cb19-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(template_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  4 variables:
 $ id   : int 
 $ name : chr 
 $ date : 'Date' num(0) 
 $ value: num </code></pre>
</div>
</div>
</section>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">Error Handling</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">create_empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(col_names, col_types) {</span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb21-3">    df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(</span>
<span id="cb21-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(col_names), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)),</span>
<span id="cb21-5">      col_names</span>
<span id="cb21-6">    )</span>
<span id="cb21-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb21-8">  }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb21-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error creating data frame: "</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message)</span>
<span id="cb21-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb21-11">  })</span>
<span id="cb21-12">}</span></code></pre></div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try creating an empty data frame with the following specifications:</p>
<ul>
<li>Three columns: ‘student_id’, ‘score’, and ‘grade’</li>
<li>student_id should be integer</li>
<li>score should be numeric</li>
<li>grade should be character</li>
</ul>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution using base R</span></span>
<span id="cb22-2">student_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb22-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">student_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb22-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb22-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb22-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb22-7">)</span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify the structure</span></span>
<span id="cb22-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(student_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ student_id: int 
 $ score     : num 
 $ grade     : chr </code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ol type="1">
<li>Base R offers simple but powerful methods for creating empty data frames</li>
<li>dplyr’s tibble provides more modern and consistent behavior</li>
<li>data.table offers high-performance solutions for large datasets</li>
<li>Always specify column types explicitly for better control</li>
<li>Consider memory allocation for performance-critical applications</li>
</ol>
</section>
<section id="common-faqs" class="level1">
<h1>Common FAQs</h1>
<p><strong>Q: Why create an empty data frame instead of building it with data?</strong> A: Empty data frames are useful for template creation, dynamic data collection, and memory pre-allocation in performance-critical applications.</p>
<p><strong>Q: Which method is fastest for large datasets?</strong> A: data.table generally provides the best performance for large datasets, especially when pre-allocating memory.</p>
<p><strong>Q: Can I mix different column types in an empty data frame?</strong> A: Yes, you can specify different column types when creating the data frame using any method.</p>
<p><strong>Q: How do I add rows to an empty data frame?</strong> A: Use rbind(), bind_rows(), or data.table’s append functionality depending on your chosen method.</p>
<p><strong>Q: Should I use stringsAsFactors=FALSE in modern R?</strong> A: In R 4.0 and later, strings are no longer automatically converted to factors, so this parameter is less necessary.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p>Statology. (n.d.). <a href="https://www.statology.org/create-empty-data-frame-in-r/">Create Empty DataFrame in R</a>. This resource provides a comprehensive overview of creating empty data frames in R, including various methods and examples.</p></li>
<li><p>Stack Overflow. (n.d.). <a href="https://stackoverflow.com/questions/10689055/create-an-empty-data-frame">How to Create an Empty Data Frame in R (With Examples)</a>. This discussion thread offers insights and solutions from the R programming community on initializing empty data frames.</p></li>
<li><p>Spark By {Examples}. (n.d.). <a href="https://sparkbyexamples.com/r-programming/r-create-an-empty-dataframe/">R Create an Empty DataFrame</a>. This article explains different approaches to creating empty data frames in R, highlighting the use of the <code>data.frame()</code> function.</p></li>
<li><p>GeeksforGeeks. (n.d.). <a href="https://www.geeksforgeeks.org/how-to-create-an-empty-dataframe-in-r/">How to Create an Empty DataFrame in R?</a>. This tutorial provides a step-by-step guide on creating empty data frames in R, along with practical examples.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Creating empty data frames in R is a fundamental skill that can be accomplished through various methods, each with its own advantages. Whether you’re using base R, dplyr, or data.table, understanding these approaches will help you write more efficient and maintainable code. Remember to consider your specific use case when choosing a method, and always test your code with small examples before scaling up to larger datasets.</p>
<hr>
<p><strong>Did you find this guide helpful? Share it with your fellow R programmers and let us know your preferred method for creating empty data frames in the comments below!</strong></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-16/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Data Frames in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-16/</guid>
  <pubDate>Thu, 16 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering String Functions in C Programming: A Complete Guide for Beginners</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-15/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>String manipulation is a fundamental skill in C programming that every developer needs to master. Whether you’re reading user input, displaying messages, or combining text, understanding how to work with strings effectively is crucial for writing robust C programs. In this comprehensive guide, we’ll explore essential string functions, their proper usage, and important security considerations that every beginner should know.</p>
</section>
<section id="understanding-c-strings-the-fundamentals" class="level1">
<h1>Understanding C Strings: The Fundamentals</h1>
<p>Before diving into specific functions, it’s important to understand that strings in C are simply arrays of characters terminated by a null character (<code>\0</code>). This fundamental concept forms the basis for all string operations in C programming.</p>
<section id="string-representation-in-c" class="level2">
<h2 class="anchored" data-anchor-id="string-representation-in-c">String Representation in C</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> greeting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Internally stored as: {'H','e','l','l','o','\0'}</span></span></code></pre></div>
</section>
</section>
<section id="essential-string-inputoutput-functions" class="level1">
<h1>Essential String Input/Output Functions</h1>
<section id="the-scanf-function-reading-basic-input" class="level2">
<h2 class="anchored" data-anchor-id="the-scanf-function-reading-basic-input">The scanf() Function: Reading Basic Input</h2>
<p>The <code>scanf()</code> function is commonly used for reading formatted input from users. However, it comes with some important limitations:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb2-2">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter username: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-3">scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%24s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> username<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Using width specifier for safety</span></span></code></pre></div>
<p>Key considerations for <code>scanf()</code>:</p>
<ul>
<li>Stops reading at the first whitespace character</li>
<li>Cannot handle strings with spaces (e.g., full names)</li>
<li>Always use width specifiers to prevent buffer overflows</li>
</ul>
</section>
<section id="understanding-puts-simple-string-output" class="level2">
<h2 class="anchored" data-anchor-id="understanding-puts-simple-string-output">Understanding puts(): Simple String Output</h2>
<p>The <code>puts()</code> function provides a straightforward way to output strings:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> message<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-2">puts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>message<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Automatically adds a newline</span></span></code></pre></div>
<p>Benefits of using <code>puts()</code>:</p>
<ul>
<li>Automatically adds a newline character</li>
<li>Simpler than <code>printf()</code> for basic string output</li>
<li>More efficient for simple string printing</li>
</ul>
</section>
<section id="the-controversial-gets-function" class="level2">
<h2 class="anchored" data-anchor-id="the-controversial-gets-function">The Controversial gets() Function</h2>
<p>While <code>gets()</code> was historically used for reading strings with spaces, it has been removed from modern C standards due to serious security concerns. Here’s why you should avoid it:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> city<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-2">gets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>city<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// DANGEROUS - Never use this!</span></span></code></pre></div>
<p>Security risks of <code>gets()</code>:</p>
<ul>
<li>No bounds checking, leading to buffer overflows</li>
<li>Removed from C11 standard due to security vulnerabilities</li>
<li>Can cause program crashes and security breaches</li>
</ul>
</section>
<section id="safe-alternatives-to-gets" class="level2">
<h2 class="anchored" data-anchor-id="safe-alternatives-to-gets">Safe Alternatives to gets()</h2>
<p>Instead of <code>gets()</code>, use these safer alternatives:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-2">fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Safe alternative</span></span></code></pre></div>
<p>Benefits of <code>fgets()</code>:</p>
<ul>
<li>Allows specifying maximum input length</li>
<li>Prevents buffer overflows</li>
<li>Retains newline character (may need handling)</li>
</ul>
</section>
</section>
<section id="string-manipulation-with-strcat" class="level1">
<h1>String Manipulation with strcat()</h1>
<section id="basic-string-concatenation" class="level2">
<h2 class="anchored" data-anchor-id="basic-string-concatenation">Basic String Concatenation</h2>
<p>The <code>strcat()</code> function combines two strings:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-3">strcat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> last<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Results in "Hello, World!"</span></span></code></pre></div>
<p>Important considerations:</p>
<ul>
<li>Destination buffer must be large enough for combined strings</li>
<li>No built-in bounds checking</li>
<li>Can lead to buffer overflows if not used carefully</li>
</ul>
</section>
<section id="safer-string-concatenation" class="level2">
<h2 class="anchored" data-anchor-id="safer-string-concatenation">Safer String Concatenation</h2>
<p>Use <code>strncat()</code> for safer string concatenation:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-3">strncat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> src<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> strlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</section>
</section>
<section id="best-practices-for-string-handling" class="level1">
<h1>Best Practices for String Handling</h1>
<section id="input-validation" class="level2">
<h2 class="anchored" data-anchor-id="input-validation">1. Input Validation</h2>
<p>Always validate user input: - Check string lengths before operations - Use appropriate buffer sizes - Handle error cases gracefully</p>
</section>
<section id="buffer-size-management" class="level2">
<h2 class="anchored" data-anchor-id="buffer-size-management">2. Buffer Size Management</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define BUFFER_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb8-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BUFFER_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Always ensure space for null terminator</span></span>
<span id="cb8-4">fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BUFFER_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</section>
<section id="safe-function-alternatives" class="level2">
<h2 class="anchored" data-anchor-id="safe-function-alternatives">3. Safe Function Alternatives</h2>
<p>Use these safer alternatives: - <code>fgets()</code> instead of <code>gets()</code> - <code>strncat()</code> instead of <code>strcat()</code> - <code>strncpy()</code> instead of <code>strcpy()</code></p>
</section>
</section>
<section id="your-turn-practice-exercise" class="level1">
<h1>Your Turn! Practice Exercise</h1>
<p>Try this simple exercise to practice safe string handling:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb9-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> firstName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> lastName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-8">    </span>
<span id="cb9-9">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter first name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-10">    fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>firstName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>firstName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-11">    firstName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>strcspn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>firstName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove newline</span></span>
<span id="cb9-12">    </span>
<span id="cb9-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter last name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-14">    fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lastName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lastName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-15">    lastName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>strcspn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lastName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove newline</span></span>
<span id="cb9-16">    </span>
<span id="cb9-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Safe concatenation</span></span>
<span id="cb9-18">    strncat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> firstName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> strlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-19">    strncat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> strlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-20">    strncat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lastName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> strlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-21">    </span>
<span id="cb9-22">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Full name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fullName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-24"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-15/solution.png" class="img-fluid figure-img"></p>
<figcaption>Solution from my terminal</figcaption>
</figure>
</div>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Never use <code>gets()</code> - it’s dangerous and deprecated</li>
<li>Always use buffer size limits with string functions</li>
<li>Prefer safer alternatives like <code>fgets()</code> and <code>strncat()</code></li>
<li>Validate input and handle errors appropriately</li>
<li>Check buffer sizes before string operations</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><strong>Why was gets() removed from C11?</strong>
<ul>
<li>It was removed due to inherent security vulnerabilities and lack of bounds checking.</li>
</ul></li>
<li><strong>What’s the difference between puts() and printf()?</strong>
<ul>
<li><code>puts()</code> automatically adds a newline and is simpler for basic string output.</li>
</ul></li>
<li><strong>How can I safely read strings with spaces?</strong>
<ul>
<li>Use <code>fgets()</code> with appropriate buffer size limits.</li>
</ul></li>
<li><strong>Why should I use strncat() instead of strcat()?</strong>
<ul>
<li><code>strncat()</code> allows specifying maximum characters to concatenate, preventing buffer overflows.</li>
</ul></li>
<li><strong>How do I handle the newline character from fgets()?</strong>
<ul>
<li>Use <code>strcspn()</code> to find and remove the newline character.</li>
</ul></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Understanding string functions in C is crucial for writing secure and efficient programs. By following the best practices outlined in this guide and using safer alternatives to deprecated functions, you can write more robust C programs while avoiding common security pitfalls.</p>
<p>Have you tried implementing these string functions in your C programs? Share your experience in the comments below! Don’t forget to bookmark this guide for future reference.</p>
<hr>
<p>Happy Coding! 🚀</p>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-15/</guid>
  <pubDate>Wed, 15 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>A Complete Guide to Creating Empty Vectors in R: Methods, Best Practices, and Applications</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-14/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Empty vectors are fundamental building blocks in R programming that serve as great starting points for data manipulation and analysis tasks. Whether you’re developing algorithms, processing large datasets, or conducting statistical analyses, understanding how to create and work with empty vectors is crucial for efficient R programming. In this comprehensive guide, we’ll explore various methods to create empty vectors, best practices for their implementation, and practical applications in real-world scenarios.</p>
</section>
<section id="understanding-vectors-in-r" class="level1">
<h1>Understanding Vectors in R</h1>
<p>Before diving into empty vectors, let’s establish a solid foundation of what vectors are in R. Vectors are the simplest and most commonly used data structure in R, serving as sequences of data elements of the same basic type. They are similar to arrays in other programming languages but with some unique characteristics that make them particularly powerful for data analysis.</p>
<section id="key-characteristics-of-vectors-in-r" class="level2">
<h2 class="anchored" data-anchor-id="key-characteristics-of-vectors-in-r">Key Characteristics of Vectors in R:</h2>
<ul>
<li>They must contain elements of the same type</li>
<li>They are dynamic in nature, allowing for growth or shrinkage</li>
<li>They serve as building blocks for more complex data structures</li>
<li>They support vectorized operations for efficient computation</li>
</ul>
</section>
</section>
<section id="methods-to-create-empty-vectors-in-r" class="level1">
<h1>Methods to Create Empty Vectors in R</h1>
<p>Let’s explore the various approaches to creating empty vectors in R, each with its own specific use cases and advantages.</p>
<section id="using-the-c-function" class="level2">
<h2 class="anchored" data-anchor-id="using-the-c-function">1. Using the <code>c()</code> Function</h2>
<p>The concatenate function (<code>c()</code>) is one of the simplest ways to create an empty vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(vec)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: NULL</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
<p>This method creates a vector of type <code>NULL</code>, making it flexible for later use.</p>
</section>
<section id="using-the-vector-function" class="level2">
<h2 class="anchored" data-anchor-id="using-the-vector-function">2. Using the <code>vector()</code> Function</h2>
<p>The <code>vector()</code> function provides more control over the type of empty vector you create:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(vec)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: numeric(0)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numeric(0)</code></pre>
</div>
</div>
<p>This approach is particularly useful when you need to specify the data type in advance.</p>
</section>
<section id="using-type-specific-functions" class="level2">
<h2 class="anchored" data-anchor-id="using-type-specific-functions">3. Using Type-Specific Functions</h2>
<p>R provides several type-specific functions for creating empty vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty numeric vector</span></span>
<span id="cb5-2">num_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(num_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numeric(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty character vector</span></span>
<span id="cb7-2">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(char_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty logical vector</span></span>
<span id="cb9-2">log_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>()</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(log_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>logical(0)</code></pre>
</div>
</div>
<p>These methods initialize vectors of specific types, ensuring type consistency in your code.</p>
</section>
</section>
<section id="best-practices-for-working-with-empty-vectors" class="level1">
<h1>Best Practices for Working with Empty Vectors</h1>
<p>To effectively use empty vectors in your R programming, consider these essential best practices:</p>
<section id="explicit-initialization" class="level2">
<h2 class="anchored" data-anchor-id="explicit-initialization">1. Explicit Initialization</h2>
<p>Always initialize vectors with a specific type to ensure predictable behavior:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good practice</span></span>
<span id="cb11-2">numeric_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid ambiguous initialization</span></span>
<span id="cb11-5">bad_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span></code></pre></div>
</section>
<section id="memory-management" class="level2">
<h2 class="anchored" data-anchor-id="memory-management">2. Memory Management</h2>
<p>When working with vectors that will grow in size, preallocate memory to improve performance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Efficient approach</span></span>
<span id="cb12-2">vector_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb12-3">prealloc_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>, vector_size)</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(prealloc_vector))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0 0 0 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Less efficient approach</span></span>
<span id="cb14-2">growing_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(growing_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numeric(0)</code></pre>
</div>
</div>
</section>
<section id="type-consistency" class="level2">
<h2 class="anchored" data-anchor-id="type-consistency">3. Type Consistency</h2>
<p>Maintain type consistency to avoid unexpected coercion:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good practice</span></span>
<span id="cb16-2">numeric_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-3">numeric_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(numeric_vector, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid mixing types</span></span>
<span id="cb18-2">numeric_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(numeric_vector, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forces coercion to character</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "a"</code></pre>
</div>
</div>
</section>
</section>
<section id="practical-applications" class="level1">
<h1>Practical Applications</h1>
<p>Empty vectors have numerous practical applications in data analysis and manipulation tasks:</p>
<section id="data-collection-and-initialization" class="level2">
<h2 class="anchored" data-anchor-id="data-collection-and-initialization">1. Data Collection and Initialization</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a vector for collecting data</span></span>
<span id="cb20-2">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect data iteratively</span></span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb20-6">    results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(results, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-7">}</span></code></pre></div>
</div>
</section>
<section id="conditional-data-storage" class="level2">
<h2 class="anchored" data-anchor-id="conditional-data-storage">2. Conditional Data Storage</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter positive numbers</span></span>
<span id="cb21-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb21-3">positive_nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb21-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(num <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers) {</span>
<span id="cb21-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) positive_nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(positive_nums, num)</span>
<span id="cb21-6">}</span></code></pre></div>
</div>
</section>
<section id="dynamic-data-aggregation" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-data-aggregation">3. Dynamic Data Aggregation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Aggregate data based on conditions</span></span>
<span id="cb22-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb22-3">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb22-4">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb22-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(filtered_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 5</code></pre>
</div>
</div>
</section>
</section>
<section id="performance-considerations" class="level1">
<h1>Performance Considerations</h1>
<p>When working with empty vectors, keep these performance considerations in mind:</p>
<ol type="1">
<li><p><strong>Memory Allocation</strong>: R uses a small vector pool for efficient memory allocation of vectors less than 128 bytes.</p></li>
<li><p><strong>Vector Growth</strong>: Pre-allocate vectors when possible to avoid repeated memory reallocations:</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the rbenchmark package</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rbenchmark)</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the number of iterations</span></span>
<span id="cb24-5">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Benchmarking the efficient and inefficient methods</span></span>
<span id="cb24-8">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb24-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Efficient =</span> {</span>
<span id="cb24-10">    efficient_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(n)</span>
<span id="cb24-11">  },</span>
<span id="cb24-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Inefficient =</span> {</span>
<span id="cb24-13">    inefficient_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb24-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb24-15">      inefficient_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(inefficient_vector, i)</span>
<span id="cb24-16">    }</span>
<span id="cb24-17">  },</span>
<span id="cb24-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb24-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb24-20">)</span>
<span id="cb24-21"></span>
<span id="cb24-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the results</span></span>
<span id="cb24-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         test replications elapsed relative user.self sys.self
1   Efficient          100    0.00       NA      0.00     0.00
2 Inefficient          100   44.42       NA     19.56    19.29</code></pre>
</div>
</div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice creating and working with empty vectors, Create a function in R that filters out even numbers from a given list of integers.</p>
<p>Requirements:</p>
<ul>
<li>The function should iterate through each number in the input vector.</li>
<li>For each number, check if it is even (i.e., divisible by 2).</li>
<li>If the number is even, it should be added to the result vector.</li>
<li>The function should return the result vector containing only the even numbers.</li>
</ul>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise: Create a function that filters even numbers</span></span>
<span id="cb26-2">filter_even <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(numbers) {</span>
<span id="cb26-3">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(num <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers) {</span>
<span id="cb26-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb26-6">            result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(result, num)</span>
<span id="cb26-7">        }</span>
<span id="cb26-8">    }</span>
<span id="cb26-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb26-10">}</span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb26-13">test_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb26-14">even_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_even</span>(test_numbers)</span>
<span id="cb26-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(even_numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2  4  6  8 10</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Empty vectors are fundamental building blocks in R programming</li>
<li>Multiple methods exist for creating empty vectors, each suited for specific use cases</li>
<li>Proper initialization and type specification are crucial for reliable code</li>
<li>Pre-allocation can significantly improve performance</li>
<li>Empty vectors are valuable for dynamic data collection and filtering</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Understanding how to create and work with empty vectors is essential for effective R programming. By following the best practices and considering performance implications, you can write more efficient and maintainable code. Whether you’re performing data analysis, building algorithms, or managing large datasets, empty vectors provide the flexibility and functionality needed for successful R programming.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: What is the difference between <code>numeric(0)</code> and <code>c()</code>?</strong> A: <code>numeric(0)</code> creates an empty numeric vector, while <code>c()</code> creates a NULL vector that can accept any type.</p></li>
<li><p><strong>Q: How can I check if a vector is empty?</strong> A: Use <code>length(vector) == 0</code> to check if a vector is empty.</p></li>
<li><p><strong>Q: What is the most memory-efficient way to create an empty vector?</strong> A: Using type-specific functions like <code>numeric(0)</code> or <code>character(0)</code> is most efficient.</p></li>
<li><p><strong>Q: Can I mix different types in a vector?</strong> A: No, vectors in R must contain elements of the same type. Mixing types will result in coercion.</p></li>
<li><p><strong>Q: Should I always pre-allocate vector size?</strong> A: Pre-allocation is recommended when you know the final size of the vector to improve performance.</p></li>
</ol>
<p><strong>Share your experiences with empty vectors in R in the comments below or connect with us on social media using #RProgramming #DataScience.</strong></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p>Bhardwaj, S. (n.d.). R - Create empty vector and append values. GeeksforGeeks. <a href="https://www.geeksforgeeks.org/r-create-empty-vector-and-append-values/" class="uri">https://www.geeksforgeeks.org/r-create-empty-vector-and-append-values/</a></p></li>
<li><p>Frost, J. (n.d.). How to create an empty vector in R. Statology. <a href="https://www.statology.org/create-empty-vector-in-r/" class="uri">https://www.statology.org/create-empty-vector-in-r/</a></p></li>
<li><p>SparkByExamples. (n.d.). Create empty vector in R. SparkByExamples. <a href="https://sparkbyexamples.com/r-programming/create-empty-vector-in-r/" class="uri">https://sparkbyexamples.com/r-programming/create-empty-vector-in-r/</a></p></li>
<li><p>Stack Overflow. (2010). How to create an empty R vector to add new items. Stack Overflow. <a href="https://stackoverflow.com/questions/3413879/how-to-create-an-empty-r-vector-to-add-new-items" class="uri">https://stackoverflow.com/questions/3413879/how-to-create-an-empty-r-vector-to-add-new-items</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-14/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Creating Vectors in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-14/</guid>
  <pubDate>Tue, 14 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create an Empty List in R: A Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-13/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Creating empty lists in R is a fundamental skill that every R programmer should master. Whether you’re building complex data structures, collecting results from iterations, or managing dynamic data, understanding how to properly initialize and work with empty lists is crucial. This comprehensive guide will walk you through everything you need to know about creating and managing empty lists in R.</p>
</section>
<section id="understanding-lists-in-r" class="level1">
<h1>Understanding Lists in R</h1>
<section id="what-is-a-list" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-list">What is a List?</h2>
<p>Lists in R are versatile data structures that can hold elements of different types and sizes. Unlike vectors or matrices, which must contain elements of the same type, lists can store various data types including numbers, strings, vectors, and even other lists.</p>
</section>
<section id="why-use-lists" class="level2">
<h2 class="anchored" data-anchor-id="why-use-lists">Why Use Lists?</h2>
<p>Lists offer several advantages:</p>
<ul>
<li><strong>Flexibility</strong>: Store different data types in a single structure</li>
<li><strong>Nested Storage</strong>: Create hierarchical data organizations</li>
<li><strong>Dynamic Growth</strong>: Easily add or remove elements</li>
<li><strong>Named Elements</strong>: Access data through meaningful identifiers</li>
</ul>
</section>
<section id="list-vs.-other-data-structures" class="level2">
<h2 class="anchored" data-anchor-id="list-vs.-other-data-structures">List vs.&nbsp;Other Data Structures</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vector (same type)</span></span>
<span id="cb1-2">numeric_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-3">numeric_vector</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List (mixed types)</span></span>
<span id="cb3-2">mixed_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-3">mixed_list</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] "text"

[[3]]
[1] TRUE</code></pre>
</div>
</div>
</section>
</section>
<section id="basic-methods-to-create-empty-lists" class="level1">
<h1>Basic Methods to Create Empty Lists</h1>
<section id="using-list-function" class="level2">
<h2 class="anchored" data-anchor-id="using-list-function">Using list() Function</h2>
<p>The most straightforward way to create an empty list is using the <code>list()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a basic empty list</span></span>
<span id="cb5-2">empty_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(empty_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>list()</code></pre>
</div>
</div>
</section>
<section id="setting-list-length" class="level2">
<h2 class="anchored" data-anchor-id="setting-list-length">Setting List Length</h2>
<p>You can initialize a list with a specific length:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty list of length 5</span></span>
<span id="cb7-2">fixed_length_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fixed_length_list))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
</section>
<section id="named-lists" class="level2">
<h2 class="anchored" data-anchor-id="named-lists">Named Lists</h2>
<p>Creating an empty named list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize empty named list</span></span>
<span id="cb9-2">named_empty_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">first =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">second =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(named_empty_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$first
NULL

$second
NULL</code></pre>
</div>
</div>
</section>
</section>
<section id="advanced-empty-list-operations" class="level1">
<h1>Advanced Empty List Operations</h1>
<section id="creating-nested-empty-lists" class="level2">
<h2 class="anchored" data-anchor-id="creating-nested-empty-lists">Creating Nested Empty Lists</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create nested empty lists</span></span>
<span id="cb11-2">nested_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outer1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">outer2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inner1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb11-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inner2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb11-7">  )</span>
<span id="cb11-8">)</span>
<span id="cb11-9">nested_list</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$outer1
list()

$outer2
$outer2$inner1
list()

$outer2$inner2
list()</code></pre>
</div>
</div>
</section>
<section id="lists-of-specific-types" class="level2">
<h2 class="anchored" data-anchor-id="lists-of-specific-types">Lists of Specific Types</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list to hold only numeric vectors</span></span>
<span id="cb13-2">numeric_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(numeric_list) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data3"</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="common-use-cases" class="level1">
<h1>Common Use Cases</h1>
<section id="loop-operations" class="level2">
<h2 class="anchored" data-anchor-id="loop-operations">Loop Operations</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize an empty list for storing loop results</span></span>
<span id="cb14-2">results_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb14-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb14-4">  results_list[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-5">}</span></code></pre></div>
</div>
</section>
<section id="data-collection" class="level2">
<h2 class="anchored" data-anchor-id="data-collection">Data Collection</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of collecting data</span></span>
<span id="cb15-2">data_collection <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb15-3">data_collection<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>timestamps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb15-4">data_collection<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-5">data_collection</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$timestamps
[1] "2025-01-13 07:22:34 EST"

$values
numeric(0)</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<section id="memory-management" class="level2">
<h2 class="anchored" data-anchor-id="memory-management">Memory Management</h2>
<ul>
<li>Pre-allocate list size when possible</li>
<li>Clear unnecessary elements</li>
<li>Use <code>rm()</code> to remove large lists when no longer needed</li>
</ul>
</section>
<section id="naming-conventions" class="level2">
<h2 class="anchored" data-anchor-id="naming-conventions">Naming Conventions</h2>
<ul>
<li>Use descriptive names</li>
<li>Follow consistent naming patterns</li>
<li>Avoid special characters in names</li>
</ul>
</section>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">Error Handling</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Safe list element access</span></span>
<span id="cb17-2">safely_get_element <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(lst, element) {</span>
<span id="cb17-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(element <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(lst)) {</span>
<span id="cb17-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(lst[[element]])</span>
<span id="cb17-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb17-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb17-7">  }</span>
<span id="cb17-8">}</span></code></pre></div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try solving this practical exercise:</p>
<p>Problem: Create a function that initializes an empty list and fills it with the squares of numbers from 1 to n, where n is a parameter.</p>
<p>Try writing your solution before looking at the one below.</p>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">create_squares_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb18-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize empty list</span></span>
<span id="cb18-3">  squares_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, n)</span>
<span id="cb18-4">  </span>
<span id="cb18-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill the list</span></span>
<span id="cb18-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb18-7">    squares_list[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb18-8">  }</span>
<span id="cb18-9">  </span>
<span id="cb18-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add names to elements</span></span>
<span id="cb18-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(squares_list) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square_"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n)</span>
<span id="cb18-12">  </span>
<span id="cb18-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(squares_list)</span>
<span id="cb18-14">}</span>
<span id="cb18-15"></span>
<span id="cb18-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb18-17">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_squares_list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb18-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$square_1
[1] 1

$square_2
[1] 4

$square_3
[1] 9

$square_4
[1] 16

$square_5
[1] 25</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Use <code>list()</code> for basic empty list creation</li>
<li><code>vector("list", n)</code> creates a list of specific length</li>
<li>Named lists improve code readability</li>
<li>Pre-allocation improves performance</li>
<li>Lists can store any type of R object</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: What’s the difference between NULL and an empty list?</strong> A: NULL represents an empty object, while an empty list is a list with length 0.</p></li>
<li><p><strong>Q: How can I check if a list is empty?</strong> A: Use <code>length(list) == 0</code> or <code>is.null(list[[1]])</code>.</p></li>
<li><p><strong>Q: Can I convert an empty list to other data types?</strong> A: Yes, but be careful as conversion rules vary by data type.</p></li>
<li><p><strong>Q: What’s the maximum size of a list in R?</strong> A: Limited only by available memory.</p></li>
<li><p><strong>Q: How do I remove elements from a list?</strong> A: Use NULL assignment or list[-index] notation.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Understanding how to create and manage empty lists in R is essential for efficient programming. Whether you’re building complex data structures or collecting results, proper list initialization and management will make your code more robust and efficient.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.statology.org/create-empty-list-in-r/">Statology. (2024). How to Create an Empty List in R (With Examples).</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/67389392/how-to-create-an-empty-list">Stack Overflow. (2021). How to create an empty list?</a></p></li>
<li><p><a href="https://sparkbyexamples.com/r-programming/create-an-empty-list-in-r/">Spark By Examples. (2024). How To Create an Empty List in R?</a></p></li>
<li><p><a href="https://www.r-bloggers.com/2019/09/initializing-an-empty-list/">R-bloggers. (2019). Initializing an empty list.</a></p></li>
</ol>
<hr>
<p><strong>Did you find this guide helpful? Share it with fellow R programmers and let us know your thoughts in the comments below! For more R programming tips and tutorials, follow our blog.</strong></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-13/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Lists in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>lists</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-13/</guid>
  <pubDate>Mon, 13 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Regular Expressions in Linux: A Beginner’s Complete Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-10/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Regular expressions (regex) are powerful tools that form the backbone of text pattern matching and manipulation in Linux. Whether you’re a system administrator, developer, or Linux enthusiast, understanding regex can significantly enhance your command-line capabilities. This guide will walk you through everything you need to know about regular expressions in Linux, from basic concepts to practical applications.</p>
</section>
<section id="the-fundamentals-of-regular-expressions" class="level1">
<h1>The Fundamentals of Regular Expressions</h1>
<section id="what-are-regular-expressions" class="level2">
<h2 class="anchored" data-anchor-id="what-are-regular-expressions">What Are Regular Expressions?</h2>
<p>Regular expressions are symbolic notations used to identify patterns in text. While they might seem similar to shell wildcards, they offer far more sophisticated pattern-matching capabilities. In Linux, regular expressions are supported by numerous command-line tools and programming languages.</p>
</section>
<section id="basic-vs.-extended-regular-expressions" class="level2">
<h2 class="anchored" data-anchor-id="basic-vs.-extended-regular-expressions">Basic vs.&nbsp;Extended Regular Expressions</h2>
<p>Linux supports two types of regular expressions:</p>
<ul>
<li><strong>Basic Regular Expressions (BRE)</strong>: Include basic metacharacters (^, $, ., [], *)</li>
<li><strong>Extended Regular Expressions (ERE)</strong>: Add support for additional metacharacters ((, ), {, }, ?, +, |)</li>
</ul>
</section>
</section>
<section id="essential-regular-expression-components" class="level1">
<h1>Essential Regular Expression Components</h1>
<section id="metacharacters" class="level2">
<h2 class="anchored" data-anchor-id="metacharacters">Metacharacters</h2>
<p>The following metacharacters have special meaning in regex:</p>
<pre><code>^ $ . [ ] { } - ? * + ( ) | \</code></pre>
</section>
<section id="literal-characters" class="level2">
<h2 class="anchored" data-anchor-id="literal-characters">Literal Characters</h2>
<p>Any character not listed as a metacharacter matches itself. For example, the pattern “hello” matches exactly those five characters in that order.</p>
</section>
<section id="character-classes" class="level2">
<h2 class="anchored" data-anchor-id="character-classes">Character Classes</h2>
<p>POSIX defines several character classes for convenient pattern matching:</p>
<ul>
<li><code>[:alnum:]</code>: Alphanumeric characters</li>
<li><code>[:alpha:]</code>: Alphabetic characters</li>
<li><code>[:digit:]</code>: Numeric characters</li>
<li><code>[:space:]</code>: Whitespace characters</li>
<li><code>[:upper:]</code>: Uppercase characters</li>
<li><code>[:lower:]</code>: Lowercase characters</li>
</ul>
</section>
</section>
<section id="working-with-grep-and-regular-expressions" class="level1">
<h1>Working with grep and Regular Expressions</h1>
<section id="basic-grep-usage" class="level2">
<h2 class="anchored" data-anchor-id="basic-grep-usage">Basic grep Usage</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">options</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span> regex <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">file...</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</section>
<section id="common-grep-options" class="level2">
<h2 class="anchored" data-anchor-id="common-grep-options">Common grep Options</h2>
<ul>
<li><code>-i</code>: Ignore case</li>
<li><code>-v</code>: Invert match</li>
<li><code>-c</code>: Count matches</li>
<li><code>-l</code>: List matching files</li>
<li><code>-n</code>: Show line numbers</li>
<li><code>-E</code>: Use extended regular expressions</li>
</ul>
</section>
</section>
<section id="practical-applications" class="level1">
<h1>Practical Applications</h1>
<section id="example-1-finding-files" class="level2">
<h2 class="anchored" data-anchor-id="example-1-finding-files">Example 1: Finding Files</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all Python files in current directory</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'\.py$'</span></span></code></pre></div>
</section>
<section id="example-2-validating-phone-numbers" class="level2">
<h2 class="anchored" data-anchor-id="example-2-validating-phone-numbers">Example 2: Validating Phone Numbers</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Match phone numbers in format (XXX) XXX-XXXX</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-E</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$'</span> phonelist.txt</span></code></pre></div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<section id="practice-problem" class="level2">
<h2 class="anchored" data-anchor-id="practice-problem">Practice Problem</h2>
<p>Write a regular expression to match valid email addresses in a text file.</p>
<p>Problem:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a file with various email addresses and use grep to find valid ones</span></span></code></pre></div>
<p><detaills></detaills></p>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-E</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'</span> emails.txt</span></code></pre></div>

</section>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ol type="1">
<li>Regular expressions are pattern-matching tools in Linux</li>
<li>Use BRE for simple pattern matching, ERE for complex patterns</li>
<li>The grep command is the primary tool for regex searching</li>
<li>POSIX character classes provide standardized character sets</li>
<li>Metacharacters have special meanings and must be escaped when used literally</li>
</ol>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: What’s the difference between regex and shell wildcards?</strong> A: Regex provides more sophisticated pattern matching capabilities and is used for text processing, while shell wildcards are simpler and used primarily for filename matching.</p></li>
<li><p><strong>Q: How do I use extended regular expressions?</strong> A: Use grep -E or egrep to enable extended regular expression support.</p></li>
<li><p><strong>Q: Why do some characters need to be escaped?</strong> A: Characters that have special meaning (metacharacters) need to be escaped with a backslash when you want to match them literally.</p></li>
<li><p><strong>Q: Can I use regex with other Linux commands?</strong> A: Yes, many Linux commands support regex, including sed, awk, and vim.</p></li>
<li><p><strong>Q: How can I test my regular expressions?</strong> A: Use online regex testers or the grep command with echo for quick testing.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Regular expressions are an essential tool in the Linux ecosystem. While they may seem daunting at first, mastering them will significantly improve your text processing capabilities. Start with simple patterns and gradually work your way up to more complex expressions. Remember to practice regularly and consult the documentation when needed.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.geeksforgeeks.org/how-to-use-regular-expressions-regex-on-linux/">GeeksforGeeks. (2023). “How to Use Regular Expressions (RegEx) on Linux.” A detailed guide covering basic to advanced regular expression concepts in Linux systems.</a></p></li>
<li><p><a href="https://www.linux.com/topic/desktop/introduction-regular-expressions-new-linux-users/">Linux.com. (2023). “Introduction to Regular Expressions for New Linux Users.” A beginner-friendly overview of regular expressions in the Linux environment.</a></p></li>
<li><p><a href="https://www.reddit.com/r/linux4noobs/comments/3cvpxu/a_beginners_guide_to_regular_expressions_in_linux/">Reddit - r/linux4noobs. (2023). “A Beginner’s Guide to Regular Expressions in Linux.” Community-driven discussion and practical examples for learning regular expressions.</a></p></li>
</ol>
</section>
<section id="related-blog-posts" class="level1">
<h1>Related Blog Posts</h1>
<p>You can find some more related articles on regex here:</p>
<ul>
<li>Regex: <a href="https://www.spsanderson.com/steveondata/#category=regex">https://www.spsanderson.com/steveondata/#category=regex</a></li>
<li>grep: <a href="https://www.spsanderson.com/steveondata/#category=grep">https://www.spsanderson.com/steveondata/#category=grep</a></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-10/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Regular Expressions with Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <category>regex</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-10/</guid>
  <pubDate>Fri, 10 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create an Empty Matrix in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-09/</link>
  <description><![CDATA[ 





<p>Creating empty matrices is a fundamental skill in R programming that serves as the foundation for many data manipulation tasks. This guide will walk you through various methods to create empty matrices, complete with practical examples and best practices.</p>
<section id="understanding-matrices-in-r" class="level1">
<h1>Understanding Matrices in R</h1>
<p>Matrices in R are two-dimensional data structures that hold elements of the same data type. They’re essential for mathematical operations, data analysis, and statistical computing. An empty matrix serves as a container that can be filled with data later.</p>
</section>
<section id="why-create-empty-matrices" class="level1">
<h1>Why Create Empty Matrices?</h1>
<p>Empty matrices are useful in several scenarios:</p>
<ul>
<li>Pre-allocating memory for better performance</li>
<li>Creating placeholder structures for algorithms</li>
<li>Building simulation frameworks</li>
<li>Storing future calculation results</li>
<li>Initializing data structures for machine learning models</li>
</ul>
</section>
<section id="basic-syntax-for-creating-empty-matrices" class="level1">
<h1>Basic Syntax for Creating Empty Matrices</h1>
<p>The fundamental syntax for creating empty matrices in R involves using the <code>matrix()</code> function. Here’s the basic structure:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> columns)</span></code></pre></div>
<section id="method-1-using-matrix-function" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-matrix-function">Method 1: Using matrix() Function</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 3x4 empty matrix</span></span>
<span id="cb2-2">empty_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(empty_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA
[2,]   NA   NA   NA   NA
[3,]   NA   NA   NA   NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 2x2 empty matrix</span></span>
<span id="cb4-2">small_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(small_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]   NA   NA
[2,]   NA   NA</code></pre>
</div>
</div>
<p>The above is pre-allocating the size of a matrix. This is something I do in my <a href="https://www.spsanderson.com/healthyR.ts/"><code>healthyR.ts</code></a> package for some time series functions, for example <a href="https://github.com/spsanderson/healthyR.ts/blob/master/R/ts-brownian-motion.R"><code>ts_brownian_motion()</code></a> with the following code:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matrix of random draws - one for each simulation</span></span>
<span id="cb6-2">rand_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> num_sims, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(delta_time)),</span>
<span id="cb6-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> num_sims, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> t)</span></code></pre></div>
</section>
<section id="method-2-creating-zero-filled-matrices" class="level2">
<h2 class="anchored" data-anchor-id="method-2-creating-zero-filled-matrices">Method 2: Creating Zero-Filled Matrices</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a matrix filled with zeros</span></span>
<span id="cb7-2">zero_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative method using dim()</span></span>
<span id="cb9-2">null_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(null_matrix) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(null_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0</code></pre>
</div>
</div>
</section>
<section id="method-3-using-array-function" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-array-function">Method 3: Using array() Function</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating an empty matrix using array()</span></span>
<span id="cb11-2">array_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(array_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA
[2,]   NA   NA   NA   NA
[3,]   NA   NA   NA   NA
[4,]   NA   NA   NA   NA</code></pre>
</div>
</div>
</section>
</section>
<section id="common-mistakes-to-avoid" class="level1">
<h1>Common Mistakes to Avoid</h1>
<ol type="1">
<li>Forgetting to specify dimensions</li>
<li>Using incorrect data types</li>
<li>Not considering memory limitations</li>
<li>Mixing data types within the matrix</li>
<li>Incorrect dimensioning</li>
</ol>
</section>
<section id="working-with-empty-matrices" class="level1">
<h1>Working with Empty Matrices</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating and manipulating an empty matrix</span></span>
<span id="cb13-2">result_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb13-3">result_matrix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb13-4">result_matrix[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    5   NA   NA
[2,]   NA   10   NA
[3,]   NA   NA   NA</code></pre>
</div>
</div>
</section>
<section id="filling-empty-matrices" class="level1">
<h1>Filling Empty Matrices</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method to fill an empty matrix</span></span>
<span id="cb15-2">empty_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb15-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb15-5">    empty_matrix[i,j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j</span>
<span id="cb15-6">  }</span>
<span id="cb15-7">}</span>
<span id="cb15-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(empty_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    2    3    4
[2,]    3    4    5
[3,]    4    5    6</code></pre>
</div>
</div>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<ol type="1">
<li>Always initialize matrices with appropriate dimensions</li>
<li>Use consistent data types</li>
<li>Consider memory efficiency</li>
<li>Document matrix creation and purpose</li>
<li>Use meaningful variable names</li>
</ol>
</section>
<section id="performance-considerations" class="level1">
<h1>Performance Considerations</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Efficient matrix creation</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb17-3">  large_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb17-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
      0       0       0 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Less efficient approach</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb19-3">  large_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb19-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb19-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb19-6">      large_matrix[i,j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb19-7">    }</span>
<span id="cb19-8">  }</span>
<span id="cb19-9">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   user  system elapsed 
   0.07    0.00    0.06 </code></pre>
</div>
</div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try solving this practical exercise:</p>
<p>Problem: Create a 4x4 empty matrix and fill it with a pattern where each element is the product of its row and column numbers.</p>
<p>Try solving it yourself before looking at the solution below:</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the empty matrix</span></span>
<span id="cb21-3">practice_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill the matrix</span></span>
<span id="cb21-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb21-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb21-8">    practice_matrix[i,j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j</span>
<span id="cb21-9">  }</span>
<span id="cb21-10">}</span>
<span id="cb21-11"></span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb21-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(practice_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    2    3    4
[2,]    2    4    6    8
[3,]    3    6    9   12
[4,]    4    8   12   16</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Empty matrices can be created using <code>matrix()</code>, <code>array()</code>, or dimension assignment</li>
<li>Always specify dimensions when creating matrices</li>
<li>Consider memory allocation for large matrices</li>
<li>Use appropriate data types for your specific needs</li>
<li>Pre-allocation improves performance for large datasets</li>
</ul>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<p><strong>Q: What’s the difference between NA and NULL in R matrices?</strong> A: NA represents missing values, while NULL represents the absence of a value entirely. Matrices typically use NA for empty elements.</p>
<p><strong>Q: Can I create an empty matrix with different data types?</strong> A: No, R matrices must contain elements of the same data type. Use data frames for mixed types.</p>
<p><strong>Q: What’s the maximum size of a matrix in R?</strong> A: The maximum size depends on your system’s available memory, but R can handle matrices with millions of elements.</p>
<p><strong>Q: How do I check if a matrix is empty?</strong> A: Use <code>is.na()</code> to check for NA values or <code>length()</code> to verify dimensions.</p>
<p><strong>Q: Can I resize an empty matrix after creation?</strong> A: Yes, using functions like <code>rbind()</code>, <code>cbind()</code>, or by reassigning dimensions, though it’s not recommended for performance reasons.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Creating empty matrices in R is a crucial skill for efficient data manipulation and analysis. By following the methods and best practices outlined in this guide, you’ll be better equipped to handle matrix operations in your R programming projects.</p>
<p>We’d love to hear about your experiences working with matrices in R! Share your thoughts in the comments below or connect with us on social media. Don’t forget to bookmark this guide for future reference.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://stackoverflow.com/questions/21585721/how-to-create-an-empty-matrix-in-r">Stack Overflow: How to Create an Empty Matrix in R</a></li>
<li><a href="https://scales.arabpsychology.com/stats/how-to-create-an-empty-matrix-in-r-with-examples/">Arab Psychology: How to Create an Empty Matrix in R with Examples</a></li>
<li><a href="https://www.statology.org/create-empty-matrix-in-r/">Statology: How to Create Empty Matrix in R</a></li>
<li><a href="https://www.geeksforgeeks.org/how-to-create-an-empty-matrix-in-r/">GeeksforGeeks: How to Create an Empty Matrix in R</a></li>
</ol>
<hr>
<p><em>Note: This article was written to help R programmers understand matrix creation and manipulation. For the most up-to-date information, always consult the official R documentation.</em></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-09/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>The MatRix</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-09/</guid>
  <pubDate>Thu, 09 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Program Input and Output in C: A Beginner’s Guide to putchar() and getchar()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-08/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Character input and output operations are fundamental building blocks in C programming. While many beginners start with printf() and scanf(), understanding character-level I/O functions like putchar() and getchar() opens up new possibilities for more precise input/output control. This comprehensive guide will walk you through these essential functions and help you master character-level I/O in C.</p>
</section>
<section id="understanding-character-io-in-c" class="level1">
<h1>Understanding Character I/O in C</h1>
<section id="what-are-character-io-functions" class="level2">
<h2 class="anchored" data-anchor-id="what-are-character-io-functions">What are Character I/O Functions?</h2>
<p>Character I/O functions are specialized tools in C that handle input and output one character at a time. These functions provide more granular control compared to their formatted counterparts like printf() and scanf(). The main functions we’ll explore are: - putchar(): Outputs a single character to the screen - getchar(): Reads a single character from the keyboard</p>
</section>
<section id="why-use-character-level-io" class="level2">
<h2 class="anchored" data-anchor-id="why-use-character-level-io">Why Use Character-Level I/O?</h2>
<ul>
<li>More precise control over input and output</li>
<li>Simpler syntax for single-character operations</li>
<li>Better performance for character-by-character processing</li>
<li>Useful for building custom input routines</li>
</ul>
</section>
</section>
<section id="the-putchar-function" class="level1">
<h1>The putchar() Function</h1>
<section id="syntax-and-usage" class="level2">
<h2 class="anchored" data-anchor-id="syntax-and-usage">Syntax and Usage</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> putchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> character<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>The putchar() function takes a single character as an argument and displays it on the screen. Despite the parameter being declared as an int, it’s typically used with characters.</p>
</section>
<section id="example-programs" class="level2">
<h2 class="anchored" data-anchor-id="example-programs">Example Programs</h2>
<p>Here’s a simple example that demonstrates putchar():</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-5">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a character: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-6">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You entered: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-8">    putchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-08/ex1.PNG" class="img-fluid figure-img"></p>
<figcaption>Example 1</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> msg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C is fun"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> strlen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>msg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">        putchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>msg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb3-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-9">    putchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-08/ex2.PNG" class="img-fluid figure-img"></p>
<figcaption>Example 2</figcaption>
</figure>
</div>
</section>
</section>
<section id="the-getchar-function" class="level1">
<h1>The getchar() Function</h1>
<section id="syntax-and-usage-1" class="level2">
<h2 class="anchored" data-anchor-id="syntax-and-usage-1">Syntax and Usage</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>getchar() reads a single character from the keyboard and returns it as an integer value.</p>
</section>
<section id="input-buffering" class="level2">
<h2 class="anchored" data-anchor-id="input-buffering">Input Buffering</h2>
<p>One crucial aspect of getchar() is that it’s buffered, meaning:</p>
<ul>
<li>Input is stored in a buffer until Enter is pressed</li>
<li>Users can use Backspace to correct mistakes before pressing Enter</li>
<li>The Enter key (newline character) remains in the buffer</li>
</ul>
</section>
<section id="handling-return-values" class="level2">
<h2 class="anchored" data-anchor-id="handling-return-values">Handling Return Values</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Store input in an integer variable</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> EOF<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Handle end-of-file condition</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="dealing-with-newline-characters" class="level1">
<h1>Dealing with Newline Characters</h1>
<section id="the-newline-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-newline-problem">The Newline Problem</h2>
<p>When using getchar(), a common issue arises with the newline character (‘’) remaining in the input buffer. Consider this example:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Gets first character</span></span>
<span id="cb6-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Gets the newline instead of intended character!</span></span></code></pre></div>
</section>
<section id="solutions-and-workarounds" class="level2">
<h2 class="anchored" data-anchor-id="solutions-and-workarounds">Solutions and Workarounds</h2>
<ol type="1">
<li>Discard the newline:</li>
</ol>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-2">getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Discard the newline</span></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span></code></pre></div>
<ol start="2" type="1">
<li>Loop until newline is consumed:</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear input buffer</span></span></code></pre></div>
</section>
</section>
<section id="advanced-topics" class="level1">
<h1>Advanced Topics</h1>
<section id="using-getch-for-unbuffered-input" class="level2">
<h2 class="anchored" data-anchor-id="using-getch-for-unbuffered-input">Using getch() for Unbuffered Input</h2>
<p>getch() provides an alternative approach with these characteristics:</p>
<ul>
<li>Unbuffered input (no Enter key required)</li>
<li>Immediate character retrieval</li>
<li>No automatic echo to screen</li>
<li>No newline handling issues</li>
</ul>
</section>
<section id="comparing-getchar-and-getch" class="level2">
<h2 class="anchored" data-anchor-id="comparing-getchar-and-getch">Comparing getchar() and getch()</h2>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Feature</th>
<th>getchar()</th>
<th>getch()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Buffer</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr class="even">
<td>Requires Enter</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr class="odd">
<td>Echo to screen</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr class="even">
<td>Backspace support</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">Error Handling</h2>
<ol type="1">
<li>Always check for EOF:</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> EOF<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Process character</span></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<ol start="2" type="1">
<li>Use int for character storage:</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Preferred over char</span></span></code></pre></div>
</section>
<section id="performance-considerations" class="level2">
<h2 class="anchored" data-anchor-id="performance-considerations">Performance Considerations</h2>
<ul>
<li>Character I/O functions are generally faster than formatted I/O</li>
<li>Buffered input (getchar) provides better user experience for text entry</li>
<li>Use getch() when immediate response is needed</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try this exercise:</p>
<p>Create a program that reads characters until a period is entered, counting the number of vowels.</p>
<p>Problem:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write your solution here</span></span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> vowels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-5">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter text (end with a period): "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-6">    </span>
<span id="cb12-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>ch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'e'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'i'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'u'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'E'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'I'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'U'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-11">                vowels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb12-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-14">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Number of vowels: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> vowels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-08/solution.PNG" class="img-fluid figure-img"></p>
<figcaption>Solution on my PC</figcaption>
</figure>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Include &lt;stdio.h&gt; for character I/O functions</li>
<li>Use getchar() for buffered character input</li>
<li>Use putchar() for single character output</li>
<li>Handle newline characters explicitly</li>
<li>Consider getch() for immediate character input</li>
<li>Store character input in int variables</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Why use int instead of char for getchar()?</strong> A: getchar() can return EOF (-1), which might not fit in a char variable.</p></li>
<li><p><strong>Q: How can I clear the input buffer?</strong> A: Use a while loop with getchar() until you reach a newline character.</p></li>
<li><p><strong>Q: Why doesn’t my getchar() program continue immediately after I type?</strong> A: getchar() waits for Enter due to buffered input.</p></li>
<li><p><strong>Q: Is putchar() faster than printf()?</strong> A: Yes, putchar() is generally faster for single-character output.</p></li>
<li><p><strong>Q: Can I use these functions for file I/O?</strong> A: Yes, but you’ll need to redirect standard input/output or use file-specific variants.</p></li>
</ol>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p>GeeksforGeeks. (2023). <a href="https://www.geeksforgeeks.org/getchar-function-in-c/">“getchar() Function in C”</a>. A comprehensive guide to character input in C programming.</p></li>
<li><p>Stack Overflow. (2023). <a href="https://stackoverflow.com/questions/22903420/the-c-programming-language-ch-1-exercise-1-10-getchar-and-putchar">“Understanding getchar() and putchar() in C Programming”</a>. Community discussion and examples.</p></li>
<li><p>IT Learn. (2023). <a href="https://www.it-learn.net/a/201809/4.html">“C Programming Input/Output Functions”</a>. Detailed explanation of I/O operations.</p></li>
<li><p>MyCPlus. (2023). <a href="https://www.mycplus.com/tutorials/c-programming-tutorials/input-output/">“C Programming Input Output Tutorial”</a>. Practical examples and best practices.</p></li>
</ol>
<p>These sources provide additional information and examples to supplement the concepts covered in this article. Each link opens in a new window and contains valuable resources for further learning.</p>
<p>We encourage you to share your experiences with these functions and any creative solutions you’ve developed. Leave a comment below or share this guide with fellow programmers!</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-08/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Get those characters</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-08/</guid>
  <pubDate>Wed, 08 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create an Empty Data Frame in R: A Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-07/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data frames are fundamental structures in R programming, serving as the backbone for data manipulation and analysis. Creating empty data frames is a crucial skill for R programmers, whether for data collection, template creation, or dynamic data processing.</p>
</section>
<section id="what-is-a-data-frame" class="level1">
<h1>What is a Data Frame?</h1>
<p>A data frame in R is a two-dimensional data structure that can hold different types of data in columns. Think of it as a spreadsheet or table where each column can contain different data types (numeric, character, logical, etc.).</p>
</section>
<section id="why-create-empty-data-frames" class="level1">
<h1>Why Create Empty Data Frames?</h1>
<p>Empty data frames serve several purposes: - Template creation for data collection - Dynamic data structure building - Memory-efficient programming - Placeholder for future data operations</p>
</section>
<section id="basic-empty-data-frame-creation" class="level1">
<h1>Basic Empty Data Frame Creation</h1>
<section id="using-data.frame-function" class="level2">
<h2 class="anchored" data-anchor-id="using-data.frame-function">Using data.frame() Function</h2>
<p>The simplest way to create an empty data frame is using the <code>data.frame()</code> function without any parameters:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a basic empty data frame</span></span>
<span id="cb1-2">empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  0 variables</code></pre>
</div>
</div>
</section>
<section id="creating-empty-data-frame-with-column-names" class="level2">
<h2 class="anchored" data-anchor-id="creating-empty-data-frame-with-column-names">Creating Empty Data Frame with Column Names</h2>
<p>To create an empty data frame with predefined column names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define column names and create empty data frame</span></span>
<span id="cb3-2">empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb3-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb3-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb3-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-7">)</span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ name : chr 
 $ age  : num 
 $ score: num </code></pre>
</div>
</div>
</section>
</section>
<section id="advanced-empty-data-frame-techniques" class="level1">
<h1>Advanced Empty Data Frame Techniques</h1>
<section id="fixed-number-of-rows" class="level2">
<h2 class="anchored" data-anchor-id="fixed-number-of-rows">Fixed Number of Rows</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty data frame with specific number of rows</span></span>
<span id="cb5-2">empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-4">)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(empty_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score"</span>)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ name : logi 
 $ age  : logi 
 $ score: logi </code></pre>
</div>
</div>
</section>
<section id="using-matrix-method" class="level2">
<h2 class="anchored" data-anchor-id="using-matrix-method">Using Matrix Method</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create using matrix conversion</span></span>
<span id="cb7-2">empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(empty_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var3"</span>)</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ var1: logi 
 $ var2: logi 
 $ var3: logi </code></pre>
</div>
</div>
</section>
</section>
<section id="working-with-empty-data-frames" class="level1">
<h1>Working with Empty Data Frames</h1>
<section id="adding-data" class="level2">
<h2 class="anchored" data-anchor-id="adding-data">Adding Data</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add rows to empty data frame</span></span>
<span id="cb9-2">new_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb9-3">empty_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(empty_df, new_row)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(empty_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   1 obs. of  3 variables:
 $ name : chr "John"
 $ age  : num 25
 $ score: num 95</code></pre>
</div>
</div>
</section>
<section id="best-practices" class="level2">
<h2 class="anchored" data-anchor-id="best-practices">Best Practices</h2>
<ol type="1">
<li>Always specify <code>stringsAsFactors = FALSE</code> when creating character columns</li>
<li>Use meaningful column names</li>
<li>Define appropriate data types for columns</li>
<li>Consider memory allocation for large datasets</li>
</ol>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try creating an empty data frame with the following specifications:</p>
<ul>
<li>Three columns: “product”, “price”, “quantity”</li>
<li>product should be character type</li>
<li>price and quantity should be numeric type</li>
</ul>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the empty data frame</span></span>
<span id="cb11-2">store_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb11-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quantity =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(),</span>
<span id="cb11-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb11-7">)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify the structure</span></span>
<span id="cb11-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(store_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   0 obs. of  3 variables:
 $ product : chr 
 $ price   : num 
 $ quantity: num </code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Use <code>data.frame()</code> for basic empty data frame creation</li>
<li>Specify column names and data types for structured templates</li>
<li>Consider memory management for large-scale applications</li>
<li>Always verify the structure after creation</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Can I add columns to an empty data frame later?</strong> A: Yes, you can add columns using the <code>$</code> operator or <code>cbind()</code> function.</p></li>
<li><p><strong>Q: What’s the difference between NULL and empty data frames?</strong> A: An empty data frame has structure but no data, while NULL is a special object representing the absence of a value.</p></li>
<li><p><strong>Q: How do I check if a data frame is empty?</strong> A: Use <code>nrow(df) == 0</code> or <code>dim(df)[1] == 0</code> to check for empty data frames.</p></li>
<li><p><strong>Q: Can I create an empty data frame with factors?</strong> A: Yes, specify <code>stringsAsFactors = TRUE</code> or explicitly define factor columns.</p></li>
<li><p><strong>Q: What’s the best practice for naming columns in empty data frames?</strong> A: Use descriptive, consistent names without spaces, preferably following a style guide.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Creating empty data frames in R is a fundamental skill that enables efficient data structure initialization and manipulation. By understanding various methods and best practices, you can write more efficient and maintainable R code.</p>
</section>
<section id="engageme" class="level1">
<h1>Engageme!</h1>
<p>Found this guide helpful? Share it with fellow R programmers! Have questions or unique use cases for empty data frames? Leave a comment below - I’d love to hear your thoughts and experiences.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.statology.org/create-empty-data-frame-in-r/">Statology. (2023). “How to Create an Empty Data Frame in R (With Examples).”</a></p></li>
<li><p><a href="https://sparkbyexamples.com/r-programming/r-create-an-empty-dataframe/">Spark By Examples. (2023). “Create Empty DataFrame in R.”</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/10689055/create-an-empty-data-frame">Stack Overflow. (2012). “Create an empty data.frame.”</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-07/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Empty Data Frames</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-07/</guid>
  <pubDate>Tue, 07 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Remove Rows with Any Zeros in R: A Complete Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-06/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data cleaning is a crucial step in any data analysis project, and one common task is removing rows containing zero values. Whether you’re working with scientific data, financial records, or survey responses, knowing how to efficiently remove rows with zeros is an essential skill for R programmers. This comprehensive guide will walk you through various methods using base R, dplyr, and data.table approaches.</p>
</section>
<section id="understanding-the-basics" class="level1">
<h1>Understanding the Basics</h1>
<section id="what-are-zero-values-and-why-remove-them" class="level2">
<h2 class="anchored" data-anchor-id="what-are-zero-values-and-why-remove-them">What Are Zero Values and Why Remove Them?</h2>
<p>Zero values in datasets can represent:</p>
<ul>
<li>Missing data</li>
<li>Invalid measurements</li>
<li>True zero measurements</li>
<li>Data entry errors</li>
</ul>
<p>Sometimes, zeros can significantly impact your analysis, especially when:</p>
<ul>
<li>Calculating means or ratios</li>
<li>Performing logarithmic transformations</li>
<li>Analyzing patterns in your data</li>
</ul>
</section>
<section id="base-r-methods" class="level2">
<h2 class="anchored" data-anchor-id="base-r-methods">Base R Methods</h2>
<section id="using-the-subset-function" class="level3">
<h3 class="anchored" data-anchor-id="using-the-subset-function">Using the subset() Function</h3>
<p>The most straightforward approach in base R is using the subset() function Here’s a basic example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any zeros</span></span>
<span id="cb1-9">clean_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(df, A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> B <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> C <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(clean_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C
1 1 5 9</code></pre>
</div>
</div>
</section>
</section>
<section id="using-logical-indexing-with-rowsums" class="level2">
<h2 class="anchored" data-anchor-id="using-logical-indexing-with-rowsums">Using Logical Indexing with rowSums()</h2>
<p>For more efficient handling, especially with multiple columns, use rowSums():</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More efficient method</span></span>
<span id="cb3-2">df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C
1 1 5 9</code></pre>
</div>
</div>
</section>
</section>
<section id="modern-solutions-with-dplyr" class="level1">
<h1>Modern Solutions with dplyr</h1>
<section id="using-filter-and-across" class="level2">
<h2 class="anchored" data-anchor-id="using-filter-and-across">Using filter() and across()</h2>
<p>The dplyr package offers a more readable and maintainable approach:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-2"></span>
<span id="cb5-3">clean_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(clean_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C
1 1 5 9</code></pre>
</div>
</div>
</section>
</section>
<section id="data.table-solutions" class="level1">
<h1>Data.table Solutions</h1>
<p>For large datasets, data.table provides superior performance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb7-2">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb7-3">clean_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, any)]</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(clean_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       A     B     C
   &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:     1     5     9</code></pre>
</div>
</div>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<ol type="1">
<li>Data Validation</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for data types before removing zeros</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   4 obs. of  3 variables:
 $ A: num  1 0 3 4
 $ B: num  5 6 0 8
 $ C: num  9 10 11 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       A              B              C        
 Min.   :0.00   Min.   :0.00   Min.   : 0.00  
 1st Qu.:0.75   1st Qu.:3.75   1st Qu.: 6.75  
 Median :2.00   Median :5.50   Median : 9.50  
 Mean   :2.00   Mean   :4.75   Mean   : 7.50  
 3rd Qu.:3.25   3rd Qu.:6.50   3rd Qu.:10.25  
 Max.   :4.00   Max.   :8.00   Max.   :11.00  </code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Performance Optimization</li>
</ol>
<ul>
<li>For large datasets, use data.table</li>
<li>For medium datasets, use dplyr</li>
<li>For small datasets, base R is fine</li>
</ul>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try this practice problem:</p>
<p>Create a dataframe with the following data and remove all rows containing zeros:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">practice_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb13-5">)</span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using base R</span></span>
<span id="cb14-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(practice_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]</span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y z
1 1 2 3
5 5 6 7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using dplyr</span></span>
<span id="cb16-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb16-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y z
1 1 2 3
2 5 6 7</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Base R’s subset() function works well for simple cases</li>
<li>dplyr provides readable and maintainable code</li>
<li>data.table offers the best performance for large datasets</li>
<li>Always validate your data before removing zeros</li>
<li>Consider the impact of removing zeros on your analysis</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p>Q: How do I handle NA values when removing zeros? A: Use na.rm = TRUE in your conditions or combine with is.na() checks.</p></li>
<li><p>Q: Which method is fastest for large datasets? A: data.table generally provides the best performance for large datasets.</p></li>
<li><p>Q: Can I remove rows with zeros in specific columns only? A: Yes, just specify the columns in your filtering condition.</p></li>
<li><p>Q: How do I distinguish between true zeros and missing values? A: Consider the context of your data and use appropriate validation checks.</p></li>
<li><p>Q: What’s the impact on memory usage? A: Creating new filtered datasets consumes additional memory; consider using in-place modifications for large datasets.</p></li>
</ol>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did you find this guide helpful? Share your experiences with removing zeros in R in the comments below! Don’t forget to bookmark this page for future reference and share it with your fellow R programmers.</p>
<p>Would you like me to proceed with any specific section in more detail or move on to additional formatting and optimization?</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-06/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Dropping Rows in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-06/</guid>
  <pubDate>Mon, 06 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Complete Guide to Linux Archiving and Backup for Beginners</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-03/</link>
  <description><![CDATA[ 





<p><em>As someone who is also learning and exploring Linux systems, I’m excited to share this comprehensive guide on archiving and backup techniques. Let’s learn together!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data backup and archiving are crucial skills for any Linux user. Whether you’re managing personal files or working as a system administrator, understanding how to properly secure and compress your data is essential. In this guide, we’ll explore the fundamental tools and techniques for archiving and backing up data in Linux.</p>
</section>
<section id="understanding-data-compression" class="level1">
<h1>Understanding Data Compression</h1>
<section id="basic-concepts" class="level2">
<h2 class="anchored" data-anchor-id="basic-concepts">Basic Concepts</h2>
<p>Data compression works by removing redundancy from files. For example, imagine a black image file that’s 100x100 pixels. Without compression, it might occupy 30,000 bytes (100 * 100 * 3 bytes per pixel). However, since it’s all one color, we could simply store it as “10,000 black pixels,” dramatically reducing the file size.</p>
</section>
<section id="types-of-compression" class="level2">
<h2 class="anchored" data-anchor-id="types-of-compression">Types of Compression</h2>
<p>There are two main types of compression:</p>
<ol type="1">
<li><strong>Lossless Compression</strong>
<ul>
<li>Preserves all original data</li>
<li>Perfect for documents, programs, and system files</li>
<li>Examples: gzip, bzip2</li>
</ul></li>
<li><strong>Lossy Compression</strong>
<ul>
<li>Removes some data to achieve higher compression</li>
<li>Used for media files (images, audio, video)</li>
<li>Examples: JPEG, MP3</li>
</ul></li>
</ol>
</section>
</section>
<section id="essential-compression-tools" class="level1">
<h1>Essential Compression Tools</h1>
<section id="working-with-gzip" class="level2">
<h2 class="anchored" data-anchor-id="working-with-gzip">Working with gzip</h2>
<p>gzip is the standard compression tool in Linux. Here’s how to use it:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compress a file</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gzip</span> filename.txt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decompress a file</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gunzip</span> filename.txt.gz</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View compressed file contents</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zcat</span> filename.txt.gz</span></code></pre></div>
<p><strong>Key gzip options:</strong></p>
<ul>
<li><code>-c</code>: Write to standard output</li>
<li><code>-d</code>: Decompress</li>
<li><code>-v</code>: Verbose mode</li>
<li><code>-1</code> to <code>-9</code>: Compression level (1=fastest, 9=best)</li>
</ul>
</section>
<section id="using-bzip2" class="level2">
<h2 class="anchored" data-anchor-id="using-bzip2">Using bzip2</h2>
<p>bzip2 offers higher compression rates than gzip but runs slower:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compress a file</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bzip2</span> filename.txt</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decompress a file</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bunzip2</span> filename.txt.bz2</span></code></pre></div>
</section>
</section>
<section id="mastering-file-archiving" class="level1">
<h1>Mastering File Archiving</h1>
<section id="the-tar-command" class="level2">
<h2 class="anchored" data-anchor-id="the-tar-command">The tar Command</h2>
<p>tar is the standard archiving tool in Linux. Here’s how to use it:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an archive</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> cf archive.tar files/</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract an archive</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> xf archive.tar</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a compressed archive</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> czf archive.tar.gz files/</span></code></pre></div>
<p><strong>Common tar options:</strong></p>
<ul>
<li><code>c</code>: Create archive</li>
<li><code>x</code>: Extract archive</li>
<li><code>f</code>: Specify filename</li>
<li><code>v</code>: Verbose output</li>
<li><code>z</code>: Use gzip compression</li>
</ul>
</section>
<section id="working-with-zip" class="level2">
<h2 class="anchored" data-anchor-id="working-with-zip">Working with zip</h2>
<p>For Windows compatibility, use the zip command:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a zip archive</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zip</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> archive.zip directory/</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract a zip archive</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unzip</span> archive.zip</span></code></pre></div>
</section>
</section>
<section id="file-synchronization-with-rsync" class="level1">
<h1>File Synchronization with rsync</h1>
<p>rsync is a powerful tool for synchronizing files between directories or systems:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sync local directories</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rsync</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-av</span> source/ destination/</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sync to remote system</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rsync</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-av</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> ssh source/ user@remote:/path/</span></code></pre></div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try this practical exercise:</p>
<ol type="1">
<li>Create a directory with some sample files</li>
<li>Create a compressed archive</li>
<li>Extract it to a different location</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> ~/backup-test</span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test content"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ~/backup-test/file1.txt</span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"more content"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> ~/backup-test/file2.txt</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> czf backup.tar.gz ~/backup-test</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> ~/restore-test</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/restore-test</span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tar</span> xzf ../backup.tar.gz</span></code></pre></div>
</details>
<p>After completing these steps, you should have an identical copy of your files in the restore-test directory.</p>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Use gzip for single file compression</li>
<li>Use tar for archiving multiple files</li>
<li>Use rsync for synchronizing directories</li>
<li>Remember to test your backups regularly</li>
<li>Always verify extracted files</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Should I use gzip or bzip2?</strong> A: Use gzip for general purposes and bzip2 when you need maximum compression and don’t mind slower speed.</p></li>
<li><p><strong>Q: Can I compress already compressed files?</strong> A: It’s not recommended as it usually results in larger files.</p></li>
<li><p><strong>Q: How often should I backup?</strong> A: Depends on your needs, but daily backups of important data are recommended.</p></li>
<li><p><strong>Q: Is rsync better than cp for copying files?</strong> A: Yes, for large directories, as it only copies changed files.</p></li>
<li><p><strong>Q: Can I automate my backups?</strong> A: Yes, using cron jobs with tar or rsync.</p></li>
</ol>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>The GNU tar Manual: https://www.gnu.org/software/tar/manual/</li>
</ol>
<p><em>We’d love to hear about your experiences with Linux backup and archiving! Share your stories and tips in the comments below.</em></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-03/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Archive and Backup in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-03/</guid>
  <pubDate>Fri, 03 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Transpose Data Frames in R: Complete Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-02/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data manipulation is a crucial skill in R programming, and one common operation is transposing data frames - converting rows to columns and vice versa. Whether you’re cleaning data for analysis, preparing datasets for visualization, or restructuring information for machine learning models, understanding how to transpose data frames efficiently is essential. This comprehensive guide will walk you through various methods to transpose data frames in R, complete with practical examples and best practices.</p>
</section>
<section id="understanding-data-frame-transposition" class="level1">
<h1>Understanding Data Frame Transposition</h1>
<section id="what-is-transposition" class="level2">
<h2 class="anchored" data-anchor-id="what-is-transposition">What is Transposition?</h2>
<p>Transposition in R involves rotating your data structure so that rows become columns and columns become rows. Think of it as flipping your data frame along its diagonal axis.</p>
</section>
<section id="why-transpose-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="why-transpose-data-frames">Why Transpose Data Frames?</h2>
<p>Several scenarios require data frame transposition: - Preparing data for specific analytical functions - Converting wide format to long format (or vice versa) - Meeting requirements for data visualization tools - Restructuring data for statistical analysis</p>
</section>
<section id="common-use-cases" class="level2">
<h2 class="anchored" data-anchor-id="common-use-cases">Common Use Cases</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb1-2">original_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>)</span>
<span id="cb1-6">)</span></code></pre></div>
</div>
</section>
</section>
<section id="basic-method-using-the-t-function" class="level1">
<h1>Basic Method: Using the t() Function</h1>
<section id="syntax-and-usage" class="level2">
<h2 class="anchored" data-anchor-id="syntax-and-usage">Syntax and Usage</h2>
<p>The most straightforward way to transpose a data frame in R is using the built-in <code>t()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic transposition</span></span>
<span id="cb2-2">transposed_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(original_df))</span></code></pre></div>
</div>
</section>
<section id="simple-examples" class="level2">
<h2 class="anchored" data-anchor-id="simple-examples">Simple Examples</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original data frame</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original data frame:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Original data frame:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(original_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Name Score
1  1 John    85
2  2 Jane    92
3  3  Bob    78</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transposed data frame</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transposed data frame:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Transposed data frame:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(transposed_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        V1   V2  V3
ID       1    2   3
Name  John Jane Bob
Score   85   92  78</code></pre>
</div>
</div>
</section>
<section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<ul>
<li>The <code>t()</code> function converts all data to a single type</li>
<li>Column names might need manual adjustment</li>
<li>Data type preservation requires additional steps</li>
</ul>
</section>
</section>
<section id="advanced-methods" class="level1">
<h1>Advanced Methods</h1>
<section id="using-tidyr-package" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyr-package">Using tidyr Package</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Advanced transposition using tidyr</span></span>
<span id="cb11-5">long_format <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> original_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gather</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Variable"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>)</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(long_format)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Variable Value
1       ID     1
2       ID     2
3       ID     3
4     Name  John
5     Name  Jane
6     Name   Bob
7    Score    85
8    Score    92
9    Score    78</code></pre>
</div>
</div>
</section>
<section id="alternative-approaches" class="level2">
<h2 class="anchored" data-anchor-id="alternative-approaches">Alternative Approaches</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using reshape2</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(reshape2)</span>
<span id="cb13-3">melted_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(original_df)</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(melted_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Name variable value
1 John       ID     1
2 Jane       ID     2
3  Bob       ID     3
4 John    Score    85
5 Jane    Score    92
6  Bob    Score    78</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using data.table</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb15-3">dt_transpose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transpose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(original_df))</span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dt_transpose)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       V1     V2     V3
   &lt;char&gt; &lt;char&gt; &lt;char&gt;
1:      1      2      3
2:   John   Jane    Bob
3:     85     92     78</code></pre>
</div>
</div>
</section>
</section>
<section id="common-challenges-and-solutions" class="level1">
<h1>Common Challenges and Solutions</h1>
<section id="maintaining-data-types" class="level2">
<h2 class="anchored" data-anchor-id="maintaining-data-types">Maintaining Data Types</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preserving data types</span></span>
<span id="cb17-2">transposed_with_types <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(original_df)), </span>
<span id="cb17-4">         <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type.convert</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as.is =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb17-5">)</span></code></pre></div>
</div>
</section>
<section id="dealing-with-large-datasets" class="level2">
<h2 class="anchored" data-anchor-id="dealing-with-large-datasets">Dealing with Large Datasets</h2>
<p>For large datasets, consider these approaches:</p>
<ul>
<li>Use data.table for better performance</li>
<li>Process data in chunks</li>
<li>Optimize memory usage</li>
</ul>
</section>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<ol type="1">
<li>Always backup your original data</li>
<li>Verify data types after transposition</li>
<li>Check for missing values</li>
<li>Document your transformation steps</li>
<li>Consider memory limitations</li>
</ol>
</section>
<section id="practical-examples" class="level1">
<h1>Practical Examples</h1>
<section id="example-1-basic-transposition" class="level2">
<h2 class="anchored" data-anchor-id="example-1-basic-transposition">Example 1: Basic Transposition</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb18-2">sample_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>),</span>
<span id="cb18-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">280</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">380</span>),</span>
<span id="cb18-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product C"</span>)</span>
<span id="cb18-7">)</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transpose</span></span>
<span id="cb18-10">transposed_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(sample_df))</span>
<span id="cb18-11">transposed_sample</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product A Product B Product C
Q1       100       200       300
Q2       150       250       350
Q3       180       280       380</code></pre>
</div>
</div>
</section>
<section id="example-2-complex-data-manipulation" class="level2">
<h2 class="anchored" data-anchor-id="example-2-complex-data-manipulation">Example 2: Complex Data Manipulation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiple transformations</span></span>
<span id="cb20-4">complex_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames_to_column</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quarter"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), round, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb20-9">complex_example</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Quarter Product A Product B Product C
1      Q1       100       200       300
2      Q2       150       250       350
3      Q3       180       280       380</code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn-practice-section" class="level1">
<h1>Your Turn! Practice Section</h1>
<p>Try this exercise:</p>
<p>Problem: Create a data frame with sales data for three products over four quarters, then transpose it to show products as columns and quarters as rows.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<p>Solution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb23-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>),</span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>),</span>
<span id="cb23-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span>),</span>
<span id="cb23-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>),</span>
<span id="cb23-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q4 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">230</span>)</span>
<span id="cb23-7">)</span>
<span id="cb23-8"></span>
<span id="cb23-9">transposed_sales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">column_to_rownames</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>()</span></code></pre></div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Use <code>t()</code> for simple transpositions</li>
<li>Consider tidyr for complex transformations</li>
<li>Always verify data types after transposition</li>
<li>Document your transformation process</li>
<li>Test with small datasets first</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: Why do my numeric values become characters after transposition?</strong> A: The <code>t()</code> function converts all data to a single type. Use type conversion functions to restore original data types.</p></li>
<li><p><strong>Q: How do I handle missing values during transposition?</strong> A: Use <code>na.omit()</code> or specify <code>na.rm = TRUE</code> in your functions when applicable.</p></li>
<li><p><strong>Q: Which method is fastest for large datasets?</strong> A: The data.table package generally provides the best performance for large datasets.</p></li>
<li><p><strong>Q: Can I transpose specific columns only?</strong> A: Yes, select the desired columns before transposition using subsetting or dplyr’s select().</p></li>
<li><p><strong>Q: How do I preserve row names during transposition?</strong> A: Use <code>rownames_to_column()</code> before transposition and <code>column_to_rownames()</code> after.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering data frame transposition in R is crucial for effective data manipulation. While the basic <code>t()</code> function works for simple cases, complex scenarios might require advanced packages like tidyr or data.table. Remember to always validate your results and consider performance implications when working with large datasets.</p>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li>GeeksforGeeks. (n.d.). <a href="https://www.geeksforgeeks.org/how-to-transpose-a-dataframe-in-r/">How to Transpose a Data Frame in R?</a></li>
<li>Spark By Examples. (n.d.). <a href="https://sparkbyexamples.com/r-programming/transpose-a-data-frame-in-r/">How to Transpose a Data Frame in R?</a></li>
<li>DataCamp. (n.d.). <a href="https://www.datacamp.com/tutorial/how-to-transpose-a-matrix-in-r-a-quick-tutorial">How to Transpose a Matrix in R: A Quick Tutorial</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-02/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Transpose Data in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-02/</guid>
  <pubDate>Thu, 02 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Reflecting on the Past Year: A LinkedIn Year in Review (2024)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-01-01/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As we close the door on another year, it’s always a good time to look back and reflect on the past 12 months. And what better way to do that than with a LinkedIn Year in Review?</p>
<p>Whether you’re a job seeker, a business owner, or just someone who enjoys staying connected with their professional network, LinkedIn is an invaluable tool for staying up to date with the latest trends and opportunities in your field. And as we wrap up 2024, now is the perfect time to take a look at how you’ve been using LinkedIn and see where you can improve.</p>
<p>So what did your LinkedIn Year in Review have in store for you? Here are just a few of the things you might have seen:</p>
<ul>
<li>A summary of your activity on LinkedIn, including how many people you’ve connected with, how many posts you’ve shared, and how many likes, comments, and shares your content has received.</li>
<li>A breakdown of the industries and job titles of the people you’ve connected with, which can give you a good idea of the types of people you’ve been spending the most time interacting with.</li>
<li>A summary of your skills and endorsements, as well as which skills are most in demand in your industry.</li>
</ul>
<p>All of these insights can be incredibly valuable as you start planning for the year ahead. With this information in hand, you can start looking for new opportunities, strengthening your existing relationships, and building new ones. And with the start of the new year, it’s a perfect time to set new goals and improve your LinkedIn profile.</p>
<p>If you haven’t yet checked out your LinkedIn Year in Review, don’t wait any longer! Log in to your account and take a look. And while you’re there, why not make a resolution to be more active on LinkedIn in the coming year? The more you put into your professional network, the more you’ll get out of it.</p>
<p>So let’s make the most of this new year, take advantage of the insights from your LinkedIn Year in Review, and make the most of your professional network. Here’s to a successful, connected, and productive 2025!</p>
<p>I have done a lot of work on this already, it is not comprehensive but it is enough to understand what is happening, and I used a lot of functionality from the <a href="https://www.spsanderson.com/healthyverse/"><code>{healthyverse}</code></a></p>
<p>Don’t forget you can also see my package and GitHub development wrap up <a href="https://www.spsanderson.com/year_review_2024.html">on my year in review 2024</a></p>
</section>
<section id="analysis" class="level1">
<h1>Analysis</h1>
<p>I will do this in chunks, as it will be easier to digest. First of course you have to get your data. I am not going to go over this process as there are many a great link just a search away.</p>
<p>Let’s load in those libraries and read the files in.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(readxl)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(timetk)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(janitor)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(healthyR.ts)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(knitr)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(kableExtra)</span>
<span id="cb1-12"></span>
<span id="cb1-13">fp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linkedin_content.xlsx"</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">engagement_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(fp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENGAGEMENT"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mdy</span>(date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Engagement Rate</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> (engagements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> impressions) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_by_time</span>(</span>
<span id="cb1-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date,</span>
<span id="cb1-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.end_date =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-12-31"</span></span>
<span id="cb1-22">  )</span>
<span id="cb1-23"></span>
<span id="cb1-24">top_posts_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(fp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TOP POSTS"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span>
<span id="cb1-26"></span>
<span id="cb1-27">followers_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(fp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FOLLOWERS"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">skip =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mdy</span>(date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter_by_time</span>(</span>
<span id="cb1-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date,</span>
<span id="cb1-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.end_date =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-12-31"</span></span>
<span id="cb1-33">  )</span>
<span id="cb1-34"></span>
<span id="cb1-35">demographics_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_excel</span>(fp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sheet =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEMOGRAPHICS"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean_names</span>()</span></code></pre></div>
</div>
<p>Now let’s take a look at that data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(engagement_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 363
Columns: 4
$ date              &lt;date&gt; 2024-01-04, 2024-01-05, 2024-01-06, 2024-01-07, 202…
$ impressions       &lt;dbl&gt; 1760, 4981, 1226, 1590, 11122, 4496, 9871, 7261, 315…
$ engagements       &lt;dbl&gt; 32, 50, 14, 24, 96, 47, 102, 42, 42, 21, 16, 12, 50,…
$ `Engagement Rate` &lt;dbl&gt; 1.8181818, 1.0038145, 1.1419250, 1.5094340, 0.863154…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(top_posts_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 50
Columns: 7
$ post_url_1          &lt;chr&gt; "https://www.linkedin.com/feed/update/urn:li:activ…
$ post_publish_date_2 &lt;chr&gt; "3/25/2024", "6/11/2024", "7/16/2024", "8/1/2024",…
$ engagements         &lt;dbl&gt; 156, 109, 107, 92, 78, 77, 76, 73, 72, 71, 66, 64,…
$ x4                  &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…
$ post_url_5          &lt;chr&gt; "https://www.linkedin.com/feed/update/urn:li:activ…
$ post_publish_date_6 &lt;chr&gt; "2/5/2024", "4/29/2024", "5/24/2024", "1/27/2024",…
$ impressions         &lt;dbl&gt; 37993, 14462, 11350, 10532, 10476, 9158, 8736, 832…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(followers_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 363
Columns: 2
$ date          &lt;date&gt; 2024-01-04, 2024-01-05, 2024-01-06, 2024-01-07, 2024-01…
$ new_followers &lt;dbl&gt; 28, 16, 9, 12, 23, 36, 24, 14, 14, 8, 16, 30, 28, 25, 21…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(demographics_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 30
Columns: 3
$ top_demographics &lt;chr&gt; "Job titles", "Job titles", "Job titles", "Job titles…
$ value            &lt;chr&gt; "Data Scientist", "Data Analyst", "Software Engineer"…
$ percentage       &lt;chr&gt; "0.04596369341015816", "0.03545770421624184", "0.0260…</code></pre>
</div>
</div>
<p>We are really only going to focus on the <strong>engagement_tbl</strong> and the <strong>followers_tbl</strong> as this is more of a time series analysis.</p>
<p>Ok, so let’s see how my <strong>Impressions</strong>, <strong>Engagements</strong>, and <strong>Engagement Rate</strong> have been.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">engagement_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(name)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_time_series</span>(</span>
<span id="cb10-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.facet_vars =</span> name,</span>
<span id="cb10-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value =</span> value,</span>
<span id="cb10-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date,</span>
<span id="cb10-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb10-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.smooth =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LinkedIn Stats Time Series Plot"</span></span>
<span id="cb10-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">followers_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_time_series</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value =</span> new_followers,</span>
<span id="cb11-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date,</span>
<span id="cb11-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.smooth =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb11-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LinkedIn Stats Time Series Plot - New Followers"</span></span>
<span id="cb11-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Let’s look at a cumulative view of things.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">engagement_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_by_time</span>(</span>
<span id="cb12-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date,</span>
<span id="cb12-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>,</span>
<span id="cb12-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Impressions</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(impressions),</span>
<span id="cb12-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Engagements</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(engagements)</span>
<span id="cb12-7">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb12-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Impressions</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Impressions</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>),</span>
<span id="cb12-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Engagements</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Engagements</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb12-11">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_to_title</span>(name)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb12-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>,</span>
<span id="cb12-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb12-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LinkedIn Stats Time Series Plot"</span></span>
<span id="cb12-22">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() </span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">followers_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_by_time</span>(</span>
<span id="cb13-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.date_var =</span> date,</span>
<span id="cb13-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>,</span>
<span id="cb13-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Followers</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(new_followers)</span>
<span id="cb13-6">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Followers</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cumsum</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Followers</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb13-9">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Cumulative Followers</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_col</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb13-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>,</span>
<span id="cb13-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb13-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LinkedIn Stats Time Series Plot - New Followers"</span></span>
<span id="cb13-17">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() </span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>It seems again that writing blog posts and sharing them daily has a nice effect. Now we are going to look at some <strong>Value</strong>, <strong>Velocity</strong>, and <strong>Acceleration</strong> plots with the <a href="https://www.spsanderson.com/healthyR.ts/reference/ts_vva_plot.html?q=ts_vva#ref-usage"><code>ts_vva_plot()</code></a> function from the <a href="https://www.spsanderson.com/healthyR.ts/"><code>{healthyR.ts</code>}</a> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_vva_plot</span>(engagement_tbl, date, engagements)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_vva_plot</span>(engagement_tbl, date, impressions)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_vva_plot</span>(engagement_tbl, date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Engagement Rate</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_vva_plot</span>(followers_tbl, date, new_followers)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-5-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now some simple moving average plots using the function <a href="https://www.spsanderson.com/healthyR.ts/reference/ts_sma_plot.html?q=ts_sma#null"><code>ts_sma_plot()</code></a> again from the <code>{healthyR.ts}</code> library.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_sma_plot</span>(engagement_tbl, date, impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sma_order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_sma_plot</span>(engagement_tbl, date, engagements, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sma_order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-6-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_sma_plot</span>(engagement_tbl, date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Engagement Rate</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sma_order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-6-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_sma_plot</span>(followers_tbl, date, new_followers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sma_order =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>static_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-6-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now some calendar heatmaps with <a href="https://www.spsanderson.com/healthyR.ts/reference/ts_calendar_heatmap_plot.html?q=calendar#null"><code>ts_calendar_heatmap_plot()</code></a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_calendar_heatmap_plot</span>(engagement_tbl, date, impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calendar Heatmap - Impressions"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_calendar_heatmap_plot</span>(engagement_tbl, date, engagements, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calendar Heatmap - Engagemets"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-7-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_calendar_heatmap_plot</span>(engagement_tbl, date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Engagement Rate</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calendar Heatmap - Engagement Rate"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-7-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_calendar_heatmap_plot</span>(followers_tbl, date, new_followers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calendar Heatmap - New Followers"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-7-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Some seasonal diagnostics using <a href="https://business-science.github.io/timetk/"><code>{timetk}</code></a></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_seasonal_diagnostics</span>(engagement_tbl</span>
<span id="cb26-2">                          , date, engagements, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb26-3">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.feature_set =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wday.lbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month.lbl"</span>),</span>
<span id="cb26-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seasonal Diagnostics - Engagements"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_seasonal_diagnostics</span>(engagement_tbl</span>
<span id="cb27-2">                          , date, impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb27-3">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.feature_set =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wday.lbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month.lbl"</span>),</span>
<span id="cb27-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seasonal Diagnostics - Impressions"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-8-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_seasonal_diagnostics</span>(engagement_tbl</span>
<span id="cb28-2">                          , date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Engagement Rate</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb28-3">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.feature_set =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wday.lbl"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month.lbl"</span>),</span>
<span id="cb28-4">                          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seasonal Diagnostics - Engagement Rate"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-8-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_seasonal_diagnostics</span>(</span>
<span id="cb29-2">  followers_tbl, date, new_followers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.feature_set =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wday.lbl"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month.lbl"</span>), </span>
<span id="cb29-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Seasonal Diagnostics - New Followers"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-8-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Finally some lag correlation plots with <a href="https://www.spsanderson.com/healthyR.ts/reference/ts_lag_correlation.html?q=ts_lag#null"><code>ts_lag_correlation()</code></a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_lag_correlation</span>(engagement_tbl, date, engagements, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.lags =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lag_plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag Correlation Plot - Engagements"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_lag_correlation</span>(engagement_tbl, date, impressions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.lags =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lag_plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag Correlation Plot - Impressions"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-9-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_lag_correlation</span>(engagement_tbl, date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Engagement Rate</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.lags =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lag_plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag Correlation Plot - Engagement Rate"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-9-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_lag_correlation</span>(followers_tbl, date, new_followers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.lags =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>plots<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lag_plot <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lag Correlation Plot - New Followers"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-01-01/index_files/figure-html/unnamed-chunk-9-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="key-stats-and-tables" class="level1">
<h1>Key Stats and Tables</h1>
<p>Now we are going to look at some key stats and tables. First we will look at the top 10 posts by impressions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">top_posts_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(post_publish_date_2, impressions, post_url_1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(impressions)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Post Date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Impressions"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Post URL"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb34-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Posts by Impressions"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Top 10 Posts by Impressions</caption>
<colgroup>
<col style="width: 11%">
<col style="width: 13%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Post Date</th>
<th style="text-align: center;">Impressions</th>
<th style="text-align: center;">Post URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">3/25/2024</td>
<td style="text-align: center;">37993</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7178069987956260864</td>
</tr>
<tr class="even">
<td style="text-align: center;">6/11/2024</td>
<td style="text-align: center;">14462</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7206384709851828224</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7/16/2024</td>
<td style="text-align: center;">11350</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7219007902802423808</td>
</tr>
<tr class="even">
<td style="text-align: center;">8/1/2024</td>
<td style="text-align: center;">10532</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7224866485502963713</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2/5/2024</td>
<td style="text-align: center;">10476</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7160268852155588608</td>
</tr>
<tr class="even">
<td style="text-align: center;">5/16/2024</td>
<td style="text-align: center;">9158</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7196713475702702080</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2/6/2024</td>
<td style="text-align: center;">8736</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7160738935751528449</td>
</tr>
<tr class="even">
<td style="text-align: center;">4/1/2024</td>
<td style="text-align: center;">8322</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7180541135377813505</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3/14/2024</td>
<td style="text-align: center;">8218</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7174014923474120705</td>
</tr>
<tr class="even">
<td style="text-align: center;">3/25/2024</td>
<td style="text-align: center;">8151</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7178005082381123584</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Now we will look at the top 10 posts by engagements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">top_posts_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(post_publish_date_2, engagements, post_url_1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(engagements)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Post Date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Engagements"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Post URL"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb35-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Posts by Engagements"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Top 10 Posts by Engagements</caption>
<colgroup>
<col style="width: 11%">
<col style="width: 13%">
<col style="width: 75%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Post Date</th>
<th style="text-align: center;">Engagements</th>
<th style="text-align: center;">Post URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">3/25/2024</td>
<td style="text-align: center;">156</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7178069987956260864</td>
</tr>
<tr class="even">
<td style="text-align: center;">6/11/2024</td>
<td style="text-align: center;">109</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7206384709851828224</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7/16/2024</td>
<td style="text-align: center;">107</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7219007902802423808</td>
</tr>
<tr class="even">
<td style="text-align: center;">8/1/2024</td>
<td style="text-align: center;">92</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7224866485502963713</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2/5/2024</td>
<td style="text-align: center;">78</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7160268852155588608</td>
</tr>
<tr class="even">
<td style="text-align: center;">5/16/2024</td>
<td style="text-align: center;">77</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7196713475702702080</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2/6/2024</td>
<td style="text-align: center;">76</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7160738935751528449</td>
</tr>
<tr class="even">
<td style="text-align: center;">4/1/2024</td>
<td style="text-align: center;">73</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7180541135377813505</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3/14/2024</td>
<td style="text-align: center;">72</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7174014923474120705</td>
</tr>
<tr class="even">
<td style="text-align: center;">3/25/2024</td>
<td style="text-align: center;">71</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7178005082381123584</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Now we will look at the top 10 posts by engagement rate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">top_posts_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(post_publish_date_2, engagements, impressions, post_url_1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">engagement_rate =</span> engagements <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> impressions) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(engagement_rate)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(post_publish_date_2, engagement_rate, post_url_1) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Post Date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Engagement Rate"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Post URL"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb36-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top 10 Posts by Engagement Rate"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Top 10 Posts by Engagement Rate</caption>
<colgroup>
<col style="width: 11%">
<col style="width: 16%">
<col style="width: 71%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Post Date</th>
<th style="text-align: center;">Engagement Rate</th>
<th style="text-align: center;">Post URL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">7/16/2024</td>
<td style="text-align: center;">0.0094273</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7219007902802423808</td>
</tr>
<tr class="even">
<td style="text-align: center;">4/1/2024</td>
<td style="text-align: center;">0.0087719</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7180541135377813505</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3/14/2024</td>
<td style="text-align: center;">0.0087613</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7174014923474120705</td>
</tr>
<tr class="even">
<td style="text-align: center;">8/1/2024</td>
<td style="text-align: center;">0.0087353</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7224866485502963713</td>
</tr>
<tr class="odd">
<td style="text-align: center;">7/1/2024</td>
<td style="text-align: center;">0.0087328</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7213501646159392768</td>
</tr>
<tr class="even">
<td style="text-align: center;">1/22/2024</td>
<td style="text-align: center;">0.0087193</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7155192675560747008</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3/25/2024</td>
<td style="text-align: center;">0.0087106</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7178005082381123584</td>
</tr>
<tr class="even">
<td style="text-align: center;">2/6/2024</td>
<td style="text-align: center;">0.0086996</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7160738935751528449</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10/10/2024</td>
<td style="text-align: center;">0.0086524</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7250288151615737859</td>
</tr>
<tr class="even">
<td style="text-align: center;">6/13/2024</td>
<td style="text-align: center;">0.0086272</td>
<td style="text-align: center;">https://www.linkedin.com/feed/update/urn:li:activity:7207022710411948032</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Total Impressions: 1,756788</p>
<p>Total Engagements: 16,15</p>
<p>Mean Engagement Rate: 0.0091901</p>
<p>New Followers: 3,794</p>
<p>And finally the demographics of people who typically interact with my posts:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">demographics_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">percentage =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(percentage, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kable</span>(</span>
<span id="cb37-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Demographics of People Who Interact With My Posts"</span>, </span>
<span id="cb37-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span></span>
<span id="cb37-6">    )</span></code></pre></div>
<div class="cell-output-display">
<table class="caption-top table table-sm table-striped small">
<caption>Demographics of People Who Interact With My Posts</caption>
<thead>
<tr class="header">
<th style="text-align: center;">top_demographics</th>
<th style="text-align: center;">value</th>
<th style="text-align: center;">percentage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Job titles</td>
<td style="text-align: center;">Data Scientist</td>
<td style="text-align: center;">0.04</td>
</tr>
<tr class="even">
<td style="text-align: center;">Job titles</td>
<td style="text-align: center;">Data Analyst</td>
<td style="text-align: center;">0.03</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Job titles</td>
<td style="text-align: center;">Software Engineer</td>
<td style="text-align: center;">0.02</td>
</tr>
<tr class="even">
<td style="text-align: center;">Job titles</td>
<td style="text-align: center;">Data Engineer</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Job titles</td>
<td style="text-align: center;">Professor</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="even">
<td style="text-align: center;">Locations</td>
<td style="text-align: center;">New York City Metropolitan Area</td>
<td style="text-align: center;">0.05</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Locations</td>
<td style="text-align: center;">Greater Bengaluru Area</td>
<td style="text-align: center;">0.03</td>
</tr>
<tr class="even">
<td style="text-align: center;">Locations</td>
<td style="text-align: center;">Greater Delhi Area</td>
<td style="text-align: center;">0.02</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Locations</td>
<td style="text-align: center;">Mumbai Metropolitan Region</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="even">
<td style="text-align: center;">Locations</td>
<td style="text-align: center;">Greater Hyderabad Area</td>
<td style="text-align: center;">0.01</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Industries</td>
<td style="text-align: center;">IT Services and IT Consulting</td>
<td style="text-align: center;">0.23</td>
</tr>
<tr class="even">
<td style="text-align: center;">Industries</td>
<td style="text-align: center;">Software Development</td>
<td style="text-align: center;">0.12</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Industries</td>
<td style="text-align: center;">Higher Education</td>
<td style="text-align: center;">0.06</td>
</tr>
<tr class="even">
<td style="text-align: center;">Industries</td>
<td style="text-align: center;">Financial Services</td>
<td style="text-align: center;">0.05</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Industries</td>
<td style="text-align: center;">Research Services</td>
<td style="text-align: center;">0.05</td>
</tr>
<tr class="even">
<td style="text-align: center;">Seniority</td>
<td style="text-align: center;">Senior</td>
<td style="text-align: center;">0.33</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Seniority</td>
<td style="text-align: center;">Entry</td>
<td style="text-align: center;">0.28</td>
</tr>
<tr class="even">
<td style="text-align: center;">Seniority</td>
<td style="text-align: center;">Manager</td>
<td style="text-align: center;">0.03</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Seniority</td>
<td style="text-align: center;">Director</td>
<td style="text-align: center;">0.03</td>
</tr>
<tr class="even">
<td style="text-align: center;">Seniority</td>
<td style="text-align: center;">Training</td>
<td style="text-align: center;">0.02</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Company size</td>
<td style="text-align: center;">10,001+ employees</td>
<td style="text-align: center;">0.18</td>
</tr>
<tr class="even">
<td style="text-align: center;">Company size</td>
<td style="text-align: center;">1001-5000 employees</td>
<td style="text-align: center;">0.11</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Company size</td>
<td style="text-align: center;">51-200 employees</td>
<td style="text-align: center;">0.08</td>
</tr>
<tr class="even">
<td style="text-align: center;">Company size</td>
<td style="text-align: center;">11-50 employees</td>
<td style="text-align: center;">0.08</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Company size</td>
<td style="text-align: center;">1-10 employees</td>
<td style="text-align: center;">0.06</td>
</tr>
<tr class="even">
<td style="text-align: center;">Companies</td>
<td style="text-align: center;">Tata Consultancy Services</td>
<td style="text-align: center;">&lt; 1%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Companies</td>
<td style="text-align: center;">Deloitte</td>
<td style="text-align: center;">&lt; 1%</td>
</tr>
<tr class="even">
<td style="text-align: center;">Companies</td>
<td style="text-align: center;">Amazon</td>
<td style="text-align: center;">&lt; 1%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Companies</td>
<td style="text-align: center;">Stony Brook Medicine</td>
<td style="text-align: center;">&lt; 1%</td>
</tr>
<tr class="even">
<td style="text-align: center;">Companies</td>
<td style="text-align: center;">Upwork</td>
<td style="text-align: center;">&lt; 1%</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Voila!</p>
<hr>
<p>Happy Coding! 🚀</p>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linkedin</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-01-01/</guid>
  <pubDate>Wed, 01 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Rounding Numbers in R with Examples: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-12-31/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Rounding numbers is a fundamental operation in data analysis and scientific computing. Whether you’re working with financial data, scientific measurements, or large datasets, rounding ensures precision and simplifies results. In R, several functions are available to handle rounding, each tailored to specific needs. This guide will walk you through the most commonly used rounding functions in R—<code>round()</code>, <code>signif()</code>, <code>ceiling()</code>, <code>floor()</code>, and <code>trunc()</code>—with practical examples and real-world applications.</p>
</section>
<section id="understanding-rounding-in-r" class="level1">
<h1>Understanding Rounding in R</h1>
<p>Rounding is the process of reducing the number of digits in a number while keeping its value close to the original. In R, rounding is essential for:</p>
<ul>
<li>Simplifying numerical outputs.</li>
<li>Managing precision in calculations.</li>
<li>Preparing data for visualization or reporting.</li>
</ul>
</section>
<section id="overview-of-rounding-functions-in-r" class="level1">
<h1>Overview of Rounding Functions in R</h1>
<p>R provides five primary functions for rounding:</p>
<ol type="1">
<li><strong><code>round(x, digits = 0)</code></strong>: Rounds to the nearest value with a specified number of decimal places.</li>
<li><strong><code>signif(x, digits = 6)</code></strong>: Rounds to a specified number of significant digits.</li>
<li><strong><code>ceiling(x)</code></strong>: Rounds up to the nearest integer.</li>
<li><strong><code>floor(x)</code></strong>: Rounds down to the nearest integer.</li>
<li><strong><code>trunc(x)</code></strong>: Truncates the decimal part, effectively rounding towards zero.</li>
</ol>
<p>Each function serves a unique purpose, making it crucial to choose the right one for your task.</p>
</section>
<section id="using-the-round-function" class="level1">
<h1>Using the <code>round()</code> Function</h1>
<section id="syntax" class="level2">
<h2 class="anchored" data-anchor-id="syntax"><strong>Syntax</strong></h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<ul>
<li><code>x</code>: Numeric vector to be rounded.</li>
<li><code>digits</code>: Number of decimal places to round to (default is 0).</li>
</ul>
</section>
<section id="examples" class="level2">
<h2 class="anchored" data-anchor-id="examples"><strong>Examples</strong></h2>
<ol type="1">
<li><strong>Rounding to the nearest integer</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><strong>Rounding to specific decimal places</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 3.14</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.14</code></pre>
</div>
</div>
</section>
<section id="use-cases" class="level2">
<h2 class="anchored" data-anchor-id="use-cases"><strong>Use Cases</strong></h2>
<ul>
<li>Financial calculations (e.g., rounding currency values).</li>
<li>Simplifying outputs for reports.</li>
</ul>
</section>
</section>
<section id="using-the-signif-function" class="level1">
<h1>Using the <code>signif()</code> Function</h1>
<section id="syntax-1" class="level2">
<h2 class="anchored" data-anchor-id="syntax-1"><strong>Syntax</strong></h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<ul>
<li><code>x</code>: Numeric vector to be rounded.</li>
<li><code>digits</code>: Number of significant digits.</li>
</ul>
</section>
<section id="examples-1" class="level2">
<h2 class="anchored" data-anchor-id="examples-1"><strong>Examples</strong></h2>
<ol type="1">
<li><strong>Rounding to significant digits</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12345.6789</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 12300</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 12300</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><strong>Handling scientific notation</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000123456</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 0.00012</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.00012</code></pre>
</div>
</div>
</section>
<section id="use-cases-1" class="level2">
<h2 class="anchored" data-anchor-id="use-cases-1"><strong>Use Cases</strong></h2>
<ul>
<li>Scientific computations requiring precision.</li>
<li>Formatting numbers for publication.</li>
</ul>
</section>
</section>
<section id="using-the-ceiling-function" class="level1">
<h1>Using the <code>ceiling()</code> Function</h1>
<section id="syntax-2" class="level2">
<h2 class="anchored" data-anchor-id="syntax-2"><strong>Syntax</strong></h2>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(x)</span></code></pre></div>
<ul>
<li><code>x</code>: Numeric vector to be rounded up.</li>
</ul>
</section>
<section id="examples-2" class="level2">
<h2 class="anchored" data-anchor-id="examples-2"><strong>Examples</strong></h2>
<ol type="1">
<li><strong>Rounding up positive numbers</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><strong>Rounding up negative numbers</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: -2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -2</code></pre>
</div>
</div>
</section>
<section id="use-cases-2" class="level2">
<h2 class="anchored" data-anchor-id="use-cases-2"><strong>Use Cases</strong></h2>
<ul>
<li>Calculating minimum required resources (e.g., rounding up to the nearest whole unit).</li>
<li>Ensuring non-negative results in computations.</li>
</ul>
</section>
</section>
<section id="using-the-floor-function" class="level1">
<h1>Using the <code>floor()</code> Function</h1>
<section id="syntax-3" class="level2">
<h2 class="anchored" data-anchor-id="syntax-3"><strong>Syntax</strong></h2>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(x)</span></code></pre></div>
<ul>
<li><code>x</code>: Numeric vector to be rounded down.</li>
</ul>
</section>
<section id="examples-3" class="level2">
<h2 class="anchored" data-anchor-id="examples-3"><strong>Examples</strong></h2>
<ol type="1">
<li><strong>Rounding down positive numbers</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><strong>Rounding down negative numbers</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: -3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -3</code></pre>
</div>
</div>
</section>
<section id="use-cases-3" class="level2">
<h2 class="anchored" data-anchor-id="use-cases-3"><strong>Use Cases</strong></h2>
<ul>
<li>Allocating resources conservatively.</li>
<li>Data processing tasks requiring downward rounding.</li>
</ul>
</section>
</section>
<section id="using-the-trunc-function" class="level1">
<h1>Using the <code>trunc()</code> Function</h1>
<section id="syntax-4" class="level2">
<h2 class="anchored" data-anchor-id="syntax-4"><strong>Syntax</strong></h2>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(x)</span></code></pre></div>
<ul>
<li><code>x</code>: Numeric vector to be truncated.</li>
</ul>
</section>
<section id="examples-4" class="level2">
<h2 class="anchored" data-anchor-id="examples-4"><strong>Examples</strong></h2>
<ol type="1">
<li><strong>Truncating positive numbers</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><strong>Truncating negative numbers</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: -3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -3</code></pre>
</div>
</div>
</section>
<section id="use-cases-4" class="level2">
<h2 class="anchored" data-anchor-id="use-cases-4"><strong>Use Cases</strong></h2>
<ul>
<li>Financial calculations where fractional values are ignored.</li>
<li>Simplifying data for integer-based operations.</li>
</ul>
</section>
</section>
<section id="comparing-rounding-functions" class="level1">
<h1>Comparing Rounding Functions</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 38%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Behavior</th>
<th>Example Input</th>
<th>Example Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>round()</code></td>
<td>Rounds to nearest value</td>
<td>2.5</td>
<td>2</td>
</tr>
<tr class="even">
<td><code>signif()</code></td>
<td>Rounds to significant digits</td>
<td>12345.6789</td>
<td>12300</td>
</tr>
<tr class="odd">
<td><code>ceiling()</code></td>
<td>Rounds up to nearest integer</td>
<td>2.3</td>
<td>3</td>
</tr>
<tr class="even">
<td><code>floor()</code></td>
<td>Rounds down to nearest integer</td>
<td>2.7</td>
<td>2</td>
</tr>
<tr class="odd">
<td><code>trunc()</code></td>
<td>Truncates decimal places</td>
<td>-3.9</td>
<td>-3</td>
</tr>
</tbody>
</table>
</section>
<section id="practical-examples-of-rounding-in-r" class="level1">
<h1>Practical Examples of Rounding in R</h1>
<section id="example-financial-data" class="level2">
<h2 class="anchored" data-anchor-id="example-financial-data"><strong>Example: Financial Data</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">prices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.99</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24.49</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.75</span>)</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(prices, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 20.0, 24.5, 5.8</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 20.0 24.5  5.8</code></pre>
</div>
</div>
</section>
<section id="example-scientific-computations" class="level2">
<h2 class="anchored" data-anchor-id="example-scientific-computations"><strong>Example: Scientific Computations</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.000123456</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">12345.6789</span>)</span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(values, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 0.000123, 12300</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.23e-04 1.23e+04</code></pre>
</div>
</div>
</section>
<section id="example-data-visualization" class="level2">
<h2 class="anchored" data-anchor-id="example-data-visualization"><strong>Example: Data Visualization</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>)</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(data)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 3, 4, 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 4 5</code></pre>
</div>
</div>
</section>
</section>
<section id="common-pitfalls-and-how-to-avoid-them" class="level1">
<h1>Common Pitfalls and How to Avoid Them</h1>
<ol type="1">
<li><strong>Misunderstanding “round to even”</strong>:
<ul>
<li><code>round(0.5)</code> results in 0, not 1.</li>
</ul></li>
<li><strong>Floating-point precision issues</strong>:
<ul>
<li>Use <code>all.equal()</code> to compare floating-point numbers.</li>
</ul></li>
<li><strong>Inconsistent rounding across platforms</strong>:
<ul>
<li>Be aware of differences between R and other software like MATLAB.</li>
</ul></li>
</ol>
</section>
<section id="advanced-rounding-techniques" class="level1">
<h1>Advanced Rounding Techniques</h1>
<ol type="1">
<li><strong>Combining Functions</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.71828</span>)</span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 3.0, 2.0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 2</code></pre>
</div>
</div>
<ol start="2" type="1">
<li><strong>Rounding in Data Frames</strong>:</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.234</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.678</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.876</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.210</span>))</span>
<span id="cb34-2">df[] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(df, round, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p><strong>Problem</strong>: Round the following vector using all five functions:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.71828</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.61803</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.41421</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.23607</span>)</span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<p><strong>Solution</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14159</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.71828</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.61803</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.41421</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.23607</span>)</span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb36-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Original =</span> x,</span>
<span id="cb36-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Rounded =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb36-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Significant =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">signif</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb36-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Ceiled =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(x),</span>
<span id="cb36-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Floored =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(x),</span>
<span id="cb36-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Truncated =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(x)</span>
<span id="cb36-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Original Rounded Significant Ceiled Floored Truncated
1  3.14159    3.14        3.14      4       3         3
2  2.71828    2.72        2.72      3       2         2
3  1.61803    1.62        1.62      2       1         1
4 -1.41421   -1.41       -1.41     -1      -2        -1
5 -2.23607   -2.24       -2.24     -2      -3        -2</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Rounding functions in R include <code>round()</code>, <code>signif()</code>, <code>ceiling()</code>, <code>floor()</code>, and <code>trunc()</code>.</li>
<li>Each function has unique use cases, from financial calculations to scientific precision.</li>
<li>Understanding their behavior ensures accurate and efficient data analysis.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Rounding numbers in R is a versatile and essential skill for programmers. By mastering these functions, you can handle a wide range of tasks with precision and confidence. Start applying these techniques in your projects today!</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>What is the difference between <code>round()</code> and <code>signif()</code>?</strong> <code>round()</code> focuses on decimal places, while <code>signif()</code> targets significant digits.</p></li>
<li><p><strong>How does <code>ceiling()</code> handle negative numbers?</strong> It rounds up towards zero.</p></li>
<li><p><strong>Can I use rounding functions on data frames?</strong> Yes, use <code>apply()</code> or <code>dplyr</code> for efficient operations.</p></li>
<li><p><strong>What happens when rounding 0.5 in R?</strong> R uses “round to even,” so 0.5 rounds to 0.</p></li>
</ol>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><strong>R Documentation: <code>round()</code></strong> Official documentation for the <code>round()</code> function in R, detailing its syntax, parameters, and behavior. Available at: <a href="https://www.rdocumentation.org/packages/base/versions/latest/topics/round" class="uri">https://www.rdocumentation.org/packages/base/versions/latest/topics/round</a></p></li>
<li><p><strong>R Documentation: <code>signif()</code></strong> Official documentation for the <code>signif()</code> function in R, explaining its usage for rounding to significant digits. Available at: <a href="https://www.rdocumentation.org/packages/base/versions/latest/topics/signif" class="uri">https://www.rdocumentation.org/packages/base/versions/latest/topics/signif</a></p></li>
<li><p><strong>R Documentation: <code>ceiling()</code></strong> Official documentation for the <code>ceiling()</code> function in R, describing its functionality for rounding up to the nearest integer. Available at: <a href="https://www.rdocumentation.org/packages/base/versions/latest/topics/ceiling" class="uri">https://www.rdocumentation.org/packages/base/versions/latest/topics/ceiling</a></p></li>
<li><p><strong>R Documentation: <code>floor()</code></strong> Official documentation for the <code>floor()</code> function in R, which rounds down to the nearest integer. Available at: <a href="https://www.rdocumentation.org/packages/base/versions/latest/topics/floor" class="uri">https://www.rdocumentation.org/packages/base/versions/latest/topics/floor</a></p></li>
<li><p><strong>R Documentation: <code>trunc()</code></strong> Official documentation for the <code>trunc()</code> function in R, explaining its use for truncating decimal places. Available at: <a href="https://www.rdocumentation.org/packages/base/versions/latest/topics/trunc" class="uri">https://www.rdocumentation.org/packages/base/versions/latest/topics/trunc</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-12-31/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Rounding in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-12-31/</guid>
  <pubDate>Tue, 31 Dec 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Comprehensive Guide to Arcsine Transformation in R with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-12-30/</link>
  <description><![CDATA[ 





<section id="introduction-to-arcsine-transformation" class="level1">
<h1>Introduction to Arcsine Transformation</h1>
<p>The <strong>arcsine transformation</strong> is a mathematical technique widely used in statistical analysis to stabilize variance and normalize data, particularly when dealing with proportions or percentages. This transformation is especially useful for data bounded between 0 and 1, such as proportions, as it helps meet the assumptions of normality required by many statistical methods.</p>
<p>In this guide, we will explore the concept of arcsine transformation, its importance, implementation in R, and practical examples tailored for R programmers.</p>
<hr>
</section>
<section id="why-use-arcsine-transformation" class="level1">
<h1>Why Use Arcsine Transformation?</h1>
<section id="key-benefits" class="level2">
<h2 class="anchored" data-anchor-id="key-benefits">Key Benefits</h2>
<ol type="1">
<li><strong>Variance Stabilization</strong>: Proportional data often exhibit heteroscedasticity (non-constant variance). The arcsine transformation stabilizes variance, making the data more suitable for statistical analysis.</li>
<li><strong>Normalization</strong>: It helps approximate a normal distribution, which is crucial for parametric tests like ANOVA and regression.</li>
<li><strong>Handling Proportional Data</strong>: Particularly useful for ecological, biological, and meta-analytical studies where proportions of 0% or 100% are common.</li>
<li><strong>No Continuity Correction Needed</strong>: Unlike log or logit transformations, the arcsine transformation can handle zero values without requiring adjustments.</li>
</ol>
</section>
<section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<ul>
<li><strong>Interpretation Challenges</strong>: Transformed data may not be as intuitively interpretable as the original data.</li>
<li><strong>Bounded Domain</strong>: The transformation is limited to data within the range of 0 to 1, requiring scaling for other ranges.</li>
</ul>
<hr>
</section>
</section>
<section id="mathematical-formulation" class="level1">
<h1>Mathematical Formulation</h1>
<p>The arcsine transformation is defined as: [ Y = ^{-1}() ]</p>
<p>Where: - (X) is the proportion data (values between 0 and 1). - (Y) is the transformed data.</p>
<p>This transformation pulls the ends of the distribution closer, stabilizing variance and making the data more symmetric.</p>
<hr>
</section>
<section id="implementing-arcsine-transformation-in-r" class="level1">
<h1>Implementing Arcsine Transformation in R</h1>
<section id="basic-transformation-on-a-vector" class="level2">
<h2 class="anchored" data-anchor-id="basic-transformation-on-a-vector">Basic Transformation on a Vector</h2>
<p>The <code>asin()</code> function in R is used for arcsine transformation. Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector with values between 0 and 1</span></span>
<span id="cb1-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.34</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform arcsine transformation</span></span>
<span id="cb1-5">transformed_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(data))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the transformed data</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(transformed_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5796397 0.4636476 0.6847192 0.7853982 0.8860771 0.9911566 1.1071487
[8] 0.6225334</code></pre>
</div>
</div>
<p>This example demonstrates how to apply the transformation to a simple vector of proportion data.</p>
</section>
</section>
<section id="applying-transformation-to-a-dataframe" class="level1">
<h1>Applying Transformation to a DataFrame</h1>
<p>For datasets with multiple columns, you can apply the transformation to specific columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dataframe with proportion data</span></span>
<span id="cb3-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>),</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.67</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.612</span>),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.92</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.84</span>)</span>
<span id="cb3-6">)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply arcsine transformation to specific columns</span></span>
<span id="cb3-9">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col1_transformed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col1))</span>
<span id="cb3-10">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col3_transformed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>col3))</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the transformed dataframe</span></span>
<span id="cb3-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  col1  col2 col3 col1_transformed col3_transformed
1  0.3 0.450 0.35        0.5796397        0.6330518
2  0.2 0.670 0.92        0.4636476        1.2840398
3  0.4 0.612 0.84        0.6847192        1.1592795</code></pre>
</div>
</div>
<p>This approach is useful for transforming specific columns in a dataset.</p>
</section>
<section id="handling-data-outside-the-0-to-1-range" class="level1">
<h1>Handling Data Outside the 0 to 1 Range</h1>
<p>If your data contains values outside the range of 0 to 1, you need to scale it before applying the transformation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector with values outside the 0 to 1 range</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">67</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale the data to the 0 to 1 range</span></span>
<span id="cb5-5">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(data)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform arcsine transformation</span></span>
<span id="cb5-8">transformed_scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(scaled_data))</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the transformed data</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(transformed_scaled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.6259952 0.9606035 0.7630026 0.1736450 0.7928611 0.5942056 0.6101928
[8] 1.5707963</code></pre>
</div>
</div>
<p>Scaling ensures the data is appropriately prepared for the arcsine transformation.</p>
</section>
<section id="common-pitfalls-and-misconceptions" class="level1">
<h1>Common Pitfalls and Misconceptions</h1>
<ol type="1">
<li><strong>Misinterpretation of Transformed Data</strong>: Transformed values are not directly interpretable in the original scale. Always back-transform for reporting.</li>
<li><strong>Inappropriate Use</strong>: The transformation is only valid for proportional data. Applying it to other types of data can lead to errors.</li>
<li><strong>Assumption of Normality</strong>: While the transformation helps approximate normality, it does not guarantee it.</li>
<li><strong>Scaling Oversight</strong>: Forgetting to scale data outside the 0 to 1 range can result in incorrect results.</li>
</ol>
</section>
<section id="real-world-applications" class="level1">
<h1>Real-World Applications</h1>
<ol type="1">
<li><strong>Health Sciences</strong>: Used in meta-analyses to synthesize proportions like disease prevalence and diagnostic test accuracy.</li>
<li><strong>Ecology</strong>: Applied to analyze species proportions in ecosystems.</li>
<li><strong>Psychology</strong>: Used in experimental designs to analyze proportions, such as success rates in behavioral studies.</li>
<li><strong>Meta-Analysis</strong>: The Freeman–Tukey double-arcsine transformation is a variant used for stabilizing variances in meta-analyses.</li>
</ol>
</section>
<section id="alternatives-to-arcsine-transformation" class="level1">
<h1>Alternatives to Arcsine Transformation</h1>
<p>While the arcsine transformation is effective, other methods may be more suitable depending on the data: 1. <strong>Logit Transformation</strong>: Maps proportions to the entire real number line, useful for regression analysis. 2. <strong>Box-Cox Transformation</strong>: A flexible family of transformations for stabilizing variance. 3. <strong>Log Transformation</strong>: Reduces skewness in positively skewed data. 4. <strong>Double Arcsine Transformation</strong>: Specifically designed for meta-analyses.</p>
</section>
<section id="advantages-and-limitations" class="level1">
<h1>Advantages and Limitations</h1>
<section id="advantages" class="level2">
<h2 class="anchored" data-anchor-id="advantages">Advantages</h2>
<ul>
<li>Stabilizes variance for proportional data.</li>
<li>Approximates normality for parametric tests.</li>
<li>Handles zero counts without continuity corrections.</li>
</ul>
</section>
<section id="limitations-1" class="level2">
<h2 class="anchored" data-anchor-id="limitations-1">Limitations</h2>
<ul>
<li>Lack of intuitive interpretation.</li>
<li>Complex back-transformation.</li>
<li>Limited to data within the 0 to 1 range.</li>
</ul>
</section>
</section>
<section id="your-turn-practical-exercise" class="level1">
<h1>Your Turn! Practical Exercise</h1>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>Create a comprehensive R function that:</p>
<ol type="1">
<li>Takes a vector of proportions or percentages</li>
<li>Validates the input data (checks for 0-1 range)</li>
<li>Applies the arcsine transformation</li>
<li>Creates a visualization comparing original vs transformed data</li>
<li>Returns both the transformed values and the plot</li>
</ol>
<p>Try solving this before looking at the solution!</p>
<details>
<summary>
Click to reveal solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">arcsine_transform_visualize <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb7-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input validation</span></span>
<span id="cb7-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) {</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All values must be between 0 and 1"</span>)</span>
<span id="cb7-5">  }</span>
<span id="cb7-6">  </span>
<span id="cb7-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformation</span></span>
<span id="cb7-8">  transformed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">asin</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(data))</span>
<span id="cb7-9">  </span>
<span id="cb7-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create visualization</span></span>
<span id="cb7-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(ggplot2)) {</span>
<span id="cb7-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb7-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb7-14">  }</span>
<span id="cb7-15">  </span>
<span id="cb7-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data frame for plotting</span></span>
<span id="cb7-17">  plot_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb7-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Original =</span> data,</span>
<span id="cb7-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Transformed =</span> transformed</span>
<span id="cb7-20">  )</span>
<span id="cb7-21">  </span>
<span id="cb7-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create plot</span></span>
<span id="cb7-23">  plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(plot_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Original, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Transformed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb7-27">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Arcsine Transformation Visualization"</span>,</span>
<span id="cb7-28">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Proportions"</span>,</span>
<span id="cb7-29">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Transformed Values"</span></span>
<span id="cb7-30">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span>
<span id="cb7-32">  </span>
<span id="cb7-33">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return results as a list</span></span>
<span id="cb7-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb7-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transformed_values =</span> transformed,</span>
<span id="cb7-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comparison_plot =</span> plot,</span>
<span id="cb7-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">summary_stats =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(transformed)</span>
<span id="cb7-38">  ))</span>
<span id="cb7-39">}</span>
<span id="cb7-40"></span>
<span id="cb7-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb7-42">test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb7-43">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arcsine_transform_visualize</span>(test_data)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ggplot2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View results</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>transformed_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3217506 0.4636476 0.5796397 0.6847192 0.7853982 0.8860771 0.9911566
[8] 1.1071487 1.2490458</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>summary_stats)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.3218  0.5796  0.7854  0.7854  0.9912  1.2490 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">results<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>comparison_plot</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-12-30/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<section id="test-your-understanding" class="level2">
<h2 class="anchored" data-anchor-id="test-your-understanding">Test Your Understanding</h2>
<p>After implementing the solution, try answering these questions: 1. Why do we need to check if ggplot2 is installed? 2. What happens if we input values greater than 1? 3. How would you modify the function to handle percentage data (0-100)? 4. Can you explain the shape of the transformation curve in the plot?</p>
<p>This exercise combines several key concepts we’ve covered and provides practical experience with both the transformation and data visualization in R.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The arcsine transformation is a powerful tool for stabilizing variance and normalizing proportional data, making it indispensable in fields like ecology, health sciences, and meta-analysis. By understanding its implementation, advantages, and limitations, R programmers can effectively apply this transformation to enhance their statistical analyses.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="what-is-the-purpose-of-the-arcsine-transformation" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-purpose-of-the-arcsine-transformation">1. What is the purpose of the arcsine transformation?</h2>
<p>The arcsine transformation stabilizes variance and normalizes proportional data, making it suitable for parametric statistical tests.</p>
</section>
<section id="can-i-use-the-arcsine-transformation-for-data-outside-the-0-to-1-range" class="level2">
<h2 class="anchored" data-anchor-id="can-i-use-the-arcsine-transformation-for-data-outside-the-0-to-1-range">2. Can I use the arcsine transformation for data outside the 0 to 1 range?</h2>
<p>No, you must scale the data to the 0 to 1 range before applying the transformation.</p>
</section>
<section id="how-do-i-back-transform-arcsine-transformed-data" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-back-transform-arcsine-transformed-data">3. How do I back-transform arcsine-transformed data?</h2>
<p>Use the formula ( X = ((Y))^2 ) to back-transform the data to its original scale.</p>
</section>
<section id="what-are-some-alternatives-to-the-arcsine-transformation" class="level2">
<h2 class="anchored" data-anchor-id="what-are-some-alternatives-to-the-arcsine-transformation">4. What are some alternatives to the arcsine transformation?</h2>
<p>Alternatives include the logit transformation, Box-Cox transformation, and double arcsine transformation.</p>
</section>
<section id="is-the-arcsine-transformation-suitable-for-all-types-of-data" class="level2">
<h2 class="anchored" data-anchor-id="is-the-arcsine-transformation-suitable-for-all-types-of-data">5. Is the arcsine transformation suitable for all types of data?</h2>
<p>No, it is specifically designed for proportional data. Other transformations may be more appropriate for different data types.</p>
</section>
</section>
<section id="comment-and-share" class="level1">
<h1>Comment and Share!</h1>
<p>If you found this guide helpful, share it with your peers and let us know your thoughts in the comments below.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.geeksforgeeks.org/how-to-perform-arcsine-transformation-in-r/">GeeksForGeeks. (2023). How to Perform Arcsine Transformation in R? Retrieved from https://www.geeksforgeeks.org/how-to-perform-arcsine-transformation-in-r/</a></p></li>
<li><p><a href="https://stats.stackexchange.com/questions/20772/are-ecologists-the-only-ones-who-didnt-know-that-the-arcsine-is-asinine">Warton, D. I. (2011). Are ecologists the only ones who didn’t know that the arcsine is asinine? Discussion on Cross Validated. Retrieved from https://stats.stackexchange.com/questions/20772/are-ecologists-the-only-ones-who-didnt-know-that-the-arcsine-is-asinine</a></p></li>
<li><p><a href="https://stats.stackexchange.com/questions/10975/transforming-proportion-data-when-arcsin-square-root-is-not-enough">Bolker, B. (2011). Transforming proportion data when arcsin square root is not enough. Retrieved from https://stats.stackexchange.com/questions/10975/transforming-proportion-data-when-arcsin-square-root-is-not-enough</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-12-30/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>ArcSin Transformation</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-12-30/</guid>
  <pubDate>Mon, 30 Dec 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Complete Guide to Searching Files in Linux: A Beginner’s Tutorial</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-12-27/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Finding files in Linux can seem daunting for beginners, especially when dealing with thousands of files across multiple directories. This guide will walk you through the most effective methods to search for files in Linux, making file management a breeze.</p>
</section>
<section id="understanding-linux-file-search-tools" class="level1">
<h1>Understanding Linux File Search Tools</h1>
<p>Linux provides two primary tools for finding files:</p>
<ul>
<li><strong>locate</strong>: A fast, database-driven search tool</li>
<li><strong>find</strong>: A powerful, feature-rich search utility</li>
</ul>
<section id="the-locate-command-quick-and-easy-searches" class="level2">
<h2 class="anchored" data-anchor-id="the-locate-command-quick-and-easy-searches">The locate Command: Quick and Easy Searches</h2>
<p>The <code>locate</code> command offers a simple way to find files by name. It searches through a pre-built database of file paths, making it incredibly fast.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic syntax</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locate</span> filename</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example: Finding zip-related files</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locate</span> zip <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> bin</span></code></pre></div>
<p>Here is a sample of output from my terminal:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">steve@server:~$</span> locate zip <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> bin</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/bunzip2</span></span>
<span id="cb2-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/bzip2</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/bzip2recover</span></span>
<span id="cb2-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/gunzip</span></span>
<span id="cb2-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/gzip</span></span>
<span id="cb2-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.10.10.0.bin</span></span>
<span id="cb2-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.10.5.0.bin</span></span>
<span id="cb2-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.15.3.0.bin</span></span>
<span id="cb2-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.20.0.0.bin</span></span>
<span id="cb2-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.33.1.0.bin</span></span>
<span id="cb2-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.37.2.0.bin</span></span>
<span id="cb2-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.37.7.0.bin</span></span>
<span id="cb2-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.4.2.0.bin</span></span>
<span id="cb2-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/lib/firmware/qed/qed_init_values_zipped-8.7.3.0.bin</span></span>
<span id="cb2-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">...</span></span></code></pre></div>
<p><strong>Pro Tip</strong>: The locate database is updated daily. If you need to search for recently created files, run <code>sudo updatedb</code> to update the database manually.</p>
</section>
</section>
<section id="the-find-command-advanced-file-searching" class="level1">
<h1>The find Command: Advanced File Searching</h1>
<p>The <code>find</code> command is more powerful but requires more detailed syntax. It searches through directories in real-time, offering precise control over search criteria.</p>
<section id="basic-find-command-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-find-command-syntax">Basic find Command Syntax</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> /path/to/search <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span></span></code></pre></div>
</section>
<section id="common-search-criteria" class="level2">
<h2 class="anchored" data-anchor-id="common-search-criteria">Common Search Criteria</h2>
<section id="search-by-file-type" class="level3">
<h3 class="anchored" data-anchor-id="search-by-file-type">1. Search by File Type</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find directories</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> d</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find regular files</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f</span></code></pre></div>
<p>Sample output from my terminal:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">steve@server:~$</span> find ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> d</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve</span></span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.local</span></span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.local/share</span></span>
<span id="cb5-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.local/share/nano</span></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.config</span></span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.config/htop</span></span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/docker</span></span>
<span id="cb5-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.cache</span></span>
<span id="cb5-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.cache/update-manager-core</span></span>
<span id="cb5-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/sandbox</span></span>
<span id="cb5-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.gnupg</span></span>
<span id="cb5-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.gnupg/private-keys-v1.d</span></span>
<span id="cb5-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/snap</span></span>
<span id="cb5-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/snap/docker</span></span>
<span id="cb5-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.ssh</span></span></code></pre></div>
</section>
<section id="search-by-file-size" class="level3">
<h3 class="anchored" data-anchor-id="search-by-file-size">2. Search by File Size</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find files larger than 1MB</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-size</span> +1M</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find files smaller than 100KB</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-size</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-100k</span></span></code></pre></div>
<p>Sample output from my terminal:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">steve@server:~$</span> find ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-size</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-100k</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.smbcredentials</span></span>
<span id="cb7-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/?</span></span>
<span id="cb7-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.sudo_as_admin_successful</span></span>
<span id="cb7-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.config/htop/htoprc</span></span>
<span id="cb7-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/jcameron-key.asc</span></span>
<span id="cb7-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/pat_backup.tag.bz</span></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.viminfo</span></span>
<span id="cb7-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/ls.txt</span></span>
<span id="cb7-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.bashrc</span></span>
<span id="cb7-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/docker/docker-compose.yml.save</span></span>
<span id="cb7-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/docker/docker-compose.yml</span></span>
<span id="cb7-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/pat_backup.tar.bz</span></span>
<span id="cb7-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.bash_logout</span></span>
<span id="cb7-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.cache/motd.legal-displayed</span></span>
<span id="cb7-16"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.cache/update-manager-core/meta-release-lts</span></span>
<span id="cb7-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/sandbox/test_file.txt</span></span>
<span id="cb7-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.bash_history</span></span>
<span id="cb7-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.ssh/authorized_keys</span></span>
<span id="cb7-20"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.ssh/known_hosts</span></span>
<span id="cb7-21"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.profile</span></span></code></pre></div>
</section>
<section id="search-by-permissions" class="level3">
<h3 class="anchored" data-anchor-id="search-by-permissions">3. Search by Permissions</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find files with specific permissions</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-perm</span> 0644</span></code></pre></div>
<p>Sample output from my terminal:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">steve@server:~$</span> find ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-perm</span> 0644</span>
<span id="cb9-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/?</span></span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.sudo_as_admin_successful</span></span>
<span id="cb9-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.bashrc</span></span>
<span id="cb9-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/pat_backup.tar.bz</span></span>
<span id="cb9-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.bash_logout</span></span>
<span id="cb9-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.cache/motd.legal-displayed</span></span>
<span id="cb9-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/home/steve/.profile</span></span></code></pre></div>
</section>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try this practical exercise:</p>
<p><strong>Problem</strong>: Find all <code>.txt</code> files in your home directory that are larger than 1MB and were modified in the last 24 hours.</p>
<p>Try writing the command before looking at the solution below.</p>
<details>
<summary>
Click Here for Solution!
</summary>
<p><strong>Solution</strong>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.txt"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-size</span> +1M <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-mtime</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span></span></code></pre></div>
</details>
</section>
<section id="advanced-search-techniques" class="level1">
<h1>Advanced Search Techniques</h1>
<section id="combining-search-criteria" class="level2">
<h2 class="anchored" data-anchor-id="combining-search-criteria">Combining Search Criteria</h2>
<p>Use logical operators to create complex searches:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\(</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-perm</span> 0600 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\)</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-or</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\(</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> d <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-not</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-perm</span> 0700 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\)</span></span></code></pre></div>
</section>
<section id="executing-commands-on-found-files" class="level2">
<h2 class="anchored" data-anchor-id="executing-commands-on-found-files">Executing Commands on Found Files</h2>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List details of found files</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.jpg"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-exec</span> ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> {} <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\;</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete found files (use with caution!)</span></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> ~ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.tmp"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-delete</span></span></code></pre></div>
</section>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ol type="1">
<li>Use <code>locate</code> for quick filename searches</li>
<li>Use <code>find</code> for detailed, criteria-based searches</li>
<li>Remember to update the locate database with <code>sudo updatedb</code></li>
<li>Combine search criteria for precise results</li>
<li>Use <code>-exec</code> to perform actions on found files</li>
</ol>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<ol type="1">
<li><p><strong>Q: Why can’t I find recently created files with locate?</strong> A: The locate database is updated periodically. Run <code>sudo updatedb</code> to update it manually.</p></li>
<li><p><strong>Q: How can I search for files by content?</strong> A: Combine <code>find</code> with <code>grep</code>: <code>find . -type f -exec grep "search text" {} \;</code></p></li>
<li><p><strong>Q: Can I search for files by date?</strong> A: Yes, use <code>-mtime</code> (modification time) or <code>-ctime</code> (change time) options with <code>find</code>.</p></li>
<li><p><strong>Q: How do I handle filenames with spaces?</strong> A: Use quotes around filenames or use the <code>-print0</code> option with <code>find</code>.</p></li>
<li><p><strong>Q: Is there a GUI alternative to these commands?</strong> A: Yes, most Linux distributions include graphical search tools, but command-line tools offer more power and flexibility.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering file search in Linux is essential for efficient system management. While <code>locate</code> provides quick results for simple searches, <code>find</code> offers powerful options for complex search requirements. Practice these commands regularly to become proficient in Linux file management.</p>
<p><em>We’d love to hear about your experiences with Linux file searching! Share your tips and tricks in the comments below, or follow us on social media for more Linux tutorials.</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-find-and-locate-to-search-for-files-on-linux">DigitalOcean Community. (n.d.). How To Use Find and Locate to Search for Files on Linux.</a></p></li>
<li><p><a href="https://www.freecodecamp.org/news/how-to-search-for-files-from-the-linux-command-line/">freeCodeCamp. (n.d.). How to Search for Files from the Linux Command Line</a></p></li>
<li><p><a href="https://www.plesk.com/blog/various/find-files-in-linux-via-command-line/">Plesk Blog. (n.d.). Find Files in Linux via Command Line</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-12-27/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Finding Files in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-12-27/</guid>
  <pubDate>Fri, 27 Dec 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
