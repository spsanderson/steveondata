<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Wed, 31 Jul 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>How to List All Open Workbooks Using VBA and Call It from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-31/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R useRs! Today, we‚Äôre going to discuss a fascinating topic that bridges the gap between VBA (Visual Basic for Applications) and R. We‚Äôll explore how to get a list of all open workbooks in Excel using VBA and then call this VBA code from R. This can be particularly useful if you‚Äôre working with multiple Excel files and need to manage them efficiently from R.</p>
</section>
<section id="prerequisites" class="level1">
<h1>Prerequisites</h1>
<section id="step-1-writing-the-vba-code" class="level2">
<h2 class="anchored" data-anchor-id="step-1-writing-the-vba-code">Step 1: Writing the VBA Code</h2>
<p>First, let‚Äôs write a simple VBA macro to list all open workbooks. Open Excel, press Alt + F11 to open the VBA editor, and insert a new module. Here‚Äôs the VBA code:</p>
<pre class="vba"><code>Sub ListAllOpenWorkbooks()
    Dim wb As Workbook
    Dim wbNames As String
    wbNames = "Open Workbooks:" &amp; vbCrLf
    
    For Each wb In Application.Workbooks
        wbNames = wbNames &amp; wb.Name &amp; vbCrLf
    Next wb
    
    MsgBox wbNames
End Sub</code></pre>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation:</h3>
<ul>
<li>Sub ListAllOpenWorkbooks(): This starts our macro.</li>
<li>Dim wb As Workbook: Declares a variable wb to represent each workbook.</li>
<li>Dim wbNames As String: Declares a string variable to store the names of open workbooks.</li>
<li>For Each wb In Application.Workbooks: Loops through each open workbook.</li>
<li>wbNames = wbNames &amp; wb.Name &amp; vbCrLf: Appends the name of each workbook to the wbNames string.</li>
<li>MsgBox wbNames: Displays the names of all open workbooks in a message box.</li>
</ul>
</section>
</section>
<section id="step-2-saving-the-vba-macro" class="level2">
<h2 class="anchored" data-anchor-id="step-2-saving-the-vba-macro">Step 2: Saving the VBA Macro</h2>
<p>Save your VBA macro by clicking File &gt; Save. Make sure to save your Excel file as a macro-enabled workbook (.xlsm).</p>
</section>
<section id="step-3-calling-the-vba-macro-from-r" class="level2">
<h2 class="anchored" data-anchor-id="step-3-calling-the-vba-macro-from-r">Step 3: Calling the VBA Macro from R</h2>
<p>Now, let‚Äôs move to R. We‚Äôll use the RDCOMClient package to interact with Excel and call our VBA macro. If you haven‚Äôt installed this package yet, you can do so using:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.omegahat.net/R"</span>)</span></code></pre></div>
<p>Here‚Äôs the R code to call our VBA macro:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a COM object to interact with Excel</span></span>
<span id="cb3-4">excel_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Excel visible (optional)</span></span>
<span id="cb3-7">excel_app[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visible"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the workbook containing the VBA macro</span></span>
<span id="cb3-10">workbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excel_app[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Workbooks"</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">path</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">to</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">your</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">workbook.xlsm"</span>)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the VBA macro</span></span>
<span id="cb3-13">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ListAllOpenWorkbooks"</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the workbook without saving</span></span>
<span id="cb3-16">workbook<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Close</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit Excel</span></span>
<span id="cb3-19">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span></code></pre></div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation:</h3>
<ul>
<li>library(RDCOMClient): Loads the RDCOMClient package.</li>
<li>COMCreate(‚ÄúExcel.Application‚Äù): Creates a COM object to interact with Excel.</li>
<li>excel_app[[‚ÄúVisible‚Äù]] &lt;- TRUE: Makes Excel visible (optional).</li>
<li>excel_app[[‚ÄúWorkbooks‚Äù]]$Open(‚ÄúC:.xlsm‚Äù): Opens the workbook containing the VBA macro. Replace ‚ÄúC:\path\to\your\workbook.xlsm‚Äù with the actual path to your workbook.</li>
<li>excel_app$Run(‚ÄúListAllOpenWorkbooks‚Äù): Runs the VBA macro.</li>
<li>workbook$Close(FALSE): Closes the workbook without saving changes.</li>
<li>excel_app$Quit(): Quits Excel.</li>
</ul>
<p>Here are some sample outputs for me:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-31/Capture.PNG" class="img-fluid figure-img"></p>
<figcaption>Many Open Workbooks</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-31/Capture_2.PNG" class="img-fluid figure-img"></p>
<figcaption>Two Open Workbook</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>And there you have it! You‚Äôve successfully listed all open workbooks using VBA and called this macro from R. This approach can be incredibly powerful for automating tasks that involve both R and Excel. Give it a try and see how what happens!</p>
<p>Feel free to experiment with the code and adapt it to your needs.</p>
<hr>
<p>Happy coding! üöÄ</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-31/</guid>
  <pubDate>Wed, 31 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering String Conversion to Lowercase in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-30/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data analysis and manipulation, handling text data is a common task. One of the essential operations you might need to perform is converting strings to lowercase. In R, this is easily done using the <code>tolower()</code> function. Let‚Äôs explore how to convert your text data into lowercase, along with practical examples and a real-world use case.</p>
</section>
<section id="the-tolower-function" class="level1">
<h1>The <code>tolower()</code> Function</h1>
<p>The <code>tolower()</code> function converts all characters in a string to lowercase. Here‚Äôs the basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(string)</span></code></pre></div>
<ul>
<li><code>string</code>: This is the input string or character vector that you want to convert to lowercase.</li>
</ul>
</section>
<section id="why-convert-to-lowercase" class="level1">
<h1>Why Convert to Lowercase?</h1>
<p>Converting strings to lowercase is useful for standardizing text data. It helps in comparison and searching, ensuring consistency, especially when dealing with user inputs, names, or categories.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-converting-a-single-string" class="level2">
<h2 class="anchored" data-anchor-id="example-1-converting-a-single-string">Example 1: Converting a Single String</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World!"</span></span>
<span id="cb2-2">lower_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(text)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lower_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "hello world!"</code></pre>
</div>
</div>
</section>
<section id="example-2-converting-a-vector-of-strings" class="level2">
<h2 class="anchored" data-anchor-id="example-2-converting-a-vector-of-strings">Example 2: Converting a Vector of Strings</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span>)</span>
<span id="cb4-2">lower_fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(fruits)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lower_fruits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"  "banana" "cherry"</code></pre>
</div>
</div>
</section>
<section id="example-3-handling-mixed-case-strings" class="level2">
<h2 class="anchored" data-anchor-id="example-3-handling-mixed-case-strings">Example 3: Handling Mixed Case Strings</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mixed_case <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ThiS Is A MiXeD CaSe StrIng."</span></span>
<span id="cb6-2">lower_case <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(mixed_case)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(lower_case)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "this is a mixed case string."</code></pre>
</div>
</div>
</section>
<section id="practical-use-checking-users-favorite-color" class="level2">
<h2 class="anchored" data-anchor-id="practical-use-checking-users-favorite-color">Practical Use: Checking User‚Äôs Favorite Color</h2>
<p>A practical application of converting strings to lowercase is in user input validation. Let‚Äôs consider a simple function that checks a user‚Äôs favorite color and responds accordingly. By converting the input to lowercase, we can ensure that the function handles different cases uniformly.</p>
<p>Here‚Äôs the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check user's favorite color</span></span>
<span id="cb8-2">check_favorite_color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(color) {</span>
<span id="cb8-3">  color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tolower</span>(color)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert input to lowercase</span></span>
<span id="cb8-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) {</span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blue is my favorite color!"</span>)</span>
<span id="cb8-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (color <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) {</span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red is not a good choice!"</span>)</span>
<span id="cb8-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb8-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"That's a nice color too!"</span>)</span>
<span id="cb8-10">  }</span>
<span id="cb8-11">}</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb8-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_favorite_color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BLUE"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works with uppercase</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Blue is my favorite color!"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_favorite_color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Red"</span>))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works with mixed case</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Red is not a good choice!"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_favorite_color</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works with lowercase</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "That's a nice color too!"</code></pre>
</div>
</div>
<p>In this function, we use <code>tolower()</code> to ensure that the input is in lowercase, making it easier to compare against predefined color choices. This approach helps handle inputs consistently, regardless of how the user types them.</p>
<section id="understanding-the-code" class="level3">
<h3 class="anchored" data-anchor-id="understanding-the-code">Understanding the Code</h3>
<p>The <code>tolower()</code> function converts uppercase characters to lowercase in a given string or vector of strings. It only affects alphabetic characters, leaving other characters unchanged. This makes it an essential tool for standardizing text data.</p>
</section>
</section>
</section>
<section id="try-it-out" class="level1">
<h1>Try It Out</h1>
<p>Now it‚Äôs your turn! Experiment with different strings or scenarios where converting to lowercase can simplify your code and improve data consistency. Whether it‚Äôs for user input validation, data cleaning, or any other purpose, mastering this simple function can be incredibly useful in your R programming journey.</p>
<p>Feel free to share your experiences or any interesting use cases you‚Äôve come across.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-30/</guid>
  <pubDate>Tue, 30 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Stratified Sampling in R: A Practical Guide with Base R and dplyr</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-29/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Stratified sampling is a technique used to ensure that different subgroups (strata) within a population are represented in a sample. This method is particularly useful when certain strata are underrepresented in a simple random sample. In this post, we‚Äôll explore how to perform stratified sampling in R using both base R and the <code>dplyr</code> package. We‚Äôll walk through examples and explain the code, so you can try these techniques on your own data.</p>
</section>
<section id="what-is-stratified-sampling" class="level1">
<h1>What is Stratified Sampling?</h1>
<p>In stratified sampling, the population is divided into different strata based on a specific characteristic (e.g., age, gender, income level). A random sample is then taken from each stratum. This method ensures that the sample represents the population accurately, especially when the strata are significantly different in size or characteristics.</p>
<section id="stratified-sampling-with-base-r" class="level2">
<h2 class="anchored" data-anchor-id="stratified-sampling-with-base-r">Stratified Sampling with Base R</h2>
<p>Let‚Äôs start with an example using base R. Suppose we have a dataset with information about individuals, including their gender and income. We want to sample a specific number of individuals from each gender group.</p>
<p>Here‚Äôs how we can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb1-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gender =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the first few rows of the data</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Gender   Income
1  1   Male 52533.19
2  2   Male 49714.53
3  3   Male 49571.30
4  4 Female 63686.02
5  5   Male 47742.29
6  6 Female 65164.71</code></pre>
</div>
</div>
<p>In this dataset, we have a column for <code>Gender</code> and another for <code>Income</code>. Let‚Äôs say we want to sample 10 males and 10 females.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stratified sampling function</span></span>
<span id="cb3-2">stratified_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, strat_column, size_per_stratum) {</span>
<span id="cb3-3">  strata <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(data[[strat_column]])</span>
<span id="cb3-4">  sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(strata, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(stratum) {</span>
<span id="cb3-5">    subset_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[data[[strat_column]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> stratum, ]</span>
<span id="cb3-6">    subset_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(subset_data), size_per_stratum), ]</span>
<span id="cb3-7">  }))</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(sampled_data)</span>
<span id="cb3-9">}</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform stratified sampling</span></span>
<span id="cb3-12">sampled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stratified_sample</span>(data, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gender"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the sampled data</span></span>
<span id="cb3-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sampled_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Gender)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Female   Male 
    10     10 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     ID Gender   Income
45   45   Male 63606.52
69   69   Male 41502.96
83   83   Male 50412.33
29   29   Male 51813.03
49   49   Male 47643.00
100 100   Male 37129.70</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li>We first create a function <code>stratified_sample</code> that takes the data, the column to stratify by, and the number of samples per stratum.</li>
<li>The function identifies unique strata, then samples the specified number of rows from each stratum.</li>
<li>The result is a combined dataset with samples from each group.</li>
</ul>
</section>
<section id="stratified-sampling-with-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="stratified-sampling-with-dplyr">Stratified Sampling with <code>dplyr</code></h2>
<section id="using-sample_n" class="level3">
<h3 class="anchored" data-anchor-id="using-sample_n">Using <code>sample_n</code></h3>
<p>The <code>dplyr</code> package makes data manipulation straightforward and efficient. Here‚Äôs how to do stratified sampling using <code>dplyr</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stratified sampling with sample_n()</span></span>
<span id="cb7-4">sampled_data_n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Gender) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the sampled data</span></span>
<span id="cb7-9">sampled_data_n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Gender)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 2
# Groups:   Gender [2]
  Gender     n
  &lt;chr&gt;  &lt;int&gt;
1 Female    10
2 Male      10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data_n)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 3
# Groups:   Gender [1]
     ID Gender Income
  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;
1    81 Female 64446.
2     6 Female 65165.
3     8 Female 55846.
4    22 Female 26908.
5    98 Female 56879.
6    11 Female 53796.</code></pre>
</div>
</div>
<p>In this approach:</p>
<ul>
<li>We use <code>group_by()</code> to group the data by the <code>Gender</code> column.</li>
<li><code>sample_n()</code> is used to take 10 samples from each group.</li>
<li><code>count()</code> helps us verify the number of samples from each group.</li>
</ul>
</section>
<section id="using-sample_frac-for-proportional-sampling" class="level3">
<h3 class="anchored" data-anchor-id="using-sample_frac-for-proportional-sampling">Using <code>sample_frac()</code> for Proportional Sampling</h3>
<p>If you want to sample a proportion of each stratum, you can use the <code>sample_frac()</code> function. For example, if you want to sample 20% of each gender group:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stratified sampling with sample_frac()</span></span>
<span id="cb11-2">sampled_data_frac <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Gender) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_frac</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the sampled data</span></span>
<span id="cb11-7">sampled_data_frac <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(Gender)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 2
# Groups:   Gender [2]
  Gender     n
  &lt;chr&gt;  &lt;int&gt;
1 Female     9
2 Male      11</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(sampled_data_frac)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 3
# Groups:   Gender [1]
     ID Gender Income
  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;
1    71 Female 51176.
2    92 Female 47378.
3    13 Female 46668.
4    48 Female 65326.
5    42 Female 55484.
6    76 Female 43481.</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>sample_frac()</code> is used to take 20% of the rows from each group.</li>
<li>This is useful when you want the sample size to be proportional to the size of each stratum.</li>
</ul>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Stratified sampling is a powerful technique to ensure representation from all subgroups in your sample. Whether you‚Äôre using base R or <code>dplyr</code>, the process is straightforward and allows you to draw balanced samples from your data.</p>
<p>Feel free to try these methods on your data! Experimenting with different sizes and strata can help you understand how stratified sampling affects your analyses. Don‚Äôt hesitate to dive into the code and see how you can adapt it to your needs.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>dplyr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-29/</guid>
  <pubDate>Mon, 29 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating Summary Tables in R with tidyquant and dplyr</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-26/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Creating summary tables is a key part of data analysis, allowing you to see trends and patterns in your data. In this post, we‚Äôll explore how to create these tables using <strong>tidyquant</strong> and <strong>dplyr</strong> in R. These packages make it easy to manipulate and summarize your data.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-tidyquant-for-summary-tables" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyquant-for-summary-tables">Using tidyquant for Summary Tables</h2>
<p><strong>tidyquant</strong> is a versatile package that extends the tidyverse for financial and time series analysis. It simplifies working with data by integrating tidy principles.</p>
<section id="example-calculating-average-price-by-month" class="level3">
<h3 class="anchored" data-anchor-id="example-calculating-average-price-by-month">Example: Calculating Average Price by Month</h3>
<p>Here‚Äôs an example of how to calculate the average price by month using tidyquant:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyquant)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data: Daily stock prices</span></span>
<span id="cb1-6">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-06-30'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">181</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a summary table with average closing price by month</span></span>
<span id="cb1-12">summary_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor_date</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_table</span>(</span>
<span id="cb1-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.rows =</span> month, </span>
<span id="cb1-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.values =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-17">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"avg_price"</span>))</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 2
  date       avg_price
  &lt;date&gt;         &lt;dbl&gt;
1 2023-01-01      149.
2 2023-02-01      162.
3 2023-03-01      151.
4 2023-04-01      151.
5 2023-05-01      145.
6 2023-06-01      149.</code></pre>
</div>
</div>
<p>In this example:</p>
<ol type="1">
<li><strong>tidyquant</strong> and <strong>tibble</strong> are loaded to handle data manipulation.</li>
<li>We create a sample dataset with daily stock prices.</li>
<li>The <code>mutate</code> function adds a new column <code>month</code>, which extracts the month from each date.</li>
<li><code>pivot_table</code> calculates the average price for each month.</li>
<li>Finally, we rename the columns for clarity.</li>
</ol>
</section>
</section>
<section id="using-dplyr-for-summary-tables" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr-for-summary-tables">Using dplyr for Summary Tables</h2>
<p><strong>dplyr</strong> is a core tidyverse package known for its powerful data manipulation functions. It helps streamline the process of filtering, summarizing, and mutating data.</p>
<section id="example-calculating-average-closing-price-by-month" class="level3">
<h3 class="anchored" data-anchor-id="example-calculating-average-closing-price-by-month">Example: Calculating Average Closing Price by Month</h3>
<p>Here‚Äôs a similar example using dplyr:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data: Daily stock prices</span></span>
<span id="cb3-6">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-06-30'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'day'</span>),</span>
<span id="cb3-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">181</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb3-9">)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a summary table with average closing price by month</span></span>
<span id="cb3-12">summary_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor_date</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(month) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg_close =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(price))</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 2
  month      avg_close
  &lt;date&gt;         &lt;dbl&gt;
1 2023-01-01      149.
2 2023-02-01      140.
3 2023-03-01      147.
4 2023-04-01      146.
5 2023-05-01      147.
6 2023-06-01      151.</code></pre>
</div>
</div>
<p>In this dplyr example:</p>
<ol type="1">
<li>We load <strong>dplyr</strong> and <strong>lubridate</strong> for data manipulation and date handling.</li>
<li>The dataset creation process is the same.</li>
<li>The <code>mutate</code> function is used to add a <code>month</code> column.</li>
<li>We group the data by month using <code>group_by</code> and then calculate the average closing price for each group using <code>summarise</code>.</li>
</ol>
</section>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Using packages like <strong>tidyquant</strong> and <strong>dplyr</strong> simplifies data analysis tasks, making it easier to work with large datasets. These examples show just one way to create summary tables; there are many other functions and methods to explore. Give these examples a try with your own data and see how you can summarize and gain insights from your datasets.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-26/</guid>
  <pubDate>Fri, 26 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Wildcard Searches in R with grep()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-25/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In R, finding patterns in text is a common task, and one of the most powerful functions to do this is <code>grep()</code>. This function is used to search for patterns in strings, allowing you to locate elements that match a specific pattern. Today, we‚Äôll explore how to use wildcard characters with <code>grep()</code> to enhance your string searching capabilities. Let‚Äôs dive in!</p>
<section id="understanding-grep" class="level2">
<h2 class="anchored" data-anchor-id="understanding-grep">Understanding <code>grep()</code></h2>
<p>At its core, <code>grep()</code> is a function that searches for matches to a pattern (regular expression) within a vector of strings. It returns the indices of the elements that contain the pattern. Here‚Äôs a basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(pattern, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><strong>pattern</strong>: A character string containing a regular expression.</li>
<li><strong>x</strong>: A character vector where the search is performed.</li>
<li><strong>ignore.case</strong>: If TRUE, the search will be case-insensitive.</li>
<li><strong>value</strong>: If TRUE, <code>grep()</code> returns the matching elements instead of their indices.</li>
</ul>
<section id="using-wildcards-in-grep" class="level3">
<h3 class="anchored" data-anchor-id="using-wildcards-in-grep">Using Wildcards in <code>grep()</code></h3>
<p>Wildcard characters are incredibly useful in searching for patterns that may not be exactly known. In regular expressions, which <code>grep()</code> uses, wildcards are represented in specific ways:</p>
<ul>
<li><strong><code>^</code></strong>: Asserts the start of a string.</li>
<li><strong><code>$</code></strong>: Asserts the end of a string.</li>
<li><strong><code>.</code></strong>: Matches any single character.</li>
<li><strong><code>.*</code></strong>: Matches any number of any characters (including none).</li>
</ul>
<p>Let‚Äôs look at some practical examples to see these in action!</p>
</section>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="strings-that-start-with-a-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strings-that-start-with-a-pattern">Strings that Start with a Pattern</h2>
<p>To find strings that start with a specific pattern, use <code>^</code> at the beginning of your pattern. For instance, if you‚Äôre looking for words starting with ‚Äúdata‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataframe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analytics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visualization"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^data"</span>, words)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
</div>
<p>This code will return the indices of ‚Äúdata‚Äù, ‚Äúdataframe‚Äù, and ‚Äúdatabase‚Äù because they all start with ‚Äúdata‚Äù. If you set <code>value = TRUE</code>, it will return the matching elements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^data"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data"      "dataframe" "database" </code></pre>
</div>
</div>
</section>
<section id="strings-that-end-with-a-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strings-that-end-with-a-pattern">Strings that End with a Pattern</h2>
<p>To find strings ending with a certain pattern, use <code>$</code> at the end of your pattern. For example, to find words ending with ‚Äúbase‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base$"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "database"</code></pre>
</div>
</div>
</section>
<section id="strings-that-contain-a-pattern" class="level2">
<h2 class="anchored" data-anchor-id="strings-that-contain-a-pattern">Strings that Contain a Pattern</h2>
<p>To find strings containing a pattern anywhere within them, use the pattern directly. For example, to find words containing ‚Äúviz‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"visualization"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"analyze"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"predict"</span>)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vis"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "visualization"</code></pre>
</div>
</div>
</section>
<section id="combining-patterns-with-." class="level2">
<h2 class="anchored" data-anchor-id="combining-patterns-with-.">Combining Patterns with <code>.*</code></h2>
<p>The combination of <code>.*</code> can be used to match any number of characters, making it useful for finding patterns within strings. For instance, to find words containing ‚Äúa‚Äù followed by ‚Äúz‚Äù:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a.*z"</span>, words, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "visualization" "analyze"      </code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn! üöÄ</h1>
<p>Regular expressions can seem intimidating at first, but with a bit of practice, they become a powerful tool in your R toolkit. I encourage you to play around with different patterns and see what you can find in your datasets. Try searching for different starting and ending patterns, or look for specific sequences within your strings. The <code>grep()</code> function is incredibly versatile, and mastering it can save you a lot of time when working with text data.</p>
<p>Feel free to share your discoveries or any interesting patterns you find.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-25/</guid>
  <pubDate>Thu, 25 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting the Workbook Name in VBA and Calling It from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-24/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with Excel, it‚Äôs often useful to know the name of the workbook you‚Äôre working in, especially if you‚Äôre managing multiple files. Today, we‚Äôll look at how to retrieve the workbook name using VBA (Visual Basic for Applications) and then call this VBA code from R. This post will walk you through the steps with clear examples and explanations. Let‚Äôs get to it!</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="getting-the-workbook-name-using-vba" class="level2">
<h2 class="anchored" data-anchor-id="getting-the-workbook-name-using-vba">Getting the Workbook Name Using VBA</h2>
<p>First, we‚Äôll start with a simple VBA script to get the workbook name. VBA is a powerful tool integrated into Microsoft Office applications, allowing you to automate tasks and interact with various elements in your documents.</p>
<p>Here‚Äôs a basic example of VBA code that retrieves the name of the active workbook:</p>
<pre class="vba"><code>Sub GetWorkbookName()
    Dim wbName As String
    wbName = ThisWorkbook.Name
    MsgBox "The name of the active workbook is: " &amp; wbName
End Sub</code></pre>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>Sub GetWorkbookName()</strong>: This line defines a new subroutine named <code>GetWorkbookName</code>. A subroutine in VBA is a block of code that performs a specific task.</li>
<li><strong>Dim wbName As String</strong>: This line declares a variable <code>wbName</code> that will hold the workbook‚Äôs name as a string.</li>
<li><strong>wbName = ThisWorkbook.Name</strong>: Here, we‚Äôre assigning the name of the active workbook (the one where this VBA code is being run) to the <code>wbName</code> variable.</li>
<li><strong>MsgBox ‚ÄúThe name of the active workbook is:‚Äù &amp; wbName</strong>: Finally, we use a message box to display the workbook name.</li>
</ol>
</section>
<section id="calling-vba-code-from-r" class="level2">
<h2 class="anchored" data-anchor-id="calling-vba-code-from-r">Calling VBA Code from R</h2>
<p>Now that we have our VBA macro, the next step is to call it from R. This is particularly useful if you‚Äôre integrating Excel operations into your R workflows.</p>
<p>We‚Äôll use the <code>RDCOMClient</code> package in R, which allows us to interact with COM (Component Object Model) objects, such as Excel. If you haven‚Äôt installed this package, you can do so with:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>)</span></code></pre></div>
<p>Here‚Äôs a simple R script to call our VBA subroutine:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an instance of the Excel application</span></span>
<span id="cb3-4">excel_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># File Path</span></span>
<span id="cb3-7">f_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/path_to/workbook_name.xlsm"</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the workbook (replace 'f_path' with the actual path)</span></span>
<span id="cb3-10">workbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Workbooks</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(f_path)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the VBA macro</span></span>
<span id="cb3-13">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetWorkbookName"</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the workbook without saving changes</span></span>
<span id="cb3-16">workbook<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Close</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit Excel</span></span>
<span id="cb3-19">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span>
<span id="cb3-20"></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Release the object</span></span>
<span id="cb3-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(excel_app)</span></code></pre></div>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>library(RDCOMClient)</strong>: This line loads the <code>RDCOMClient</code> package.</li>
<li><strong>COMCreate(‚ÄúExcel.Application‚Äù)</strong>: We create an instance of the Excel application.</li>
<li><strong>workbook &lt;- excel_app<img src="https://latex.codecogs.com/png.latex?Workbooks()">Open(‚Äúf_path‚Äù)</strong>: This line opens the specified workbook. Replace <code>"f_path"</code> with the path to your actual Excel file.</li>
<li><strong>excel_app$Run(‚ÄúGetWorkbookName‚Äù)</strong>: Here, we call the VBA subroutine <code>GetWorkbookName</code> to display the workbook‚Äôs name.</li>
<li><strong>workbook$Close(FALSE)</strong>: We close the workbook without saving any changes.</li>
<li><strong>excel_app$Quit()</strong>: This closes the Excel application.</li>
<li><strong>rm(excel_app)</strong>: Finally, we release the Excel application object to free up resources.</li>
</ol>
<p>Here is a picture of the message:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-24/Capture.PNG" class="img-fluid figure-img"></p>
<figcaption>VBA Workbook Name</figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>With these simple steps, you‚Äôve learned how to retrieve the name of an Excel workbook using VBA and how to call this VBA code from R. This combination can be quite powerful, especially when automating data processing tasks that involve both Excel and R.</p>
<p>Feel free to try this on your own. Experiment with different VBA scripts and see how you can integrate them into your R workflows. It‚Äôs a great way to streamline your work and make the most of both tools.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-24/</guid>
  <pubDate>Wed, 24 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking if a String Contains Multiple Substrings in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-23/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R programmers! Today, we‚Äôre looking at a practical topic that often comes up when dealing with text data: how to check if a string contains multiple substrings. We‚Äôll cover how to do this in base R, as well as using the <code>stringr</code> and <code>stringi</code> packages. Each approach has its own advantages, so let‚Äôs explore them together.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="base-r-approach">Base R Approach</h2>
<p>First, let‚Äôs start with base R. Suppose we have a string and we want to check if it contains both ‚Äúapple‚Äù and ‚Äúbanana‚Äù. Here‚Äôs how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our main string</span></span>
<span id="cb1-2">main_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have an apple and a banana."</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substrings to check</span></span>
<span id="cb1-5">substrings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all substrings are in the main string</span></span>
<span id="cb1-8">contains_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(substrings, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(x, main_string)))</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output the result</span></span>
<span id="cb1-11">contains_all</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(substrings, grepl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> main_string)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> apple banana 
  TRUE   TRUE </code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<ol type="1">
<li><strong><code>main_string</code></strong>: This is the string we are checking.</li>
<li><strong><code>substrings</code></strong>: A vector containing the substrings we are looking for.</li>
<li><strong><code>sapply(substrings, function(x) grepl(x, main_string))</code></strong>: We use <code>sapply</code> to apply <code>grepl</code> (which checks if a pattern is found in a string) to each substring. This returns a logical vector indicating if each substring is present.</li>
<li><strong><code>all()</code></strong>: This function checks if all values in the logical vector are <code>TRUE</code>.</li>
</ol>
<p>By combining these functions, we can efficiently check if all the substrings are present in our main string.</p>
</section>
</section>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using <code>stringr</code></h2>
<p>The <code>stringr</code> package provides a set of functions designed to make string manipulation easier and more intuitive. Here‚Äôs how we can use it to achieve the same goal:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringr package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our main string</span></span>
<span id="cb5-5">main_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have an apple and a banana."</span></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substrings to check</span></span>
<span id="cb5-8">substrings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all substrings are in the main string</span></span>
<span id="cb5-11">contains_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(main_string, substrings))</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output the result</span></span>
<span id="cb5-14">contains_all</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(main_string, substrings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE TRUE</code></pre>
</div>
</div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation</h3>
<ol type="1">
<li><strong><code>library(stringr)</code></strong>: Loads the <code>stringr</code> package.</li>
<li><strong><code>str_detect(main_string, substrings)</code></strong>: The <code>str_detect</code> function checks if each pattern in <code>substrings</code> is found in <code>main_string</code>. It returns a logical vector.</li>
<li><strong><code>all()</code></strong>: As before, <code>all</code> checks if all values in the logical vector are <code>TRUE</code>.</li>
</ol>
<p>The <code>stringr</code> package simplifies the syntax and makes the code more readable.</p>
</section>
</section>
<section id="using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="using-stringi">Using <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation. It offers a highly efficient way to handle strings. Here‚Äôs how we can use <code>stringi</code> to check for multiple substrings:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringi package</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our main string</span></span>
<span id="cb9-5">main_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have an apple and a banana."</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substrings to check</span></span>
<span id="cb9-8">substrings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if all substrings are in the main string</span></span>
<span id="cb9-11">contains_all <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect_fixed</span>(main_string, substrings))</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output the result</span></span>
<span id="cb9-14">contains_all</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect_fixed</span>(main_string, substrings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE TRUE</code></pre>
</div>
</div>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation</h3>
<ol type="1">
<li><strong><code>library(stringi)</code></strong>: Loads the <code>stringi</code> package.</li>
<li><strong><code>stri_detect_fixed(main_string, substrings)</code></strong>: The <code>stri_detect_fixed</code> function checks if each fixed pattern in <code>substrings</code> is found in <code>main_string</code>. This function is optimized for fixed patterns and is very fast.</li>
<li><strong><code>all()</code></strong>: Again, we use <code>all</code> to check if all values in the logical vector are <code>TRUE</code>.</li>
</ol>
<p><code>stringi</code> provides highly optimized functions that can be very useful for handling large datasets or performance-critical applications.</p>
</section>
</section>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Now that we‚Äôve walked through the different methods to check if a string contains multiple substrings, I encourage you to try these approaches on your own. Experiment with different strings and substrings to get a feel for how these functions work. Understanding these techniques can greatly enhance your text data manipulation skills in R.</p>
<p>Happy coding, and feel free to share your experiences and any questions you might have in the comments!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-23/</guid>
  <pubDate>Tue, 23 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Concatenate Strings in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-22/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, R users! Today, we‚Äôre going to talk about a fundamental yet essential aspect of data manipulation: concatenating strings. String concatenation is the process of joining two or more strings together. It doesn‚Äôt matter if you‚Äôre working with text data, creating labels, or generating dynamic outputs, knowing how to concatenate strings efficiently is a must. We‚Äôll explore how to do this using base R, the <code>stringr</code> package, and the <code>stringi</code> package. Let‚Äôs get started!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="concatenating-strings-in-base-r" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-in-base-r">Concatenating Strings in Base R</h2>
<p>Base R provides a straightforward way to concatenate strings using the <code>paste()</code> and <code>paste0()</code> functions. Here‚Äôs how you can use them:</p>
<section id="using-paste" class="level3">
<h3 class="anchored" data-anchor-id="using-paste">Using <code>paste()</code></h3>
<p>The <code>paste()</code> function combines strings and adds a separator (default is a space).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb1-2">string1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span></span>
<span id="cb1-3">string2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World"</span></span>
<span id="cb1-4">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(string1, string2)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p>In this example, <code>paste(string1, string2)</code> joins ‚ÄúHello‚Äù and ‚ÄúWorld‚Äù with a space in between.</p>
</section>
<section id="using-paste0" class="level3">
<h3 class="anchored" data-anchor-id="using-paste0">Using <code>paste0()</code></h3>
<p>The <code>paste0()</code> function is similar to <code>paste()</code>, but it doesn‚Äôt add a separator by default.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb3-2">result_no_space <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(string1, string2)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_no_space)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p>Here, <code>paste0(string1, string2)</code> joins ‚ÄúHello‚Äù and ‚ÄúWorld‚Äù without any spaces.</p>
</section>
<section id="custom-separator" class="level3">
<h3 class="anchored" data-anchor-id="custom-separator">Custom Separator</h3>
<p>You can also specify a custom separator with <code>paste()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb5-2">result_custom_sep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(string1, string2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_custom_sep)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello, World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello, World"</code></pre>
</div>
</div>
<p>By setting <code>sep = ", "</code>, we add a comma and a space between the strings.</p>
</section>
</section>
<section id="concatenating-strings-with-stringr" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-stringr">Concatenating Strings with <code>stringr</code></h2>
<p>The <code>stringr</code> package offers a more consistent and user-friendly way to handle strings in R. For concatenation, we use the <code>str_c()</code> function.</p>
<section id="using-str_c" class="level3">
<h3 class="anchored" data-anchor-id="using-str_c">Using <code>str_c()</code></h3>
<p>The <code>str_c()</code> function from <code>stringr</code> is similar to <code>paste0()</code> but provides more control over the process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load stringr package</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb7-5">result_str_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(string1, string2)</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_str_c)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p>This example is equivalent to <code>paste0()</code>.</p>
</section>
<section id="custom-separator-1" class="level3">
<h3 class="anchored" data-anchor-id="custom-separator-1">Custom Separator</h3>
<p>To add a separator, use the <code>sep</code> argument in <code>str_c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example with separator</span></span>
<span id="cb9-2">result_str_c_sep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_c</span>(string1, string2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_str_c_sep)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p>Here, <code>sep = " "</code> adds a space between the strings.</p>
</section>
</section>
<section id="concatenating-strings-with-stringi" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-strings-with-stringi">Concatenating Strings with <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation in R. For concatenation, we use the <code>stri_c()</code> function.</p>
<section id="using-stri_c" class="level3">
<h3 class="anchored" data-anchor-id="using-stri_c">Using <code>stri_c()</code></h3>
<p>The <code>stri_c()</code> function works similarly to <code>paste0()</code> and <code>str_c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load stringi package</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example</span></span>
<span id="cb11-5">result_stri_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(string1, string2)</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_stri_c)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "HelloWorld"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "HelloWorld"</code></pre>
</div>
</div>
<p>This joins ‚ÄúHello‚Äù and ‚ÄúWorld‚Äù without spaces.</p>
</section>
<section id="custom-separator-2" class="level3">
<h3 class="anchored" data-anchor-id="custom-separator-2">Custom Separator</h3>
<p>To include a separator, use the <code>sep</code> argument in <code>stri_c()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example with separator</span></span>
<span id="cb13-2">result_stri_c_sep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_c</span>(string1, string2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_stri_c_sep)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Hello World"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello World"</code></pre>
</div>
</div>
<p>The <code>sep</code> argument adds a space between the strings.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>String concatenation is a simple yet vital task in data manipulation. Whether you prefer base R functions like <code>paste()</code> and <code>paste0()</code>, or the more specialized <code>stringr</code> and <code>stringi</code> packages, you have multiple options to choose from. Each method has its unique advantages, and understanding them will help you handle strings more effectively in your R projects.</p>
<p>Feel free to try these examples on your own and see how they work with your data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-22/</guid>
  <pubDate>Mon, 22 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplify Regression Modeling with tidyAML‚Äôs fast_regression()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-18/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you‚Äôve ever faced the daunting task of setting up multiple regression models in R, you‚Äôll appreciate the convenience and efficiency that <code>tidyAML</code> brings to the table. Today, we‚Äôre diving into one of its standout functions: <code>fast_regression()</code>. This function is designed to streamline the regression modeling process, allowing you to quickly create and evaluate a variety of model specifications with minimal code.</p>
</section>
<section id="introduction-to-fast_regression" class="level1">
<h1>Introduction to <code>fast_regression()</code></h1>
<p>The <code>fast_regression()</code> function is part of the <code>tidyAML</code> package, a toolkit that simplifies machine learning workflows in R. This function takes your data and recipe object and generates multiple regression models, using a variety of engines and functions from the <code>parsnip</code> package.</p>
<section id="syntax" class="level2">
<h2 class="anchored" data-anchor-id="syntax">Syntax</h2>
<p>Here‚Äôs a look at the function‚Äôs syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  .rec_obj,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.split_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial_split"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.split_args =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb1-9">)</span></code></pre></div>
</section>
<section id="arguments" class="level2">
<h2 class="anchored" data-anchor-id="arguments">Arguments</h2>
<ul>
<li><strong>.data</strong>: The data frame to be used in the regression problem.</li>
<li><strong>.rec_obj</strong>: A recipe object from the <code>recipes</code> package that defines the pre-processing steps.</li>
<li><strong>.parsnip_fns</strong>: Specifies which parsnip functions to use. The default <code>"all"</code> will create all possible regression model specifications.</li>
<li><strong>.parsnip_eng</strong>: Specifies which parsnip engines to use. The default <code>"all"</code> will create all possible regression model specifications.</li>
<li><strong>.split_type</strong>: Defines the type of data split, with <code>"initial_split"</code> as the default. Other split types supported by <code>rsample</code> can also be used.</li>
<li><strong>.split_args</strong>: Additional arguments for the split type. When set to <code>NULL</code>, default parameters for the chosen split type are used.</li>
<li><strong>.drop_na</strong>: Determines whether to drop NA values from the data. Default is <code>TRUE</code>.</li>
</ul>
</section>
</section>
<section id="example-using-fast_regression" class="level1">
<h1>Example: Using <code>fast_regression()</code></h1>
<p>Let‚Äôs see <code>fast_regression()</code> in action with a simple example. We‚Äôll use the well-known <code>mtcars</code> dataset, and set up a basic recipe to predict miles per gallon (mpg).</p>
<p>First, ensure you have the necessary packages loaded:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span></code></pre></div>
</div>
<p>Next, we create a recipe object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb3-2"></span>
<span id="cb3-3">rec_obj</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>‚îÄ‚îÄ Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>‚îÄ‚îÄ Inputs </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Number of variables by role</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>outcome:    1
predictor: 10</code></pre>
</div>
</div>
<p>Now, we can run <code>fast_regression()</code> to create regression models using the <code>lm</code> and <code>glm</code> engines with a <code>linear_reg</code> parsnip function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">fast_reg_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb10-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> mtcars,</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.rec_obj =</span> rec_obj,</span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>),</span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span></span>
<span id="cb10-6">)</span></code></pre></div>
</div>
<section id="output" class="level3">
<h3 class="anchored" data-anchor-id="output">Output</h3>
<p>The function returns a tibble with details about the generated models:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">fast_reg_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 √ó 8
  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec wflw      
      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;     &lt;list&gt;    
1         1 lm              regression    linear_reg   &lt;spec[+]&gt;  &lt;workflow&gt;
2         2 glm             regression    linear_reg   &lt;spec[+]&gt;  &lt;workflow&gt;
# ‚Ñπ 2 more variables: fitted_wflw &lt;list&gt;, pred_wflw &lt;list&gt;</code></pre>
</div>
</div>
</section>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<ul>
<li><strong>.model_id</strong>: A unique identifier for each model.</li>
<li><strong>.parsnip_engine</strong>: The engine used by <code>parsnip</code> (e.g., <code>lm</code>, <code>glm</code>).</li>
<li><strong>.parsnip_mode</strong>: The mode of the model, typically <code>regression</code>.</li>
<li><strong>.parsnip_fns</strong>: The <code>parsnip</code> function used (e.g., <code>linear_reg</code>).</li>
<li><strong>model_spec</strong>: The model specification.</li>
<li><strong>wflw</strong>: The workflow object.</li>
<li><strong>fitted_wflw</strong>: The fitted workflow object.</li>
<li><strong>pred_wflw</strong>: The predictions from the fitted workflow.</li>
</ul>
</section>
<section id="benefits-of-fast_regression" class="level3">
<h3 class="anchored" data-anchor-id="benefits-of-fast_regression">Benefits of <code>fast_regression()</code></h3>
<ul>
<li><strong>Efficiency</strong>: Quickly set up and evaluate multiple regression models with different specifications.</li>
<li><strong>Flexibility</strong>: Supports a wide range of engines and functions, allowing for comprehensive model exploration.</li>
<li><strong>Integration</strong>: Seamlessly integrates with the <code>recipes</code>, <code>parsnip</code>, and <code>rsample</code> packages, making it a versatile tool in your modeling arsenal.</li>
</ul>
</section>
<section id="lets-inspect" class="level3">
<h3 class="anchored" data-anchor-id="lets-inspect">Let‚Äôs Inspect</h3>
<p>Now that we have our models, let‚Äôs take a closer look at the results. We can use the <code>extract_regression_residuals()</code> function to extract the residuals from the fitted models along with the original and predicted data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(fast_reg_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 32 √ó 4
   .model_type     .actual .predicted  .resid
   &lt;chr&gt;             &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1 lm - linear_reg    21.4       21.1  0.276 
 2 lm - linear_reg    21         23.9 -2.91  
 3 lm - linear_reg    19.7       18.7  1.01  
 4 lm - linear_reg    18.1       19.7 -1.55  
 5 lm - linear_reg    14.7       12.0  2.73  
 6 lm - linear_reg    24.4       23.7  0.694 
 7 lm - linear_reg    22.8       24.3 -1.48  
 8 lm - linear_reg    13.3       12.5  0.820 
 9 lm - linear_reg    10.4       13.2 -2.85  
10 lm - linear_reg    19.2       19.3 -0.0583
# ‚Ñπ 22 more rows

[[2]]
# A tibble: 32 √ó 4
   .model_type      .actual .predicted  .resid
   &lt;chr&gt;              &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;
 1 glm - linear_reg    21.4       21.1  0.276 
 2 glm - linear_reg    21         23.9 -2.91  
 3 glm - linear_reg    19.7       18.7  1.01  
 4 glm - linear_reg    18.1       19.7 -1.55  
 5 glm - linear_reg    14.7       12.0  2.73  
 6 glm - linear_reg    24.4       23.7  0.694 
 7 glm - linear_reg    22.8       24.3 -1.48  
 8 glm - linear_reg    13.3       12.5  0.820 
 9 glm - linear_reg    10.4       13.2 -2.85  
10 glm - linear_reg    19.2       19.3 -0.0583
# ‚Ñπ 22 more rows</code></pre>
</div>
</div>
<p>Now of course we must now visualize! Let‚Äôs plot the residuals to see how well our models are performing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(fast_reg_tbl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_residuals</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-18/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-18/index_files/figure-html/unnamed-chunk-6-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now the residuals are plotted, we can see how well our models are performing. This is a great way to visually inspect the quality of our models and identify any potential issues.</p>
<p>Let‚Äôs look at the predicted vs actual only now:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(fast_reg_tbl,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(fast_reg_tbl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_predictions</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-18/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-18/index_files/figure-html/unnamed-chunk-7-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>fast_regression()</code> function in <code>tidyAML</code> is a powerful addition to any data scientist‚Äôs toolkit, providing a streamlined approach to regression modeling. Whether you‚Äôre a seasoned pro or just getting started with machine learning in R, this function can save you time and effort, allowing you to focus on what really matters ‚Äì interpreting and acting on your results.</p>
<p>Give <code>fast_regression()</code> a try in your next project and experience the ease and efficiency it brings to regression modeling! If you have any questions or want to share your experience, feel free to leave a comment below.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-18/</guid>
  <pubDate>Thu, 18 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>VBA: Saving and Closing a Workbook</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-17/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this tutorial, you‚Äôll learn how to save and close an Excel workbook using VBA (Visual Basic for Applications) and then doing it from R. We‚Äôll create a simple VBA script that saves and closes a workbook, and then we‚Äôll call this script from R using the <code>RDCOMClient</code> package.</p>
</section>
<section id="prerequisites" class="level1">
<h1>Prerequisites</h1>
<section id="vba-script" class="level2">
<h2 class="anchored" data-anchor-id="vba-script">VBA Script</h2>
<p>First, let‚Äôs create a simple VBA script that saves and closes a workbook. Here‚Äôs the VBA code:</p>
<pre class="vba"><code>Sub SaveAndCloseWorkbook()
    Dim wb As Workbook
    Set wb = ThisWorkbook
    wb.Save
    wb.Close
End Sub</code></pre>
</section>
<section id="explanation" class="level2">
<h2 class="anchored" data-anchor-id="explanation">Explanation:</h2>
<ul>
<li><strong>Sub SaveAndCloseWorkbook()</strong>: This line starts the subroutine named <code>SaveAndCloseWorkbook</code>.</li>
<li><strong>Dim wb As Workbook</strong>: This declares a variable <code>wb</code> as a Workbook object.</li>
<li><strong>Set wb = ThisWorkbook</strong>: This sets <code>wb</code> to refer to the workbook where the VBA code is running.</li>
<li><strong>wb.Save</strong>: This saves the workbook.</li>
<li><strong>wb.Close</strong>: This closes the workbook.</li>
</ul>
</section>
<section id="calling-vba-from-r" class="level2">
<h2 class="anchored" data-anchor-id="calling-vba-from-r">Calling VBA from R</h2>
<p>Now, let‚Äôs see how you can call this VBA script from R using the <code>RDCOMClient</code> package. This package allows R to interact with COM objects, such as Excel.</p>
<section id="step-by-step-r-code" class="level4">
<h4 class="anchored" data-anchor-id="step-by-step-r-code">Step-by-Step R Code</h4>
<ol type="1">
<li><p><strong>Install RDCOMClient</strong>: If you haven‚Äôt installed it yet, you can do so from the R console.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">repos =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://www.omegahat.net/R"</span>)</span></code></pre></div></li>
<li><p><strong>Write the R Code</strong>: Here‚Äôs the R script to run the VBA code.</p></li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Excel application</span></span>
<span id="cb3-4">excel_app <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the Excel application visible</span></span>
<span id="cb3-7">excel_app[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visible"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open an existing workbook or create a new one</span></span>
<span id="cb3-10">workbook_path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/path/to/your/workbook.xlsx"</span></span>
<span id="cb3-11">wb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Workbooks</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(workbook_path)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the VBA macro</span></span>
<span id="cb3-14">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SaveAndCloseWorkbook"</span>)</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit the Excel application</span></span>
<span id="cb3-17">excel_app<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Release the COM object</span></span>
<span id="cb3-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(excel_app)</span>
<span id="cb3-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gc</span>()</span></code></pre></div>
</section>
</section>
<section id="explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="explanation-1">Explanation:</h2>
<ul>
<li><strong>library(RDCOMClient)</strong>: Loads the RDCOMClient library to interact with COM objects.</li>
<li>*excel_app &lt;- COMCreate(‚ÄúExcel.Application‚Äù)**: Creates a new Excel application instance.</li>
<li><strong>excel_app[[‚ÄúVisible‚Äù]] &lt;- TRUE</strong>: Makes the Excel application visible (optional).</li>
<li><strong>workbook_path</strong>: Path to your Excel workbook.</li>
<li><strong>wb &lt;- excel_app<img src="https://latex.codecogs.com/png.latex?Workbooks()">Open(workbook_path)</strong>: Opens the workbook.</li>
<li><strong>excel_app$Run(‚ÄúSaveAndCloseWorkbook‚Äù)</strong>: Runs the VBA macro <code>SaveAndCloseWorkbook</code>.</li>
<li><strong>excel_app$Quit()</strong>: Quits the Excel application.</li>
<li><strong>rm(excel_app)</strong> and <strong>gc()</strong>: Releases the COM object and performs garbage collection to free up memory.</li>
</ul>
</section>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself</h1>
<p>This example gives you a starting point to work with VBA and R together. Try modifying the VBA code to suit your needs, like adding more functionalities or handling different scenarios. Experimenting with this setup will give you a better understanding of how to automate Excel tasks from R.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-17/</guid>
  <pubDate>Wed, 17 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Extract Substring Starting from the End of a String in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-16/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey useR‚Äôs! Today, we‚Äôre going to discuss a neat trick: extracting substrings starting from the end of a string. We‚Äôll cover how to achieve this using base R, <code>stringr</code>, and <code>stringi</code>. By the end of this post, you‚Äôll have several tools in your R toolbox for string manipulation. Let‚Äôs get started!</p>
</section>
<section id="extracting-substring-from-the-end-of-a-string" class="level1">
<h1>Extracting Substring from the End of a String</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>First up, let‚Äôs use base R functions to extract substrings from the end of a string. The <code>substr</code> function is your friend here.</p>
<p>Here‚Äôs a simple example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a string</span></span>
<span id="cb1-2">my_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last 6 characters</span></span>
<span id="cb1-5">substring_from_end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substr</span>(my_string, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(my_string) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nchar</span>(my_string))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(substring_from_end)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "world!"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>nchar(my_string)</code> returns the total number of characters in <code>my_string</code>.</li>
<li><code>nchar(my_string) - 5</code> calculates the starting position of the substring, counting from the end.</li>
<li><code>substr(my_string, start, stop)</code> extracts the substring from the start position to the stop position.</li>
</ul>
</section>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using <code>stringr</code></h2>
<p>The <code>stringr</code> package makes string manipulation more straightforward and readable. We‚Äôll use the <code>str_sub</code> function for this task.</p>
<p>First, install and load the <code>stringr</code> package if you haven‚Äôt already:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("stringr")</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span></code></pre></div>
</div>
<p>Now, let‚Äôs extract a substring from the end:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a string</span></span>
<span id="cb4-2">my_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last 6 characters using stringr</span></span>
<span id="cb4-5">substring_from_end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_sub</span>(my_string, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(substring_from_end)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "world!"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>str_sub(my_string, start, end)</code> extracts the substring from the start to the end position.</li>
<li>Negative indices in <code>str_sub</code> count from the end of the string. So <code>-6</code> refers to the sixth character from the end, and <code>-1</code> refers to the last character.</li>
</ul>
</section>
<section id="using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="using-stringi">Using <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation. We‚Äôll use the <code>stri_sub</code> function here.</p>
<p>First, install and load the <code>stringi</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("stringi")</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span></code></pre></div>
</div>
<p>Let‚Äôs extract our substring:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a string</span></span>
<span id="cb7-2">my_string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last 6 characters using stringi</span></span>
<span id="cb7-5">substring_from_end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_sub</span>(my_string, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(substring_from_end)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "world!"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>stri_sub(my_string, from, to)</code> works similarly to <code>str_sub</code>, using <code>from</code> and <code>to</code> parameters to define the start and end positions.</li>
<li>Negative values count from the end of the string.</li>
</ul>
</section>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Now it‚Äôs your turn! Try these methods on your own strings. Here are a few ideas to get you started:</p>
<ul>
<li>Extract the last 3 characters of your name.</li>
<li>Extract the domain from an email address.</li>
<li>Experiment with different lengths and positions.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We‚Äôve explored how to extract substrings from the end of a string using base R, <code>stringr</code>, and <code>stringi</code>. Each method has its own charm, so choose the one that fits your coding style best. String manipulation is a crucial skill in data cleaning and text analysis, so keep practicing and experimenting.</p>
<hr>
<p>Happy coding! üöÄ</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <category>regex</category>
  <category>stringr</category>
  <category>stringi</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-16/</guid>
  <pubDate>Tue, 16 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>tidyAML: Automated Machine Learning with tidymodels</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-15/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to {tidyAML} which is an R package that makes it easy to use the tidymodels ecosystem to perform automated machine learning (AutoML). This package provides a simple and intuitive interface that allows users to quickly generate machine learning models without worrying about the underlying details. It also includes a safety mechanism that ensures that the package will fail gracefully if any required extension packages are not installed on the user‚Äôs machine. With {tidyAML}, users can easily build high-quality machine learning models in just a few lines of code. Whether you are a beginner or an experienced machine learning practitioner, {tidyAML} has something to offer.</p>
<p>Some ideas are that we should be able to generate regression models on the fly without having to actually go through the process of building the specification, especially if it is a non-tuning model, meaning we are not planing on tuning hyper-parameters like penalty and cost.</p>
<p>The idea is not to re-write the excellent work the tidymodels team has done (because it‚Äôs not possible) but rather to try and make an enhanced easy to use set of functions that do what they say and can generate many models and predictions at once.</p>
<p>This is similar to the great h2o package, but, {tidyAML} does not require java to be setup properly like h2o because {tidyAML} is built on tidymodels.</p>
</section>
<section id="installation" class="level1">
<h1>Installation</h1>
<p>You can install {tidyAML} like so:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyAML"</span>)</span></code></pre></div>
<p>Or the development version from GitHub</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("devtools")</span></span>
<span id="cb2-2">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spsanderson/tidyAML"</span>)</span></code></pre></div>
<p>Part of the reason to use {tidyAML} is so that you can generate many models of your data set. One way of modeling a data set is using regression for some numeric output. There is a convienent function in tidyAML that will generate a set of non-tuning models for fast regression. Let‚Äôs take a look below.</p>
<p>First let‚Äôs load the library</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span></code></pre></div>
</div>
<p>Now lets see the function in action.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression_parsnip_spec_tbl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 √ó 5
   .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec
       &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;    
 1         1 lm              regression    linear_reg   &lt;spec[+]&gt; 
 2         2 brulee          regression    linear_reg   &lt;spec[+]&gt; 
 3         3 gee             regression    linear_reg   &lt;spec[+]&gt; 
 4         4 glm             regression    linear_reg   &lt;spec[+]&gt; 
 5         5 glmer           regression    linear_reg   &lt;spec[+]&gt; 
 6         6 glmnet          regression    linear_reg   &lt;spec[+]&gt; 
 7         7 gls             regression    linear_reg   &lt;spec[+]&gt; 
 8         8 lme             regression    linear_reg   &lt;spec[+]&gt; 
 9         9 lmer            regression    linear_reg   &lt;spec[+]&gt; 
10        10 stan            regression    linear_reg   &lt;spec[+]&gt; 
11        11 stan_glmer      regression    linear_reg   &lt;spec[+]&gt; </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression_parsnip_spec_tbl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 5
  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec
      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;    
1         1 lm              regression    linear_reg   &lt;spec[+]&gt; 
2         2 glm             regression    linear_reg   &lt;spec[+]&gt; 
3         3 glm             regression    poisson_reg  &lt;spec[+]&gt; </code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression_parsnip_spec_tbl</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gee"</span>), </span>
<span id="cb8-2">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 √ó 5
  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec
      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;    
1         1 lm              regression    linear_reg   &lt;spec[+]&gt; 
2         2 gee             regression    linear_reg   &lt;spec[+]&gt; 
3         3 glm             regression    linear_reg   &lt;spec[+]&gt; </code></pre>
</div>
</div>
<p>As shown we can easily select the models we want either by choosing the supported parsnip function like linear_reg() or by choose the desired engine, you can also use them both in conjunction with each other!</p>
<p>This function also does add a class to the output. Let‚Äôs see it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression_parsnip_spec_tbl</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "tidyaml_mod_spec_tbl" "fst_reg_spec_tbl"     "tidyaml_base_tbl"    
[4] "tbl_df"               "tbl"                  "data.frame"          </code></pre>
</div>
</div>
<p>We see that there are two added classes, first fst_reg_spec_tbl because this creates a set of non-tuning regression models and then tidyaml_mod_spec_tbl because this is a model specification tibble built with {tidyAML}</p>
<p>Now, what if you want to create a non-tuning model spec without using the fast_regression_parsnip_spec_tbl() function. Well, you can. The function is called create_model_spec().</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_model_spec</span>(</span>
<span id="cb12-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glmnet"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cubist"</span>),</span>
<span id="cb12-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb12-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb12-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb12-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb12-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cubist_rules"</span></span>
<span id="cb12-8">     )</span>
<span id="cb12-9"> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 4
  .parsnip_engine .parsnip_mode .parsnip_fns .model_spec
  &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;     
1 lm              regression    linear_reg   &lt;spec[+]&gt;  
2 glm             regression    linear_reg   &lt;spec[+]&gt;  
3 glmnet          regression    linear_reg   &lt;spec[+]&gt;  
4 cubist          regression    cubist_rules &lt;spec[+]&gt;  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_model_spec</span>(</span>
<span id="cb14-2"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glmnet"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cubist"</span>),</span>
<span id="cb14-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb14-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb14-5">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb14-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb14-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cubist_rules"</span></span>
<span id="cb14-8">     ),</span>
<span id="cb14-9"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb14-10"> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$.parsnip_engine
$.parsnip_engine[[1]]
[1] "lm"

$.parsnip_engine[[2]]
[1] "glm"

$.parsnip_engine[[3]]
[1] "glmnet"

$.parsnip_engine[[4]]
[1] "cubist"


$.parsnip_mode
$.parsnip_mode[[1]]
[1] "regression"


$.parsnip_fns
$.parsnip_fns[[1]]
[1] "linear_reg"

$.parsnip_fns[[2]]
[1] "linear_reg"

$.parsnip_fns[[3]]
[1] "linear_reg"

$.parsnip_fns[[4]]
[1] "cubist_rules"


$.model_spec
$.model_spec[[1]]
Linear Regression Model Specification (regression)

Computational engine: lm 


$.model_spec[[2]]
Linear Regression Model Specification (regression)

Computational engine: glm 


$.model_spec[[3]]
Linear Regression Model Specification (regression)

Computational engine: glmnet 


$.model_spec[[4]]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>! parsnip could not locate an implementation for `cubist_rules` regression
  model specifications using the `cubist` engine.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Cubist Model Specification (regression)

Computational engine: cubist </code></pre>
</div>
</div>
<p>The first example shows the output as a tibble, the second example shows the output as a list of model specs. The last one for cubist rules also shows how it will gracefully fail if the package is not loaded.</p>
<hr>
<p>Happy Coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-15/</guid>
  <pubDate>Mon, 15 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Random Walks with TidyDensity in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-11/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome back, data enthusiasts! Today, we‚Äôre diving into the fascinating world of random walks using the TidyDensity R package. If you‚Äôre working with time series data, financial modeling, or stochastic processes, understanding random walks is essential. And with TidyDensity, implementing and visualizing these walks has never been easier.</p>
</section>
<section id="random-walks" class="level1">
<h1>Random Walks</h1>
<p>A random walk is a mathematical object that describes a path consisting of a succession of random steps. It‚Äôs a cornerstone concept in fields like physics, economics, and biology. In finance, for example, the random walk hypothesis suggests that stock market prices evolve according to a random walk and thus cannot be predicted.</p>
</section>
<section id="tidydensity-and-the-tidy_random_walk-function" class="level1">
<h1>TidyDensity and the <code>tidy_random_walk()</code> Function</h1>
<p>TidyDensity simplifies the generation and manipulation of random walks with its intuitive <code>tidy_random_walk()</code> function. This function can be used in conjunction with any <code>tidy_</code> distribution function, allowing for flexible and powerful random walk simulations.</p>
</section>
<section id="function-call" class="level1">
<h1>Function Call</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.initial_value =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sample =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_prod"</span></span>
<span id="cb1-7">)</span></code></pre></div>
<section id="arguments-breakdown" class="level2">
<h2 class="anchored" data-anchor-id="arguments-breakdown">Arguments Breakdown</h2>
<ul>
<li><strong><code>.data</code></strong>: The dataset from a <code>tidy_</code> distribution function. This forms the basis of your random walk.</li>
<li><strong><code>.initial_value</code></strong>: The starting value of the random walk. The default is 0, but you can set it to any numeric value.</li>
<li><strong><code>.sample</code></strong>: A boolean indicating whether to sample the <code>y</code> values from the <code>tidy_</code> distribution. Defaults to <code>FALSE</code>.</li>
<li><strong><code>.replace</code></strong>: If both <code>.sample</code> and <code>.replace</code> are <code>TRUE</code>, sampling is done with replacement. Defaults to <code>FALSE</code>.</li>
<li><strong><code>.value_type</code></strong>: Determines how the walk is computed. Options are:</li>
<li><code>"cum_prod"</code>: Computes the cumulative product of <code>y</code>.</li>
<li><code>"cum_sum"</code>: Computes the cumulative sum of <code>y</code>.</li>
</ul>
</section>
</section>
<section id="practical-examples" class="level1">
<h1>Practical Examples</h1>
<p>Let‚Äôs see <code>tidy_random_walk()</code> in action with some practical examples.</p>
<section id="example-1-simple-random-walk-with-cumulative-sum" class="level2">
<h2 class="anchored" data-anchor-id="example-1-simple-random-walk-with-cumulative-sum">Example 1: Simple Random Walk with Cumulative Sum</h2>
<p>First, let‚Äôs create a simple random walk using a normal distribution and compute the cumulative sum.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_sum"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk_autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-11/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this example, we generate 25 simulations of 100 points each from a normal distribution. The <code>tidy_random_walk()</code> function then computes the cumulative sum of these points, simulating a simple random walk. The <code>tidy_random_walk_autoplot()</code> function is used to visualize the random walk.</p>
</section>
<section id="example-2-random-walk-with-sampling" class="level2">
<h2 class="anchored" data-anchor-id="example-2-random-walk-with-sampling">Example 2: Random Walk with Sampling</h2>
<p>Next, we‚Äôll explore a random walk where values are sampled.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_sum"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sample =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk_autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-11/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here, setting <code>.sample</code> to <code>TRUE</code> ensures that each step in the random walk is taken by randomly sampling from the original dataset. This can introduce additional variability and randomness to the walk.</p>
</section>
<section id="example-3-random-walk-with-sampling-and-replacement" class="level2">
<h2 class="anchored" data-anchor-id="example-3-random-walk-with-sampling-and-replacement">Example 3: Random Walk with Sampling and Replacement</h2>
<p>Finally, let‚Äôs create a random walk with sampling and replacement.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_sum"</span>, </span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sample =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, </span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-7">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk_autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-11/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this example, setting both <code>.sample</code> and <code>.replace</code> to <code>TRUE</code> ensures that values are sampled with replacement. This can be useful in bootstrapping scenarios or when simulating more complex stochastic processes.</p>
</section>
<section id="bonus-section-comparing-different-random-walk-sampling-methods" class="level2">
<h2 class="anchored" data-anchor-id="bonus-section-comparing-different-random-walk-sampling-methods">Bonus Section: Comparing Different Random Walk Sampling Methods</h2>
<p>To wrap up, let‚Äôs combine multiple random walks and visualize them using <code>ggplot2</code>. This bonus section will show you how different sampling methods impact the random walks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb5-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(</span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_sum"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No_Sample"</span>),</span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_sum"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sample =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample_No_Replace"</span>),</span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_random_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_sum"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sample =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample_Replace"</span>)</span>
<span id="cb5-15">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(sim_number, x, random_walk_value, type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb5-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">low_ci =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x),</span>
<span id="cb5-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hi_ci =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x)</span>
<span id="cb5-20">  )</span>
<span id="cb5-21"></span>
<span id="cb5-22">atb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(df)</span>
<span id="cb5-23"></span>
<span id="cb5-24">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(</span>
<span id="cb5-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, </span>
<span id="cb5-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> random_walk_value, </span>
<span id="cb5-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sim_number, </span>
<span id="cb5-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(type))</span>
<span id="cb5-30">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.382</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> low_ci, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sim_number), </span>
<span id="cb5-33">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hi_ci, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sim_number), </span>
<span id="cb5-35">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-36">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-38">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-39">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb5-40">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>,</span>
<span id="cb5-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Walk Value"</span>,</span>
<span id="cb5-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Walk with Different Sampling Methods"</span>,</span>
<span id="cb5-43">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simulations: "</span>, atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>all<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.num_sims, </span>
<span id="cb5-44">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" | Steps: "</span>, atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>all<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.n,</span>
<span id="cb5-45">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" | Distribution: "</span>, atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>all<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dist_with_params</span>
<span id="cb5-46">                      )</span>
<span id="cb5-47">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-11/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="code-explanation" class="level2">
<h2 class="anchored" data-anchor-id="code-explanation">Code Explanation</h2>
<ol type="1">
<li><strong>Generating Data</strong>: We generate three sets of random walks using different sampling methods:</li>
</ol>
<ul>
<li>No sampling.</li>
<li>Sampling without replacement.</li>
<li>Sampling with replacement.</li>
</ul>
<p>Each set consists of 25 simulations of 100 steps.</p>
<ol start="2" type="1">
<li><p><strong>Combining Data</strong>: The results are combined into a single data frame, with a new column <code>type</code> to indicate the sampling method used.</p></li>
<li><p><strong>Calculating Confidence Intervals</strong>: We calculate the 95% confidence intervals for each step.</p></li>
<li><p><strong>Plotting</strong>: Using <code>ggplot2</code>, we plot the random walks, coloring by sampling method and adding dashed lines to indicate the confidence intervals. We also facet the plot by <code>type</code> to separate the different sampling methods visually.</p></li>
</ol>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Random walks are a powerful tool for modeling and understanding various phenomena. With TidyDensity and the <code>tidy_random_walk()</code> function, you can easily generate and visualize these processes in R. Whether you‚Äôre conducting financial analysis, simulating biological processes, or exploring theoretical concepts, TidyDensity offers a flexible and user-friendly approach.</p>
<p>Stay tuned for more tutorials and deep dives into the capabilities of TidyDensity. Happy coding!</p>
<hr>
<p>Feel free to try out these examples and explore the versatility of <code>tidy_random_walk()</code>. Share your insights and results with us in the comments below or on social media using #TidyDensity. Until next time, keep experimenting and learning!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-11/</guid>
  <pubDate>Thu, 11 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Using the FileDateTime Function in VBA from R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-10/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome back to our series where we explore the synergy between R and VBA! Today, we‚Äôre diving into the <code>FileDateTime</code> function in VBA and how you can leverage it within R. This function is incredibly useful for anyone dealing with files, as it allows you to get the date and time when a file was last modified.</p>
</section>
<section id="what-is-filedatetime" class="level1">
<h1>What is <code>FileDateTime</code>?</h1>
<p>The <code>FileDateTime</code> function in VBA returns the date and time when a file was last modified. This can be particularly useful in various scenarios, such as tracking changes, logging file activities, or just keeping records up-to-date.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="basic-usage-of-filedatetime-in-vba" class="level2">
<h2 class="anchored" data-anchor-id="basic-usage-of-filedatetime-in-vba">Basic Usage of <code>FileDateTime</code> in VBA</h2>
<p>Let‚Äôs start with a simple example of how to use <code>FileDateTime</code> in VBA. Suppose you have a file located at <code>C:\example\myfile.txt</code>. Here‚Äôs how you can get its last modified date and time:</p>
<pre class="vba"><code>Sub GetFileDateTime()
    Dim filePath As String
    Dim fileModifiedDate As String

    filePath = "C:\example\myfile.txt"
    fileModifiedDate = FileDateTime(filePath)

    MsgBox "The file was last modified on: " &amp; fileModifiedDate
End Sub</code></pre>
<p>In this script: - <code>filePath</code> stores the path to the file. - <code>fileModifiedDate</code> gets the last modified date and time using <code>FileDateTime</code>. - <code>MsgBox</code> displays the result in a message box.</p>
</section>
<section id="executing-vba-from-r" class="level2">
<h2 class="anchored" data-anchor-id="executing-vba-from-r">Executing VBA from R</h2>
<p>To execute VBA code from R, you can use the <code>RDCOMClient</code> package, which allows R to interact with COM objects like Excel. Below is a step-by-step guide on how to achieve this:</p>
<ol type="1">
<li><p><strong>Install and Load the RDCOMClient Package</strong></p>
<p>First, ensure you have the <code>RDCOMClient</code> package installed. If not, you can install it from CRAN:</p></li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RDCOMClient"</span>)</span></code></pre></div>
<p>Then, load the package:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span></code></pre></div>
<ol start="2" type="1">
<li><p><strong>Create a VBA Macro in Excel</strong></p>
<p>Open Excel and press <code>ALT + F11</code> to open the VBA editor. Create a new module and paste the <code>GetFileDateTime</code> function code. Save the Excel workbook with a <code>.xlsm</code> extension to enable macros.</p></li>
<li><p><strong>Run the VBA Macro from R</strong></p>
<p>Now, let‚Äôs write an R script to open the Excel workbook and run the macro:</p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RDCOMClient)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the path to your Excel workbook</span></span>
<span id="cb4-4">excelFilePath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C:/Users/steve/Documents/GitHub/steveondata/posts/2024-07-10/file_date_time.xlsm"</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an Excel application object</span></span>
<span id="cb4-7">excelApp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COMCreate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Excel.Application"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the workbook</span></span>
<span id="cb4-10">workbook <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> excelApp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Workbooks</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Open</span>(excelFilePath)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Excel visible (optional)</span></span>
<span id="cb4-13">excelApp[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Visible"</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the macro</span></span>
<span id="cb4-16">excelApp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Run</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GetFileDateTime"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the workbook without saving changes</span></span>
<span id="cb6-2">workbook<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Close</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quit the Excel application</span></span>
<span id="cb8-2">excelApp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Quit</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
<p>In this R script:</p>
<ul>
<li><code>excelFilePath</code> specifies the path to your Excel workbook.</li>
<li><code>excelApp</code> creates an Excel application object.</li>
<li><code>workbook</code> opens the specified workbook.</li>
<li><code>excelApp$Run("GetFileDateTime")</code> runs the VBA macro.</li>
<li><code>workbook$Close(FALSE)</code> closes the workbook without saving changes.</li>
<li><code>excelApp$Quit()</code> quits the Excel application.</li>
</ul>
<p>Here is the message box:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-10/Screenshot.png" class="img-fluid figure-img"></p>
<figcaption>VBA FileDateTime</figcaption>
</figure>
</div>
</section>
</section>
<section id="understanding-the-workflow" class="level1">
<h1>Understanding the Workflow</h1>
<p>The above workflow shows how R can interact with Excel to execute VBA code. This approach is powerful for automating tasks that require both the statistical capabilities of R and the scripting power of VBA.</p>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself</h1>
<p>I encourage you to try this integration on your own. Modify the VBA code to suit your needs, and experiment with different R scripts to see how you can further automate your workflows. The combination of R and VBA opens up a lot of possibilities, and getting hands-on experience is the best way to learn.</p>
<p>Feel free to share your experiences or any questions you have in the comments below. Happy coding!</p>
<hr>
<p>Stay tuned for more posts where we continue to explore the exciting interplay between R and VBA!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-10/</guid>
  <pubDate>Wed, 10 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Extracting Strings Before a Space in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-09/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, R users! Today, we‚Äôll dive into a common text manipulation task: extracting strings before a space. This is a handy trick for dealing with names, addresses, or any text data where you need to isolate the first part of a string.</p>
<p>We‚Äôll explore three approaches: using base R, <code>stringr</code>, and <code>stringi</code>. Each method offers its unique advantages, so you can choose the one that fits your style best.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="base-r-approach">Base R Approach</h2>
<p>Let‚Äôs start with base R. The <code>sub</code> function is a versatile tool for pattern matching and replacement. To extract the string before a space, we can use a regular expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb1-2">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane Smith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice Johnson"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract strings before the first space</span></span>
<span id="cb1-5">first_part_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" .*"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, text)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(first_part_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "John"  "Jane"  "Alice"</code></pre>
</div>
</div>
<p>In this example, the <code>sub</code> function replaces the space and everything after it with an empty string, effectively extracting the first part of each string.</p>
</section>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using <code>stringr</code></h2>
<p>Next, let‚Äôs see how <code>stringr</code> simplifies this task. The <code>stringr</code> package, part of the tidyverse, provides a consistent and easy-to-use interface for string manipulation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load stringr package</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb3-5">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane Smith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice Johnson"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract strings before the first space</span></span>
<span id="cb3-8">first_part_stringr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[^ ]+"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(first_part_stringr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "John"  "Jane"  "Alice"</code></pre>
</div>
</div>
<p>Here, <code>str_extract</code> is used with a regular expression to match and extract the part of the string before the first space. The <code>^[^ ]+</code> pattern matches the beginning of the string (<code>^</code>) followed by one or more characters that are not a space (<code>[^ ]+</code>).</p>
</section>
<section id="using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="using-stringi">Using <code>stringi</code></h2>
<p>Finally, let‚Äôs use <code>stringi</code>, a powerful package for advanced string operations. <code>stringi</code> functions are optimized for performance, making it a great choice for handling large datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load stringi package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb5-5">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane Smith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice Johnson"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract strings before the first space</span></span>
<span id="cb5-8">first_part_stringi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_extract_first_regex</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[^ ]+"</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(first_part_stringi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "John"  "Jane"  "Alice"</code></pre>
</div>
</div>
<p>With <code>stringi</code>, <code>stri_extract_first_regex</code> performs similarly to <code>str_extract</code> from <code>stringr</code>, using the same regular expression pattern.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Each method‚Äîbase R, <code>stringr</code>, and <code>stringi</code>‚Äîoffers a straightforward way to extract strings before a space. Whether you prefer the simplicity of base R, the tidyverse consistency of <code>stringr</code>, or the performance optimization of <code>stringi</code>, you have powerful tools at your disposal.</p>
<p>I encourage you to try these examples on your own datasets. Text manipulation is a fundamental skill in data analysis, and mastering these techniques will enhance your ability to clean and prepare data for analysis.</p>
<p>Feel free to share your experiences and any additional tips you might have in the comments. Happy coding!</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To run the examples, just copy and paste the code blocks into your R script or R console.</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let me know how it goes!</span></span></code></pre></div>
<p>Until next time, keep exploring the wonders of R!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-09/</guid>
  <pubDate>Tue, 09 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unleashing the Power of TidyDensity: Simplifying Distribution Analysis in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-08/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you‚Äôre a data scientist or statistician who often deals with probability distributions, you know the importance of seamlessly integrating these functions into your workflow. That‚Äôs where the TidyDensity package comes into play. Designed to make producing <code>r</code>, <code>d</code>, <code>p</code>, and <code>q</code> data easy and compatible with the tidyverse, TidyDensity is a must-have tool in your R arsenal. In this post, we‚Äôll explore the features and benefits of TidyDensity and show you why you should give it a try.</p>
</section>
<section id="why-tidydensity" class="level1">
<h1>Why TidyDensity?</h1>
<p>The primary goal of TidyDensity is to simplify the generation and manipulation of random samples (<code>r</code>), density (<code>d</code>), cumulative distribution (<code>p</code>), and quantile (<code>q</code>) functions. Traditional methods can be cumbersome and often require manual handling of data structures that don‚Äôt fit well with the tidyverse‚Äôs philosophy of tidy data. TidyDensity bridges this gap by providing functions that return results in a tidy format, making them easy to work with using dplyr, ggplot2, and other tidyverse packages.</p>
</section>
<section id="key-features" class="level1">
<h1>Key Features</h1>
<section id="seamless-integration-with-tidyverse" class="level2">
<h2 class="anchored" data-anchor-id="seamless-integration-with-tidyverse">Seamless Integration with Tidyverse</h2>
<p>TidyDensity ensures that all its output is in a tidy format, which means you can use the familiar suite of tidyverse tools to manipulate, visualize, and analyze your data. This compatibility streamlines your workflow and reduces the amount of data wrangling required.</p>
</section>
<section id="comprehensive-distribution-functions" class="level2">
<h2 class="anchored" data-anchor-id="comprehensive-distribution-functions">Comprehensive Distribution Functions</h2>
<p>Whether you‚Äôre dealing with normal, binomial, Poisson, or other distributions, TidyDensity has you covered. It includes functions for a wide range of distributions, each with options to generate random samples, calculate density, cumulative probabilities, and quantiles. This comprehensive coverage means you can rely on TidyDensity for almost any distribution-related task.</p>
</section>
<section id="easy-to-use-functions" class="level2">
<h2 class="anchored" data-anchor-id="easy-to-use-functions">Easy-to-Use Functions</h2>
<p>TidyDensity‚Äôs functions are designed with simplicity in mind. For example, to generate random samples from a normal distribution, you can use:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random samples from a normal distribution</span></span>
<span id="cb1-4">normal_samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the first few rows</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(normal_samples)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 √ó 7
  sim_number     x       y    dx       dy      p       q
  &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
1 1              1 -1.50   -3.15 0.000182 0.0664 -1.50  
2 1              2  0.370  -3.08 0.000325 0.644   0.370 
3 1              3  0.558  -3.01 0.000561 0.712   0.558 
4 1              4 -1.28   -2.95 0.000938 0.101  -1.28  
5 1              5  0.0298 -2.88 0.00153  0.512   0.0298
6 1              6  0.189  -2.82 0.00241  0.575   0.189 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(normal_samples)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> sim_number       x                y                  dx         
 1:100      Min.   :  1.00   Min.   :-2.45677   Min.   :-3.5658  
 2:100      1st Qu.: 25.75   1st Qu.:-0.68839   1st Qu.:-1.5753  
 3:100      Median : 50.50   Median :-0.02975   Median : 0.1216  
 4:100      Mean   : 50.50   Mean   :-0.02445   Mean   : 0.1223  
 5:100      3rd Qu.: 75.25   3rd Qu.: 0.66779   3rd Qu.: 1.8087  
            Max.   :100.00   Max.   : 3.10887   Max.   : 4.3583  
       dy                  p                 q           
 Min.   :0.0001153   Min.   :0.00701   Min.   :-2.45677  
 1st Qu.:0.0198717   1st Qu.:0.24560   1st Qu.:-0.68839  
 Median :0.1003394   Median :0.48813   Median :-0.02975  
 Mean   :0.1468798   Mean   :0.49049   Mean   :-0.02445  
 3rd Qu.:0.2658815   3rd Qu.:0.74787   3rd Qu.: 0.66779  
 Max.   :0.4688206   Max.   :0.99906   Max.   : 3.10887  </code></pre>
</div>
</div>
<p>This code generates a tidy data frame with 100 random samples from a normal distribution with a mean of 0 and standard deviation of 1. You can then use dplyr and ggplot2 to manipulate and visualize this data effortlessly.</p>
</section>
<section id="practical-example" class="level2">
<h2 class="anchored" data-anchor-id="practical-example">Practical Example</h2>
<p>Let‚Äôs walk through a practical example to demonstrate how TidyDensity can be used in a typical data analysis workflow. Suppose you‚Äôre interested in analyzing the distribution of a sample dataset and visualizing its density.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load required libraries</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random samples from a normal distribution</span></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb5-7">normal_samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the density of the samples</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_autoplot</span>(normal_samples)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-08/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this example, we generate 1,000 random samples from a normal distribution with a mean of 5 and a standard deviation of 2. We then use ggplot2 to create a density plot, providing a clear visual representation of the distribution.</p>
</section>
</section>
<section id="try-tidydensity" class="level1">
<h1>Try TidyDensity!</h1>
<p>If you‚Äôre looking for a package that simplifies working with distributions while staying true to the tidyverse principles, TidyDensity is the solution you need. Its ease of use, comprehensive functionality, and seamless integration with the tidyverse make it an invaluable tool for anyone working with probability distributions in R.</p>
<p>I encourage you to try TidyDensity in your next project. Whether you‚Äôre conducting a detailed statistical analysis or simply need to generate random samples for simulation purposes, TidyDensity will make your life easier and your code cleaner.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>TidyDensity is more than just another R package; it‚Äôs a tool designed to enhance your data analysis workflow by making distribution functions easy to use and compatible with the tidyverse. Give it a try and experience the difference it can make in your projects. For more information and detailed documentation, visit the <a href="https://www.spsanderson.com/TidyDensity/index.html">TidyDensity index page</a>.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-08/</guid>
  <pubDate>Mon, 08 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Linear Models with R and Exporting to Excel</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-07/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today, we‚Äôre going to walk through an example of fitting a linear model in R, summarizing the results, and exporting the findings to an Excel file. This workflow is useful for documenting and sharing your statistical analysis.</p>
<p>Let‚Äôs break down the code step by step.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="step-1-loading-the-necessary-libraries" class="level2">
<h2 class="anchored" data-anchor-id="step-1-loading-the-necessary-libraries">Step 1: Loading the Necessary Libraries</h2>
<p>First, we need to load the <code>openxlsx</code> library, which helps us create and manipulate Excel files. If you don‚Äôt have it installed, you can get it using <code>install.packages("openxlsx")</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(openxlsx)</span></code></pre></div>
</div>
<p>This line of code loads the <code>openxlsx</code> library into R so we can use its functions later.</p>
</section>
<section id="step-2-fitting-the-linear-model" class="level2">
<h2 class="anchored" data-anchor-id="step-2-fitting-the-linear-model">Step 2: Fitting the Linear Model</h2>
<p>Next, we fit a linear model using the built-in <code>mtcars</code> dataset. We model <code>mpg</code> (miles per gallon) based on all other available variables in the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span></code></pre></div>
</div>
<p>Here, <code>lm</code> stands for linear model. The <code>mpg ~ .</code> part means we want to predict <code>mpg</code> using all other variables in the <code>mtcars</code> dataset.</p>
</section>
<section id="step-3-summarizing-the-model" class="level2">
<h2 class="anchored" data-anchor-id="step-3-summarizing-the-model">Step 3: Summarizing the Model</h2>
<p>We obtain a summary of our linear model, which includes details like coefficients, R-squared values, and the F-statistic.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">model_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(model)</span></code></pre></div>
</div>
<p>This code generates a summary of the linear model we just created, giving us important statistics about the model‚Äôs performance.</p>
</section>
<section id="step-4-extracting-key-components" class="level2">
<h2 class="anchored" data-anchor-id="step-4-extracting-key-components">Step 4: Extracting Key Components</h2>
<p>We extract essential parts of the summary for easy access and to organize them in our Excel file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">coefficients <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>coefficients</span>
<span id="cb4-2">r_squared <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared</span>
<span id="cb4-3">adj_r_squared <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>adj.r.squared</span>
<span id="cb4-4">f_statistic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> model_summary<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fstatistic</span>
<span id="cb4-5">p_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pf</span>(</span>
<span id="cb4-6">  f_statistic[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb4-7">  f_statistic[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb4-8">  f_statistic[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], </span>
<span id="cb4-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower.tail =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb4-10">  )</span>
<span id="cb4-11">model_formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb4-12">  model_summary[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"terms"</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, </span>
<span id="cb4-13">  model_summary[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"terms"</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>,</span>
<span id="cb4-14">  model_summary[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"terms"</span>]])[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
</div>
<ul>
<li><code>coefficients</code>: The estimated coefficients of the model.</li>
<li><code>r_squared</code>: How well the model explains the variability of the data.</li>
<li><code>adj_r_squared</code>: Adjusted version of R-squared for the number of predictors.</li>
<li><code>f_statistic</code>: Overall significance of the model.</li>
<li><code>p_value</code>: Probability value indicating the significance of the F-statistic.</li>
<li><code>model_formula</code>: The formula used to fit the model.</li>
</ul>
</section>
<section id="step-5-creating-and-populating-the-workbook" class="level2">
<h2 class="anchored" data-anchor-id="step-5-creating-and-populating-the-workbook">Step 5: Creating and Populating the Workbook</h2>
<p>Now, we create a new Excel workbook and add a worksheet to it. We then write our extracted model summary components to this worksheet.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">wb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">createWorkbook</span>()</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addWorksheet</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Coefficients"</span>, </span>
<span id="cb5-5">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, coefficients, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb5-7">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rowNames =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R-Squared"</span>, </span>
<span id="cb5-10">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, r_squared, </span>
<span id="cb5-12">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adjusted R-Squared"</span>, </span>
<span id="cb5-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, adj_r_squared, </span>
<span id="cb5-17">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F-Statistic"</span>, </span>
<span id="cb5-20">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, f_statistic[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], </span>
<span id="cb5-22">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-23"></span>
<span id="cb5-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p-Value"</span>, </span>
<span id="cb5-25">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, p_value, </span>
<span id="cb5-27">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-28"></span>
<span id="cb5-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Formula"</span>, </span>
<span id="cb5-30">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeData</span>(wb, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model Summary"</span>, model_formula, </span>
<span id="cb5-32">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startRow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(coefficients) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">startCol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<ul>
<li><code>createWorkbook()</code>: Creates a new Excel workbook.</li>
<li><code>addWorksheet(wb, "Model Summary")</code>: Adds a new sheet named ‚ÄúModel Summary‚Äù to the workbook.</li>
<li><code>writeData</code>: Writes data to the specified location in the sheet. Here, we write various parts of the model summary in different rows and columns.</li>
</ul>
</section>
<section id="step-6-saving-the-workbook" class="level2">
<h2 class="anchored" data-anchor-id="step-6-saving-the-workbook">Step 6: Saving the Workbook</h2>
<p>Finally, we save our workbook to a file named <code>lm_model_summary.xlsx</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveWorkbook</span>(</span>
<span id="cb6-2">  wb, </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>(),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/lm_model_summary.xlsx"</span>), </span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">overwrite =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-5">  )</span></code></pre></div>
</div>
<p>This line saves the workbook to your working directory with the specified file name.</p>
<p>Here is a screenshot:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-07-07/lm_model_summary.png" class="img-fluid figure-img"></p>
<figcaption>Excel Screenshot</figcaption>
</figure>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>This example shows how to fit a linear model in R, extract meaningful summary statistics, and save those results in an Excel file. It‚Äôs a simple yet powerful way to document your analyses and share them with others.</p>
<p>Feel free to modify the code to fit your own datasets and models. Experimenting with different variables and models can provide deeper insights into your data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-07/</guid>
  <pubDate>Sun, 07 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Automate Your R Scripts with taskscheduleR</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-06/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today, let‚Äôs dive into a nifty R package called <code>taskscheduleR</code> that can automate running your R scripts. Whether you need to execute a task every hour or just once a day, <code>taskscheduleR</code> has you covered. This package leverages the Windows Task Scheduler, making it a breeze to schedule and automate repetitive tasks directly from R. Let‚Äôs walk through a couple of examples from my new book, ‚ÄúExtending Excel with Python and R‚Äù.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-hourly-script-execution" class="level2">
<h2 class="anchored" data-anchor-id="example-1-hourly-script-execution">Example 1: Hourly Script Execution</h2>
<p>First, let‚Äôs set up a task that runs a script every hour. Here‚Äôs the code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(taskscheduleR)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a task scheduler job that runs the script every hour</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">taskscheduler_create</span>(</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">taskname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World Hourly"</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rscript =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello_world.R"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schedule =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0 * * * *"</span></span>
<span id="cb1-8">)</span></code></pre></div>
<p>In this snippet, we use the <code>taskscheduler_create()</code> function to create a new task. Let‚Äôs break down the arguments:</p>
<ul>
<li><code>taskname</code>: A unique name for the task, in this case, ‚ÄúHello World Hourly‚Äù.</li>
<li><code>rscript</code>: The path to the R script you want to run, here it‚Äôs ‚Äúhello_world.R‚Äù.</li>
<li><code>schedule</code>: This is the cron expression for scheduling. <code>0 * * * *</code> means the script will run at the start of every hour.</li>
</ul>
</section>
<section id="example-2-daily-script-execution-at-a-specific-time" class="level2">
<h2 class="anchored" data-anchor-id="example-2-daily-script-execution-at-a-specific-time">Example 2: Daily Script Execution at a Specific Time</h2>
<p>Now, let‚Äôs set up a task that runs the script once a day at 10:00 AM. Here‚Äôs how you can do it:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a task scheduler job that runs the script once a day at 10:00 AM</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">taskscheduler_create</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">taskname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World Daily"</span>,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rscript =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello_world.R"</span>,</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schedule =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0 10 * * *"</span></span>
<span id="cb2-6">)</span></code></pre></div>
<p>In this example, the <code>schedule</code> argument <code>0 10 * * *</code> ensures the script runs daily at 10:00 AM.</p>
</section>
</section>
<section id="why-automate" class="level1">
<h1>Why Automate?</h1>
<p>Scheduling routine tasks can save you a lot of time and reduce the chances of forgetting to run an important script. Whether it‚Äôs updating a report, fetching data, or performing backups, automation ensures that these tasks run consistently and accurately without manual intervention.</p>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give It a Try!</h1>
<p>I encourage you to experiment with <code>taskscheduleR</code> and see how it can fit into your workflow. Whether you‚Äôre new to automation or looking for ways to optimize your existing processes, this package offers a simple yet powerful solution.</p>
<p>If you found this helpful and want to learn more about extending your Excel capabilities with R and Python, check out my new book, ‚ÄúExtending Excel with Python and R‚Äù. It‚Äôs packed with practical examples and detailed explanations to help you get the most out of these powerful tools.</p>
<ul>
<li><strong>Amazon:</strong> <a href="https://packt.link/oTyZJ">Extending Excel with Python and R</a></li>
<li><strong>Packt:</strong> <a href="https://www.packtpub.com/en-us/product/extending-excel-with-python-and-r-9781804610695">Extending Excel with Python and R</a></li>
</ul>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>automation</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-06/</guid>
  <pubDate>Sat, 06 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Zoom Functionality in Excel with VBA</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-03/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with large datasets in Excel, the ability to zoom in and out quickly can significantly enhance your productivity. If you often find yourself adjusting the zoom level manually, why not automate it with VBA? In this blog post, we‚Äôll explore how to use the zoom functionality in VBA to control the zoom level of your worksheets efficiently.</p>
</section>
<section id="why-use-zoom-in-excel" class="level1">
<h1>Why Use Zoom in Excel?</h1>
<p>Zooming in Excel allows you to get a closer look at your data or see more of your worksheet at once. Whether you‚Äôre focusing on a specific section of data or getting an overview of your entire sheet, zooming can help you navigate and analyze your information more effectively.</p>
</section>
<section id="getting-started-with-zoom-in-vba" class="level1">
<h1>Getting Started with Zoom in VBA</h1>
<p>To control the zoom level in Excel using VBA, you‚Äôll primarily work with the <code>ActiveWindow.Zoom</code> property. This property allows you to set the zoom level to any value between 10% and 400%.</p>
<section id="basic-zoom-in-and-zoom-out" class="level2">
<h2 class="anchored" data-anchor-id="basic-zoom-in-and-zoom-out">Basic Zoom In and Zoom Out</h2>
<p>Let‚Äôs start with simple macros to zoom in and zoom out.</p>
<p><strong>Zoom In:</strong></p>
<pre class="vba"><code>Sub ZoomIn()
    Dim currentZoom As Integer
    currentZoom = ActiveWindow.Zoom
    If currentZoom &lt; 400 Then
        ActiveWindow.Zoom = currentZoom + 10
    End If
End Sub</code></pre>
<p><strong>Zoom Out:</strong></p>
<pre class="vba"><code>Sub ZoomOut()
    Dim currentZoom As Integer
    currentZoom = ActiveWindow.Zoom
    If currentZoom &gt; 10 Then
        ActiveWindow.Zoom = currentZoom - 10
    End If
End Sub</code></pre>
<p>In these macros, <code>ZoomIn</code> increases the current zoom level by 10%, while <code>ZoomOut</code> decreases it by 10%. The code ensures that the zoom level stays within the permissible range of 10% to 400%.</p>
</section>
<section id="setting-a-specific-zoom-level" class="level2">
<h2 class="anchored" data-anchor-id="setting-a-specific-zoom-level">Setting a Specific Zoom Level</h2>
<p>Sometimes, you might need to set the zoom level to a specific percentage. You can do this easily with the following macro:</p>
<pre class="vba"><code>Sub SetZoomLevel(zoomLevel As Integer)
    If zoomLevel &gt;= 10 And zoomLevel &lt;= 400 Then
        ActiveWindow.Zoom = zoomLevel
    Else
        MsgBox "Please enter a zoom level between 10 and 400."
    End If
End Sub</code></pre>
<p>You can call this macro with any desired zoom level. For example:</p>
<pre class="vba"><code>Sub ZoomToSpecificLevel()
    Call SetZoomLevel(150) ' Sets the zoom level to 150%
End Sub</code></pre>
</section>
<section id="resetting-the-zoom-level" class="level2">
<h2 class="anchored" data-anchor-id="resetting-the-zoom-level">Resetting the Zoom Level</h2>
<p>If you need to reset the zoom level to its default setting (usually 100%), you can use the following macro:</p>
<pre class="vba"><code>Sub ResetZoom()
    ActiveWindow.Zoom = 100
End Sub</code></pre>
</section>
<section id="applying-zoom-to-a-specific-worksheet" class="level2">
<h2 class="anchored" data-anchor-id="applying-zoom-to-a-specific-worksheet">Applying Zoom to a Specific Worksheet</h2>
<p>The above examples modify the zoom level of the currently active window. If you want to set the zoom level for a specific worksheet, you can activate that sheet first and then set the zoom level:</p>
<pre class="vba"><code>Sub ZoomSpecificSheet(sheetName As String, zoomLevel As Integer)
    Worksheets(sheetName).Activate
    If zoomLevel &gt;= 10 And zoomLevel &lt;= 400 Then
        ActiveWindow.Zoom = zoomLevel
    Else
        MsgBox "Please enter a zoom level between 10 and 400."
    End If
End Sub</code></pre>
</section>
<section id="using-zoom-with-user-forms" class="level2">
<h2 class="anchored" data-anchor-id="using-zoom-with-user-forms">Using Zoom with User Forms</h2>
<p>Zoom functionality isn‚Äôt limited to worksheets. You can also control the zoom level of user forms in VBA. This is especially useful if your user form contains detailed information or numerous controls.</p>
<pre class="vba"><code>Sub ZoomUserForm(zoomLevel As Double)
    With UserForm1
        .Zoom = zoomLevel
    End With
End Sub</code></pre>
<p>Call this macro with a zoom level between 10 and 400 to adjust the user form‚Äôs zoom.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Whether you need to zoom in for a closer look, zoom out to see more data, or set a specific zoom level, VBA provides a simple and powerful way to control your view.</p>
<p>By incorporating these macros into your workflow, you can easily adjust your zoom settings without leaving the keyboard. Experiment with these examples, and you‚Äôll soon find the perfect zoom levels to enhance your productivity in Excel.</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-03/</guid>
  <pubDate>Wed, 03 Jul 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Extract String After a Specific Character in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-07-02/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome back, R Programmers! Today, we‚Äôll explore a common task: extracting a substring after a specific character in R. Whether you‚Äôre cleaning data or transforming strings, this skill is quite handy. We‚Äôll look at three approaches: using base R, <code>stringr</code>, and <code>stringi</code>. Let‚Äôs dive in!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>Base R provides several functions to manipulate strings. Here, we‚Äôll use <code>sub</code> and <code>strsplit</code> to extract a substring after a specific character.</p>
<section id="example-1-using-sub" class="level3">
<h3 class="anchored" data-anchor-id="example-1-using-sub">Example 1: Using <code>sub</code></h3>
<p>The <code>sub</code> function allows us to replace parts of a string based on a pattern. Here‚Äôs how to extract the part after a specific character, say a hyphen (<code>-</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example string</span></span>
<span id="cb1-2">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data-science"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract substring after the hyphen</span></span>
<span id="cb1-5">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, string)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "science"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "science"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>.*-</code> is a regular expression where <code>.*</code> matches any character (except for line terminators) zero or more times, and <code>-</code> matches the hyphen.</li>
<li><code>""</code> is the replacement, effectively removing everything up to and including the hyphen.</li>
</ul>
</section>
<section id="example-2-using-strsplit" class="level3">
<h3 class="anchored" data-anchor-id="example-2-using-strsplit">Example 2: Using <code>strsplit</code></h3>
<p>The <code>strsplit</code> function splits a string into substrings based on a delimiter.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example string</span></span>
<span id="cb3-2">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello-world"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the string at the hyphen</span></span>
<span id="cb3-5">parts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(string, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the part after the hyphen</span></span>
<span id="cb3-8">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "world"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "world"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>strsplit(string, "-")</code> splits the string into parts at the hyphen, returning a list.</li>
<li><code>[[1]]</code> extracts the first element of the list.</li>
<li><code>[2]</code> extracts the second part of the split string.</li>
</ul>
</section>
</section>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using <code>stringr</code></h2>
<p>The <code>stringr</code> package, part of the tidyverse, provides consistent and easy-to-use string functions.</p>
<section id="example-1-using-str_extract" class="level3">
<h3 class="anchored" data-anchor-id="example-1-using-str_extract">Example 1: Using <code>str_extract</code></h3>
<p>The <code>str_extract</code> function extracts matching patterns from a string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example string</span></span>
<span id="cb5-4">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple-pie"</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract substring after the hyphen</span></span>
<span id="cb5-7">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(string, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(?&lt;=-).*"</span>)</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "pie"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "pie"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>(?&lt;=-)</code> is a look behind assertion, ensuring the match occurs after a hyphen.</li>
<li><code>.*</code> matches any character zero or more times.</li>
</ul>
</section>
<section id="example-2-using-str_split" class="level3">
<h3 class="anchored" data-anchor-id="example-2-using-str_split">Example 2: Using <code>str_split</code></h3>
<p>Similar to <code>strsplit</code> in base R, <code>str_split</code> splits a string based on a pattern.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example string</span></span>
<span id="cb7-2">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"open-source"</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the string at the hyphen</span></span>
<span id="cb7-5">parts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(string, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the part after the hyphen</span></span>
<span id="cb7-8">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "source"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "source"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>str_split(string, "-")</code> splits the string into parts at the hyphen, returning a list.</li>
<li><code>[[1]]</code> extracts the first element of the list.</li>
<li><code>[2]</code> extracts the second part of the split string.</li>
</ul>
</section>
</section>
<section id="using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="using-stringi">Using <code>stringi</code></h2>
<p>The <code>stringi</code> package is another powerful tool for string manipulation, providing high-performance functions.</p>
<section id="example-1-using-stri_extract" class="level3">
<h3 class="anchored" data-anchor-id="example-1-using-stri_extract">Example 1: Using <code>stri_extract</code></h3>
<p>The <code>stri_extract</code> function extracts substrings based on patterns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example string</span></span>
<span id="cb9-4">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"front-end"</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract substring after the hyphen</span></span>
<span id="cb9-7">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_extract</span>(string, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regex =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(?&lt;=-).*"</span>)</span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "end"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "end"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>regex = "(?&lt;=-).*"</code> uses a regular expression where <code>(?&lt;=-)</code> is a lookbehind assertion ensuring the match occurs after a hyphen, and <code>.*</code> matches any character zero or more times.</li>
</ul>
</section>
<section id="example-2-using-stri_split" class="level3">
<h3 class="anchored" data-anchor-id="example-2-using-stri_split">Example 2: Using <code>stri_split</code></h3>
<p>Similar to <code>strsplit</code> and <code>str_split</code>, <code>stri_split</code> splits a string based on a pattern.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example string</span></span>
<span id="cb11-2">string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"full-stack"</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the string at the hyphen</span></span>
<span id="cb11-5">parts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_split</span>(string, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">regex =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the part after the hyphen</span></span>
<span id="cb11-8">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> parts[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb11-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "stack"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "stack"</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>stri_split(string, regex = "-")</code> splits the string into parts at the hyphen, returning a list.</li>
<li><code>[[1]]</code> extracts the first element of the list.</li>
<li><code>[2]</code> extracts the second part of the split string.</li>
</ul>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>There you have it‚Äîthree different ways to extract a substring after a specific character in R. Each method has its own benefits and can be handy depending on your specific needs. Give these examples a try and see which one works best for your data!</p>
<hr>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>strings</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-07-02/</guid>
  <pubDate>Tue, 02 Jul 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
