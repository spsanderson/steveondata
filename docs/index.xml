<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Mon, 03 Jun 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>An Overview of the New Parameter Estimate Functions in the TidyDensity Package</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-06-03/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, R enthusiasts! I’m excited to share some fantastic updates to the TidyDensity package. These updates introduce a suite of parameter estimate functions designed to make your data analysis more efficient and insightful. Whether you’re dealing with common distributions or more specialized ones, these functions have got you covered.</p>
</section>
<section id="why-parameter-estimation" class="level1">
<h1>Why Parameter Estimation?</h1>
<p>Parameter estimation is crucial when working with statistical distributions. It allows you to infer the parameters of a distribution from your data, providing insights into its underlying structure. This is particularly useful when you want to model real-world phenomena accurately.</p>
</section>
<section id="new-parameter-estimate-functions" class="level1">
<h1>New Parameter Estimate Functions</h1>
<p>Here’s a quick rundown of the newly introduced functions in TidyDensity:</p>
<ol type="1">
<li><strong>util_zero_truncated_negative_binomial_param_estimate()</strong></li>
<li><strong>util_zero_truncated_poisson_param_estimate()</strong></li>
<li><strong>util_f_param_estimate()</strong></li>
<li><strong>util_zero_truncated_geometric_param_estimate()</strong></li>
<li><strong>util_t_param_estimate()</strong></li>
<li><strong>util_pareto1_param_estimate()</strong></li>
<li><strong>util_paralogistic_param_estimate()</strong></li>
<li><strong>util_inverse_weibull_param_estimate()</strong></li>
<li><strong>util_inverse_pareto_param_estimate()</strong></li>
<li><strong>util_inverse_burr_param_estimate()</strong></li>
<li><strong>util_generalized_pareto_param_estimate()</strong></li>
<li><strong>util_generalized_beta_param_estimate()</strong></li>
<li><strong>util_zero_truncated_binomial_param_estimate()</strong></li>
</ol>
<p>Each function is tailored to a specific distribution, providing a streamlined way to estimate its parameters.</p>
</section>
<section id="example-estimating-parameters-of-a-t-distribution" class="level1">
<h1>Example: Estimating Parameters of a t Distribution</h1>
<p>Let’s dive into an example using the <code>util_t_param_estimate()</code> function. Suppose you have data that you believe follows a t distribution. Here’s how you can estimate its parameters:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-6">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-7">output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_t_param_estimate</span>(x)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the estimated parameters</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parameter_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 7
  dist_type      samp_size  mean variance method df_est ncp_est
  &lt;chr&gt;              &lt;int&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;
1 T Distribution       100 0.612    0.949 MME     0.959   0.612
2 T Distribution       100 0.612    0.949 MLE     8.32    0.571</code></pre>
</div>
</div>
<p>In this example, we generated some data from a t distribution with degrees of freedom (df) of 10 and a non-centrality parameter (ncp) of 0.5. Using the <code>util_t_param_estimate()</code> function, we estimated these parameters from the data.</p>
<p>The <code>parameter_tbl</code> in the output contains the estimated values, while <code>combined_data_tbl</code> can be used for visualization.</p>
<section id="visualizing-the-results" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-the-results">Visualizing the Results</h2>
<p>Here’s what the output might look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the combined data</span></span>
<span id="cb3-2">output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>combined_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_combined_autoplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item" id="htmlwidget-b3c758cd5e2d5807aa76" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-b3c758cd5e2d5807aa76">{"x":{"data":[{"x":[-2.8043390933615084,-2.7288207642452402,-2.6533024351289716,-2.5777841060127034,-2.5022657768964347,-2.4267474477801665,-2.3512291186638978,-2.2757107895476296,-2.200192460431361,-2.1246741313150928,-2.0491558021988241,-1.9736374730825559,-1.8981191439662874,-1.822600814850019,-1.7470824857337506,-1.6715641566174821,-1.5960458275012137,-1.5205274983849453,-1.4450091692686768,-1.3694908401524084,-1.29397251103614,-1.2184541819198715,-1.1429358528036031,-1.0674175236873347,-0.99189919457106646,-0.91638086545479802,-0.84086253633852959,-0.76534420722226093,-0.68982587810599272,-0.61430754898972406,-0.53878921987345585,-0.46327089075718719,-0.38775256164091898,-0.31223423252465077,-0.23671590340838211,-0.1611975742921139,-0.085679245175845242,-0.01016091605957703,0.065357413056691627,0.14087574217295984,0.2163940712892285,0.29191240040549671,0.36743072952176536,0.44294905863803358,0.51846738775430223,0.59398571687057045,0.6695040459868391,0.74502237510310731,0.82054070421937553,0.89605903333564418,0.9715773624519124,1.0470956915681811,1.1226140206844493,1.1981323498007175,1.2736506789169866,1.3491690080332548,1.424687337149523,1.5002056662657912,1.5757239953820603,1.6512423244983285,1.7267606536145967,1.802278982730865,1.8777973118471341,1.9533156409634023,2.0288339700796705,2.1043522991959387,2.1798706283122069,2.255388957428476,2.3309072865447442,2.4064256156610124,2.4819439447772806,2.5574622738935497,2.632980603009818,2.7084989321260862,2.7840172612423544,2.8595355903586235,2.9350539194748917,3.0105722485911599,3.0860905777074281,3.1616089068236972,3.2371272359399654,3.3126455650562336,3.3881638941725019,3.4636822232887701,3.5392005524050392,3.6147188815213074,3.6902372106375756,3.7657555397538438,3.8412738688701129,3.9167921979863811,3.9923105271026493,4.0678288562189175,4.1433471853351866,4.2188655144514549,4.2943838435677231,4.3699021726839913,4.4454205018002595,4.5209388309165286,4.5964571600327968,4.671975489149065],"y":[0.00016159340119922531,0.00031812159289538598,0.00059654305432110734,0.0010649885163847776,0.0018116854971184657,0.002939363982159663,0.004557268418734545,0.0067521910610506735,0.0095640007471001799,0.012970001376627608,0.016870181042633305,0.021093291118968092,0.025419183216136503,0.029634448746876062,0.033593783228044606,0.037272427270657833,0.040802185688078307,0.044482436057626557,0.048733676569874977,0.054022866026005777,0.060770494264310228,0.069255059443431383,0.079559454729632231,0.091473533328998033,0.1046148349727619,0.11851558131682036,0.13277584148593746,0.14722202766926126,0.16201363920853878,0.17764052623849444,0.19479694516546461,0.21416386816236654,0.23617789969248743,0.26074623006336484,0.28718020114031934,0.31426481099915243,0.34042260579186723,0.36394698401954084,0.3833102269127252,0.39747783125757397,0.40598765591390995,0.40901444654750357,0.40728682309965486,0.401944536957836,0.3943232663707808,0.38559753117882634,0.3766197716815099,0.36780719791500149,0.3591394138433428,0.35026340815366164,0.34069350128490838,0.3300047170262288,0.31799350571809243,0.30475663330690284,0.29073327996447795,0.27655514485918586,0.26289819245051976,0.2503021440108959,0.23902561551265888,0.22891668921571434,0.21945891704984938,0.2098955643847612,0.19941124387594042,0.18732365354282041,0.17328375986796635,0.15736663671364631,0.14001280331078464,0.12192517855227837,0.10391331781482883,0.086742666474611319,0.070986419222395264,0.057001288339077923,0.044940908677057037,0.034810543894863745,0.026535069298354166,0.019963502091671442,0.014959107232355174,0.011386441977492195,0.0091052882158540634,0.007969591906098179,0.0077715598322078937,0.0082807128192554889,0.00923125523486866,0.01033763834496281,0.011318438280038607,0.011938218857166644,0.012043773622023846,0.011580407603222601,0.0105939482330485,0.0092101665593809223,0.0076085970111172746,0.0059722544089959801,0.0044530046754936558,0.0031529640628535941,0.002120762526456192,0.0013560854807403982,0.00082353004046132466,0.00047479472788472277,0.00025976625982531733,0.0001349767448308819],"text":["dx:  -2.80433909<br />dy: 1.615934e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.72882076<br />dy: 3.181216e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.65330244<br />dy: 5.965431e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.57778411<br />dy: 1.064989e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.50226578<br />dy: 1.811685e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.42674745<br />dy: 2.939364e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.35122912<br />dy: 4.557268e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.27571079<br />dy: 6.752191e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.20019246<br />dy: 9.564001e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.12467413<br />dy: 1.297000e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -2.04915580<br />dy: 1.687018e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.97363747<br />dy: 2.109329e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.89811914<br />dy: 2.541918e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.82260081<br />dy: 2.963445e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.74708249<br />dy: 3.359378e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.67156416<br />dy: 3.727243e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.59604583<br />dy: 4.080219e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.52052750<br />dy: 4.448244e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.44500917<br />dy: 4.873368e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.36949084<br />dy: 5.402287e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.29397251<br />dy: 6.077049e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.21845418<br />dy: 6.925506e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.14293585<br />dy: 7.955945e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -1.06741752<br />dy: 9.147353e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.99189919<br />dy: 1.046148e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.91638087<br />dy: 1.185156e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.84086254<br />dy: 1.327758e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.76534421<br />dy: 1.472220e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.68982588<br />dy: 1.620136e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.61430755<br />dy: 1.776405e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.53878922<br />dy: 1.947969e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.46327089<br />dy: 2.141639e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.38775256<br />dy: 2.361779e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.31223423<br />dy: 2.607462e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.23671590<br />dy: 2.871802e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.16119757<br />dy: 3.142648e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.08567925<br />dy: 3.404226e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:  -0.01016092<br />dy: 3.639470e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.06535741<br />dy: 3.833102e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.14087574<br />dy: 3.974778e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.21639407<br />dy: 4.059877e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.29191240<br />dy: 4.090144e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.36743073<br />dy: 4.072868e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.44294906<br />dy: 4.019445e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.51846739<br />dy: 3.943233e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.59398572<br />dy: 3.855975e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.66950405<br />dy: 3.766198e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.74502238<br />dy: 3.678072e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.82054070<br />dy: 3.591394e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.89605903<br />dy: 3.502634e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   0.97157736<br />dy: 3.406935e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.04709569<br />dy: 3.300047e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.12261402<br />dy: 3.179935e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.19813235<br />dy: 3.047566e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.27365068<br />dy: 2.907333e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.34916901<br />dy: 2.765551e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.42468734<br />dy: 2.628982e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.50020567<br />dy: 2.503021e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.57572400<br />dy: 2.390256e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.65124232<br />dy: 2.289167e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.72676065<br />dy: 2.194589e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.80227898<br />dy: 2.098956e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.87779731<br />dy: 1.994112e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   1.95331564<br />dy: 1.873237e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.02883397<br />dy: 1.732838e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.10435230<br />dy: 1.573666e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.17987063<br />dy: 1.400128e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.25538896<br />dy: 1.219252e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.33090729<br />dy: 1.039133e-01<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.40642562<br />dy: 8.674267e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.48194394<br />dy: 7.098642e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.55746227<br />dy: 5.700129e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.63298060<br />dy: 4.494091e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.70849893<br />dy: 3.481054e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.78401726<br />dy: 2.653507e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.85953559<br />dy: 1.996350e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   2.93505392<br />dy: 1.495911e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.01057225<br />dy: 1.138644e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.08609058<br />dy: 9.105288e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.16160891<br />dy: 7.969592e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.23712724<br />dy: 7.771560e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.31264557<br />dy: 8.280713e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.38816389<br />dy: 9.231255e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.46368222<br />dy: 1.033764e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.53920055<br />dy: 1.131844e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.61471888<br />dy: 1.193822e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.69023721<br />dy: 1.204377e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.76575554<br />dy: 1.158041e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.84127387<br />dy: 1.059395e-02<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.91679220<br />dy: 9.210167e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   3.99231053<br />dy: 7.608597e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.06782886<br />dy: 5.972254e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.14334719<br />dy: 4.453005e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.21886551<br />dy: 3.152964e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.29438384<br />dy: 2.120763e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.36990217<br />dy: 1.356085e-03<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.44542050<br />dy: 8.235300e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.52093883<br />dy: 4.747947e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.59645716<br />dy: 2.597663e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical","dx:   4.67197549<br />dy: 1.349767e-04<br />interaction(dist_type, sim_number): Empirical.1<br />dist_type: Empirical"],"type":"scatter","mode":"lines","line":{"width":1.8897637795275593,"color":"rgba(248,118,109,1)","dash":"solid"},"hoveron":"points","name":"Empirical","legendgroup":"Empirical","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[-82.019215408792434,-79.945975049420127,-77.872734690047835,-75.799494330675529,-73.726253971303237,-71.65301361193093,-69.579773252558624,-67.506532893186332,-65.433292533814026,-63.360052174441734,-61.286811815069427,-59.213571455697128,-57.140331096324829,-55.067090736952522,-52.99385037758023,-50.920610018207924,-48.847369658835625,-46.774129299463326,-44.700888940091026,-42.62764858071872,-40.554408221346421,-38.481167861974122,-36.407927502601822,-34.334687143229523,-32.261446783857224,-30.188206424484918,-28.114966065112618,-26.041725705740319,-23.96848534636802,-21.895244986995721,-19.822004627623414,-17.748764268251122,-15.675523908878816,-13.60228354950651,-11.529043190134217,-9.4558028307619111,-7.382562471389619,-5.3093221120173126,-3.2360817526450063,-1.1628413932727142,0.91039896609959214,2.9836393254718843,5.0568796848441906,7.1301200442164969,9.203360403588789,11.276600762961095,13.349841122333387,15.423081481705694,17.496321841077986,19.569562200450292,21.642802559822599,23.716042919194891,25.789283278567197,27.862523637939489,29.935763997311795,32.009004356684102,34.082244716056394,36.1554850754287,38.228725434800992,40.301965794173299,42.375206153545605,44.448446512917897,46.521686872290189,48.594927231662496,50.668167591034802,52.741407950407108,54.814648309779415,56.887888669151693,58.961129028523999,61.034369387896305,63.107609747268611,65.180850106640918,67.254090466013196,69.327330825385502,71.400571184757808,73.473811544130115,75.547051903502421,77.620292262874699,79.693532622247005,81.766772981619312,83.840013340991618,85.913253700363924,87.986494059736202,90.059734419108509,92.132974778480815,94.206215137853121,96.279455497225428,98.352695856597705,100.42593621597001,102.49917657534232,104.57241693471462,106.64565729408693,108.71889765345921,110.79213801283151,112.86537837220382,114.93861873157613,117.01185909094841,119.08509945032071,121.15833980969302,123.23158016906532],"y":[5.400681076731186e-05,0.0029914702522781502,0.0016709651248298389,8.3379718197355736e-06,3.5191201203241651e-10,1.1963490511597388e-16,0,0,0,0,0,3.3712202498081781e-19,2.3490242523440174e-18,2.4397636777071391e-18,0,0,0,3.5317781111979533e-18,0,0,3.1361954106100565e-18,0,0,1.1849544226799271e-18,6.7460718641218018e-19,0,0,0,0,5.9359927720193076e-12,4.5149741128273236e-07,0.00037708408506424902,0.0040038404536290612,0.0017756088674578123,0.0073031507995830755,0.0011643194115503633,3.4861518562069975e-06,0.00014470617001338369,0.0071069810718099539,0.08802653310990767,0.1802566723818787,0.071848512297957398,0.038437512147469322,0.027256480235889335,0.010537983116262875,0.0030898331696850123,0.0059419763133679877,0.0065501418354738635,0.00088754860628463181,3.313707976786467e-06,0.00083426934207895273,0.0038738129264205634,0.00027678000975389183,0.0034308209926755396,0.0014739900986643155,0.0038471850666867004,0.00085084329047783894,2.2153422141146279e-06,6.7254423665827377e-11,1.6430695805933754e-17,0,0,2.4537116839775637e-18,1.4205701286603919e-19,8.3947714546282447e-19,2.2984280042684754e-18,2.9591729605318866e-18,1.1644005562514131e-18,2.1920253263950596e-18,0,0,0,0,4.4377429761499939e-19,0,0,0,0,1.2208017252462686e-18,7.1686882844284269e-18,2.4552238601619751e-11,1.0717920651741252e-06,0.0005908324138980118,0.0040474734358727608,0.00030132156501066348,2.1151848694727024e-07,1.2895681505885894e-12,1.7459864590567865e-18,3.1490156576152579e-18,9.7630457084656625e-19,4.1608397747989847e-18,4.3226977082848422e-19,3.4005760401687299e-18,1.4837190431323838e-20,1.2119539314569288e-16,3.5191200869879401e-10,8.3379718197381994e-06,0.0016709651248298157,0.0029914702522781467,5.4006810767317674e-05],"text":["dx: -82.01921541<br />dy: 5.400681e-05<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -79.94597505<br />dy: 2.991470e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -77.87273469<br />dy: 1.670965e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -75.79949433<br />dy: 8.337972e-06<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -73.72625397<br />dy: 3.519120e-10<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -71.65301361<br />dy: 1.196349e-16<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -69.57977325<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -67.50653289<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -65.43329253<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -63.36005217<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -61.28681182<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -59.21357146<br />dy: 3.371220e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -57.14033110<br />dy: 2.349024e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -55.06709074<br />dy: 2.439764e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -52.99385038<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -50.92061002<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -48.84736966<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -46.77412930<br />dy: 3.531778e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -44.70088894<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -42.62764858<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -40.55440822<br />dy: 3.136195e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -38.48116786<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -36.40792750<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -34.33468714<br />dy: 1.184954e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -32.26144678<br />dy: 6.746072e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -30.18820642<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -28.11496607<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -26.04172571<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -23.96848535<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -21.89524499<br />dy: 5.935993e-12<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -19.82200463<br />dy: 4.514974e-07<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -17.74876427<br />dy: 3.770841e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -15.67552391<br />dy: 4.003840e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -13.60228355<br />dy: 1.775609e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: -11.52904319<br />dy: 7.303151e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  -9.45580283<br />dy: 1.164319e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  -7.38256247<br />dy: 3.486152e-06<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  -5.30932211<br />dy: 1.447062e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  -3.23608175<br />dy: 7.106981e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  -1.16284139<br />dy: 8.802653e-02<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:   0.91039897<br />dy: 1.802567e-01<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:   2.98363933<br />dy: 7.184851e-02<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:   5.05687968<br />dy: 3.843751e-02<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:   7.13012004<br />dy: 2.725648e-02<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:   9.20336040<br />dy: 1.053798e-02<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  11.27660076<br />dy: 3.089833e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  13.34984112<br />dy: 5.941976e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  15.42308148<br />dy: 6.550142e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  17.49632184<br />dy: 8.875486e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  19.56956220<br />dy: 3.313708e-06<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  21.64280256<br />dy: 8.342693e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  23.71604292<br />dy: 3.873813e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  25.78928328<br />dy: 2.767800e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  27.86252364<br />dy: 3.430821e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  29.93576400<br />dy: 1.473990e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  32.00900436<br />dy: 3.847185e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  34.08224472<br />dy: 8.508433e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  36.15548508<br />dy: 2.215342e-06<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  38.22872543<br />dy: 6.725442e-11<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  40.30196579<br />dy: 1.643070e-17<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  42.37520615<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  44.44844651<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  46.52168687<br />dy: 2.453712e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  48.59492723<br />dy: 1.420570e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  50.66816759<br />dy: 8.394771e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  52.74140795<br />dy: 2.298428e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  54.81464831<br />dy: 2.959173e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  56.88788867<br />dy: 1.164401e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  58.96112903<br />dy: 2.192025e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  61.03436939<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  63.10760975<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  65.18085011<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  67.25409047<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  69.32733083<br />dy: 4.437743e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  71.40057118<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  73.47381154<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  75.54705190<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  77.62029226<br />dy: 0.000000e+00<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  79.69353262<br />dy: 1.220802e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  81.76677298<br />dy: 7.168688e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  83.84001334<br />dy: 2.455224e-11<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  85.91325370<br />dy: 1.071792e-06<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  87.98649406<br />dy: 5.908324e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  90.05973442<br />dy: 4.047473e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  92.13297478<br />dy: 3.013216e-04<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  94.20621514<br />dy: 2.115185e-07<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  96.27945550<br />dy: 1.289568e-12<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx:  98.35269586<br />dy: 1.745986e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 100.42593622<br />dy: 3.149016e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 102.49917658<br />dy: 9.763046e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 104.57241693<br />dy: 4.160840e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 106.64565729<br />dy: 4.322698e-19<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 108.71889765<br />dy: 3.400576e-18<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 110.79213801<br />dy: 1.483719e-20<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 112.86537837<br />dy: 1.211954e-16<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 114.93861873<br />dy: 3.519120e-10<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 117.01185909<br />dy: 8.337972e-06<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 119.08509945<br />dy: 1.670965e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 121.15833981<br />dy: 2.991470e-03<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)","dx: 123.23158017<br />dy: 5.400681e-05<br />interaction(dist_type, sim_number): T Distribution c(0.959, 0.612).1<br />dist_type: T Distribution c(0.959, 0.612)"],"type":"scatter","mode":"lines","line":{"width":1.8897637795275593,"color":"rgba(0,186,56,1)","dash":"solid"},"hoveron":"points","name":"T Distribution c(0.959, 0.612)","legendgroup":"T Distribution c(0.959, 0.612)","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[-2.5206883547599608,-2.4540551581078196,-2.387421961455678,-2.3207887648035368,-2.2541555681513952,-2.187522371499254,-2.1208891748471124,-2.0542559781949712,-1.9876227815428296,-1.9209895848906884,-1.8543563882385468,-1.7877231915864056,-1.7210899949342642,-1.6544567982821228,-1.5878236016299814,-1.52119040497784,-1.4545572083256986,-1.3879240116735572,-1.3212908150214158,-1.2546576183692744,-1.188024421717133,-1.1213912250649916,-1.0547580284128502,-0.98812483176070876,-0.92149163510856757,-0.85485843845642617,-0.78822524180428477,-0.72159204515214337,-0.65495884850000197,-0.58832565184786056,-0.52169245519571916,-0.45505925854357754,-0.38842606189143636,-0.32179286523929518,-0.25515966858715355,-0.18852647193501237,-0.12189327528287075,-0.05526007863072957,0.011373118021412054,0.078006314673553234,0.14463951132569486,0.21127270797783604,0.27790590462997766,0.34453910128211884,0.41117229793426047,0.47780549458640165,0.54443869123854327,0.61107188789068445,0.67770508454282563,0.74433828119496726,0.81097147784710844,0.87760467449925006,0.94423787115139124,1.0108710678035329,1.077504264455674,1.1441374611078157,1.2107706577599568,1.2774038544120985,1.3440370510642397,1.4106702477163813,1.4773034443685225,1.5439366410206636,1.6105698376728057,1.6772030343249469,1.7438362309770881,1.8104694276292292,1.8771026242813704,1.9437358209335125,2.0103690175856537,2.0770022142377949,2.143635410889936,2.2102686075420781,2.2769018041942193,2.3435350008463605,2.4101681974985016,2.4768013941506437,2.5434345908027849,2.6100677874549261,2.6767009841070672,2.7433341807592093,2.8099673774113505,2.8766005740634917,2.9432337707156329,3.009866967367774,3.0765001640199161,3.1431333606720573,3.2097665573241985,3.2763997539763396,3.3430329506284817,3.4096661472806229,3.4762993439327641,3.5429325405849053,3.6095657372370473,3.6761989338891885,3.7428321305413297,3.8094653271934709,3.876098523845612,3.9427317204977541,4.0093649171498953,4.0759981138020365],"y":[0.00021719253530887823,0.00040210648023181542,0.0007157038027222006,0.0012332144638392702,0.0020437856021978734,0.0032609301319038568,0.0050296479491535881,0.0074752632216562561,0.010714087744165839,0.014844307003147051,0.019865192363771874,0.025708793305249642,0.032238298590420704,0.039223438695956236,0.046417354687328084,0.053592429834567641,0.060596808827996076,0.067405163159981879,0.074135101920331792,0.081050412766753496,0.088506066400186531,0.096915309476252737,0.10665044687732744,0.11797300141517954,0.13104107695841347,0.14582054774057002,0.16210108659961978,0.179566475081502,0.19777557502446583,0.21623789856469564,0.23447358262182291,0.25204375250764943,0.26862561215759662,0.28399690261108906,0.29805862737510253,0.31085305798591439,0.32246934159362983,0.33303181877446325,0.34268377858698229,0.35150660639238646,0.35952489468744103,0.36674039622761234,0.37310875309324137,0.37856890055674969,0.38310896789267163,0.3867201967528156,0.38939329417170931,0.39115112372135785,0.39196233486361137,0.39171126066831025,0.39025357063218652,0.38735037760536817,0.3826570458650862,0.37588531645393253,0.36673909596131904,0.35493038557842621,0.34040371406662251,0.32322127498181019,0.30357597667683645,0.28194286435330423,0.25891638461660105,0.2351999597162921,0.21158441431722569,0.18880842678542839,0.16754506324217974,0.14826253666398559,0.13120486169632334,0.11644601666112528,0.10381195621986974,0.093003681819044517,0.083717158661718194,0.075655209658855471,0.068623436133634877,0.0625760513380198,0.057561600160008851,0.053666850694774143,0.050980494095152588,0.049486121846591846,0.049008256108310007,0.049246717683974386,0.049768237264410681,0.050091587648246151,0.049769084979048708,0.048449724012351647,0.045980041668464797,0.042369833627546281,0.037800030305705751,0.032602573478737608,0.027145689264022443,0.021803832708384926,0.016881989754254336,0.012591204476480348,0.0090537289486725143,0.0062663988905054631,0.0041722476404421754,0.0026800006968619875,0.0016550809184607124,0.00098181308121180182,0.00056280358030498284,0.00030979030668360131],"text":["dx:  -2.52068835<br />dy: 2.171925e-04<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.45405516<br />dy: 4.021065e-04<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.38742196<br />dy: 7.157038e-04<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.32078876<br />dy: 1.233214e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.25415557<br />dy: 2.043786e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.18752237<br />dy: 3.260930e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.12088917<br />dy: 5.029648e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -2.05425598<br />dy: 7.475263e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.98762278<br />dy: 1.071409e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.92098958<br />dy: 1.484431e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.85435639<br />dy: 1.986519e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.78772319<br />dy: 2.570879e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.72108999<br />dy: 3.223830e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.65445680<br />dy: 3.922344e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.58782360<br />dy: 4.641735e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.52119040<br />dy: 5.359243e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.45455721<br />dy: 6.059681e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.38792401<br />dy: 6.740516e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.32129082<br />dy: 7.413510e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.25465762<br />dy: 8.105041e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.18802442<br />dy: 8.850607e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.12139123<br />dy: 9.691531e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -1.05475803<br />dy: 1.066504e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.98812483<br />dy: 1.179730e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.92149164<br />dy: 1.310411e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.85485844<br />dy: 1.458205e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.78822524<br />dy: 1.621011e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.72159205<br />dy: 1.795665e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.65495885<br />dy: 1.977756e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.58832565<br />dy: 2.162379e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.52169246<br />dy: 2.344736e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.45505926<br />dy: 2.520438e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.38842606<br />dy: 2.686256e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.32179287<br />dy: 2.839969e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.25515967<br />dy: 2.980586e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.18852647<br />dy: 3.108531e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.12189328<br />dy: 3.224693e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:  -0.05526008<br />dy: 3.330318e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.01137312<br />dy: 3.426838e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.07800631<br />dy: 3.515066e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.14463951<br />dy: 3.595249e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.21127271<br />dy: 3.667404e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.27790590<br />dy: 3.731088e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.34453910<br />dy: 3.785689e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.41117230<br />dy: 3.831090e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.47780549<br />dy: 3.867202e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.54443869<br />dy: 3.893933e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.61107189<br />dy: 3.911511e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.67770508<br />dy: 3.919623e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.74433828<br />dy: 3.917113e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.81097148<br />dy: 3.902536e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.87760467<br />dy: 3.873504e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   0.94423787<br />dy: 3.826570e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.01087107<br />dy: 3.758853e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.07750426<br />dy: 3.667391e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.14413746<br />dy: 3.549304e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.21077066<br />dy: 3.404037e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.27740385<br />dy: 3.232213e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.34403705<br />dy: 3.035760e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.41067025<br />dy: 2.819429e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.47730344<br />dy: 2.589164e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.54393664<br />dy: 2.352000e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.61056984<br />dy: 2.115844e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.67720303<br />dy: 1.888084e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.74383623<br />dy: 1.675451e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.81046943<br />dy: 1.482625e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.87710262<br />dy: 1.312049e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   1.94373582<br />dy: 1.164460e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.01036902<br />dy: 1.038120e-01<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.07700221<br />dy: 9.300368e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.14363541<br />dy: 8.371716e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.21026861<br />dy: 7.565521e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.27690180<br />dy: 6.862344e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.34353500<br />dy: 6.257605e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.41016820<br />dy: 5.756160e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.47680139<br />dy: 5.366685e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.54343459<br />dy: 5.098049e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.61006779<br />dy: 4.948612e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.67670098<br />dy: 4.900826e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.74333418<br />dy: 4.924672e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.80996738<br />dy: 4.976824e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.87660057<br />dy: 5.009159e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   2.94323377<br />dy: 4.976908e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.00986697<br />dy: 4.844972e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.07650016<br />dy: 4.598004e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.14313336<br />dy: 4.236983e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.20976656<br />dy: 3.780003e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.27639975<br />dy: 3.260257e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.34303295<br />dy: 2.714569e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.40966615<br />dy: 2.180383e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.47629934<br />dy: 1.688199e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.54293254<br />dy: 1.259120e-02<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.60956574<br />dy: 9.053729e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.67619893<br />dy: 6.266399e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.74283213<br />dy: 4.172248e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.80946533<br />dy: 2.680001e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.87609852<br />dy: 1.655081e-03<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   3.94273172<br />dy: 9.818131e-04<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   4.00936492<br />dy: 5.628036e-04<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)","dx:   4.07599811<br />dy: 3.097903e-04<br />interaction(dist_type, sim_number): T Distribution c(8.32, 0.571).1<br />dist_type: T Distribution c(8.32, 0.571)"],"type":"scatter","mode":"lines","line":{"width":1.8897637795275593,"color":"rgba(97,156,255,1)","dash":"solid"},"hoveron":"points","name":"T Distribution c(8.32, 0.571)","legendgroup":"T Distribution c(8.32, 0.571)","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":43.762557077625573,"r":7.3059360730593621,"b":40.182648401826491,"l":43.105022831050235},"font":{"color":"rgba(0,0,0,1)","family":"","size":14.611872146118724},"title":{"text":"Density Plot","font":{"color":"rgba(0,0,0,1)","family":"","size":17.534246575342465},"x":0,"xref":"paper"},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[-92.28175518768532,133.49411994795821],"tickmode":"array","ticktext":["-50","0","50","100"],"tickvals":[-50,0,50,100],"categoryorder":"array","categoryarray":["-50","0","50","100"],"nticks":null,"ticks":"","tickcolor":null,"ticklen":3.6529680365296811,"tickwidth":0,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.68949771689498},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176002,"zeroline":false,"anchor":"y","title":{"text":"dx","font":{"color":"rgba(0,0,0,1)","family":"","size":14.611872146118724}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[-0.02045072232737518,0.42946516887487873],"tickmode":"array","ticktext":["0.0","0.1","0.2","0.3","0.4"],"tickvals":[0,0.10000000000000001,0.20000000000000001,0.30000000000000004,0.40000000000000002],"categoryorder":"array","categoryarray":["0.0","0.1","0.2","0.3","0.4"],"nticks":null,"ticks":"","tickcolor":null,"ticklen":3.6529680365296811,"tickwidth":0,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.68949771689498},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176002,"zeroline":false,"anchor":"x","title":{"text":"dy","font":{"color":"rgba(0,0,0,1)","family":"","size":14.611872146118724}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":null,"line":{"color":null,"width":0,"linetype":[]},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":null,"bordercolor":null,"borderwidth":0,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.68949771689498},"title":{"text":"Simulation","font":{"color":"rgba(0,0,0,1)","family":"","size":14.611872146118724}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"9a81fe7533":{"x":{},"y":{},"colour":{},"type":"scatter"}},"cur_data":"9a81fe7533","visdat":{"9a81fe7533":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.20000000000000001,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>In the above plot, we visualize the output of the <code>util_t_param_estimate()</code> function from the TidyDensity package. The visualization shows how well the estimated t distribution fits our sample data. The x-axis represents the data values, while the y-axis shows the density. The different colors represent the data and the estimated density functions.</p>
</section>
</section>
<section id="how-to-use-the-new-functions" class="level1">
<h1>How to Use the New Functions</h1>
<p>Each of the new parameter estimate functions follows a similar approach. Here’s a step-by-step guide to get you started:</p>
<ol type="1">
<li><strong>Load your data</strong>: Ensure your data is properly formatted and loaded into R.</li>
<li><strong>Select the appropriate function</strong>: Choose the function that matches the distribution you believe your data follows.</li>
<li><strong>Estimate the parameters</strong>: Use the selected function to estimate the parameters.</li>
<li><strong>Analyze and visualize</strong>: Review the estimated parameters and use the visualization functions to see how well the estimated distribution fits your data.</li>
</ol>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>I highly encourage you to try these new functions on your own datasets. Whether you’re working with common distributions or tackling more specialized ones, these tools can help you gain deeper insights into your data.</p>
<p>Feel free to experiment and see how these functions perform with different types of data. The more you explore, the better you’ll understand the strengths and applications of each distribution.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The new parameter estimate functions in TidyDensity open up exciting possibilities for data analysis. By simplifying the process of parameter estimation, they allow you to focus more on interpreting results and making informed decisions.</p>
<p>Give these functions a try and see how they can enhance your analysis workflow. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-06-03/</guid>
  <pubDate>Mon, 03 Jun 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>An Overview of the New AIC Functions in the TidyDensity Package</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-31/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The latest update the the <code>TidyDensity</code> package introduces several new functions that make it easier to work with data in R. In this article, we’ll take a look at the new AIC functions and how they work.</p>
</section>
<section id="new-functions" class="level1">
<h1>New Functions</h1>
<p>The set of functions that we will go over are the <code>util_dist_aic()</code> functions, where <code>dist</code> is the distribution in question, for example <code>util_negative_binomial_aic()</code>. These functions calculate the Akaike Information Criterion (AIC) for a given distribution and data. The AIC is a measure of the relative quality of a statistical model for a given set of data. The lower the AIC value, the better the model fits the data. Here is a bit about the functions.</p>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_negative_binomial_aic</span>()</span></code></pre></div>
</section>
<section id="arguments" class="level2">
<h2 class="anchored" data-anchor-id="arguments">Arguments</h2>
<ul>
<li><code>.x</code>: A numeric vector of data values.</li>
</ul>
</section>
<section id="value" class="level2">
<h2 class="anchored" data-anchor-id="value">Value</h2>
<p>A numeric value representing the AIC for the given data and distribution.</p>
</section>
<section id="details" class="level2">
<h2 class="anchored" data-anchor-id="details">Details</h2>
<p>This function calculates the Akaike Information Criterion (AIC) for a distribution fitted to the provided data.</p>
<p>This function fits a distribution to the provided data. It estimates the parameters of the distribution from the data. Then, it calculates the AIC value based on the fitted distribution.</p>
<p>Initial parameter estimates: The function uses the param estimate family of functions in order to estimate the starting point of the parameters. For example <code>util_negative_binomial_param_estimate()</code>.</p>
<p>Optimization method: Since the parameters are directly calculated from the data, no optimization is needed.</p>
<p>Goodness-of-fit: While AIC is a useful metric for model comparison, it’s recommended to also assess the goodness-of-fit of the chosen model using visualization and other statistical tests.</p>
</section>
<section id="examples" class="level2">
<h2 class="anchored" data-anchor-id="examples">Examples</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate some data</span></span>
<span id="cb2-5">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the AIC for a negative binomial distribution</span></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(</span>
<span id="cb2-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" AIC of rnorm() using TidyDensity: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_aic</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb2-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AIC of rnorm() using fitdistrplus: "</span>, </span>
<span id="cb2-11">  fitdistrplus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fitdist</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"norm"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>aic</span>
<span id="cb2-12">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> AIC of rnorm() using TidyDensity:  268.5385 
 AIC of rnorm() using fitdistrplus:  268.5385</code></pre>
</div>
</div>
</section>
<section id="new-aic-functions" class="level2">
<h2 class="anchored" data-anchor-id="new-aic-functions">New AIC Functions</h2>
<p>Here is a listing of all of the new AIC functions:</p>
<ul>
<li><code>util_negative_binomial_aic()</code></li>
<li><code>util_zero_truncated_negative_binomial_aic()</code></li>
<li><code>util_zero_truncated_poisson_aic()</code></li>
<li><code>util_f_aic()</code></li>
<li><code>util_zero_truncated_geometric_aic()</code></li>
<li><code>util_t_aic()</code></li>
<li><code>util_pareto1_aic()</code></li>
<li><code>util_paralogistic_aic()</code></li>
<li><code>util_inverse_weibull_aic()</code></li>
<li><code>util_pareto_aic()</code></li>
<li><code>util_inverse_burr_aic()</code></li>
<li><code>util_generalized_pareto_aic()</code></li>
<li><code>util_generalized_beta_aic()</code></li>
<li><code>util_zero_truncated_binomial_aic()</code></li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Thanks for reading. I hope you find these new functions useful in your work. If you have any questions or feedback, please feel free to reach out. I worked hard to ensure where I could that results would come back identical to what would be calculated from the amazing <code>fitdistrplus</code> package.</p>
<p>Happy Coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-31/</guid>
  <pubDate>Fri, 31 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exciting New Updates to TidyDensity: Enhancing Distribution Analysis!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-30/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R enthusiasts! I’m thrilled to share some fantastic updates to the TidyDensity package. These updates bring a wealth of new features, functions, and enhancements, making distribution analysis more comprehensive and efficient. Let’s dive into the details!</p>
<section id="new-features" class="level2">
<h2 class="anchored" data-anchor-id="new-features">New Features</h2>
<section id="negative-binomial-distribution" class="level3">
<h3 class="anchored" data-anchor-id="negative-binomial-distribution">Negative Binomial Distribution</h3>
<ul>
<li><strong>util_negative_binomial_aic()</strong>: Calculate the Akaike Information Criterion (AIC) for the negative binomial distribution. This function aids in model selection, helping you determine the best-fitting model for your data.</li>
</ul>
</section>
<section id="zero-truncated-negative-binomial-distribution" class="level3">
<h3 class="anchored" data-anchor-id="zero-truncated-negative-binomial-distribution">Zero-Truncated Negative Binomial Distribution</h3>
<ul>
<li><strong>util_zero_truncated_negative_binomial_param_estimate()</strong>: Estimate the parameters of the zero-truncated negative binomial distribution.</li>
<li><strong>util_zero_truncated_negative_binomial_aic()</strong>: Calculate the AIC for the zero-truncated negative binomial distribution.</li>
<li><strong>util_zero_truncated_negative_binomial_stats_tbl()</strong>: Create a summary table for the zero-truncated negative binomial distribution.</li>
</ul>
</section>
<section id="zero-truncated-poisson-distribution" class="level3">
<h3 class="anchored" data-anchor-id="zero-truncated-poisson-distribution">Zero-Truncated Poisson Distribution</h3>
<ul>
<li><strong>util_zero_truncated_poisson_param_estimate()</strong>: Estimate the parameters of the zero-truncated Poisson distribution.</li>
<li><strong>util_zero_truncated_poisson_aic()</strong>: Calculate the AIC for the zero-truncated Poisson distribution.</li>
<li><strong>util_zero_truncated_poisson_stats_tbl()</strong>: Create a summary table for the zero-truncated Poisson distribution.</li>
</ul>
</section>
<section id="f-distribution" class="level3">
<h3 class="anchored" data-anchor-id="f-distribution">F Distribution</h3>
<ul>
<li><strong>util_f_param_estimate()</strong>: Estimate the parameters for the F distribution.</li>
<li><strong>util_f_aic()</strong>: Calculate the AIC for the F distribution.</li>
</ul>
</section>
<section id="zero-truncated-geometric-distribution" class="level3">
<h3 class="anchored" data-anchor-id="zero-truncated-geometric-distribution">Zero-Truncated Geometric Distribution</h3>
<ul>
<li><strong>util_zero_truncated_geometric_param_estimate()</strong>: Estimate the parameters of the zero-truncated geometric distribution.</li>
<li><strong>util_zero_truncated_geometric_aic()</strong>: Calculate the AIC for the zero-truncated geometric distribution.</li>
<li><strong>util_zero_truncated_geometric_stats_tbl()</strong>: Create a summary table for the zero-truncated geometric distribution.</li>
</ul>
</section>
<section id="triangular-distribution" class="level3">
<h3 class="anchored" data-anchor-id="triangular-distribution">Triangular Distribution</h3>
<ul>
<li><strong>util_triangular_aic()</strong>: Calculate the AIC for the triangular distribution.</li>
</ul>
</section>
<section id="t-distribution" class="level3">
<h3 class="anchored" data-anchor-id="t-distribution">T Distribution</h3>
<ul>
<li><strong>util_t_param_estimate()</strong>: Estimate the parameters of the T distribution.</li>
<li><strong>util_t_aic()</strong>: Calculate the AIC for the T distribution.</li>
</ul>
</section>
<section id="pareto-type-i-distribution" class="level3">
<h3 class="anchored" data-anchor-id="pareto-type-i-distribution">Pareto Type I Distribution</h3>
<ul>
<li><strong>util_pareto1_param_estimate()</strong>: Estimate the parameters of the Pareto Type I distribution.</li>
<li><strong>util_pareto1_aic()</strong>: Calculate the AIC for the Pareto Type I distribution.</li>
<li><strong>util_pareto1_stats_tbl()</strong>: Create a summary table for the Pareto Type I distribution.</li>
</ul>
</section>
<section id="paralogistic-distribution" class="level3">
<h3 class="anchored" data-anchor-id="paralogistic-distribution">Paralogistic Distribution</h3>
<ul>
<li><strong>util_paralogistic_param_estimate()</strong>: Estimate the parameters of the paralogistic distribution.</li>
<li><strong>util_paralogistic_aic()</strong>: Calculate the AIC for the paralogistic distribution.</li>
<li><strong>util_paralogistic_stats_tbl()</strong>: Create a summary table for the paralogistic distribution.</li>
</ul>
</section>
<section id="inverse-weibull-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inverse-weibull-distribution">Inverse Weibull Distribution</h3>
<ul>
<li><strong>util_inverse_weibull_param_estimate()</strong>: Estimate the parameters of the Inverse Weibull distribution.</li>
<li><strong>util_inverse_weibull_aic()</strong>: Calculate the AIC for the Inverse Weibull distribution.</li>
<li><strong>util_inverse_weibull_stats_tbl()</strong>: Create a summary table for the Inverse Weibull distribution.</li>
</ul>
</section>
<section id="inverse-pareto-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inverse-pareto-distribution">Inverse Pareto Distribution</h3>
<ul>
<li><strong>util_inverse_pareto_param_estimate()</strong>: Estimate the parameters of the Inverse Pareto distribution.</li>
<li><strong>util_inverse_pareto_aic()</strong>: Calculate the AIC for the Inverse Pareto distribution.</li>
<li><strong>util_inverse_pareto_stats_tbl()</strong>: Create a summary table for the Inverse Pareto distribution.</li>
</ul>
</section>
<section id="inverse-gamma-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inverse-gamma-distribution">Inverse Gamma Distribution</h3>
<ul>
<li><strong>util_inverse_burr_param_estimate()</strong>: Estimate the parameters of the Inverse Gamma distribution.</li>
<li><strong>util_inverse_burr_aic()</strong>: Calculate the AIC for the Inverse Gamma distribution.</li>
<li><strong>util_inverse_burr_stats_tbl()</strong>: Create a summary table for the Inverse Gamma distribution.</li>
</ul>
</section>
<section id="generalized-pareto-distribution" class="level3">
<h3 class="anchored" data-anchor-id="generalized-pareto-distribution">Generalized Pareto Distribution</h3>
<ul>
<li><strong>util_generalized_pareto_param_estimate()</strong>: Estimate the parameters of the Generalized Pareto distribution.</li>
<li><strong>util_generalized_pareto_aic()</strong>: Calculate the AIC for the Generalized Pareto distribution.</li>
<li><strong>util_generalized_pareto_stats_tbl()</strong>: Create a summary table for the Generalized Pareto distribution.</li>
</ul>
</section>
<section id="generalized-gamma-distribution" class="level3">
<h3 class="anchored" data-anchor-id="generalized-gamma-distribution">Generalized Gamma Distribution</h3>
<ul>
<li><strong>util_generalized_beta_param_estimate()</strong>: Estimate the parameters of the Generalized Gamma distribution.</li>
<li><strong>util_generalized_beta_aic()</strong>: Calculate the AIC for the Generalized Gamma distribution.</li>
<li><strong>util_generalized_beta_stats_tbl()</strong>: Create a summary table for the Generalized Gamma distribution.</li>
</ul>
</section>
<section id="zero-truncated-binomial-distribution" class="level3">
<h3 class="anchored" data-anchor-id="zero-truncated-binomial-distribution">Zero-Truncated Binomial Distribution</h3>
<ul>
<li><strong>util_zero_truncated_binomial_stats_tbl()</strong>: Create a summary table for the Zero Truncated binomial distribution.</li>
<li><strong>util_zero_truncated_binomial_param_estimate()</strong>: Estimate the parameters of the Zero Truncated binomial distribution.</li>
<li><strong>util_zero_truncated_binomial_aic()</strong>: Calculate the AIC for the Zero Truncated binomial distribution.</li>
</ul>
</section>
</section>
<section id="minor-improvements-and-fixes" class="level2">
<h2 class="anchored" data-anchor-id="minor-improvements-and-fixes">Minor Improvements and Fixes</h2>
<ul>
<li><strong>util_negative_binomial_param_estimate()</strong>: Updated to use <code>optim()</code> for parameter estimation, enhancing accuracy and efficiency.</li>
<li><strong>quantile_normalize()</strong>: Added names to columns when <code>.return_tibble = TRUE</code> for better readability and usability.</li>
</ul>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>These updates significantly expand the functionality of TidyDensity, providing more tools for robust distribution analysis. Whether you’re working with standard or specialized distributions, these new functions and improvements will streamline your workflow and enhance your analytical capabilities.</p>
<p>I encourage you to explore these new features and see how they can benefit your projects. As always, your feedback is invaluable, so please share your thoughts and experiences with these updates. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-30/</guid>
  <pubDate>Thu, 30 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing get_provider_meta_data() in healthyR.data</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-29/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, R enthusiasts!</p>
<p>Today, I’m excited to introduce a new function in the <strong>healthyR.data</strong> package: <code>get_provider_meta_data()</code>. This function is excellent for anyone working with healthcare datasets, making it easy to fetch and filter metadata from the Centers for Medicare &amp; Medicaid Services (CMS) repository.</p>
</section>
<section id="overview" class="level1">
<h1>Overview</h1>
<p>The <code>get_provider_meta_data()</code> function simplifies the process of retrieving and managing metadata for healthcare datasets. By allowing users to filter data based on various criteria, it streamlines data management and enhances analytical capabilities.</p>
</section>
<section id="syntax-and-arguments" class="level1">
<h1>Syntax and Arguments</h1>
<p>The function syntax is straightforward and highly customizable:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_provider_meta_data</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.identifier =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.description =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.issued =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.modified =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.released =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.theme =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.media_type =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb1-11">)</span></code></pre></div>
<p>Here’s a breakdown of the arguments:</p>
<ul>
<li><strong>.identifier</strong>: A dataset identifier to filter the data.</li>
<li><strong>.title</strong>: A title to filter the data.</li>
<li><strong>.description</strong>: A description to filter the data.</li>
<li><strong>.keyword</strong>: A keyword to filter the data.</li>
<li><strong>.issued</strong>: A date when the dataset was issued to filter the data.</li>
<li><strong>.modified</strong>: A date when the dataset was modified to filter the data.</li>
<li><strong>.released</strong>: A date when the dataset was released to filter the data.</li>
<li><strong>.theme</strong>: A theme to filter the data.</li>
<li><strong>.media_type</strong>: A media type to filter the data.</li>
</ul>
</section>
<section id="what-it-returns" class="level1">
<h1>What It Returns</h1>
<p>The function returns a tidy tibble containing metadata about the datasets. This tibble includes the following columns:</p>
<ul>
<li><strong>identifier</strong></li>
<li><strong>title</strong></li>
<li><strong>description</strong></li>
<li><strong>keyword</strong></li>
<li><strong>issued</strong></li>
<li><strong>modified</strong></li>
<li><strong>released</strong></li>
<li><strong>theme</strong></li>
<li><strong>media_type</strong></li>
<li><strong>download_url</strong></li>
<li><strong>contact_fn</strong></li>
<li><strong>contact_email</strong></li>
<li><strong>publisher_name</strong></li>
</ul>
</section>
<section id="details" class="level1">
<h1>Details</h1>
<p>When you call <code>get_provider_meta_data()</code>, it fetches JSON data from the CMS metadata URL. The function then processes this data by: 1. Selecting relevant columns. 2. Unnesting nested lists. 3. Cleaning column names. 4. Processing dates and media types for enhanced usability.</p>
</section>
<section id="practical-example" class="level1">
<h1>Practical Example</h1>
<p>Let’s walk through an example to see how <code>get_provider_meta_data()</code> works in action.</p>
<p>Suppose we want to retrieve metadata for a dataset based upong a specific data identifier? Here’s how we can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(healthyR.data)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve metadata for a datset with identifier "3614-1eef"</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_provider_meta_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.identifier =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3614-1eef"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 16
$ identifier      &lt;chr&gt; "3614-1eef"
$ title           &lt;chr&gt; "Addiction Medicine Office Visit Costs"
$ description     &lt;chr&gt; "Returns addiction medicine office visit costs per zip…
$ keyword         &lt;list&gt; "Addiction Medicine"
$ issued          &lt;date&gt; 2022-07-11
$ modified        &lt;date&gt; 2022-07-11
$ released        &lt;date&gt; 2023-09-28
$ landing_page    &lt;chr&gt; "https://data.medicare.gov/provider-data/dataset/3614-…
$ theme           &lt;list&gt; "Physician office visit costs"
$ access_level    &lt;chr&gt; "public"
$ archive_exclude &lt;lgl&gt; NA
$ contact_fn      &lt;chr&gt; "PPL Dataset"
$ contact_email   &lt;chr&gt; "PPL_Dataset@cms.hhs.gov"
$ publisher_name  &lt;chr&gt; "Centers for Medicare &amp; Medicaid Services (CMS)"
$ download_url    &lt;chr&gt; "https://data.cms.gov/provider-data/sites/default/file…
$ media_type      &lt;chr&gt; "text/csv"</code></pre>
</div>
</div>
<p>In this example, we are filtering the metadata based on the dataset identifier “3614-1eef”. The <code>glimpse()</code> function allows us to view the structure of the resulting tibble.</p>
<p>Now, what if we want to filter data that meets a certain keyword? Here’s how we can do that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">provider_data_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_provider_meta_data</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"medic"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's see all the titles that contain the keyword "medic"</span></span>
<span id="cb4-4">provider_data_tbl[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "Addiction Medicine Office Visit Costs"                                     
 [2] "Emergency Medicine Office Visit Costs"                                     
 [3] "Geriatric Medicine Office Visit Costs"                                     
 [4] "Internal Medicine Office Visit Costs"                                      
 [5] "Medical Genetics and Genomics Office Visit Costs"                          
 [6] "Medical Oncology Office Visit Costs"                                       
 [7] "Medical Toxicology Office Visit Costs"                                     
 [8] "Nuclear Medicine Office Visit Costs"                                       
 [9] "Osteopathic Manipulative Medicine Office Visit Costs"                      
[10] "Pediatric Medicine Office Visit Costs"                                     
[11] "Physical Medicine and Rehabilitation Office Visit Costs"                   
[12] "Preventive Medicine Office Visit Costs"                                    
[13] "Sleep Medicine Office Visit Costs"                                         
[14] "Sports Medicine Office Visit Costs"                                        
[15] "Undersea and Hyperbaric Medicine Office Visit Costs"                       
[16] "Medical Equipment Suppliers"                                               
[17] "Home Health Care - Patient Survey (HHCAHPS) 2022Q4 to 2023Q3"              
[18] "Home Health Care - Patient Survey (HHCAHPS) National Data 2022Q4 to 2023Q3"
[19] "Home Health Care - Patient Survey (HHCAHPS) State Data 2022Q4 to 2023Q3"   
[20] "Home Health Care - Patient Survey (HHCAHPS) Measure Dates 2022Q4 to 2023Q3"
[21] "Medicare Spending Per Beneficiary - Hospital Additional Decimal Places"    
[22] "Hospital Value-Based Purchasing (HVBP) - Efficiency Scores"                
[23] "Medicare Hospital Spending by Claim"                                       
[24] "Medicare Spending Per Beneficiary - Hospital"                              
[25] "Medicare Spending Per Beneficiary - National"                              
[26] "Medicare Spending Per Beneficiary - State"                                 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now let's group them by theme</span></span>
<span id="cb6-2">provider_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(theme, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(theme))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  theme                            n
  &lt;chr&gt;                        &lt;int&gt;
1 Physician office visit costs    15
2 Hospitals                        6
3 Home health services             4
4 Supplier directory               1</code></pre>
</div>
</div>
<p>In this example, the metadata is filtered based on the keyword “medic”. We then extract the titles containing the keyword and group them by theme to see the distribution of themes in the filtered data. Notice that we filtered the keyword not on a full word but on a partial match, which can be useful for broad searches.</p>
</section>
<section id="benefits-of-using-get_provider_meta_data" class="level1">
<h1>Benefits of Using <code>get_provider_meta_data()</code></h1>
<p>This function is particularly useful for:</p>
<ul>
<li><strong>Data Scientists and Analysts</strong>: Quickly finding relevant datasets without manually searching through large repositories.</li>
<li><strong>Healthcare Researchers</strong>: Accessing comprehensive metadata to support research and analysis.</li>
<li><strong>Developers</strong>: Integrating CMS metadata retrieval into applications or workflows with minimal effort.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>get_provider_meta_data()</code> function is a robust tool for anyone working with healthcare data. It not only saves time but also provides a cleaner, more efficient way to manage and analyze dataset metadata.</p>
<p>Give it a try and see how it can enhance your data workflows. Happy coding!</p>
<p>Feel free to share your experiences and any creative ways you’re using this function in the comments below. Until next time, keep exploring and innovating with R!</p>
<hr>
<p>Steve</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyrdata</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-29/</guid>
  <pubDate>Wed, 29 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unveiling the Power of get_cms_meta_data() in healthyR.data</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-28/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey, R users! 🌟 Today, we’re going to look at a great new addition to the <strong>healthyR.data</strong> package—the <code>get_cms_meta_data()</code> function! This function is a helpful tool for retrieving and analyzing metadata from CMS (Centers for Medicare &amp; Medicaid Services) datasets. Whether you’re a healthcare analyst, data scientist, or R programming fan, you’ll find this function very useful. Let’s break it down and explore how it works.</p>
<section id="overview-of-get_cms_meta_data" class="level2">
<h2 class="anchored" data-anchor-id="overview-of-get_cms_meta_data">Overview of <code>get_cms_meta_data()</code></h2>
<p>The <code>get_cms_meta_data()</code> function lets you retrieve metadata from CMS datasets easily. You can customize your search using various parameters, ensuring you get precisely the data you need. Here’s the syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cms_meta_data</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.modified_date =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.identifier =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data_version =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.media_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span></span>
<span id="cb1-8">)</span></code></pre></div>
<section id="arguments" class="level3">
<h3 class="anchored" data-anchor-id="arguments">Arguments:</h3>
<ul>
<li><code>.title</code>: Search by title.</li>
<li><code>.modified_date</code>: Search by modified date (format: “YYYY-MM-DD”).</li>
<li><code>.keyword</code>: Search by keyword.</li>
<li><code>.identifier</code>: Search by identifier.</li>
<li><code>.data_version</code>: Choose between “current”, “archive”, or “all”. Default is “current”.</li>
<li><code>.media_type</code>: Filter by media type (“all”, “csv”, “API”, “other”). Default is “all”.</li>
</ul>
</section>
<section id="return-value" class="level3">
<h3 class="anchored" data-anchor-id="return-value">Return Value:</h3>
<p>A tibble containing data links and relevant metadata about the datasets.</p>
</section>
<section id="details" class="level3">
<h3 class="anchored" data-anchor-id="details">Details:</h3>
<p>The function fetches JSON data from the CMS data URL and extracts relevant fields to create a tidy tibble. It selects specific columns, handles nested lists by unnesting them, cleans column names, and processes dates and media types to make the data more useful for analysis. The columns in the returned tibble include:</p>
<ul>
<li><code>title</code></li>
<li><code>description</code></li>
<li><code>landing_page</code></li>
<li><code>modified</code></li>
<li><code>keyword</code></li>
<li><code>described_by</code></li>
<li><code>fn</code></li>
<li><code>has_email</code></li>
<li><code>identifier</code></li>
<li><code>start</code></li>
<li><code>end</code></li>
<li><code>references</code></li>
<li><code>distribution_description</code></li>
<li><code>distribution_title</code></li>
<li><code>distribution_modified</code></li>
<li><code>distribution_start</code></li>
<li><code>distribution_end</code></li>
<li><code>media_type</code></li>
<li><code>data_link</code></li>
</ul>
</section>
</section>
<section id="practical-examples" class="level2">
<h2 class="anchored" data-anchor-id="practical-examples">Practical Examples</h2>
<p>Let’s see the <code>get_cms_meta_data()</code> function in action with a couple of examples.</p>
<section id="example-1-basic-usage" class="level3">
<h3 class="anchored" data-anchor-id="example-1-basic-usage">Example 1: Basic Usage</h3>
<p>First, we’ll load the necessary libraries and fetch some metadata:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Library Loads</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(healthyR.data)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get data</span></span>
<span id="cb2-6">cms_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cms_meta_data</span>()</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(cms_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 107
Columns: 19
$ title                    &lt;chr&gt; "Accountable Care Organization Participants",…
$ description              &lt;chr&gt; "The Accountable Care Organization Participan…
$ landing_page             &lt;chr&gt; "https://data.cms.gov/medicare-shared-savings…
$ modified                 &lt;date&gt; 2024-01-29, 2024-04-23, 2024-01-12, 2024-01-…
$ keyword                  &lt;list&gt; &lt;"Medicare", "Value-Based Care", "Coordinate…
$ described_by             &lt;chr&gt; "https://data.cms.gov/resources/accountable-c…
$ fn                       &lt;chr&gt; "Shared Savings Program - CM", "Shared Saving…
$ has_email                &lt;chr&gt; "SharedSavingsProgram@cms.hhs.gov", "SharedSa…
$ identifier               &lt;chr&gt; "https://data.cms.gov/data-api/v1/dataset/976…
$ start                    &lt;date&gt; 2014-01-01, 2017-01-01, 2021-01-01, 2021-01-…
$ end                      &lt;date&gt; 2024-12-31, 2024-12-31, 2021-12-31, 2021-12-…
$ references               &lt;chr&gt; "https://data.cms.gov/resources/acos-aco-part…
$ distribution_description &lt;chr&gt; "latest", "latest", "latest", "latest", "late…
$ distribution_title       &lt;chr&gt; "Accountable Care Organization Participants",…
$ distribution_modified    &lt;date&gt; 2024-01-29, 2024-04-23, 2024-01-12, 2024-01-…
$ distribution_start       &lt;date&gt; 2024-01-01, 2024-01-01, 2021-01-01, 2021-01-…
$ distribution_end         &lt;date&gt; 2024-12-31, 2024-12-31, 2021-12-31, 2021-12-…
$ media_type               &lt;chr&gt; "API", "API", "API", "API", "API", "API", "AP…
$ data_link                &lt;chr&gt; "https://data.cms.gov/data-api/v1/dataset/976…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attributes</span></span>
<span id="cb4-2">atb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(cms_data)</span>
<span id="cb4-3">atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>names</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "title"                    "description"             
 [3] "landing_page"             "modified"                
 [5] "keyword"                  "described_by"            
 [7] "fn"                       "has_email"               
 [9] "identifier"               "start"                   
[11] "end"                      "references"              
[13] "distribution_description" "distribution_title"      
[15] "distribution_modified"    "distribution_start"      
[17] "distribution_end"         "media_type"              
[19] "data_link"               </code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>class</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "cms_meta_data" "tbl_df"        "tbl"           "data.frame"   </code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>url</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "https://data.cms.gov/data.json"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date_retrieved</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-05-28 10:20:18 EDT"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">atb<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parameters</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$.data_version
[1] "current"

$.media_type
[1] "all"

$.title
NULL

$.modified_date
NULL

$.keyword
NULL

$.identifier
NULL</code></pre>
</div>
</div>
<p>In this example, we’re simply calling <code>get_cms_meta_data()</code> without any parameters. This fetches the default dataset metadata. The <code>glimpse()</code> function from the <code>dplyr</code> package provides a quick overview of the data structure.</p>
</section>
<section id="example-2-custom-search-by-keyword-and-title" class="level3">
<h3 class="anchored" data-anchor-id="example-2-custom-search-by-keyword-and-title">Example 2: Custom Search by Keyword and Title</h3>
<p>Now, let’s refine our search by specifying a keyword and title:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cms_meta_data</span>(</span>
<span id="cb14-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nation"</span>,</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Market Saturation &amp; Utilization State-County"</span></span>
<span id="cb14-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 19
$ title                    &lt;chr&gt; "Market Saturation &amp; Utilization State-County"
$ description              &lt;chr&gt; "The Market Saturation and Utilization State-…
$ landing_page             &lt;chr&gt; "https://data.cms.gov/summary-statistics-on-u…
$ modified                 &lt;date&gt; 2024-04-02
$ keyword                  &lt;list&gt; &lt;"National", "States &amp; Territories", "Countie…
$ described_by             &lt;chr&gt; "https://data.cms.gov/resources/market-satur…
$ fn                       &lt;chr&gt; "Market Saturation - CPI"
$ has_email                &lt;chr&gt; "MarketSaturation@cms.hhs.gov"
$ identifier               &lt;chr&gt; "https://data.cms.gov/data-api/v1/dataset/89…
$ start                    &lt;date&gt; 2023-10-01
$ end                      &lt;date&gt; 2023-12-31
$ references               &lt;chr&gt; "https://data.cms.gov/resources/market-satura…
$ distribution_description &lt;chr&gt; "latest"
$ distribution_title       &lt;chr&gt; "Market Saturation &amp; Utilization StateCounty"
$ distribution_modified    &lt;date&gt; 2024-04-02
$ distribution_start       &lt;date&gt; 2023-10-01
$ distribution_end         &lt;date&gt; 2023-12-31
$ media_type               &lt;chr&gt; "API"
$ data_link                &lt;chr&gt; "https://data.cms.gov/data-api/v1/dataset/890…</code></pre>
</div>
</div>
<p>In this example, we filter the metadata by the keyword “nation” and the title “Market Saturation &amp; Utilization State-County”. The pipe operator (<code>|&gt;</code>) is used to pass the result directly into the <code>glimpse()</code> function for a quick preview.</p>
</section>
</section>
<section id="breaking-down-the-code" class="level2">
<h2 class="anchored" data-anchor-id="breaking-down-the-code">Breaking Down the Code</h2>
<p>Let’s break down the code blocks to understand what they’re doing:</p>
<section id="basic-usage" class="level3">
<h3 class="anchored" data-anchor-id="basic-usage">Basic Usage</h3>
<ol type="1">
<li><p><strong>Load Libraries</strong>:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(healthyR.data)</span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<p>We load the <code>healthyR.data</code> package to access the <code>get_cms_meta_data()</code> function and the <code>dplyr</code> package for data manipulation.</p></li>
<li><p><strong>Fetch Metadata</strong>:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">cms_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cms_meta_data</span>()</span></code></pre></div>
<p>We call <code>get_cms_meta_data()</code> without any parameters to get the default dataset metadata.</p></li>
<li><p><strong>Preview Data</strong>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(cms_data)</span></code></pre></div>
<p>The <code>glimpse()</code> function gives us a quick look at the structure and contents of the fetched metadata.</p></li>
</ol>
</section>
<section id="custom-search" class="level3">
<h3 class="anchored" data-anchor-id="custom-search">Custom Search</h3>
<ol type="1">
<li><p><strong>Custom Search Call</strong>:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cms_meta_data</span>(</span>
<span id="cb19-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nation"</span>,</span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Market Saturation &amp; Utilization State-County"</span></span>
<span id="cb19-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<p>Here, we call <code>get_cms_meta_data()</code> with specific parameters for keyword and title to narrow down our search. The result is passed to <code>glimpse()</code> using the pipe operator for an immediate preview.</p></li>
</ol>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The <code>get_cms_meta_data()</code> function is a versatile and flexible tool for accessing CMS metadata, making your data analysis tasks more efficient and effective. Whether you’re looking for specific datasets or just exploring the available metadata, this function has got you covered.</p>
<p>Try out <code>get_cms_meta_data()</code> in your next R project and explore the potential of CMS data with ease! Happy coding! 🚀</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyrdata</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-28/</guid>
  <pubDate>Tue, 28 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Update to healthyR.data 1.1.0</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-24/</link>
  <description><![CDATA[ 





<section id="announcing-the-latest-updates-to-the-healthyr.data-r-package" class="level1">
<h1>Announcing the Latest Updates to the healthyR.data R Package</h1>
<p>I’m excited to share the latest updates to the healthyR.data R package! This release brings new functionality and minor improvements, all aimed at making your data management tasks easier and more efficient. Here’s a breakdown of what’s new:</p>
<section id="new-functions" class="level2">
<h2 class="anchored" data-anchor-id="new-functions">New Functions</h2>
<section id="get_cms_meta_data" class="level3">
<h3 class="anchored" data-anchor-id="get_cms_meta_data"><code>get_cms_meta_data()</code></h3>
<p>This new function is designed to retrieve metadata from the Centers for Medicare &amp; Medicaid Services (CMS). Whether you’re working on health research, policy analysis, or clinical studies, this function provides a straightforward way to access essential CMS data.</p>
<p><a href="https://www.spsanderson.com/healthyR.data/reference/get_cms_meta_data.html">Learn more about <code>get_cms_meta_data()</code></a></p>
<p>Syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_cms_meta_data</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.modified_date =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.identifier =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data_version =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"current"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.media_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span></span>
<span id="cb1-8">)</span></code></pre></div>
</section>
<section id="get_provider_meta_data" class="level3">
<h3 class="anchored" data-anchor-id="get_provider_meta_data"><code>get_provider_meta_data()</code></h3>
<p>Similarly, the <code>get_provider_meta_data()</code> function allows you to fetch metadata related to healthcare providers. This can be particularly useful for projects that require comprehensive information about provider attributes and characteristics.</p>
<p><a href="https://www.spsanderson.com/healthyR.data/reference/get_provider_meta_data.html">Learn more about <code>get_provider_meta_data()</code></a></p>
<p>Syntax:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_provider_meta_data</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.identifier =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.title =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.description =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.keyword =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.issued =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.modified =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.released =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.theme =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb2-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.media_type =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb2-11">)</span></code></pre></div>
</section>
<section id="fetch_cms_data-and-fetch_provider_data" class="level3">
<h3 class="anchored" data-anchor-id="fetch_cms_data-and-fetch_provider_data"><code>fetch_cms_data()</code> and <code>fetch_provider_data()</code></h3>
<p>We’ve also added <code>fetch_cms_data()</code> and <code>fetch_provider_data()</code>, two powerful functions for fetching actual data from CMS and healthcare providers, respectively. These functions are perfect for those who need to integrate large datasets into their workflows seamlessly.</p>
<p><a href="https://www.spsanderson.com/healthyR.data/reference/fetch_cms_data.html">Learn more about <code>fetch_cms_data()</code></a></p>
<p><a href="https://www.spsanderson.com/healthyR.data/reference/fetch_provider_data.html">Learn more about <code>fetch_provider_data()</code></a></p>
<p>Syntax:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_cms_data</span>(.data_link)</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fetch_provider_data</span>(.data_link)</span></code></pre></div>
</section>
</section>
<section id="minor-fixes-and-improvements" class="level2">
<h2 class="anchored" data-anchor-id="minor-fixes-and-improvements">Minor Fixes and Improvements</h2>
<section id="bug-fix-in-current_hosp_data" class="level3">
<h3 class="anchored" data-anchor-id="bug-fix-in-current_hosp_data">Bug Fix in <code>current_hosp_data()</code></h3>
<p>We’ve addressed a bug related to directory file paths in the <code>current_hosp_data()</code> function. This fix ensures smoother operation and better reliability when managing hospital data.</p>
<p><a href="https://www.spsanderson.com/healthyR.data/reference/current_hosp_data.html">Learn more about <code>current_hosp_data()</code></a></p>
</section>
</section>
<section id="no-breaking-changes" class="level2">
<h2 class="anchored" data-anchor-id="no-breaking-changes">No Breaking Changes</h2>
<p>I’m pleased to report that this update does not include any breaking changes. You can upgrade to the latest version without worrying about compatibility issues with your existing code.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>These enhancements to the healthyR.data package are all about providing more robust tools for healthcare data analysis. I hope these new functions and fixes will improve your workflows and make your data management tasks more efficient.</p>
<p>As always, I welcome your feedback and suggestions. Happy coding!</p>
<p>Best regards, Steve Sanderson</p>
<hr>
<p>Feel free to reach out if you have any questions or need further assistance with these new features. Your feedback is invaluable in helping us improve healthyR.data continuously.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyrdata</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-24/</guid>
  <pubDate>Fri, 24 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Drop or Select Rows with a Specific String in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-23/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p><em>Good morning, everyone!</em></p>
<p>Today, we’re going to talk about how to handle rows in your dataset that contain a specific string. This is a common task in data cleaning and can be easily accomplished using both base R and the <code>dplyr</code> package. We’ll go through examples for each method and break down the code so you can understand and apply it to your own data.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>First, let’s see how to select and drop rows containing a specific string using base R. We’ll use the <code>grep()</code> function for this.</p>
<section id="example-data" class="level3">
<h3 class="anchored" data-anchor-id="example-data">Example Data</h3>
<p>Let’s create a simple data frame to work with:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elderberry"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-5">)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id       name
1  1      apple
2  2     banana
3  3     cherry
4  4       date
5  5 elderberry</code></pre>
</div>
</div>
</section>
<section id="selecting-rows-with-a-specific-string" class="level3">
<h3 class="anchored" data-anchor-id="selecting-rows-with-a-specific-string">Selecting Rows with a Specific String</h3>
<p>Suppose we want to select rows where the name contains the letter “a”. We can use <code>grep()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">selected_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name), ]</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_rows)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id   name
1  1  apple
2  2 banana
4  4   date</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>grep("a", data$name)</code> searches for the letter “a” in the <code>name</code> column and returns the indices of the rows that match.</li>
<li><code>data[grep("a", data$name), ]</code> uses these indices to subset the original data frame.</li>
</ul>
</section>
<section id="dropping-rows-with-a-specific-string" class="level3">
<h3 class="anchored" data-anchor-id="dropping-rows-with-a-specific-string">Dropping Rows with a Specific String</h3>
<p>To drop rows that contain the letter “a”, we can use the <code>-grep()</code> notation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">dropped_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name), ]</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dropped_rows)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id       name
3  3     cherry
5  5 elderberry</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>-grep("a", data$name)</code> returns the indices of the rows that do not match the search term.</li>
<li><code>data[-grep("a", data$name), ]</code> subsets the original data frame by excluding these rows.</li>
</ul>
</section>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>The <code>dplyr</code> package makes these tasks even more straightforward with its intuitive functions.</p>
<section id="example-data-1" class="level3">
<h3 class="anchored" data-anchor-id="example-data-1">Example Data</h3>
<p>We’ll use the same data frame as before. First, make sure you have <code>dplyr</code> installed and loaded:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("dplyr")</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</div>
</section>
<section id="selecting-rows-with-a-specific-string-1" class="level3">
<h3 class="anchored" data-anchor-id="selecting-rows-with-a-specific-string-1">Selecting Rows with a Specific String</h3>
<p>Using <code>dplyr</code>, we can select rows containing “a” with the <code>filter()</code> function combined with <code>str_detect()</code> from the <code>stringr</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb8-2"></span>
<span id="cb8-3">selected_rows_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_rows_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id   name
1  1  apple
2  2 banana
3  4   date</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>%&gt;%</code> is the pipe operator, allowing us to chain functions together.</li>
<li><code>filter(str_detect(name, "a"))</code> filters rows where the <code>name</code> column contains the letter “a”.</li>
</ul>
</section>
<section id="dropping-rows-with-a-specific-string-1" class="level3">
<h3 class="anchored" data-anchor-id="dropping-rows-with-a-specific-string-1">Dropping Rows with a Specific String</h3>
<p>To drop rows containing “a” using <code>dplyr</code>, we use <code>filter()</code> with the negation operator <code>!</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">dropped_rows_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dropped_rows_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id       name
1  3     cherry
2  5 elderberry</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>!str_detect(name, "a")</code> negates the condition, filtering out rows where the <code>name</code> column contains the letter “a”.</li>
</ul>
</section>
</section>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>Both base R and <code>dplyr</code> provide powerful ways to select and drop rows based on specific strings. The <code>grep()</code> function in base R and the combination of <code>filter()</code> and <code>str_detect()</code> in <code>dplyr</code> are versatile tools for your data manipulation needs.</p>
<p>Give these examples a try with your own datasets! Experimenting with different strings and data structures will help reinforce these concepts and improve your data manipulation skills.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-23/</guid>
  <pubDate>Thu, 23 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Split a Number into Digits in R Using gsub() and strsplit()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-22/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Splitting numbers into individual digits can be a handy trick in data analysis and manipulation. Today, we’ll explore how to achieve this using base R functions, specifically <code>gsub()</code> and <code>strsplit()</code>. Let’s walk through the process step by step, explain the syntax of each function, and provide some examples for clarity.</p>
</section>
<section id="syntax" class="level1">
<h1>Syntax</h1>
<section id="understanding-gsub-and-strsplit" class="level2">
<h2 class="anchored" data-anchor-id="understanding-gsub-and-strsplit">Understanding <code>gsub()</code> and <code>strsplit()</code></h2>
<p>First, let’s get familiar with the two main functions we’ll be using:</p>
<ol type="1">
<li><strong><code>gsub(pattern, replacement, x)</code></strong>:
<ul>
<li><strong><code>pattern</code></strong>: A regular expression describing the pattern to be matched.</li>
<li><strong><code>replacement</code></strong>: The string to replace the matched pattern.</li>
<li><strong><code>x</code></strong>: The input vector, which is usually a character string.</li>
</ul></li>
</ol>
<p>The <code>gsub()</code> function replaces all occurrences of the pattern in <code>x</code> with the <code>replacement</code>.</p>
<ol start="2" type="1">
<li><strong><code>strsplit(x, split)</code></strong>:
<ul>
<li><strong><code>x</code></strong>: The input vector, which is usually a character string.</li>
<li><strong><code>split</code></strong>: The delimiter on which to split the input string.</li>
</ul></li>
</ol>
<p>The <code>strsplit()</code> function splits the elements of a character vector <code>x</code> into substrings based on the delimiter specified in <code>split</code>.</p>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="splitting-a-number-into-digits" class="level2">
<h2 class="anchored" data-anchor-id="splitting-a-number-into-digits">Splitting a Number into Digits</h2>
<p>Let’s go through a few examples to see how we can split numbers into digits using these functions.</p>
<section id="example-1-basic-splitting-of-a-single-number" class="level3">
<h3 class="anchored" data-anchor-id="example-1-basic-splitting-of-a-single-number">Example 1: Basic Splitting of a Single Number</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Convert the number to a character string</span></span>
<span id="cb1-2">number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12345</span></span>
<span id="cb1-3">number_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(number)</span>
<span id="cb1-4">number_str</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "12345"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Use gsub() to insert a delimiter (space) between each digit</span></span>
<span id="cb3-2">number_with_spaces <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 "</span>, number_str)</span>
<span id="cb3-3">number_with_spaces</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 2 3 4 5 "</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Use strsplit() to split the string on the delimiter</span></span>
<span id="cb5-2">digits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(number_with_spaces, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Convert the result back to numeric</span></span>
<span id="cb5-5">digits_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(digits)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(digits_numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p><strong>Explanation</strong>:</p>
<ol type="1">
<li>We convert the number to a character string using <code>as.character()</code>.</li>
<li>We use <code>gsub("(.)", "\\1 ", number_str)</code> to insert a space between each digit. The pattern <code>(.)</code> matches any character, and <code>\\1</code> refers to the matched character followed by a space.</li>
<li>We split the string on spaces using <code>strsplit(number_with_spaces, " ")</code>.</li>
<li>Finally, we convert the resulting character vector back to numeric using <code>as.numeric()</code>.</li>
</ol>
</section>
<section id="example-2-splitting-multiple-numbers-in-a-vector" class="level3">
<h3 class="anchored" data-anchor-id="example-2-splitting-multiple-numbers-in-a-vector">Example 2: Splitting Multiple Numbers in a Vector</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vector of numbers</span></span>
<span id="cb7-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6789</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to split a single number into digits</span></span>
<span id="cb7-5">split_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(number) {</span>
<span id="cb7-6">  number_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(number)</span>
<span id="cb7-7">  number_with_spaces <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(.)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 "</span>, number_str)</span>
<span id="cb7-8">  digits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(number_with_spaces, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(digits)</span>
<span id="cb7-10">}</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the function to each number in the vector</span></span>
<span id="cb7-13">split_digits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(numbers, split_number)</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(split_digits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 6 7 8 9

[[2]]
[1] 5 4 3 2</code></pre>
</div>
</div>
<p><strong>Explanation</strong>:</p>
<ol type="1">
<li>We define a vector of numbers.</li>
<li>We create a function <code>split_number</code> that takes a number and splits it into digits using the same steps as in Example 1.</li>
<li>We apply this function to each number in the vector using <code>lapply()</code>.</li>
<li>The result is a list where each element is a vector of digits for each number in the original vector.</li>
</ol>
</section>
</section>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Now that we’ve gone through the examples, it’s your turn to give it a try! Experiment with different numbers, vectors, and even customize the splitting function to handle special cases or additional formatting. The more you practice, the more comfortable you’ll become with these handy base R functions.</p>
<p>Happy Coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-22/</guid>
  <pubDate>Wed, 22 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Split a Vector into Chunks in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-21/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data analysis, there are times when you need to split a vector into smaller chunks. Whether you’re managing large datasets or preparing data for parallel processing, breaking down vectors can be incredibly useful. In this post, we’ll explore how to achieve this in R using base R, <code>dplyr</code>, and <code>data.table</code>.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>Base R provides a straightforward way to split a vector into chunks using the <code>split</code> function and a combination of other basic functions.</p>
<section id="example-1-splitting-a-vector-into-chunks" class="level3">
<h3 class="anchored" data-anchor-id="example-1-splitting-a-vector-into-chunks">Example 1: Splitting a Vector into Chunks</h3>
<p>Let’s say we have a vector <code>x</code> and we want to split it into chunks of size 3.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-2">chunk_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-3">split_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> chunk_size))</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(split_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
[1] 1 2 3

$`2`
[1] 4 5 6

$`3`
[1] 7 8 9

$`4`
[1] 10</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>x &lt;- 1:10</code>: Creates a vector <code>x</code> with values from 1 to 10.</li>
<li><code>chunk_size &lt;- 3</code>: Defines the size of each chunk.</li>
<li><code>seq_along(x)</code>: Generates a sequence of the same length as <code>x</code>.</li>
<li><code>ceiling(seq_along(x) / chunk_size)</code>: Divides the sequence by the chunk size and uses <code>ceiling</code> to round up to the nearest integer, creating a grouping factor.</li>
<li><code>split(x, ...)</code>: Splits the vector based on the grouping factor.</li>
</ul>
</section>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using <code>dplyr</code></h2>
<p>The <code>dplyr</code> package, part of the tidyverse, offers a more readable and pipe-friendly approach to splitting vectors.</p>
<section id="example-2-splitting-a-vector-into-chunks" class="level3">
<h3 class="anchored" data-anchor-id="example-2-splitting-a-vector-into-chunks">Example 2: Splitting a Vector into Chunks</h3>
<p>Here’s how you can do it with <code>dplyr</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-2"></span>
<span id="cb3-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-4">chunk_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-5">split_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> chunk_size)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chunk =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(.)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(chunk)</span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(split_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1 2 3

[[2]]
[1] 4 5 6

[[3]]
[1] 7 8 9

[[4]]
[1] 10</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>as.data.frame()</code>: Converts the vector to a data frame.</li>
<li><code>mutate(group = ceiling(row_number() / chunk_size))</code>: Adds a grouping column.</li>
<li><code>group_by(group)</code>: Groups the data by the newly created group column.</li>
<li><code>summarise(chunk = list(.))</code>: Summarizes the groups into list columns using the <code>.</code> placeholder.</li>
<li><code>pull(chunk)</code>: Extracts the list column as a vector of chunks.</li>
</ul>
</section>
<section id="example-3-splitting-a-vector-using-group_split" class="level3">
<h3 class="anchored" data-anchor-id="example-3-splitting-a-vector-using-group_split">Example 3: Splitting a Vector using <code>group_split()</code></h3>
<p><code>group_split()</code> is another handy function from <code>dplyr</code> to split data into groups.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb5-2">chunk_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-3">split_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> chunk_size)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_split</span>(group)</span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(split_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;list_of&lt;
  tbl_df&lt;
    .    : integer
    group: double
  &gt;
&gt;[4]&gt;
[[1]]
# A tibble: 3 × 2
      . group
  &lt;int&gt; &lt;dbl&gt;
1     1     1
2     2     1
3     3     1

[[2]]
# A tibble: 3 × 2
      . group
  &lt;int&gt; &lt;dbl&gt;
1     4     2
2     5     2
3     6     2

[[3]]
# A tibble: 3 × 2
      . group
  &lt;int&gt; &lt;dbl&gt;
1     7     3
2     8     3
3     9     3

[[4]]
# A tibble: 1 × 2
      . group
  &lt;int&gt; &lt;dbl&gt;
1    10     4</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>as.data.frame()</code>: Converts the vector to a data frame.</li>
<li><code>mutate(group = ceiling(row_number() / chunk_size))</code>: Adds a grouping column.</li>
<li><code>group_split(group)</code>: Splits the data frame into a list of data frames based on the group column.</li>
</ul>
</section>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using <code>data.table</code></h2>
<p><code>data.table</code> is known for its efficiency with large datasets. Here’s how you can split a vector using <code>data.table</code>.</p>
<section id="example-4-splitting-a-vector-into-chunks" class="level3">
<h3 class="anchored" data-anchor-id="example-4-splitting-a-vector-into-chunks">Example 4: Splitting a Vector into Chunks</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb7-2"></span>
<span id="cb7-3">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb7-4">chunk_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb7-5">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)</span>
<span id="cb7-6">dt[, group <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling</span>(.I <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> chunk_size)]</span>
<span id="cb7-7">split_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[, .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">chunk =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(x)), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> group]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>chunk</span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(split_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1 2 3

[[2]]
[1] 4 5 6

[[3]]
[1] 7 8 9

[[4]]
[1] 10</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>data.table(x = x)</code>: Converts the vector to a <code>data.table</code>.</li>
<li><code>group := ceiling(.I / chunk_size)</code>: Creates a group column using the row index <code>.I</code>.</li>
<li><code>.(chunk = list(x)), by = group</code>: Groups by the group column and creates list columns.</li>
<li><code>$chunk</code>: Extracts the list column.</li>
</ul>
</section>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>These examples illustrate different ways to split vectors into chunks in R using base R, <code>dplyr</code>, and <code>data.table</code>. Each method has its own strengths, and you might prefer one over the others depending on your workflow and dataset size. Try these methods on your own data and see how they work for you. Experimenting with different chunk sizes and vector lengths can also help you understand the mechanics behind each approach better.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-21/</guid>
  <pubDate>Tue, 21 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Remove Specific Elements from a Vector in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-20/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Working with vectors is one of the fundamental aspects of R programming. Sometimes, you need to remove specific elements from a vector to clean your data or prepare it for analysis. This post will guide you through several methods to achieve this, using base R, <code>dplyr</code>, and <code>data.table</code>. We’ll look at examples for both numeric and character vectors and explain the code in a straightforward manner. By the end, you’ll have a clear understanding of how to manipulate your vectors efficiently. Let’s dive in!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>Base R provides straightforward methods to remove elements from vectors. Let’s start with some examples.</p>
<section id="numeric-vector" class="level3">
<h3 class="anchored" data-anchor-id="numeric-vector">Numeric Vector</h3>
<p>Suppose you have a numeric vector and you want to remove specific numbers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a numeric vector</span></span>
<span id="cb1-2">numeric_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the numbers 3 and 7</span></span>
<span id="cb1-5">numeric_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> numeric_vec[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>numeric_vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)]</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the updated vector</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 4 5 6 8 9</code></pre>
</div>
</div>
<p><strong>Explanation</strong>: - <code>numeric_vec %in% c(3, 7)</code> checks if each element in <code>numeric_vec</code> is in the set of numbers {3, 7}. - <code>!numeric_vec %in% c(3, 7)</code> negates the condition, giving <code>TRUE</code> for elements not in {3, 7}. - <code>numeric_vec[!]</code> selects the elements that meet the condition.</p>
</section>
<section id="character-vector" class="level3">
<h3 class="anchored" data-anchor-id="character-vector">Character Vector</h3>
<p>Now let’s work with a character vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a character vector</span></span>
<span id="cb3-2">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elderberry"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove "banana" and "date"</span></span>
<span id="cb3-5">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> char_vec[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>char_vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>)]</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the updated vector</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(char_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"      "cherry"     "elderberry"</code></pre>
</div>
</div>
<p>The process is similar: we use logical indexing to exclude the unwanted elements.</p>
</section>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>The <code>dplyr</code> package is part of the tidyverse and provides powerful tools for data manipulation. While it is often used with data frames, we can also use it to work with vectors by converting them to tibbles.</p>
<section id="numeric-vector-1" class="level3">
<h3 class="anchored" data-anchor-id="numeric-vector-1">Numeric Vector</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a numeric vector</span></span>
<span id="cb5-4">numeric_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to tibble</span></span>
<span id="cb5-7">numeric_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> numeric_vec)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the numbers 3 and 7</span></span>
<span id="cb5-10">numeric_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> numeric_tibble <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the updated vector</span></span>
<span id="cb5-14">numeric_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(numeric_tibble, value)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the updated vector</span></span>
<span id="cb5-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 4 5 6 8 9</code></pre>
</div>
</div>
<p><strong>Explanation</strong>: - Convert the vector to a tibble. - Use <code>filter(!value %in% c(3, 7))</code> to remove rows where the value is in {3, 7}. - Use <code>pull</code> to convert the tibble back to a vector.</p>
</section>
<section id="character-vector-1" class="level3">
<h3 class="anchored" data-anchor-id="character-vector-1">Character Vector</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a character vector</span></span>
<span id="cb7-2">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elderberry"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to tibble</span></span>
<span id="cb7-5">char_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> char_vec)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove "banana" and "date"</span></span>
<span id="cb7-8">char_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> char_tibble <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>))</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the updated vector</span></span>
<span id="cb7-12">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(char_tibble, value)</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the updated vector</span></span>
<span id="cb7-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(char_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"      "cherry"     "elderberry"</code></pre>
</div>
</div>
<p>The <code>filter</code> function from <code>dplyr</code> allows for efficient removal of unwanted elements.</p>
</section>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using data.table</h2>
<p>The <code>data.table</code> package is known for its speed and efficiency, especially with large datasets. Let’s see how we can use it to remove elements from vectors.</p>
<section id="numeric-vector-2" class="level3">
<h3 class="anchored" data-anchor-id="numeric-vector-2">Numeric Vector</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a numeric vector</span></span>
<span id="cb9-4">numeric_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb9-7">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> numeric_vec)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the numbers 3 and 7</span></span>
<span id="cb9-10">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)]</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the updated vector</span></span>
<span id="cb9-13">numeric_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the updated vector</span></span>
<span id="cb9-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 4 5 6 8 9</code></pre>
</div>
</div>
<p><strong>Explanation</strong>: - We convert the vector to a <code>data.table</code> object. - Use the <code>!value %in% c(3, 7)</code> condition within the <code>[]</code> to filter the table. - Extract the updated vector using <code>dt$value</code>.</p>
</section>
<section id="character-vector-2" class="level3">
<h3 class="anchored" data-anchor-id="character-vector-2">Character Vector</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a character vector</span></span>
<span id="cb11-2">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elderberry"</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb11-5">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> char_vec)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove "banana" and "date"</span></span>
<span id="cb11-8">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>)]</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the updated vector</span></span>
<span id="cb11-11">char_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the updated vector</span></span>
<span id="cb11-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(char_vec)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"      "cherry"     "elderberry"</code></pre>
</div>
</div>
<p>Using <code>data.table</code> involves a few more steps, but it is very efficient, especially with large vectors.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Removing specific elements from vectors is a common task in data manipulation. Whether you prefer using base R, <code>dplyr</code>, or <code>data.table</code>, each method offers a straightforward way to achieve this. Try these examples with your own data and see which method you find most intuitive.</p>
<p>Happy coding! Feel free to share your experiences and any questions you have in the comments below.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-20/</guid>
  <pubDate>Mon, 20 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering gregexpr() in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-17/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’ve ever worked with text data in R, you know how important it is to have powerful tools for pattern matching. One such tool is the <code>gregexpr()</code> function. This function is incredibly useful when you need to find all occurrences of a pattern within a string. Today, we’ll go into how <code>gregexpr()</code> works, explore its syntax, and go through several examples to make things clear.</p>
</section>
<section id="understanding-gregexpr-syntax" class="level1">
<h1>Understanding <code>gregexpr()</code> Syntax</h1>
<p>The <code>gregexpr()</code> function stands for “global regular expression,” and it’s designed to locate all matches of a pattern within a text string. Here’s the basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(</span>
<span id="cb1-2">  pattern, </span>
<span id="cb1-3">  text, </span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useBytes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-8">  )</span></code></pre></div>
<ul>
<li><strong>pattern</strong>: The regular expression pattern you want to search for.</li>
<li><strong>text</strong>: The text string or vector of text strings to be searched.</li>
<li><strong>ignore.case</strong>: A logical value indicating whether to ignore case. Default is <code>FALSE</code>.</li>
<li><strong>perl</strong>: A logical value indicating whether to use Perl-compatible regex. Default is <code>FALSE</code>.</li>
<li><strong>fixed</strong>: A logical value indicating whether the pattern is a fixed string. Default is <code>FALSE</code>.</li>
<li><strong>useBytes</strong>: A logical value indicating whether to perform byte-by-byte matching. Default is <code>FALSE</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="example-1-basic-usage">Example 1: Basic Usage</h2>
<p>Let’s start with a simple example. Suppose we want to find all occurrences of the letter “a” in the string “banana”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span></span>
<span id="cb2-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb2-3">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(pattern, text)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(matches)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 2 4 6
attr(,"match.length")
[1] 1 1 1
attr(,"index.type")
[1] "chars"
attr(,"useBytes")
[1] TRUE</code></pre>
</div>
</div>
<p>This will return a list with the starting positions of each match. Here, the numbers <code>2</code>, <code>4</code>, and <code>6</code> indicate the positions of “a” in the string “banana”.</p>
</section>
<section id="example-2-ignoring-case" class="level2">
<h2 class="anchored" data-anchor-id="example-2-ignoring-case">Example 2: Ignoring Case</h2>
<p>What if we want to search for the pattern without considering case? We can set <code>ignore.case = TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BaNaNa"</span></span>
<span id="cb4-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb4-3">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(pattern, text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(matches)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 2 4 6
attr(,"match.length")
[1] 1 1 1
attr(,"index.type")
[1] "chars"
attr(,"useBytes")
[1] TRUE</code></pre>
</div>
</div>
<p>Even though our string has uppercase “A” and lowercase “a”, the function treats them the same because we set <code>ignore.case = TRUE</code>.</p>
</section>
<section id="example-3-using-perl-compatible-regex" class="level2">
<h2 class="anchored" data-anchor-id="example-3-using-perl-compatible-regex">Example 3: Using Perl-Compatible Regex</h2>
<p>Sometimes, we need more advanced pattern matching. By setting <code>perl = TRUE</code>, we can use Perl-compatible regular expressions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cat, bat, rat"</span></span>
<span id="cb6-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[bcr]at"</span></span>
<span id="cb6-3">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(pattern, text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(matches)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1]  1  6 11
attr(,"match.length")
[1] 3 3 3
attr(,"index.type")
[1] "chars"
attr(,"useBytes")
[1] TRUE</code></pre>
</div>
</div>
<p>This will find all occurrences of “bat”, “cat”, and “rat”. The positions <code>1</code>, <code>6</code>, and <code>11</code> correspond to the starting positions of “cat”, “bat”, and “rat” respectively.</p>
</section>
<section id="example-4-fixed-string-matching" class="level2">
<h2 class="anchored" data-anchor-id="example-4-fixed-string-matching">Example 4: Fixed String Matching</h2>
<p>If you want to search for a fixed substring rather than a regex pattern, set <code>fixed = TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"batman and catwoman"</span></span>
<span id="cb8-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"man"</span></span>
<span id="cb8-3">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(pattern, text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(matches)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1]  4 17
attr(,"match.length")
[1] 3 3
attr(,"index.type")
[1] "chars"
attr(,"useBytes")
[1] TRUE</code></pre>
</div>
</div>
<p>This will match the substring “man” exactly. The output will show the starting positions of each match along with the length of the match.</p>
</section>
<section id="example-5-extracting-matches" class="level2">
<h2 class="anchored" data-anchor-id="example-5-extracting-matches">Example 5: Extracting Matches</h2>
<p>You can extract the matched substrings using the <code>regmatches()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple, banana, cherry"</span></span>
<span id="cb10-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[a-z]{5}"</span></span>
<span id="cb10-3">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(pattern, text)</span>
<span id="cb10-4">extracted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">regmatches</span>(text, matches)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(extracted)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "apple" "banan" "cherr"</code></pre>
</div>
</div>
<p>This will extract all substrings of length 5 from the text. The output will be a list of the matched substrings.</p>
</section>
</section>
<section id="wrapping-up" class="level1">
<h1>Wrapping Up</h1>
<p>The <code>gregexpr()</code> function is a powerful tool for pattern matching in R. With its flexibility and various options, you can tailor it to fit your needs perfectly. Try using it in your own projects and see how it can simplify your text processing tasks.</p>
<p>Feel free to experiment with different patterns and options. The best way to get comfortable with <code>gregexpr()</code> is by practicing.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-17/</guid>
  <pubDate>Fri, 17 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Counting Words in a String in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-16/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Counting words in a string is a common task in data manipulation and text analysis. Whether you’re parsing tweets, analyzing survey responses, or processing any textual data, knowing how to count words is crucial. In this post, we’ll explore three ways to achieve this in R: using base R’s <code>strsplit()</code>, the <code>stringr</code> package, and the <code>stringi</code> package. We’ll provide clear examples and explanations to help you get started.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="counting-words-using-base-rs-strsplit" class="level2">
<h2 class="anchored" data-anchor-id="counting-words-using-base-rs-strsplit">Counting Words Using Base R’s <code>strsplit()</code></h2>
<p>Base R provides a straightforward way to split strings and count words using the <code>strsplit()</code> function. Here’s a simple example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a string</span></span>
<span id="cb1-2">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R is a powerful language for data analysis."</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the string into words</span></span>
<span id="cb1-5">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count the words</span></span>
<span id="cb1-8">word_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(words)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-11">word_count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>Define a String</strong>: We start with a string, <code>text</code>.</li>
<li><strong>Split the String</strong>: The <code>strsplit()</code> function splits the string into words based on whitespace (<code>\\s+</code>).</li>
<li><strong>Count the Words</strong>: We use <code>length()</code> to count the elements in the resulting vector, which represents the words.</li>
</ol>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(x, split, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useBytes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><code>x</code>: Character vector or string to be split.</li>
<li><code>split</code>: Regular expression or string to split by.</li>
<li><code>fixed</code>: Logical, if <code>TRUE</code>, <code>split</code> is a fixed string, not a regular expression.</li>
<li><code>perl</code>: Logical, if <code>TRUE</code>, <code>perl = TRUE</code> enables Perl-compatible regexps.</li>
<li><code>useBytes</code>: Logical, if <code>TRUE</code>, use byte-wise splitting.</li>
</ul>
<p>Try modifying the <code>text</code> variable to see how the word count changes!</p>
</section>
<section id="counting-words-using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="counting-words-using-stringr">Counting Words Using <code>stringr</code></h2>
<p>The <code>stringr</code> package provides a more readable and convenient approach to string manipulation. To use <code>stringr</code>, you’ll need to install and load the package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install stringr if you haven't already</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("stringr")</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringr package</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a string</span></span>
<span id="cb4-8">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R makes text manipulation easy and fun."</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the string into words</span></span>
<span id="cb4-11">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count the words</span></span>
<span id="cb4-14">word_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(words)</span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb4-17">word_count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>Load the Package</strong>: After installing and loading <code>stringr</code>, we define our string, <code>text</code>.</li>
<li><strong>Split the String</strong>: We use <code>str_split()</code> to split the string into words.</li>
<li><strong>Count the Words</strong>: The <code>length()</code> function counts the number of words.</li>
</ol>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_split</span>(string, pattern, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><code>string</code>: Input character vector.</li>
<li><code>pattern</code>: Pattern to split by (regular expression).</li>
<li><code>n</code>: Maximum number of pieces to return.</li>
<li><code>simplify</code>: Logical, if <code>TRUE</code>, return a matrix with elements.</li>
</ul>
<p>The <code>stringr</code> package makes the code more intuitive and easier to read. Experiment with different strings to get comfortable with <code>str_split()</code>.</p>
</section>
<section id="counting-words-using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="counting-words-using-stringi">Counting Words Using <code>stringi</code></h2>
<p>The <code>stringi</code> package is known for its powerful and efficient string manipulation functions. Here’s how to use it to count words:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install stringi if you haven't already</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("stringi")</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the stringi package</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a string</span></span>
<span id="cb7-8">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Learning R can be a rewarding experience."</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the string into words</span></span>
<span id="cb7-11">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_split_regex</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s+"</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count the words</span></span>
<span id="cb7-14">word_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(words)</span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-17">word_count</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ol type="1">
<li><strong>Load the Package</strong>: Install and load the <code>stringi</code> package.</li>
<li><strong>Split the String</strong>: Use <code>stri_split_regex()</code> to split the string based on whitespace.</li>
<li><strong>Count the Words</strong>: Count the words using <code>length()</code>.</li>
</ol>
<p><strong>Syntax:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_split_regex</span>(str, pattern, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">omit_empty =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb9-2">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tokens_only =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><code>str</code>: Input character vector.</li>
<li><code>pattern</code>: Regular expression pattern.</li>
<li><code>n</code>: Maximum number of pieces.</li>
<li><code>omit_empty</code>: Logical, if <code>TRUE</code>, remove empty strings from the output.</li>
<li><code>tokens_only</code>: Logical, if <code>TRUE</code>, return tokens.</li>
<li><code>simplify</code>: Logical, if <code>TRUE</code>, return a matrix with elements.</li>
</ul>
<p>The <code>stringi</code> package offers high performance and is great for handling large datasets or complex text manipulations. Give it a try with different text inputs to see its efficiency in action.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Counting words in a string is a fundamental task in text analysis, and R provides multiple ways to accomplish this. We’ve explored three methods: base R’s <code>strsplit()</code>, <code>stringr</code>, and <code>stringi</code>. Each method has its strengths, and you can choose the one that best fits your needs.</p>
<p>Feel free to experiment with these examples and try counting words in your own strings. By practicing, you’ll become more comfortable with string manipulation in R, opening the door to more advanced text analysis techniques.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-16/</guid>
  <pubDate>Thu, 16 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Select Columns Containing a Specific String in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-15/</link>
  <description><![CDATA[ 





<section id="how-to-select-columns-containing-a-specific-string-in-r" class="level1">
<h1>How to Select Columns Containing a Specific String in R</h1>
<p>Today I want to discuss a common task in data manipulation: selecting columns containing a specific string. Whether you’re working with base R or popular packages like <code>stringr</code>, <code>stringi</code>, or <code>dplyr</code>, I’ll show you how to efficiently achieve this. We’ll cover various methods and provide clear examples to help you understand each approach. Let’s get started!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<section id="example-1-using-grep" class="level3">
<h3 class="anchored" data-anchor-id="example-1-using-grep">Example 1: Using <code>grep</code></h3>
<p>In base R, the <code>grep</code> function is your friend. It searches for patterns in a character vector and returns the indices of the matching elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">apple_price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orange_price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">banana_weight =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">grape_weight =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select columns containing "price"</span></span>
<span id="cb1-10">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df))</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cols)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, cols]</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_price)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  apple_price orange_price
1           1            4
2           2            5
3           3            6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using value = TRUE to return column names</span></span>
<span id="cb5-2">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cols)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple_price"  "orange_price"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">df_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, cols]</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_price)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  apple_price orange_price
1           1            4
2           2            5
3           3            6</code></pre>
</div>
</div>
<p>In this example, we use <code>grep</code> to search for the string “price” in the column names. The <code>value = TRUE</code> argument returns the names of the matching columns instead of their indices. We then use these names to subset the data frame.</p>
</section>
<section id="example-2-using-grepl" class="level3">
<h3 class="anchored" data-anchor-id="example-2-using-grepl">Example 2: Using <code>grepl</code></h3>
<p><code>grepl</code> is another useful function that returns a logical vector indicating whether the pattern was found.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select columns containing "weight"</span></span>
<span id="cb9-2">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df))</span>
<span id="cb9-3">df_weight <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, cols]</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_weight)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  banana_weight grape_weight
1             7           10
2             8           11
3             9           12</code></pre>
</div>
</div>
<p>Here, <code>grepl</code> checks each column name for the string “weight” and returns a logical vector. We use this vector to subset the data frame.</p>
</section>
</section>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using <code>stringr</code></h2>
<p>The <code>stringr</code> package provides a set of convenient functions for string manipulation. Let’s see how to use it for our task.</p>
<section id="example-3-using-str_detect" class="level3">
<h3 class="anchored" data-anchor-id="example-3-using-str_detect">Example 3: Using <code>str_detect</code></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select columns containing "price"</span></span>
<span id="cb11-4">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>)</span>
<span id="cb11-5">df_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, cols]</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_price)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  apple_price orange_price
1           1            4
2           2            5
3           3            6</code></pre>
</div>
</div>
<p><code>str_detect</code> checks each column name for the presence of the string “price” and returns a logical vector, which we use to subset the data frame.</p>
</section>
</section>
<section id="using-stringi" class="level2">
<h2 class="anchored" data-anchor-id="using-stringi">Using <code>stringi</code></h2>
<p><code>stringi</code> is another powerful package for string manipulation. It offers a variety of functions for pattern matching.</p>
<section id="example-4-using-stri_detect_fixed" class="level3">
<h3 class="anchored" data-anchor-id="example-4-using-stri_detect_fixed">Example 4: Using <code>stri_detect_fixed</code></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringi)</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select columns containing "weight"</span></span>
<span id="cb13-4">cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stri_detect_fixed</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>)</span>
<span id="cb13-5">df_weight <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, cols]</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_weight)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  banana_weight grape_weight
1             7           10
2             8           11
3             9           12</code></pre>
</div>
</div>
<p><code>stri_detect_fixed</code> is similar to <code>str_detect</code> but comes from the <code>stringi</code> package. It checks for the fixed pattern “weight” and returns a logical vector.</p>
</section>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using <code>dplyr</code></h2>
<p><code>dplyr</code> is a popular package for data manipulation. It provides a straightforward way to select columns based on their names.</p>
<section id="example-5-using-select-with-contains" class="level3">
<h3 class="anchored" data-anchor-id="example-5-using-select-with-contains">Example 5: Using <code>select</code> with <code>contains</code></h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select columns containing "price"</span></span>
<span id="cb15-4">df_price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>))</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_price)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  apple_price orange_price
1           1            4
2           2            5
3           3            6</code></pre>
</div>
</div>
<p>The <code>select</code> function combined with <code>contains</code> makes it easy to select columns that include the string “price”. This approach is highly readable and concise.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We’ve covered several methods to select columns containing a specific string in R using base R, <code>stringr</code>, <code>stringi</code>, and <code>dplyr</code>. Each method has its strengths, so choose the one that best fits your needs and coding style.</p>
<p>Feel free to experiment with these examples on your own data sets. Understanding these techniques will enhance your data manipulation skills and make your code more efficient and readable. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-15/</guid>
  <pubDate>Wed, 15 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking if Multiple Columns are Equal in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-14/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with data in R, you might need to check if values across multiple columns are equal. This is a common task in data cleaning and preprocessing. In this blog, I’ll show you how to do this using base R, <code>dplyr</code>, and <code>data.table</code>. Let’s dive into some examples that demonstrate how to check if every column in a row is equal or if specific columns are equal.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r" class="level2">
<h2 class="anchored" data-anchor-id="base-r">Base R</h2>
<p>Let’s start with a simple data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-5">)</span></code></pre></div>
</div>
<section id="check-if-all-columns-in-a-row-are-equal" class="level3">
<h3 class="anchored" data-anchor-id="check-if-all-columns-in-a-row-are-equal">Check if All Columns in a Row are Equal</h3>
<p>To check if all columns in a row are equal, you can use the <code>apply</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>AllEqual <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C AllEqual
1 1 1 1     TRUE
2 2 2 2     TRUE
3 3 3 3     TRUE
4 4 5 4    FALSE</code></pre>
</div>
</div>
<p>Here’s what the code does: - <code>apply(df, 1, ...)</code> applies a function to each row of the data frame. - <code>function(row) all(row == row[1])</code> checks if all elements in the row are equal to the first element of the row.</p>
</section>
<section id="check-if-specific-columns-are-equal" class="level3">
<h3 class="anchored" data-anchor-id="check-if-specific-columns-are-equal">Check if Specific Columns are Equal</h3>
<p>To check if specific columns are equal, you can do something similar:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ABEqual <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>B</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C AllEqual ABEqual
1 1 1 1     TRUE    TRUE
2 2 2 2     TRUE    TRUE
3 3 3 3     TRUE    TRUE
4 4 5 4    FALSE   FALSE</code></pre>
</div>
</div>
<p>This code creates a new column <code>ABEqual</code> that is <code>TRUE</code> if columns <code>A</code> and <code>B</code> are equal, and <code>FALSE</code> otherwise.</p>
</section>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using <code>dplyr</code></h2>
<p>Now let’s see how to do the same tasks using <code>dplyr</code>, a popular package for data manipulation.</p>
<p>First, install and load the package if you haven’t already:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("dplyr")</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</div>
<section id="check-if-all-columns-in-a-row-are-equal-1" class="level3">
<h3 class="anchored" data-anchor-id="check-if-all-columns-in-a-row-are-equal-1">Check if All Columns in a Row are Equal</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">AllEqual =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(</span>
<span id="cb7-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c_across</span>(</span>
<span id="cb7-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">first</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c_across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()))</span>
<span id="cb7-6">    )</span>
<span id="cb7-7">  )</span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
# Rowwise: 
      A     B     C AllEqual ABEqual
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;    &lt;lgl&gt;  
1     1     1     1 TRUE     TRUE   
2     2     2     2 FALSE    TRUE   
3     3     3     3 FALSE    TRUE   
4     4     5     4 FALSE    FALSE  </code></pre>
</div>
</div>
<p>Here’s a breakdown: - <code>rowwise()</code> groups the data frame by rows, allowing row-wise operations. - <code>mutate(AllEqual = all(c_across(everything()) == first(c_across(everything()))))</code> creates a new column <code>AllEqual</code> that checks if all values in the row are the same.</p>
</section>
<section id="check-if-specific-columns-are-equal-1" class="level3">
<h3 class="anchored" data-anchor-id="check-if-specific-columns-are-equal-1">Check if Specific Columns are Equal</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ABEqual =</span> A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> B)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 5
# Rowwise: 
      A     B     C AllEqual ABEqual
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;    &lt;lgl&gt;  
1     1     1     1 TRUE     TRUE   
2     2     2     2 FALSE    TRUE   
3     3     3     3 FALSE    TRUE   
4     4     5     4 FALSE    FALSE  </code></pre>
</div>
</div>
<p>This code creates a new column <code>ABEqual</code> in the same way as in base R.</p>
</section>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using <code>data.table</code></h2>
<p>Finally, let’s use <code>data.table</code>, another powerful package for data manipulation. Install and load the package if needed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("data.table")</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span></code></pre></div>
</div>
<p>Convert the data frame to a data table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span></code></pre></div>
</div>
<section id="check-if-all-columns-in-a-row-are-equal-2" class="level3">
<h3 class="anchored" data-anchor-id="check-if-all-columns-in-a-row-are-equal-2">Check if All Columns in a Row are Equal</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">dt[, AllEqual <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.SD, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))]</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       A     B     C AllEqual ABEqual
   &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;lgcl&gt;  &lt;lgcl&gt;
1:     1     1     1     TRUE    TRUE
2:     2     2     2    FALSE    TRUE
3:     3     3     3    FALSE    TRUE
4:     4     5     4    FALSE   FALSE</code></pre>
</div>
</div>
<ul>
<li><code>.SD</code> refers to the subset of the data table.</li>
<li><code>apply(.SD, 1, function(row) all(row == row[1]))</code> applies the function row-wise to check equality.</li>
</ul>
</section>
<section id="check-if-specific-columns-are-equal-2" class="level3">
<h3 class="anchored" data-anchor-id="check-if-specific-columns-are-equal-2">Check if Specific Columns are Equal</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">dt[, ABEqual <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> A <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> B]</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       A     B     C AllEqual ABEqual
   &lt;num&gt; &lt;num&gt; &lt;num&gt;   &lt;lgcl&gt;  &lt;lgcl&gt;
1:     1     1     1     TRUE    TRUE
2:     2     2     2    FALSE    TRUE
3:     3     3     3    FALSE    TRUE
4:     4     5     4    FALSE   FALSE</code></pre>
</div>
</div>
<p>This creates a new column <code>ABEqual</code> just like in the previous examples.</p>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Checking if multiple columns are equal is straightforward in R, whether you use base R, <code>dplyr</code>, or <code>data.table</code>. Each method has its advantages, and you can choose based on your preference or the specific needs of your project. I encourage you to try these examples on your own data and see how they work. Experimenting with different datasets can help you become more comfortable with these techniques.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-14/</guid>
  <pubDate>Tue, 14 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if a Column Exists in a Data Frame in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-13/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with data frames in R, it’s common to need to check whether a specific column exists. This is particularly useful in data cleaning and preprocessing, to ensure your scripts don’t throw errors if a column is missing. Today, we’ll explore several methods to perform this check efficiently in R, and I encourage you to try these methods out with your own data sets.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-using-the-in-operator" class="level2">
<h2 class="anchored" data-anchor-id="example-1-using-the-in-operator">Example 1: Using the <code>%in%</code> Operator</h2>
<p>The <code>%in%</code> operator is one of the simplest ways to check if a column exists in a data frame. This operator checks for membership and returns <code>TRUE</code> if the specified item is found in the given vector or list.</p>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if 'age' column exists</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation:</h3>
<p>In this code, <code>names(df)</code> retrieves a vector of the column names from the data frame <code>df</code>. The <code>%in%</code> operator then checks whether <code>"age"</code> is one of the elements in this vector. If <code>"age"</code> exists, it returns <code>TRUE</code>; otherwise, it returns <code>FALSE</code>.</p>
</section>
</section>
<section id="example-2-using-the-colnames-function" class="level2">
<h2 class="anchored" data-anchor-id="example-2-using-the-colnames-function">Example 2: Using the <code>colnames()</code> Function</h2>
<p>The <code>colnames()</code> function is another straightforward approach to check for the presence of a column in a data frame. It is very similar to using <code>names()</code> but specifically designed to handle the column names.</p>
<section id="example-code" class="level3">
<h3 class="anchored" data-anchor-id="example-code">Example Code:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if 'salary' column exists</span></span>
<span id="cb3-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"salary"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
</section>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation:</h3>
<p>This example checks if the <code>"salary"</code> column exists in <code>df</code>. <code>colnames(df)</code> gives us the column names, and <code>"salary" %in% colnames(df)</code> evaluates to <code>FALSE</code> since there is no <code>salary</code> column in our sample data frame.</p>
</section>
</section>
<section id="example-3-using-the-exists-function-with-within" class="level2">
<h2 class="anchored" data-anchor-id="example-3-using-the-exists-function-with-within">Example 3: Using the <code>exists()</code> Function with <code>within()</code></h2>
<p>For a more dynamic approach, especially when dealing with environments or complex expressions, <code>exists()</code> can be used in combination with <code>within()</code>. This is a bit more advanced but quite powerful.</p>
<section id="example-code-1" class="level3">
<h3 class="anchored" data-anchor-id="example-code-1">Example Code:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if 'age' column exists using exists() within df</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation:</h3>
<p>Here, <code>exists()</code> checks if <code>"age"</code> exists within the local environment created by <code>within(df, list())</code>. This method is particularly useful when you want to evaluate the existence of a column dynamically within a certain scope or environment.</p>
</section>
</section>
<section id="example-4-using-the-grepl-function" class="level2">
<h2 class="anchored" data-anchor-id="example-4-using-the-grepl-function">Example 4: Using the <code>grepl()</code> Function</h2>
<p>The <code>grepl()</code> function can be utilized for pattern matching, which can also serve to check column names if you’re looking for names that match a specific pattern.</p>
<section id="example-code-2" class="level3">
<h3 class="anchored" data-anchor-id="example-code-2">Example Code:</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for partial matches, e.g., any column name containing 'ag'</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ag"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
<section id="explanation-3" class="level3">
<h3 class="anchored" data-anchor-id="explanation-3">Explanation:</h3>
<p><code>grepl("ag", colnames(df))</code> returns a logical vector indicating which column names contain <code>"ag"</code>. The <code>any()</code> function then checks if there is at least one <code>TRUE</code> in the vector, indicating at least one column name contains the pattern.</p>
</section>
</section>
<section id="your-turn" class="level2">
<h2 class="anchored" data-anchor-id="your-turn">Your Turn!</h2>
<p>These methods provide robust ways to verify the presence of columns in your data frames in R. Whether you are a novice or more experienced with R, experimenting with these techniques on your own datasets can help solidify your understanding and potentially reveal more about your data’s structure.</p>
<p>Remember, the more you practice, the more intuitive these checks will become, allowing you to handle data more efficiently and effectively. So, go ahead and try these methods out with different datasets and see how they work for you!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-13/</guid>
  <pubDate>Mon, 13 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if a Column Contains a String in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-10/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Whether you’re doing some data cleaning or exploring your dataset, checking if a column contains a specific string can be a crucial task. Today, I’ll show you how to do this using both <code>str_detect()</code> from the <strong>stringr</strong> package and base R methods. We’ll also tackle finding partial strings and counting occurrences. Let’s dive right in!</p>
</section>
<section id="using-str_detect-from-stringr" class="level1">
<h1>Using <code>str_detect</code> from <strong>stringr</strong></h1>
<p>First, we’ll use the <code>str_detect</code> function. The <code>stringr</code> package is part of the <strong>tidyverse</strong> collection, which brings a set of user-friendly functions to text manipulation. We’ll start by ensuring it’s installed and loaded:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stringr"</span>)</span></code></pre></div>
<p>Now, let’s create a sample dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(stringr)</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb2-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carol"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dave"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">description =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Software developer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data analyst"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UX designer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project manager"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data scientist"</span>)</span>
<span id="cb2-6">)</span>
<span id="cb2-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name        description
1 Alice Software developer
2   Bob       Data analyst
3 Carol        UX designer
4  Dave    Project manager
5   Eve     Data scientist</code></pre>
</div>
</div>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-stringr" class="level2">
<h2 class="anchored" data-anchor-id="using-stringr">Using stringr</h2>
<section id="check-for-full-string" class="level3">
<h3 class="anchored" data-anchor-id="check-for-full-string">Check for Full String</h3>
<p>Suppose we want to check if any of the <code>description</code> column contains “Data analyst”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Detect if 'description' contains 'Data analyst'</span></span>
<span id="cb4-2">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>has_data_analyst <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>description, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data analyst"</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name        description has_data_analyst
1 Alice Software developer            FALSE
2   Bob       Data analyst             TRUE
3 Carol        UX designer            FALSE
4  Dave    Project manager            FALSE
5   Eve     Data scientist            FALSE</code></pre>
</div>
</div>
<p>In the output, the <code>has_data_analyst</code> column will be <code>TRUE</code> for “Bob” and <code>FALSE</code> for others.</p>
</section>
<section id="check-for-partial-string" class="level3">
<h3 class="anchored" data-anchor-id="check-for-partial-string">Check for Partial String</h3>
<p>Let’s expand our search to any string containing “Data”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Detect if 'description' contains any word with 'Data'</span></span>
<span id="cb6-2">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>has_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>description, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name        description has_data_analyst has_data
1 Alice Software developer            FALSE    FALSE
2   Bob       Data analyst             TRUE     TRUE
3 Carol        UX designer            FALSE    FALSE
4  Dave    Project manager            FALSE    FALSE
5   Eve     Data scientist            FALSE     TRUE</code></pre>
</div>
</div>
<p>This will show <code>TRUE</code> for “Bob” and “Eve,” where both “Data analyst” and “Data scientist” are detected.</p>
</section>
<section id="count-occurrences" class="level3">
<h3 class="anchored" data-anchor-id="count-occurrences">Count Occurrences</h3>
<p>If you need to count how many times “Data” appears, use <code>str_count</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count occurrences of 'Data'</span></span>
<span id="cb8-2">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_count</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>description, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data"</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name        description has_data_analyst has_data data_count
1 Alice Software developer            FALSE    FALSE          0
2   Bob       Data analyst             TRUE     TRUE          1
3 Carol        UX designer            FALSE    FALSE          0
4  Dave    Project manager            FALSE    FALSE          0
5   Eve     Data scientist            FALSE     TRUE          1</code></pre>
</div>
</div>
<p>This will add a column <code>data_count</code> with the exact count of occurrences per row.</p>
</section>
</section>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>For those who prefer base R, the <strong>grepl</strong> and <strong>gregexpr</strong> functions can help.</p>
<section id="check-for-full-or-partial-string" class="level3">
<h3 class="anchored" data-anchor-id="check-for-full-or-partial-string">Check for Full or Partial String</h3>
<p><code>grepl</code> is ideal for checking if a string is present:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using grepl for full/partial string detection</span></span>
<span id="cb10-2">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>has_data_grepl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data"</span>, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>description)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name        description has_data_analyst has_data data_count has_data_grepl
1 Alice Software developer            FALSE    FALSE          0          FALSE
2   Bob       Data analyst             TRUE     TRUE          1           TRUE
3 Carol        UX designer            FALSE    FALSE          0          FALSE
4  Dave    Project manager            FALSE    FALSE          0          FALSE
5   Eve     Data scientist            FALSE     TRUE          1           TRUE</code></pre>
</div>
</div>
<p>This will yield the same output as <code>str_detect</code>.</p>
</section>
<section id="count-occurrences-1" class="level3">
<h3 class="anchored" data-anchor-id="count-occurrences-1">Count Occurrences</h3>
<p>For counting occurrences, <code>gregexpr</code> is helpful:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count occurrences using gregexpr</span></span>
<span id="cb12-2">matches <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gregexpr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data"</span>, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>description)</span>
<span id="cb12-3">data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data_count_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(</span>
<span id="cb12-4">  matches, </span>
<span id="cb12-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))</span>
<span id="cb12-6">  )</span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name        description has_data_analyst has_data data_count has_data_grepl
1 Alice Software developer            FALSE    FALSE          0          FALSE
2   Bob       Data analyst             TRUE     TRUE          1           TRUE
3 Carol        UX designer            FALSE    FALSE          0          FALSE
4  Dave    Project manager            FALSE    FALSE          0          FALSE
5   Eve     Data scientist            FALSE     TRUE          1           TRUE
  data_count_base
1               0
2               1
3               0
4               0
5               1</code></pre>
</div>
</div>
<p>This will add a new <code>data_count_base</code> column containing the count of “Data” in each row.</p>
</section>
</section>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give It a Try!</h1>
<p>The best way to master string detection in R is to experiment with different patterns and datasets. Whether you use <code>str_detect</code>, <code>grepl</code>, or any other approach, you’ll find plenty of ways to customize the search. Try it out with your own datasets, and soon you’ll be searching like a pro!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-10/</guid>
  <pubDate>Fri, 10 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Collapse Text by Group in a Data Frame Using R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-09/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with data frames in R, you may often encounter scenarios where you need to collapse or concatenate text values based on groups within your dataset. This could involve combining text from multiple rows into a single row per group, which can be useful for summarizing data or preparing it for further analysis. In this post, we’ll explore how to achieve this task using different methods in R—specifically using <code>base R</code>, the <code>dplyr</code> package, and the <code>data.table</code> package.</p>
</section>
<section id="example-data" class="level1">
<h1>Example Data</h1>
<p>Let’s start with an example dataset. Suppose we have a data frame <code>df</code> containing information about sales transactions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">CustomerID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Peach"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grapes"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Quantity =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the data frame</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  CustomerID Product Quantity
1          1   Apple        2
2          1  Orange        3
3          2  Banana        1
4          2   Peach        2
5          3  Grapes        1</code></pre>
</div>
</div>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>In base R, you can use <code>aggregate()</code> to collapse text values by group. Let’s say we want to collapse the <code>Product</code> column by <code>CustomerID</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collapse text by CustomerID using base R</span></span>
<span id="cb3-2">collapsed_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aggregate</span>(Product <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> CustomerID, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(collapsed_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  CustomerID       Product
1          1 Apple, Orange
2          2 Banana, Peach
3          3        Grapes</code></pre>
</div>
</div>
<p>Here, we used <code>aggregate()</code> to group the <code>Product</code> column by <code>CustomerID</code> and applied a custom function to concatenate the text values separated by commas.</p>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>The <code>dplyr</code> package provides a concise way to manipulate data frames. We can achieve the same result using <code>dplyr</code>’s <code>group_by()</code> and <code>summarise()</code> functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dplyr package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collapse text by CustomerID using dplyr</span></span>
<span id="cb5-5">collapsed_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(CustomerID) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>))</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(collapsed_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 2
  CustomerID Product      
       &lt;dbl&gt; &lt;chr&gt;        
1          1 Apple, Orange
2          2 Banana, Peach
3          3 Grapes       </code></pre>
</div>
</div>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using data.table</h2>
<p>For larger datasets, the <code>data.table</code> package can offer efficient solutions. Here’s how you can collapse text by group using <code>data.table</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data.table package</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data.frame to data.table</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setDT</span>(df)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collapse text by CustomerID using data.table</span></span>
<span id="cb7-8">collapsed_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> CustomerID]</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(collapsed_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   CustomerID       Product
        &lt;num&gt;        &lt;char&gt;
1:          1 Apple, Orange
2:          2 Banana, Peach
3:          3        Grapes</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we explored different methods to collapse text by group in a data frame using R. Whether you prefer the simplicity of base R, the readability of <code>dplyr</code>, or the efficiency of <code>data.table</code>, each approach allows you to perform this task effectively based on your preference and the size of your dataset.</p>
<p>I encourage you to try these examples with your own datasets and explore further customizations based on your specific needs. Manipulating data in R can be both powerful and intuitive, and mastering these techniques will enhance your data analysis capabilities.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-09/</guid>
  <pubDate>Thu, 09 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Select Columns by Index in R (Using Base R)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-08/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with data frames in R, it’s common to need to select specific columns based on their index positions. This task is straightforward in R, especially with base functions. In this article, we’ll explore how to select columns by their index using simple and effective techniques in base R.</p>
</section>
<section id="understanding-column-indexing" class="level1">
<h1>Understanding Column Indexing</h1>
<p>In R, data frames are structured with rows and columns. Columns can be referred to by their names or their numerical indices. The index of a column in a data frame represents its position from left to right, starting with 1.</p>
</section>
<section id="selecting-columns-by-index" class="level1">
<h1>Selecting Columns by Index</h1>
<p>To select columns by their indices, we can use the square bracket <code>[ ]</code> notation. This notation allows us to specify which columns we want to extract from a data frame based on their index positions.</p>
<p>Let’s dive into some examples.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-selecting-single-column-by-index" class="level2">
<h2 class="anchored" data-anchor-id="example-1-selecting-single-column-by-index">Example 1: Selecting Single Column by Index</h2>
<p>Suppose we have a data frame <code>df</code> with several columns, and we want to select the second column. Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the second column by index (Age)</span></span>
<span id="cb1-9">selected_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_column)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 25 30 28</code></pre>
</div>
</div>
<p>In this code snippet:</p>
<ul>
<li><code>df[, 2]</code> specifies that we want to select all rows (<code>[,]</code>) from the second column (<code>2</code>) of the data frame <code>df</code>.</li>
<li>The result (<code>selected_column</code>) will be a vector containing the values from the “Age” column.</li>
</ul>
</section>
<section id="example-2-selecting-multiple-columns-by-indices" class="level2">
<h2 class="anchored" data-anchor-id="example-2-selecting-multiple-columns-by-indices">Example 2: Selecting Multiple Columns by Indices</h2>
<p>To select multiple columns simultaneously, you can provide a vector of column indices within the square brackets. For instance, if we want to select the first and third columns from <code>df</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the first and third columns by indices (Name and Score)</span></span>
<span id="cb3-2">selected_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_columns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Score
1   Alice    88
2     Bob    92
3 Charlie    75</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>df[, c(1, 3)]</code> selects all rows (<code>[,]</code>) from the first and third columns (<code>c(1, 3)</code>) of the data frame <code>df</code>.</li>
<li>The result (<code>selected_columns</code>) will be a subset of <code>df</code> containing only the “Name” and “Score” columns.</li>
</ul>
</section>
<section id="example-3-selecting-all-columns-except-one" class="level2">
<h2 class="anchored" data-anchor-id="example-3-selecting-all-columns-except-one">Example 3: Selecting All Columns Except One</h2>
<p>If you want to exclude specific columns while selecting all others, you can use negative indexing. For instance, to select all columns except the second one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select all columns except the second one (Age)</span></span>
<span id="cb5-2">selected_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_columns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Score
1   Alice    88
2     Bob    92
3 Charlie    75</code></pre>
</div>
</div>
<p>Here:</p>
<ul>
<li><code>df[, -2]</code> selects all rows (<code>[,]</code>) from <code>df</code>, excluding the second column (<code>-2</code>).</li>
<li>The result (<code>selected_columns</code>) will be a data frame containing columns “Name” and “Score”, excluding “Age”.</li>
</ul>
</section>
</section>
<section id="conclusion-and-challenge" class="level1">
<h1>Conclusion and Challenge</h1>
<p>Selecting columns by index is a fundamental operation in data manipulation with R. By understanding how to use basic indexing techniques, you can efficiently extract and work with specific subsets of your data frames.</p>
<p>I encourage you to experiment with these examples using your own data frames. Try selecting different combinations of columns or excluding specific ones to see how it affects your data subset. This hands-on approach will deepen your understanding and confidence in working with R’s data structures.</p>
<p>Keep exploring, and happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-08/</guid>
  <pubDate>Wed, 08 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Counting NA Values in Each Column: Comparing Methods in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-07/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome back, R enthusiasts! Today, we’re going to explore a fundamental task in data analysis: counting the number of missing (NA) values in each column of a dataset. This might seem straightforward, but there are different ways to achieve this using different packages and methods in R.</p>
<p>Let’s dive right in and compare how to accomplish this task using base R, dplyr, and data.table. Each method has its own strengths and can cater to different preferences and data handling scenarios.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>First up, let’s tackle this using base R functions. We’ll leverage the <code>colSums()</code> function along with <code>is.na()</code> to count NA values in each column of a dataframe.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dataframe</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using base R</span></span>
<span id="cb1-9">na_counts_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df))</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A B C 
1 2 2 </code></pre>
</div>
</div>
<p>In this code snippet, <code>is.na(df)</code> creates a logical matrix indicating NA positions in <code>df</code>. <code>colSums()</code> then sums up the TRUE values (which represent NA) across each column, giving us the count of NAs per column. Simple and effective!</p>
</section>
<section id="using-base-r-with-lapply" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r-with-lapply">Using Base R (with lapply)</h2>
<p>To adapt this method for base R, we can directly apply <code>lapply()</code> to the dataframe (<code>df</code>) to achieve the same result.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using base R and lapply</span></span>
<span id="cb3-2">na_counts_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(df, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$A
[1] 1

$B
[1] 2

$C
[1] 2</code></pre>
</div>
</div>
<p>In this snippet, <code>lapply(df, function(x) sum(is.na(x)))</code> applies the function <code>function(x) sum(is.na(x))</code> to each column of the dataframe (<code>df</code>), resulting in a list of NA counts per column.</p>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>Now, let’s switch gears and utilize the popular <code>dplyr</code> package to achieve the same task in a more streamlined manner.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using dplyr</span></span>
<span id="cb5-4">na_counts_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_all</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.)))</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C
1 1 2 2</code></pre>
</div>
</div>
<p>Here, <code>summarise_all()</code> from <code>dplyr</code> applies the <code>sum(is.na(.))</code> function to each column (<code>.</code> represents each column in this context), providing us with the count of NA values in each. This approach is clean and fits well into a tidyverse workflow.</p>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using data.table</h2>
<p>Last but not least, let’s see how to accomplish this using <code>data.table</code>, a powerful package known for its efficiency with large datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert dataframe to data.table</span></span>
<span id="cb7-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using data.table</span></span>
<span id="cb7-7">na_counts_data_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)))]</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_data_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       A     B     C
   &lt;int&gt; &lt;int&gt; &lt;int&gt;
1:     1     2     2</code></pre>
</div>
</div>
<p>In this snippet, <code>lapply(.SD, function(x) sum(is.na(x)))</code> within <code>data.table</code> allows us to apply the <code>sum(is.na())</code> function to each column (<code>.SD</code> represents the Subset of Data for each group, which in this case is each column).</p>
</section>
</section>
<section id="which-method-to-choose" class="level1">
<h1>Which Method to Choose?</h1>
<p>Now that we’ve explored three different methods to count NA values in each column, you might be wondering which one to use. The answer depends on your preference, the complexity of your dataset, and the packages you’re comfortable working with.</p>
<ul>
<li><strong>Base R</strong> is straightforward and doesn’t require additional packages.</li>
<li><strong>dplyr</strong> is excellent for working within the tidyverse, especially if you’re already using other tidy tools.</li>
<li><strong>data.table</strong> shines with large datasets due to its efficiency and syntax.</li>
</ul>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>I encourage you to try out these methods with your own datasets. Experimenting with different approaches will not only deepen your understanding of R but also empower you to handle data more efficiently.</p>
<p>That’s it for today! I hope you found this comparison helpful. Remember, the best method is the one that suits your specific needs and workflow. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-07/</guid>
  <pubDate>Tue, 07 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Model Selection with TidyDensity: Understanding AIC for Statistical Distributions</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-06/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data analysis and statistics, one of the key challenges is selecting the best model to describe and analyze your data. This decision is crucial because it impacts the accuracy and reliability of your results. Among the many tools available, the Akaike Information Criterion (AIC) stands out as a powerful method for comparing different models and choosing the most suitable one.</p>
<p>Today we will go through an example of model selection using the AIC, specifically focusing on its application to various statistical distributions available in the TidyDensity package. TidyDensity, a part of the healthyverse ecosystem, offers a comprehensive suite of tools for data analysis in R, including functions to compute AIC scores for different probability distributions.</p>
</section>
<section id="what-is-aic" class="level1">
<h1>What is AIC?</h1>
<p>The Akaike Information Criterion (AIC) is a mathematical tool used for model selection. It balances the goodness of fit of a model with its complexity, penalizing overly complex models to prevent overfitting. In simpler terms, AIC helps us choose the most effective model that explains our data without being too complex.</p>
</section>
<section id="exploring-tidydensitys-distribution-functions" class="level1">
<h1>Exploring TidyDensity’s Distribution Functions</h1>
<p>TidyDensity provides a range of utility functions prefixed with <code>util_</code> that calculate the AIC for specific probability distributions. Let’s take a closer look at some of these functions:</p>
<ul>
<li><p><strong>Beta Distribution (<code>util_beta_aic()</code>):</strong> Computes the AIC for a beta distribution, which is often used to model random variables constrained to the interval [0, 1].</p></li>
<li><p><strong>Binomial Distribution (<code>util_binomial_aic()</code>):</strong> Calculates the AIC for a binomial distribution, commonly used to model the number of successes in a fixed number of independent trials.</p></li>
<li><p><strong>Cauchy Distribution (<code>util_cauchy_aic()</code>):</strong> Computes the AIC for a Cauchy distribution, known for its symmetric bell-shaped curve.</p></li>
<li><p><strong>Exponential Distribution (<code>util_exponential_aic()</code>):</strong> Determines the AIC for an exponential distribution, frequently used to model the time between events in a Poisson process.</p></li>
<li><p><strong>Normal Distribution (<code>util_normal_aic()</code>):</strong> Computes the AIC for a normal distribution, which is ubiquitous in statistics due to the central limit theorem.</p></li>
</ul>
<p>These are just a few examples of the distribution-specific AIC functions available in TidyDensity. Each function evaluates the goodness of fit of a particular distribution to your data and provides an AIC score, aiding in the selection of the most appropriate model.</p>
</section>
<section id="how-to-use-aic-for-model-selection" class="level1">
<h1>How to Use AIC for Model Selection</h1>
<p>Using these functions in TidyDensity is straightforward. Simply pass your data to the desired distribution function, and it will return the AIC score. Lower AIC values indicate a better fit, so the distribution with the lowest AIC is typically chosen as the optimal model.</p>
<p>Here’s a simplified example of how you might use these functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load TidyDensity library</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate some sample data</span></span>
<span id="cb1-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute AIC for normal distribution</span></span>
<span id="cb1-8">normal_aic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_aic</span>(data)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute AIC for exponential distribution</span></span>
<span id="cb1-11">cauchy_aic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_cauchy_aic</span>(data)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare AIC scores</span></span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (normal_aic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cauchy_aic) {</span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal distribution is a better fit."</span>)</span>
<span id="cb1-16">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cauchy distribution is a better fit."</span>)</span>
<span id="cb1-18">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Normal distribution is a better fit."</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal AIC: "</span>, normal_aic, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Normal AIC:  285.9777 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cauchy AIC: "</span>, cauchy_aic)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Cauchy AIC:  317.1025</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In conclusion, the Akaike Information Criterion (AIC) plays a crucial role in statistical modeling and model selection. The TidyDensity package enhances this capability by providing specialized functions to compute AIC scores for various probability distributions. By leveraging these functions, data analysts and researchers can make informed decisions about which distribution best describes their data, leading to more robust and accurate statistical analyses.</p>
<p>If you’re interested in harnessing the power of AIC and exploring different probability distributions in R, be sure to check out TidyDensity and incorporate these tools into your data analysis toolkit. Happy modeling!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-06/</guid>
  <pubDate>Mon, 06 May 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
