<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 09 Apr 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>How to Remove Rows with Some or All NAs in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>Handling missing values is a crucial aspect of data preprocessing in R. Often, datasets contain missing values, which can adversely affect the analysis or modeling process. One common task is to remove rows containing missing values entirely. In this tutorial, we’ll explore different methods to accomplish this task in R, catering to scenarios where we want to remove rows with either some or all missing values.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1---using-complete.cases-function" class="level2">
<h2 class="anchored" data-anchor-id="example-1---using-complete.cases-function">Example 1 - Using complete.cases() Function:</h2>
<p>The <code>complete.cases()</code> function is a handy tool in R for removing rows with any missing values. It returns a logical vector indicating which rows in a data frame are complete (i.e., have no missing values).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2  2  2
3 NA  3
4  4 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any missing values</span></span>
<span id="cb3-2">complete_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete.cases</span>(df), ]</span>
<span id="cb3-3">complete_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y
2 2 2</code></pre>
</div>
</div>
</section>
<section id="explanation" class="level2">
<h2 class="anchored" data-anchor-id="explanation">Explanation:</h2>
<ul>
<li>We create a sample data frame <code>df</code> with some missing values.</li>
<li>The <code>complete.cases(df)</code> function returns a logical vector indicating complete cases (rows with no missing values).</li>
<li>We subset the data frame <code>df</code> using this logical vector to retain only the complete rows.</li>
</ul>
</section>
<section id="example-2---using-na.omit-function" class="level2">
<h2 class="anchored" data-anchor-id="example-2---using-na.omit-function">Example 2 - Using na.omit() Function:</h2>
<p>Similar to <code>complete.cases()</code>, the <code>na.omit()</code> function also removes rows with any missing values from a data frame. However, it directly returns the data frame without the incomplete rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb5-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2  2  2
3 NA  3
4  4 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any missing values</span></span>
<span id="cb7-2">complete_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(df)</span>
<span id="cb7-3">complete_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y
2 2 2</code></pre>
</div>
</div>
<p>##Explanation:</p>
<ul>
<li>We define a sample data frame <code>df</code> with missing values.</li>
<li>The <code>na.omit(df)</code> function directly removes rows with any missing values and returns the cleaned data frame.</li>
</ul>
</section>
<section id="example-3---removing-rows-with-all-nas" class="level2">
<h2 class="anchored" data-anchor-id="example-3---removing-rows-with-all-nas">Example 3 - Removing Rows with All NAs:</h2>
<p>In some cases, we may want to remove rows where all values are missing. We can achieve this by using the <code>complete.cases()</code> function along with the <code>rowSums()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb9-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb9-5">)</span>
<span id="cb9-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2 NA NA
3 NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with all missing values</span></span>
<span id="cb11-2">non_na_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df), ]</span>
<span id="cb11-3">non_na_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x  y
1 1 NA</code></pre>
</div>
</div>
</section>
<section id="explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="explanation-1">Explanation:</h2>
<ul>
<li>We create a data frame <code>df</code> with all missing values.</li>
<li><code>is.na(df)</code> generates a logical matrix indicating NA values.</li>
<li><code>rowSums(is.na(df))</code> calculates the total number of NA values in each row.</li>
<li>We compare this sum to the total number of columns <code>ncol(df)</code> to identify rows with all missing values.</li>
<li>Finally, we subset the data frame to retain rows with at least one non-missing value.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Handling missing data is an essential skill in data analysis, and removing rows with missing values is a common preprocessing step. In this tutorial, we discussed various methods to achieve this task in R, catering to scenarios where we want to remove rows with some or all missing values. I encourage you to try out these methods on your own datasets to gain a deeper understanding of data manipulation in R.</p>
<p>By mastering these techniques, you’ll be better equipped to preprocess your data effectively and pave the way for more robust analyses and models. Happy coding!</p>
<p><strong>Note:</strong> Remember to always carefully consider the implications of removing data, as it may affect the integrity and representativeness of your dataset.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-09/index.html</guid>
  <pubDate>Tue, 09 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Frame Merging in R (With Examples)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Merging multiple data frames is a pivotal skill in data manipulation. Whether you’re handling small-scale datasets or large-scale ones, mastering the art of merging can significantly enhance your efficiency. In this tutorial, we’ll delve into various methods of merging data frames in R, using straightforward examples to demystify the process.</p>
</section>
<section id="understanding-the-data" class="level1">
<h1>Understanding the Data</h1>
<p>Before we dive into merging data frames, let’s familiarize ourselves with the data at hand. We have a list named <code>random_list</code>, which comprises three samples (<code>sample1</code>, <code>sample2</code>, and <code>sample3</code>). Each sample consists of 50 random numbers generated from a normal distribution using the <code>rnorm()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">random_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb1-5">  )</span></code></pre></div>
</div>
<section id="method-1-using-cbind-and-rbind" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-cbind-and-rbind">Method 1: Using <code>cbind()</code> and <code>rbind()</code></h2>
<p>One approach to merge data frames is by combining them column-wise using <code>cbind()</code> or row-wise using <code>rbind()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating data frames from the list</span></span>
<span id="cb2-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> random_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample1)</span>
<span id="cb2-3">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> random_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample2)</span>
<span id="cb2-4">df3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> random_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample3)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames column-wise</span></span>
<span id="cb2-7">cbined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(df1, df2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Value, df3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Value)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(cbined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID      Value  df2$Value  df3$Value
1  1 -0.8828435 -1.5116620  1.4729716
2  2  0.7371127  0.1140000  0.6455959
3  3  0.7611256  0.9740632 -0.2355084
4  4  2.0613462 -1.0748615 -0.4654242
5  5  0.1966095 -0.2415080  0.1059656
6  6  0.3217213 -1.3252347  0.9432906</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames row-wise</span></span>
<span id="cb4-2">rbined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df1, df2, df3)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(rbined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID      Value
1  1 -0.8828435
2  2  0.7371127
3  3  0.7611256
4  4  2.0613462
5  5  0.1966095
6  6  0.3217213</code></pre>
</div>
</div>
<p>In the first example, <code>cbind()</code> combines <code>df1</code>, <code>df2</code>, and <code>df3</code> column-wise, creating a new data frame <code>combined_df</code>. In the second example, <code>rbind()</code> stacks <code>df1</code>, <code>df2</code>, and <code>df3</code> row-wise, appending the rows to create <code>combined_df</code>.</p>
</section>
<section id="method-2-using-purrrmap-and-data.frame" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-purrrmap-and-data.frame">Method 2: Using <code>purrr::map()</code> and <code>data.frame()</code></h2>
<p>With the <code>purrr</code> package, you can efficiently merge data frames within a list using <code>map()</code> and <code>data.frame()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames within the list</span></span>
<span id="cb6-4">merged_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(random_list, data.frame)</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combining data frames row-wise</span></span>
<span id="cb6-7">combined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, merged_list)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(combined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             .x..i..
sample1.1 -0.8828435
sample1.2  0.7371127
sample1.3  0.7611256
sample1.4  2.0613462
sample1.5  0.1966095
sample1.6  0.3217213</code></pre>
</div>
</div>
<p>Here, <code>map()</code> iterates over each element of <code>random_list</code> and converts them into data frames using <code>data.frame()</code>. Then, <code>do.call(rbind, merged_list)</code> combines the data frames row-wise, creating <code>combined_df</code>.</p>
</section>
<section id="method-3-using-purrrmap_df" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-purrrmap_df">Method 3: Using <code>purrr::map_df()</code></h2>
<p>Another <code>purrr</code> function, <code>map_df()</code>, directly merges data frames within a list, producing a single combined data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames within the list</span></span>
<span id="cb8-2">combined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_df</span>(random_list, cbind)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(combined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  sample1[,1] sample2[,1] sample3[,1]
        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;
1      -0.883      -1.51        1.47 
2       0.737       0.114       0.646
3       0.761       0.974      -0.236
4       2.06       -1.07       -0.465
5       0.197      -0.242       0.106
6       0.322      -1.33        0.943</code></pre>
</div>
</div>
<p>By employing <code>map_df()</code> with <code>cbind</code>, we merge data frames within <code>random_list</code>, resulting in <code>combined_df</code>, which is a single merged data frame.</p>
</section>
</section>
<section id="encouragement-to-try-on-your-own" class="level1">
<h1>Encouragement to Try on Your Own</h1>
<p>Now that you’ve explored different methods of merging data frames in R, I encourage you to experiment with your datasets. Practice merging data frames using various columns and explore how different merge methods influence the resulting data frame. The more hands-on experience you gain, the more proficient you’ll become in data manipulation with R.</p>
<p>In conclusion, merging multiple data frames in R is a foundational skill for any data analyst or scientist. By understanding the principles behind various merge methods and experimenting with real datasets, you’ll enhance your data manipulation capabilities and streamline your workflow.</p>
<p>Happy coding!</p>
</section>
<section id="bonus-section" class="level1">
<h1>Bonus Section</h1>
<p>One more method of this for you and I think I like this one the best. It’s very simple and adds the name of the list item as a value in a column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">stacked_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack</span>(random_list)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(stacked_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      values     ind
1 -0.8828435 sample1
2  0.7371127 sample1
3  0.7611256 sample1
4  2.0613462 sample1
5  0.1966095 sample1
6  0.3217213 sample1</code></pre>
</div>
</div>
<p>Here is yet another method to merge data frames in R. This method is simple and effective, providing a straightforward way to combine data frames within a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames within the list</span></span>
<span id="cb12-2">mapped_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(random_list, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>()</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mapped_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           x
1 -0.8828435
2  0.7371127
3  0.7611256
4  2.0613462
5  0.1966095
6  0.3217213</code></pre>
</div>
</div>
<p>This next method comes courtesy of a reader who suggested using the <code>list2DF</code> function from base R. This method is concise and efficient, making it a valuable addition to your data manipulation toolkit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list2DF</span>(random_list) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sample1    sample2    sample3
1 -0.8828435 -1.5116620  1.4729716
2  0.7371127  0.1140000  0.6455959
3  0.7611256  0.9740632 -0.2355084
4  2.0613462 -1.0748615 -0.4654242
5  0.1966095 -0.2415080  0.1059656
6  0.3217213 -1.3252347  0.9432906</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-08/index.html</guid>
  <pubDate>Mon, 08 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Practical Guide to Merging Data Frames Based on Multiple Columns in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As a data scientist or analyst, you often encounter situations where you need to combine data from multiple sources. One common task is merging data frames based on multiple columns. In this guide, we’ll walk through several step-by-step examples of how to accomplish this efficiently using R.</p>
</section>
<section id="understanding-the-problem" class="level1">
<h1>Understanding the Problem</h1>
<p>Let’s start with a simple scenario. You have two data frames, and you want to merge them based on two columns: <code>ID</code> and <code>Year</code>. The goal is to combine the data where the <code>ID</code> and <code>Year</code> values match in both data frames.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-data" class="level2">
<h2 class="anchored" data-anchor-id="example-data">Example Data</h2>
<p>For demonstration purposes, let’s create two sample data frames:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample Data Frame 1</span></span>
<span id="cb1-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>),</span>
<span id="cb1-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample Data Frame 2</span></span>
<span id="cb1-7">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-8">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>),</span>
<span id="cb1-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>))</span></code></pre></div>
</div>
</section>
<section id="example-1-inner-join" class="level2">
<h2 class="anchored" data-anchor-id="example-1-inner-join">Example 1: Inner Join</h2>
<p>An inner join combines rows from both data frames where there is a match based on the specified columns (<code>ID</code> and <code>Year</code> in this case). Rows with unmatched values are excluded.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using inner join</span></span>
<span id="cb2-2">merged_inner <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>))</span></code></pre></div>
</div>
</section>
<section id="example-2-left-join" class="level2">
<h2 class="anchored" data-anchor-id="example-2-left-join">Example 2: Left Join</h2>
<p>A left join retains all rows from the left data frame (<code>df1</code>), and includes matching rows from the right data frame (<code>df2</code>). If there is no match, NA values are filled in for the columns from <code>df2</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using left join</span></span>
<span id="cb3-2">merged_left <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
<section id="example-3-right-join" class="level2">
<h2 class="anchored" data-anchor-id="example-3-right-join">Example 3: Right Join</h2>
<p>A right join retains all rows from the right data frame (<code>df2</code>), and includes matching rows from the left data frame (<code>df1</code>). If there is no match, NA values are filled in for the columns from <code>df1</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using right join</span></span>
<span id="cb4-2">merged_right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
<section id="example-4-full-join" class="level2">
<h2 class="anchored" data-anchor-id="example-4-full-join">Example 4: Full Join</h2>
<p>A full join retains all rows from both data frames, filling in NA values for columns where there is no match.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using full join</span></span>
<span id="cb5-2">merged_full <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Merging data frames based on multiple columns is a common operation in data analysis. By using functions like <code>merge()</code> in R, you can efficiently combine data from different sources while retaining flexibility in how you handle unmatched values.</p>
<p>I encourage you to try these examples with your own data sets and explore the various options available for merging data frames. Understanding how to effectively merge data is an essential skill for any data professional, and mastering it will greatly enhance your ability to derive insights from your data. Happy merging!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-05/index.html</guid>
  <pubDate>Fri, 05 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unveiling Car Specs with Multidimensional Scaling in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-04/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Visualizing similarities between data points can be tricky, especially when dealing with many features. This is where multidimensional scaling (MDS) comes in handy. It allows us to explore these relationships in a lower-dimensional space, typically 2D or 3D for easier interpretation. In R, the <code>cmdscale()</code> function from base R and is a great tool for performing classical MDS.</p>
</section>
<section id="cmdscale" class="level1">
<h1>cmdscale()</h1>
<p>Here’s a breakdown of its arguments:</p>
<ul>
<li><code>distance_matrix</code>: This is the key argument. It represents a matrix containing the pairwise distances between your data points. You can calculate this using the <code>dist()</code> function.</li>
<li><code>eig</code>: A logical value indicating whether you want the function to return the eigenvalues (default is <code>FALSE</code>). Eigenvalues help assess the quality of the dimensionality reduction.</li>
<li><code>k</code>: This specifies the number of dimensions for the resulting low-dimensional space (default is 2). You can choose higher values for more complex data, but visualization becomes trickier.</li>
<li><code>...</code>: Additional arguments can be used for fine-tuning the MDS process, but these are less common for basic applications.</li>
</ul>
</section>
<section id="car-specs-with-mds-a-step-by-step-example" class="level1">
<h1>Car Specs with MDS: A Step-by-Step Example</h1>
<p>Let’s use the built-in <code>mtcars</code> dataset in R to demonstrate the power of MDS. This dataset contains information about various car models, including aspects like horsepower, mileage, and weight. While these features provide valuable insights, visualizing all of them simultaneously can be challenging. MDS will help us explore the relationships between these car specifications in a 2D space.</p>
<p>Here’s the code with explanations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select relevant numerical features (exclude car names)</span></span>
<span id="cb1-2">car_features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)]</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate pairwise distances between car features</span></span>
<span id="cb1-5">distance_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(car_features)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(distance_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  0.6153251 54.8426385 98.1117059</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform MDS to get a 2D representation</span></span>
<span id="cb3-2">mds_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdscale</span>(distance_matrix, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mds_results, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    [,1]      [,2]
Mazda RX4      -79.62307  2.157120
Mazda RX4 Wag  -79.62522  2.172370
Datsun 710    -133.87165 -5.033323</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a base R plot</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(mds_results[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], mds_results[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb5-3">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimension 1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimension 2"</span>,</span>
<span id="cb5-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MDS of Car Specs (mtcars)"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add text labels for car names (optional)</span></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>(mds_results, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(mtcars), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.62</span>,</span>
<span id="cb5-8">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pos =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-04/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ol type="1">
<li>We load the <code>mtcars</code> dataset using <code>data(mtcars)</code>.</li>
<li>We select relevant numerical features from the dataset (excluding car names) and store them in <code>car_features</code>.</li>
<li>The <code>dist()</code> function calculates the pairwise distances between data points based on the chosen features and stores them in the <code>distance_matrix</code>.</li>
<li>We run <code>cmdscale()</code> on the distance matrix, specifying two dimensions (<code>k = 2</code>) for the output. The results are stored in <code>mds_results</code>.</li>
<li>Finally, we use the base R <code>plot()</code> function to create a scatter plot. We set axis labels and a main title for the plot.</li>
</ol>
<p><em>Optional Step:</em></p>
<ul>
<li>We can add text labels for each car model (using car names from <code>mtcars$mpg</code>) on the plot using the <code>text()</code> function. We set the <code>pos</code> argument to 1 to position the text labels above the data points and we set the <code>cex</code> argument to <code>0.62</code> so the size of the text decreases.</li>
</ul>
<p>This plot can reveal interesting patterns. Cars closer together might share similar characteristics in terms of horsepower, weight, and other specifications. You might also observe some separation based on fuel efficiency reflected by the optional text labels.</p>
</section>
<section id="experiment-and-discover" class="level1">
<h1>Experiment and Discover!</h1>
<p>MDS is a powerful tool for exploring data similarity in R. Now that you’ve seen the basics of <code>cmdscale()</code> and base R plotting functions, why not try it on your dataset? Remember to calculate the distance matrix appropriately based on the features you’re interested in. Play around with the number of dimensions (<code>k</code>) to see how it affects the visualization. By experimenting with MDS, you might uncover hidden relationships within your car data or any other dataset you choose to explore!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-04/index.html</guid>
  <pubDate>Thu, 04 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Scaling Your Data in R: Understanding the Range</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today, we’re diving into a fundamental data pre-processing technique: scaling values. This might sound simple, but it can significantly impact how your data behaves in analyses.</p>
</section>
<section id="why-scale" class="level1">
<h1>Why Scale?</h1>
<p>Imagine you have data on customer ages (in years) and purchase amounts (in dollars). The age range might be 18-80, while purchase amounts could vary from $10 to $1000. If you use these values directly in a model, the analysis might be biased towards the purchase amount due to its larger scale. Scaling brings both features (age and purchase amount) to a common ground, ensuring neither overpowers the other.</p>
</section>
<section id="the-scale-function" class="level1">
<h1>The <code>scale()</code> Function</h1>
<p>R offers a handy function called <code>scale()</code> to achieve this. Here’s the basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<ul>
<li><code>data</code>: This is the vector or data frame containing the values you want to scale. A numeric matrix(like object)</li>
<li><code>center</code>: Either a logical value or numeric-alike vector of length equal to the number of columns of x, where ‘numeric-alike’ means that as.numeric(.) will be applied successfully if is.numeric(.) is not true.</li>
<li><code>scale</code>: Either a logical value or numeric-alike vector of length equal to the number of columns of x.</li>
<li><code>scaled_data</code>: This stores the new data frame with scaled values (typically one standard deviation from the mean).</li>
</ul>
</section>
<section id="example-in-action" class="level1">
<h1>Example in Action!</h1>
<p>Let’s see <code>scale()</code> in action. We’ll generate some sample data for height (in cm) and weight (in kg) of individuals:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb2-2">height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-3">weight <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb2-4">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(height, weight)</span></code></pre></div>
</div>
<p>This creates a data frame (<code>data</code>) with 100 rows, where <code>height</code> has values around 170 cm with a standard deviation of 10 cm, and <code>weight</code> is centered around 70 kg with a standard deviation of 15 kg.</p>
</section>
<section id="visualizing-before-and-after" class="level1">
<h1>Visualizing Before and After</h1>
<p>Now, let’s visualize the distribution of both features before and after scaling. We’ll use the <code>ggplot2</code> package for this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Scaled data and cbind to original</span></span>
<span id="cb3-6">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(data)</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(data, scaled_data), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_scaled"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight_scaled"</span>)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> data</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tidy data for facet plotting</span></span>
<span id="cb3-10">data_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb3-11">  data, </span>
<span id="cb3-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(height, weight, height_scaled, weight_scaled), </span>
<span id="cb3-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, </span>
<span id="cb3-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb3-15">  )</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize</span></span>
<span id="cb3-18">data_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> variable)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(</span>
<span id="cb3-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb3-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.328</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb3-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distribution of Height and Weight Before and After Scaling"</span></span>
<span id="cb3-26">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-03/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Run this code and see the magic! The histograms before scaling will show a clear difference in spread between height and weight. After scaling, both distributions will have a similar shape, centered around 0 with a standard deviation of 1.</p>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try it Yourself!</h1>
<p>This is just a basic example. Get your hands dirty! Try scaling data from your own projects and see how it affects your analysis. Remember, scaling is just one step in data pre-processing. Explore other techniques like centering or normalization depending on your specific needs.</p>
<p>So, the next time you have features with different scales, consider using <code>scale()</code> to bring them to a level playing field and unlock the full potential of your models!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-03/index.html</guid>
  <pubDate>Wed, 03 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Practical Guide to Data Normalization in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-02/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data normalization is a crucial preprocessing step in data analysis and machine learning workflows. It helps in standardizing the scale of numeric features, ensuring fair treatment to all variables regardless of their magnitude. In this tutorial, we’ll explore how to normalize data in R using practical examples and step-by-step explanations.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="step-1-prepare-your-data" class="level2">
<h2 class="anchored" data-anchor-id="step-1-prepare-your-data">Step 1: Prepare Your Data</h2>
<p>For demonstration purposes, let’s create a sample dataset. Suppose we have a dataset called <code>my_data</code> with three numeric variables: <code>age</code>, <code>income</code>, and <code>education</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reproducible</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample dataset</span></span>
<span id="cb1-3">my_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>)),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rlnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71000</span>))),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">education =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb1-7">)</span></code></pre></div>
</div>
</section>
<section id="step-2-normalize-the-data" class="level2">
<h2 class="anchored" data-anchor-id="step-2-normalize-the-data">Step 2: Normalize the Data</h2>
<p>Now, let’s normalize the numeric variables in our dataset. We’ll use the <code>scale()</code> function to standardize each variable to have a mean of 0 and a standard deviation of 1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the data</span></span>
<span id="cb2-2">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_normalized =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income_normalized =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">education_normalized =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>education)</span>
<span id="cb2-6">)</span></code></pre></div>
</div>
</section>
<section id="step-3-understand-the-normalized-data" class="level2">
<h2 class="anchored" data-anchor-id="step-3-understand-the-normalized-data">Step 3: Understand the Normalized Data</h2>
<p>After normalization, each variable will have a mean of approximately 0 and a standard deviation of 1. This ensures that all variables are on the same scale, making them comparable and suitable for various analytical techniques.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the normalized data</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(normalized_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  age_normalized income_normalized education_normalized
1     1.38435717        -0.5141139           -0.9663645
2     1.47019281        -0.5829717           -1.3865230
3    -0.76153378        -0.8385455           -0.1260475
4     1.12685026        -0.7375278           -0.9663645
5     0.44016515        -0.1738354           -0.9663645
6     0.01098696         0.1804609           -0.5462060</code></pre>
</div>
</div>
</section>
<section id="step-4-interpret-the-results" class="level2">
<h2 class="anchored" data-anchor-id="step-4-interpret-the-results">Step 4: Interpret the Results</h2>
<p>In the output, you’ll notice that each variable now has its normalized counterpart. For example:</p>
<ul>
<li><code>age_normalized</code> represents the standardized values of the <code>age</code> variable.</li>
<li><code>income_normalized</code> represents the standardized values of the <code>income</code> variable.</li>
<li><code>education_normalized</code> represents the standardized values of the <code>education</code> variable.</li>
</ul>
</section>
<section id="step-5-visualize-the-normalized-data-optional" class="level2">
<h2 class="anchored" data-anchor-id="step-5-visualize-the-normalized-data-optional">Step 5: Visualize the Normalized Data (Optional)</h2>
<p>To gain a better understanding of the normalization process, you can visualize the distribution of the original and normalized variables using histograms or density plots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the original and normalized data (Optional)</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arrange plots in a 2x3 grid</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(normalized_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age_normalized, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Age"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age (Normalized)"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>)</span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(normalized_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income_normalized, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income (Normalized)"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>education, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education"</span>)</span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(normalized_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>education_normalized, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Education"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education (Normalized)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-02/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><strong>Conclusion</strong></p>
<p>Congratulations! You’ve successfully normalized your data in R. By standardizing the scale of numeric variables, you’ve prepared your data for further analysis, ensuring fair treatment to all variables. Feel free to explore more advanced techniques or apply normalization to your own datasets.</p>
<p>I encourage you to try this process on your own datasets and experiment with different normalization techniques. Happy analyzing!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-02/index.html</guid>
  <pubDate>Tue, 02 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Quantile Normalization in R: A Step-by-Step Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-28/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Quantile normalization is a crucial technique in data preprocessing, especially in fields like genomics and bioinformatics. It ensures that the distributions of different samples are aligned, making them directly comparable. In this tutorial, we’ll walk through the process step by step, demystifying the syntax and empowering you to apply this technique confidently in your projects.</p>
</section>
<section id="understanding-quantile-normalization" class="level1">
<h1>Understanding Quantile Normalization</h1>
<p>Before we dive into the code, let’s understand the concept behind quantile normalization. At its core, quantile normalization aims to equalize the distributions of multiple datasets by aligning their quantiles. This ensures that each dataset has the same distribution of values, making meaningful comparisons possible.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="step-1-load-your-data" class="level2">
<h2 class="anchored" data-anchor-id="step-1-load-your-data">Step 1: Load Your Data</h2>
<p>First things first, you’ll need some data to work with. For the sake of this tutorial, let’s say you have a dataframe called <code>df</code> containing your datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sample1   sample2    sample3
1 7.741917 11.200965 -2.0009292
2 3.870604 11.044751  0.3337772
3 5.726257  8.996791  1.1713251
4 6.265725 11.848482  2.0595392
5 5.808537  9.333227 -1.3768616
6 4.787751 10.105514 -1.1508556</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(df), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(df)), </span>
<span id="cb3-2">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of Sample 1'</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add legend</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">legend</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'topright'</span>, </span>
<span id="cb3-7">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 3'</span>), </span>
<span id="cb3-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-28/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="step-2-perform-quantile-normalization" class="level2">
<h2 class="anchored" data-anchor-id="step-2-perform-quantile-normalization">Step 2: Perform Quantile Normalization</h2>
<p>Now, it’s time to perform quantile normalization using R’s built-in <code>quantile()</code> function. This function calculates quantiles for a given dataset, which is essential for aligning the distributions. Function from: https://lifewithdata.com/2023/09/02/how-to-perform-quantile-normalization-in-r/</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform quantile normalization</span></span>
<span id="cb4-2">qn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.data){</span>
<span id="cb4-3"> data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sort)</span>
<span id="cb4-4"> row_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(data_sort)</span>
<span id="cb4-5"> data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(row_means, </span>
<span id="cb4-6">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data_sort), </span>
<span id="cb4-7">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(data_sort), </span>
<span id="cb4-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-9">                     )</span>
<span id="cb4-10"> index_rank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, order)</span>
<span id="cb4-11"> normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(.data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data))</span>
<span id="cb4-12"> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data)){</span>
<span id="cb4-13">   normalized_data[,i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_sort[index_rank[,i], i]</span>
<span id="cb4-14"> }</span>
<span id="cb4-15"> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(normalized_data)</span>
<span id="cb4-16">}</span>
<span id="cb4-17"></span>
<span id="cb4-18">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qn</span>(df)</span></code></pre></div>
</div>
<p>Let’s break down this code snippet:</p>
<p>Absolutely, let’s break down this R code block piece by piece:</p>
<p><strong>1. Function Definition:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">qn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.data){</span>
<span id="cb5-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... function body here ...</span></span>
<span id="cb5-3">}</span></code></pre></div>
<p>This defines a function named <code>qn</code> that takes a data frame (<code>data</code>) as input. This data frame is most likely your dataset you want to normalize.</p>
<p><strong>2. Sorting Each Column:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sort)</span></code></pre></div>
<p>This line sorts each column of the data frame <code>data</code> independently. Imagine sorting rows of data like sorting words in a dictionary. Here, we are sorting each column (each variable) from smallest to largest values. The result is stored in <code>data_sort</code>.</p>
<p><strong>3. Calculating Row Means:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">row_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(data_sort)</span></code></pre></div>
<p>This line calculates the average value for each row in the sorted data frame (<code>data_sort</code>). So, for each row (each data point), it finds the mean of the sorted values across all variables. The result is stored in <code>row_means</code>.</p>
<p><strong>4. Replicating Row Means into a Matrix:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(row_means, </span>
<span id="cb8-2">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data_sort), </span>
<span id="cb8-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(data_sort), </span>
<span id="cb8-4">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-5">                    )</span></code></pre></div>
<p>This part is a bit trickier. It creates a new matrix (<code>data_sort</code>) with the same dimensions (number of rows and columns) as the original sorted data. Then, it fills each row of this new matrix with the corresponding row mean calculated earlier (<code>row_means</code>). The <code>byrow</code> argument ensures this replication happens row-wise.</p>
<p><strong>5. Ranking Each Value’s Position:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">index_rank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, order)</span></code></pre></div>
<p>Similar to sorting, this line assigns a rank (position) to each value within its column (variable) in the original data frame (<code>data</code>). Imagine a race where the first place gets rank 1, second place gets rank 2, and so on. Here, the rank indicates the original position of each value after everything was sorted in step 2. The result is stored in <code>index_rank</code>.</p>
<p><strong>6. Building the Normalized Data Frame:</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(.data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data))</span></code></pre></div>
<p>This line creates an empty matrix (<code>normalized_data</code>) with the same dimensions as the original data frame. This will eventually hold the normalized data.</p>
<p><strong>7. Looping Through Columns and Assigning Ranked Values:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data)){</span>
<span id="cb11-2">  normalized_data[,i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_sort[index_rank[,i], i]</span>
<span id="cb11-3">}</span></code></pre></div>
<p>This is the core of the normalization process. It loops through each column (variable) of the original data frame (<code>data</code>). For each column, it uses the ranks (<code>index_rank</code>) as indices to pick values from the sorted data with row means (<code>data_sort</code>). Basically, it replaces each value in the original data with the value from the sorted data that has the same rank (original position). This effectively replaces the original values with their corresponding row means (representing the center point) based on their original order.</p>
<p><strong>8. Returning the Normalized Data:</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(normalized_data)</span></code></pre></div>
<p>Finally, the function returns the <code>normalized_data</code> matrix, which contains the quantile normalized version of your original data frame.</p>
<p>In essence, this code performs a type of rank-based normalization where each value is replaced with the row mean that corresponds to its original position after sorting all the data together. This approach ensures that the distribution of values across columns becomes more consistent.</p>
</section>
<section id="step-3-explore-the-results" class="level2">
<h2 class="anchored" data-anchor-id="step-3-explore-the-results">Step 3: Explore the Results</h2>
<p>After quantile normalization, you’ll have a list of normalized datasets ready for further analysis. Take a moment to explore the results and ensure that the distributions are aligned as expected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    sample1           sample2          sample3        
 Min.   :-0.9862   Min.   : 7.975   Min.   :-2.69993  
 1st Qu.: 3.7666   1st Qu.: 9.409   1st Qu.:-0.71167  
 Median : 5.1796   Median : 9.931   Median :-0.02474  
 Mean   : 5.0650   Mean   : 9.913   Mean   :-0.01037  
 3rd Qu.: 6.3231   3rd Qu.:10.462   3rd Qu.: 0.65254  
 Max.   : 9.5733   Max.   :12.702   Max.   : 2.45959  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explore the results</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(normalized_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       V1              V2              V3       
 Min.   :1.430   Min.   :1.430   Min.   :1.430  
 1st Qu.:4.154   1st Qu.:4.154   1st Qu.:4.154  
 Median :5.029   Median :5.029   Median :5.029  
 Mean   :4.989   Mean   :4.989   Mean   :4.989  
 3rd Qu.:5.812   3rd Qu.:5.812   3rd Qu.:5.812  
 Max.   :8.245   Max.   :8.245   Max.   :8.245  </code></pre>
</div>
</div>
</section>
<section id="step-4-obtain-quantiles" class="level2">
<h2 class="anchored" data-anchor-id="step-4-obtain-quantiles">Step 4: Obtain Quantiles</h2>
<p>Now that the data is normalized, we can extract the quantiles to compare the distributions across datasets. This will help you confirm that the normalization process was successful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(normalized_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           V1       V2       V3
0%   1.429737 1.429737 1.429737
25%  4.154481 4.154481 4.154481
50%  5.028521 5.028521 5.028521
75%  5.812480 5.812480 5.812480
100% 8.244925 8.244925 8.244925</code></pre>
</div>
</div>
<p>As we can see, the quantiles of the normalized data are consistent across the different datasets. This indicates that the distributions have been aligned through quantile normalization.</p>
<p>Let’s visuzlize for another confirmation</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">df_normalized <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(normalized_data)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df_normalized<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df_normalized<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df_normalized<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">legend</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'topright'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 3'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-28/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="wrapping-up" class="level1">
<h1>Wrapping Up</h1>
<p>Congratulations! You’ve successfully mastered quantile normalization in R. By understanding the underlying concept and applying the <code>quantile()</code> function effectively, you can ensure that your datasets are comparable and ready for downstream analysis.</p>
<p>I encourage you to experiment with different datasets and explore the impact of quantile normalization on your analyses. Remember, practice makes perfect, so don’t hesitate to try it out on your own data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-28/index.html</guid>
  <pubDate>Thu, 28 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Text Manipulation in R: A Guide to Using gsub() for Multiple Pattern Replacement</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the realm of text manipulation in R, the <code>gsub()</code> function stands as a powerful tool, allowing you to replace specific patterns within strings effortlessly. Whether you’re cleaning messy data or transforming text for analysis, mastering <code>gsub()</code> can significantly streamline your workflow. In this tutorial, we’ll focus on how to effectively utilize <code>gsub()</code> to replace multiple patterns, equipping you with the skills to tackle various text manipulation tasks with ease.</p>
</section>
<section id="understanding-gsub" class="level1">
<h1>Understanding gsub()</h1>
<p>Before diving into multiple pattern replacement, let’s grasp the basics of <code>gsub()</code>. This function is designed to search for patterns within strings and replace them with specified replacements. Its syntax is straightforward:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(pattern, replacement, x)</span></code></pre></div>
<ul>
<li><code>pattern</code>: The pattern(s) to be replaced.</li>
<li><code>replacement</code>: The replacement value(s).</li>
<li><code>x</code>: The input vector containing the strings.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="replacing-single-patterns" class="level2">
<h2 class="anchored" data-anchor-id="replacing-single-patterns">Replacing Single Patterns</h2>
<p>First, let’s start with a simple example of replacing a single pattern within a string:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb2-2">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R community"</span>, text)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello, R community!"</code></pre>
</div>
</div>
<p>In this example, <code>"world"</code> is replaced with <code>"R community"</code>, resulting in <code>"Hello, R community!"</code>.</p>
</section>
<section id="replacing-multiple-patterns" class="level2">
<h2 class="anchored" data-anchor-id="replacing-multiple-patterns">Replacing Multiple Patterns</h2>
<p>Now, let’s move on to replacing multiple patterns using <code>gsub()</code>. This can be achieved by providing vectors of patterns and replacements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data science is amazing, but coding can be challenging."</span></span>
<span id="cb4-2">patterns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data science|coding"</span>)</span>
<span id="cb4-3">replacements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Statistics"</span>)</span>
<span id="cb4-4">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(patterns, replacements, text)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Statistics is amazing, but Statistics can be challenging."</code></pre>
</div>
</div>
<p>Here, <code>"Data science"</code> is replaced with <code>"Statistics"</code>, and <code>"coding"</code> is also replaced with <code>"Statistics"</code>, yielding <code>"Statistics is amazing, but Statistics can be challenging."</code>.</p>
</section>
<section id="handling-case-sensitivity" class="level2">
<h2 class="anchored" data-anchor-id="handling-case-sensitivity">Handling Case Sensitivity</h2>
<p>By default, <code>gsub()</code> is case sensitive. However, you can make it case insensitive by specifying the <code>ignore.case</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R programming is Fun!"</span></span>
<span id="cb6-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span></span>
<span id="cb6-3">replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python"</span></span>
<span id="cb6-4">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(pattern, replacement, text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Python programming is Fun!"</code></pre>
</div>
</div>
<p>With <code>ignore.case = TRUE</code>, <code>"R"</code> is replaced with <code>"Python"</code>, resulting in <code>"Python programming is Fun!"</code>.</p>
</section>
<section id="using-regular-expressions" class="level2">
<h2 class="anchored" data-anchor-id="using-regular-expressions">Using Regular Expressions</h2>
<p><code>gsub()</code> supports regular expressions, providing advanced pattern matching capabilities. Let’s see how to leverage regular expressions for multiple pattern replacement:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today is 2024-03-27, tomorrow will be 2024-03-28."</span></span>
<span id="cb8-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{4}-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{2}-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{2}"</span></span>
<span id="cb8-3">replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATE"</span></span>
<span id="cb8-4">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(pattern, replacement, text)</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Today is DATE, tomorrow will be DATE."</code></pre>
</div>
</div>
<p>Here, the regular expression <code>"\\d{4}-\\d{2}-\\d{2}"</code> matches dates in the format YYYY-MM-DD and replaces them with <code>"DATE"</code>, resulting in <code>"Today is DATE, tomorrow will be DATE."</code>.</p>
</section>
</section>
<section id="explore" class="level1">
<h1>Explore!</h1>
<p>As you can see, <code>gsub()</code> offers immense flexibility for text manipulation tasks. I encourage you to experiment with different patterns and replacements, exploring its full potential. By mastering <code>gsub()</code>, you’ll enhance your data cleaning and analysis capabilities, empowering you to efficiently handle textual data in R.</p>
<p>In conclusion, <code>gsub()</code> serves as a fundamental tool in your R toolkit for text manipulation. With its ability to replace multiple patterns effortlessly, it becomes an invaluable asset in various data preprocessing and analysis tasks. So, roll up your sleeves, dive into the world of <code>gsub()</code>, and unlock the true potential of text manipulation in R!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-27/index.html</guid>
  <pubDate>Wed, 27 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering the map() Function in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-26/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data manipulation and analysis with R, efficiency and simplicity are paramount. One function that epitomizes these qualities is <code>map()</code>. Whether you’re a novice or a seasoned R programmer, mastering <code>map()</code> can significantly streamline your workflow and enhance your code readability. In this guide, we’ll delve into the syntax, usage, and numerous examples to help you harness the full power of <code>map()</code>.</p>
<p><strong>Syntax:</strong></p>
<pre><code>map(.x, .f, ...)</code></pre>
<ul>
<li><code>.x</code>: A list or atomic vector.</li>
<li><code>.f</code>: A function to apply to each element of <code>.x</code>.</li>
<li><code>...</code>: Additional arguments to be passed to <code>.f</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-applying-a-function-to-each-element-of-a-vector" class="level2">
<h2 class="anchored" data-anchor-id="example-1-applying-a-function-to-each-element-of-a-vector">Example 1: Applying a Function to Each Element of a Vector</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a vector</span></span>
<span id="cb2-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Square each element using map()</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb2-6">squared_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(numbers, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(squared_numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25</code></pre>
</div>
</div>
<p>In this example, we utilize <code>map()</code> to apply the square function to each element of the vector <code>numbers</code>. The result is a new vector <code>squared_numbers</code> containing the squared values.</p>
</section>
<section id="example-2-working-with-lists" class="level2">
<h2 class="anchored" data-anchor-id="example-2-working-with-lists">Example 2: Working with Lists</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a list</span></span>
<span id="cb4-2">names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert each name to uppercase using map()</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb4-6">uppercase_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(names, toupper)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(uppercase_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "JOHN"

[[2]]
[1] "ALICE"

[[3]]
[1] "BOB"</code></pre>
</div>
</div>
<p>Here, <code>map()</code> transforms each element of the list <code>names</code> to uppercase using the <code>toupper()</code> function.</p>
</section>
<section id="example-3-passing-additional-arguments" class="level2">
<h2 class="anchored" data-anchor-id="example-3-passing-additional-arguments">Example 3: Passing Additional Arguments</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a list of strings</span></span>
<span id="cb6-2">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract substrings using map()</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb6-6">substring_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(words, substr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(substring_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "app"

[[2]]
[1] "ban"

[[3]]
[1] "ora"</code></pre>
</div>
</div>
<p>In this example, we pass additional arguments <code>start</code> and <code>stop</code> to the <code>substr()</code> function within <code>map()</code>. This extracts the first three characters of each word in the list <code>words</code>.</p>
<p><strong>Explanation:</strong></p>
<p>The <code>map()</code> function iterates over each element of the input data structure (vector or list) and applies the specified function to each element. It then returns the results as a list.</p>
<ul>
<li><strong>Input Data (.x):</strong> This is the data structure (vector or list) over which the function will iterate.</li>
<li><strong>Function (.f):</strong> The function to be applied to each element of the input data.</li>
<li><strong>Additional Arguments (…):</strong> Any additional arguments required by the function can be passed here.</li>
</ul>
</section>
<section id="example-4-mapping-a-function-to-a-vector" class="level2">
<h2 class="anchored" data-anchor-id="example-4-mapping-a-function-to-a-vector">Example 4: Mapping a function to a vector</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] -0.5899048  0.6927321  0.9609231  1.5313738  2.8812876

[[2]]
[1] 2.786631 1.378856 2.649387 1.362483 0.939132

[[3]]
[1] 1.383364 3.400441 3.722030 2.109162 3.393745</code></pre>
</div>
</div>
<p>In this example, we use the pipe operator to pass the vector <code>data</code> to the <code>map()</code> function. We then apply the <code>rnorm()</code> function to each element of the vector, generating a list of random numbers.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering the <code>map()</code> function in R opens up a world of possibilities for efficient data manipulation and transformation. By simplifying repetitive tasks and improving code readability, <code>map()</code> empowers you to focus more on data analysis and less on cumbersome loops. Experiment with different functions and data structures to explore the versatility of <code>map()</code>. Happy mapping!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-26/index.html</guid>
  <pubDate>Tue, 26 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Wrangling Data with R: A Guide to the tapply() Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-25/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey R enthusiasts! Today we’re diving into the world of data manipulation with a fantastic function called <code>tapply()</code>. This little gem lets you apply a function of your choice to different subgroups within your data.</p>
<p>Imagine you have a dataset on trees, with a column for tree height and another for species. You might want to know the average height for each species. <code>tapply()</code> comes to the rescue!</p>
</section>
<section id="understanding-the-syntax" class="level1">
<h1>Understanding the Syntax</h1>
<p>Let’s break down the syntax of <code>tapply()</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(X, INDEX, FUN, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<ul>
<li><strong>X</strong>: This is the vector or variable you want to perform the function on.</li>
<li><strong>INDEX</strong>: This is the factor variable that defines the groups. Each level in the factor acts as a subgroup for applying the function.</li>
<li><strong>FUN</strong>: This is the function you want to apply to each subgroup. It can be built-in functions like <code>mean()</code> or <code>sd()</code>, or even custom functions you write!</li>
<li><strong>simplify (optional)</strong>: By default, <code>simplify = TRUE</code> (recommended for most cases). This returns a nice, condensed output that’s easy to work with. Setting it to <code>FALSE</code> gives you a more complex structure.</li>
</ul>
</section>
<section id="examples-in-action" class="level1">
<h1>Examples in Action</h1>
<section id="example-1-average-tree-height-by-species" class="level2">
<h2 class="anchored" data-anchor-id="example-1-average-tree-height-by-species">Example 1: Average Tree Height by Species</h2>
<p>Let’s say we have a data frame <code>trees</code> with columns “height” (numeric) and “species” (factor):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb2-2">trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb2-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oak"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oak"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pine"</span>))</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average height per species</span></span>
<span id="cb2-6">average_height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, mean)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(average_height)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Maple   Oak  Pine 
   20    25    34 </code></pre>
</div>
</div>
<p>This code calculates the average height for each species in the “species” column and stores the results in <code>average_height</code>. The output will be a named vector showing the average height for each unique species.</p>
</section>
<section id="example-2-exploring-distribution-with-summary-statistics" class="level2">
<h2 class="anchored" data-anchor-id="example-2-exploring-distribution-with-summary-statistics">Example 2: Exploring Distribution with Summary Statistics</h2>
<p>We can use <code>tapply()</code> with <code>summary()</code> to get a quick overview of how a variable is distributed within groups. Here, we’ll see the distribution of height within each species:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">summary_by_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, summary)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_by_species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Maple
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   15.0    17.5    20.0    20.0    22.5    25.0 

$Oak
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   20.0    22.5    25.0    25.0    27.5    30.0 

$Pine
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     28      31      34      34      37      40 </code></pre>
</div>
</div>
<p>This code applies the <code>summary()</code> function to each subgroup defined by the “species” factor. The output will be a data frame showing various summary statistics (like minimum, maximum, quartiles) for the height of each species.</p>
</section>
<section id="example-3-custom-function-for-identifying-tall-trees" class="level2">
<h2 class="anchored" data-anchor-id="example-3-custom-function-for-identifying-tall-trees">Example 3: Custom Function for Identifying Tall Trees</h2>
<p>Let’s create a custom function to find trees that are taller than the average height of their species:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">tall_trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(height, avg_height) {</span>
<span id="cb6-2">    height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> avg_height</span>
<span id="cb6-3">}</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find tall trees within each species</span></span>
<span id="cb6-6">tall_trees_by_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN=</span>tall_trees)</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(tall_trees_by_species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Maple
[1] FALSE FALSE

$Oak
[1] FALSE  TRUE

$Pine
[1] TRUE TRUE</code></pre>
</div>
</div>
<p>Here, we define a function <code>tall_trees()</code> that takes a tree’s height and the average height (passed as arguments) and returns TRUE if the tree’s height is greater. We then use <code>tapply()</code> with this custom function. The crucial difference here is that we use <code>mean(trees$height)</code> within the <code>FUN</code> argument to calculate the average height for each group <strong>outside</strong> of the custom function. This ensures the average height is calculated correctly for each subgroup before being compared to individual tree heights. The output will be a logical vector for each species, indicating which trees are taller than the average.</p>
</section>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give it a Try!</h1>
<p>This is just a taste of what <code>tapply()</code> can do. There are endless possibilities for grouping data and applying functions. Try it out on your own datasets! Here are some ideas:</p>
<ul>
<li>Calculate the median income for different age groups.</li>
<li>Find the most frequent word used in emails sent by different departments.</li>
<li>Group customers by purchase history and analyze their average spending.</li>
</ul>
<p>Remember, R is all about exploration. So dive in, play with <code>tapply()</code>, and see what insights you can uncover from your data!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-25/index.html</guid>
  <pubDate>Mon, 25 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Data Manipulation in R with the Sweep Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>Welcome to another exciting journey into the world of data manipulation in R! In this blog post, we’re going to explore a powerful tool in R’s arsenal: the <code>sweep</code> function. Whether you’re a seasoned R programmer or just starting out, understanding how to leverage <code>sweep</code> can significantly enhance your data analysis capabilities. So, let’s dive in and unravel the magic of <code>sweep</code>!</p>
</section>
<section id="what-is-the-sweep-function" class="level1">
<h1>What is the Sweep Function?</h1>
<p>The <code>sweep</code> function in R is a versatile tool used for performing operations on arrays or matrices. It allows you to apply a function across either rows or columns of a matrix while controlling the margins.</p>
</section>
<section id="syntax" class="level1">
<h1>Syntax</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(x, margin, STATS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, ...)</span></code></pre></div>
<ul>
<li><code>x</code>: The array or matrix to be swept.</li>
<li><code>margin</code>: An integer vector indicating which margins should be swept over (1 indicates rows, 2 indicates columns).</li>
<li><code>STATS</code>: The statistics to be used in the sweeping operation.</li>
<li><code>FUN</code>: The function to be applied during sweeping.</li>
<li><code>...</code>: Additional arguments passed to the function specified in <code>FUN</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-scaling-data" class="level2">
<h2 class="anchored" data-anchor-id="example-1-scaling-data">Example 1: Scaling Data</h2>
<p>Suppose we have a matrix <code>data</code> containing numerical values, and we want to scale each column by subtracting its mean and dividing by its standard deviation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]        [,3]       [,4]
[1,] -0.0345423  0.5671910  0.64555547 -1.4316793
[2,]  0.2124999  0.7805793 -2.03254741 -0.4705828
[3,]  1.1442591  0.6055960  0.41827804 -0.7136599
[4,]  0.4727024  0.9285763 -0.27855411  0.1741202
[5,]  0.1429103 -0.9512931 -0.01988827 -0.4070733</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale each column</span></span>
<span id="cb4-2">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scaled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]        [,3]        [,4]
[1,] -0.4221082  0.1810611  0.89898672 -0.86190434
[2,] -0.1750660  0.3944494 -1.77911615  0.09919224
[3,]  0.7566932  0.2194661  0.67170929 -0.14388487
[4,]  0.0851365  0.5424464 -0.02512285  0.74389523
[5,] -0.2446556 -1.3374230  0.23354299  0.16270174</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(scaled_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sd), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View scaled data</span></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scaled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]       [,3]       [,4]
[1,] -0.9164833  0.2377712  0.8494817 -1.4818231
[2,] -0.3801042  0.5179946 -1.6811446  0.1705356
[3,]  1.6429362  0.2882050  0.6347199 -0.2473731
[4,]  0.1848488  0.7123457 -0.0237394  1.2789367
[5,] -0.5311974 -1.7563166  0.2206823  0.2797238</code></pre>
</div>
</div>
<p>In this example, we first subtracted the column means from each column and then divided by the column standard deviations.</p>
</section>
<section id="example-2-centering-data" class="level2">
<h2 class="anchored" data-anchor-id="example-2-centering-data">Example 2: Centering Data</h2>
<p>Let’s say we have a matrix <code>scores</code> representing student exam scores, and we want to center each row by subtracting the row means.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb8-2">scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>), </span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-6">  )</span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]   80   75   85
[2,]   90   95   85
[3,]   70   80   75</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center each row</span></span>
<span id="cb10-2">centered_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(scores, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(scores), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View centered data</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(centered_scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    0   -5    5
[2,]    0    5   -5
[3,]   -5    5    0</code></pre>
</div>
</div>
<p>Here, we subtracted the row means from each row, effectively centering the data around zero.</p>
</section>
<section id="example-3-custom-operations" class="level2">
<h2 class="anchored" data-anchor-id="example-3-custom-operations">Example 3: Custom Operations</h2>
<p>You can also apply custom functions using <code>sweep</code>. Let’s say we want to cube each element in a matrix <code>nums</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb12-2">nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(nums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom operation: cube each element</span></span>
<span id="cb14-2">cubed_nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(nums, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View result</span></span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cubed_nums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1   64  343
[2,]    8  125  512
[3,]   27  216  729</code></pre>
</div>
</div>
<p>In this example, we defined a custom function to cube each element and applied it across all elements of the matrix.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>sweep</code> function in R is a powerful tool for performing array-based operations efficiently. Whether you need to scale data, center observations, or apply custom functions, <code>sweep</code> provides the flexibility to accomplish a wide range of tasks. I encourage you to experiment with <code>sweep</code> in your own R projects and discover its full potential in data manipulation and analysis! Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-22/index.html</guid>
  <pubDate>Fri, 22 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Replacement: Using the replace() Function in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-21/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <code>replace()</code> function is a handy tool in your R toolbox for modifying specific elements within vectors and data frames. It allows you to swap out unwanted values with new ones, making data cleaning and manipulation a breeze.</p>
</section>
<section id="understanding-the-syntax" class="level1">
<h1>Understanding the Syntax</h1>
<p>The basic syntax of <code>replace()</code> is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(x, list, values)</span></code></pre></div>
<ul>
<li><strong>x</strong>: This is the vector or data frame you want to modify.</li>
<li><strong>list</strong>: This argument specifies which elements you want to replace. It can be a numeric vector of positions, a logical vector indicating TRUE for elements to be replaced, or a function that returns TRUE/FALSE for filtering.</li>
<li><strong>values</strong>: This argument holds the replacements for the identified elements in <code>list</code>. It can be a single value (used to replace all selected elements with the same thing) or a vector of the same length as <code>list</code>.</li>
</ul>
</section>
<section id="examples-in-action" class="level1">
<h1>Examples in Action</h1>
<p>Let’s explore some examples to solidify your understanding:</p>
<section id="example-1-replacing-a-single-value" class="level2">
<h2 class="anchored" data-anchor-id="example-1-replacing-a-single-value">Example 1: Replacing a Single Value</h2>
<p>Imagine you have a vector of temperatures (<code>temp</code>) with an outlier you want to fix. Here’s how to replace it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our temperature data</span></span>
<span id="cb2-2">new_temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(temp, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the value at position 3 (30) with 25</span></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(temp)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: [15, 22, 30, 10, 18]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15 22 30 10 18</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_temp)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: [15, 22, 25, 10, 18]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15 22 25 10 18</code></pre>
</div>
</div>
</section>
<section id="example-2-replacing-multiple-values-based-on-conditions" class="level2">
<h2 class="anchored" data-anchor-id="example-2-replacing-multiple-values-based-on-conditions">Example 2: Replacing Multiple Values Based on Conditions</h2>
<p>Suppose you want to replace all values below 15 in <code>temp</code> with 0. Here’s how to achieve that:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(temp, temp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace values less than 15 with 0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15 22 30  0 18</code></pre>
</div>
</div>
<p>In this case, <code>temp &lt; 15</code> creates a logical vector where TRUE indicates elements below 15.</p>
</section>
<section id="example-3-replacing-values-in-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="example-3-replacing-values-in-data-frames">Example 3: Replacing Values in Data Frames</h2>
<p><code>replace()</code> can also work with data frames! Let’s say you have a data frame (<code>weather</code>) with a “wind_speed” column and want to replace missing values with the average speed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">weather <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb8-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">temperature =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>), </span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wind_speed =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb8-4">  )</span>
<span id="cb8-5">avg_wind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(weather<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wind_speed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate average excluding NA</span></span>
<span id="cb8-6">new_weather <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace</span>(</span>
<span id="cb8-7">  weather<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wind_speed, </span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(weather<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wind_speed), </span>
<span id="cb8-9">  avg_wind</span>
<span id="cb8-10">  )</span>
<span id="cb8-11">weather<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wind_speed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> new_weather  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the data frame</span></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(weather)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  temperature wind_speed
1          18          5
2          20         10
3          NA          9
4          25         12</code></pre>
</div>
</div>
<p>Here, <code>is.na(weather$wind_speed)</code> creates a logical vector to identify missing values (NA) in the “wind_speed” column.</p>
</section>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give it a Try!</h1>
<p>The <code>replace()</code> function offers a versatile way to manipulate your data. Now that you’ve seen the basics, try it out on your own datasets! Here are some ideas:</p>
<ul>
<li>Replace negative values in a sales data frame with 0.</li>
<li>Replace specific characters in a text vector.</li>
<li>Experiment with different filtering conditions (<code>list</code>) for replacements.</li>
</ul>
<p>Remember, practice makes perfect! Explore and have fun cleaning and transforming your data with <code>replace()</code> in R.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-21/index.html</guid>
  <pubDate>Thu, 21 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Data Segmentation: A Guide to Using the cut() Function in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-20/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the realm of data analysis, understanding how to effectively segment your data is paramount. Whether you’re dealing with age groups, income brackets, or any other continuous variable, the ability to categorize your data can provide invaluable insights. In R, the <code>cut()</code> function is a powerful tool for precisely this purpose. In this guide, we’ll explore how to harness the full potential of <code>cut()</code> to slice and dice your data with ease.</p>
</section>
<section id="understanding-the-cut-function" class="level1">
<h1>Understanding the cut() Function</h1>
<p>The <code>cut()</code> function in R allows you to divide a continuous variable into intervals, or “bins”, based on specified breakpoints. This enables you to convert numerical data into categorical data, making it easier to analyze and interpret.</p>
<p>Syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(x, breaks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">right =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, ...)</span></code></pre></div>
<ul>
<li><code>x</code>: The numeric vector to be divided into intervals.</li>
<li><code>breaks</code>: Either a numeric vector of two or more unique cut points or a single number giving the number of intervals into which x is to be cut.</li>
<li><code>labels</code>: Labels for the resulting categories. If <code>NULL</code>, simple integer codes are returned.</li>
<li><code>right</code>: Logical indicating if the intervals should be closed on the right (default) or left.</li>
<li><code>...</code>: Additional arguments to be passed to <code>cut()</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="example-1-basic-usage">Example 1: Basic Usage</h2>
<p>Let’s start with a simple example. Suppose we have a vector representing ages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span></code></pre></div>
</div>
<p>Now, let’s use the <code>cut()</code> function to divide these ages into three categories: “Young”, “Middle-aged”, and “Elderly”:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">age_groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(</span>
<span id="cb3-2">  ages, </span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>), </span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Young"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Middle-aged"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elderly"</span>)</span>
<span id="cb3-5">  )</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(age_groups)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] Young       Middle-aged Middle-aged Young       Elderly     Young      
 [7] Elderly     Middle-aged Young       Elderly    
Levels: Young Middle-aged Elderly</code></pre>
</div>
</div>
<p>In this code: - <code>breaks = c(0, 30, 50, Inf)</code> specifies the breakpoints for the age groups. - <code>labels = c("Young", "Middle-aged", "Elderly")</code> assigns labels to each category.</p>
</section>
<section id="example-2-customized-breakpoints" class="level2">
<h2 class="anchored" data-anchor-id="example-2-customized-breakpoints">Example 2: Customized Breakpoints</h2>
<p>Now, let’s say we want more granular age groups. We can specify custom breakpoints:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">custom_breaks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>)</span>
<span id="cb5-2">custom_labels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0-20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"21-30"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"31-40"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"41-50"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"51-60"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"61+"</span>)</span>
<span id="cb5-3">custom_age_groups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span>(ages, </span>
<span id="cb5-4">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> custom_breaks, </span>
<span id="cb5-5">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> custom_labels</span>
<span id="cb5-6">                         )</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(custom_age_groups)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 21-30 31-40 41-50 0-20  61+   21-30 51-60 31-40 21-30 51-60
Levels: 0-20 21-30 31-40 41-50 51-60 61+</code></pre>
</div>
</div>
<p>This will create age groups such as “0-20”, “21-30”, and so on, making our analysis more detailed.</p>
</section>
</section>
<section id="encouragement-to-experiment" class="level1">
<h1>Encouragement to Experiment</h1>
<p>The <code>cut()</code> function offers immense flexibility, allowing you to tailor your data segmentation to suit your specific needs. I encourage you to experiment with different breakpoints, labels, and datasets to see how <code>cut()</code> can enhance your data analysis workflows.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we’ve delved into the <code>cut()</code> function in R, exploring its syntax and various applications through practical examples. By mastering the <code>cut()</code> function, you’ll gain a powerful tool for segmenting your data and extracting meaningful insights. So go ahead, unleash the potential of <code>cut()</code> in your next data analysis project!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-20/index.html</guid>
  <pubDate>Wed, 20 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Replicate Rows in a Data Frame in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-19/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Are you working with a dataset where you need to duplicate certain rows multiple times? Perhaps you want to create synthetic data by replicating existing observations, or you need to handle imbalanced data by oversampling minority classes. Whatever the reason, replicating rows in a data frame is a handy skill to have in your R programming toolkit.</p>
<p>In this post, we’ll explore how to replicate rows in a data frame using base R functions. We’ll cover replicating each row the same number of times, as well as replicating rows a different number of times based on a specified pattern.</p>
<p>Let’s start by creating a sample data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">City =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"London"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Paris"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tokyo"</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age     City
1   Alice  25 New York
2     Bob  30   London
3 Charlie  35    Paris
4   David  40    Tokyo</code></pre>
</div>
</div>
</section>
<section id="replicating-each-row-the-same-number-of-times" class="level1">
<h1>Replicating Each Row the Same Number of Times</h1>
<p>To replicate each row in a data frame the same number of times, we can use the <code>rep()</code> function in combination with <code>row.names()</code> and <code>cbind()</code>. Here’s an example where we replicate each row twice:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replicate each row twice</span></span>
<span id="cb3-2">replicated_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<p>Output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">replicated_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age     City rep(row.names(df), each = 2)
1   Alice  25 New York                            1
2     Bob  30   London                            1
3 Charlie  35    Paris                            2
4   David  40    Tokyo                            2
5   Alice  25 New York                            3
6     Bob  30   London                            3
7 Charlie  35    Paris                            4
8   David  40    Tokyo                            4</code></pre>
</div>
</div>
<p>In this example, we use the <code>rep()</code> function to repeat the row names of the original data frame <code>df</code> twice for each row (using the <code>each</code> argument). We then combine the original data frame with the repeated row names using <code>cbind()</code> to create a new data frame <code>replicated_df</code>.</p>
</section>
<section id="replicating-rows-a-different-number-of-times" class="level1">
<h1>Replicating Rows a Different Number of Times</h1>
<p>What if you want to replicate each row a different number of times? You can achieve this by creating a vector that specifies the number of times to replicate each row. Let’s say we want to replicate the first row twice, the second row three times, the third row once, and the fourth row four times:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vector specifying the number of times to replicate each row</span></span>
<span id="cb6-2">replication_times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replicate rows according to the specified pattern</span></span>
<span id="cb6-5">replicated_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> replication_times), ]</span></code></pre></div>
</div>
<p>Output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">replicated_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       Name Age     City
1     Alice  25 New York
1.1   Alice  25 New York
2       Bob  30   London
2.1     Bob  30   London
2.2     Bob  30   London
3   Charlie  35    Paris
4     David  40    Tokyo
4.1   David  40    Tokyo
4.2   David  40    Tokyo
4.3   David  40    Tokyo</code></pre>
</div>
</div>
<p>In this example, we create a vector <code>replication_times</code> that specifies the number of times to replicate each row. We then use the <code>rep()</code> function with the <code>times</code> argument to repeat the row names according to the specified pattern. Finally, we subset the original data frame <code>df</code> using the repeated row names to create the new data frame <code>replicated_df</code>.</p>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Replicating rows in a data frame is a useful skill to have, and the best way to solidify your understanding is to practice. Why not try replicating rows in your own datasets or create a new data frame and experiment with different replication patterns?</p>
<p>Remember, the syntax for replicating rows is:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replicate each row the same number of times</span></span>
<span id="cb9-2">replicated_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> n))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replicate rows a different number of times</span></span>
<span id="cb9-5">replication_times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(n1, n2, n3, ...)</span>
<span id="cb9-6">replicated_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> replication_times), ]</span></code></pre></div>
<p>Replace <code>n</code> with the number of times you want to replicate each row, and replace <code>n1</code>, <code>n2</code>, <code>n3</code>, etc., with the desired number of times to replicate each row individually.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-19/index.html</guid>
  <pubDate>Tue, 19 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing plot_regression_residuals() from tidyAML: Unveiling the Power of Visualizing Regression Residuals</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-18/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings, fellow R enthusiasts! Today, we’re diving into the depths of tidyAML, specifically exploring a new gem in its arsenal: <code>plot_regression_residuals()</code>. Strap in as we embark on a journey to unravel the mysteries of regression residuals and witness how this function revolutionizes the way we visualize and understand our regression models.</p>
</section>
<section id="understanding-the-essence-of-regression-residuals" class="level1">
<h1>Understanding the Essence of Regression Residuals</h1>
<p>Before we delve into the intricacies of <code>plot_regression_residuals()</code>, let’s take a moment to appreciate the significance of regression residuals. In the realm of statistical modeling, residuals are like breadcrumbs left behind by our regression models. They represent the discrepancies between observed and predicted values, serving as crucial indicators of model performance and areas for improvement.</p>
</section>
<section id="unveiling-the-functionality" class="level1">
<h1>Unveiling the Functionality</h1>
<p>At its core, <code>plot_regression_residuals()</code> is designed to provide us with intuitive visualizations of regression residuals. Armed with the output from <code>extract_regression_residuals()</code>, this function empowers us to generate insightful ggplot2 plots effortlessly.</p>
</section>
<section id="syntax-demystified" class="level1">
<h1>Syntax Demystified</h1>
<p>The syntax of <code>plot_regression_residuals()</code> is elegantly simple:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_residuals</span>(.data)</span></code></pre></div>
<p>Here, <code>.data</code> refers to the data extracted from the output of <code>extract_regression_residuals()</code>. It’s like feeding the function with the raw material it needs to work its magic.</p>
</section>
<section id="bringing-theory-to-life-an-example" class="level1">
<h1>Bringing Theory to Life: An Example</h1>
<p>Let’s put theory into practice with a hands-on example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(earth)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a recipe</span></span>
<span id="cb2-6">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform fast regression</span></span>
<span id="cb2-9">frt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb2-10">  mtcars,</span>
<span id="cb2-11">  rec_obj,</span>
<span id="cb2-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"earth"</span>),</span>
<span id="cb2-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mars"</span>)</span>
<span id="cb2-14">)</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract regression residuals and plot</span></span>
<span id="cb2-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(frt_tbl, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_residuals</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-18/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-18/index_files/figure-html/unnamed-chunk-1-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[3]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-18/index_files/figure-html/unnamed-chunk-1-3.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this snippet, we prepare our data with a recipe, perform fast regression, extract the residuals, and finally, visualize them using <code>plot_regression_residuals()</code>. It’s like crafting a masterpiece with just a few strokes of the keyboard.</p>
</section>
<section id="unlocking-insights-with-visualization" class="level1">
<h1>Unlocking Insights with Visualization</h1>
<p>What makes <code>plot_regression_residuals()</code> truly remarkable is its ability to unlock hidden insights within our data. With a single function call, we can uncover patterns, detect outliers, and assess the homoscedasticity of our model—all through the lens of beautifully crafted plots.</p>
</section>
<section id="conclusion-empowering-data-exploration" class="level1">
<h1>Conclusion: Empowering Data Exploration</h1>
<p>As we draw the curtains on our exploration of <code>plot_regression_residuals()</code>, it’s evident that tidyAML continues to push the boundaries of data exploration and analysis. By democratizing the visualization of regression residuals, this function empowers R users of all skill levels to gain deeper insights into their models and make more informed decisions.</p>
<p>So, next time you find yourself knee-deep in regression analysis, remember the power that lies within <code>plot_regression_residuals()</code>. With just a single function call, you can transform raw residuals into actionable insights, propelling your data analysis journey to new heights.</p>
<p>To dive deeper into the world of <code>plot_regression_residuals()</code> and unleash its full potential, check out the official documentation <a href="https://www.spsanderson.com/tidyAML/reference/plot_regression_residuals.html">here</a>.</p>
<p>Until next time, happy coding and may your residuals always lead you to new discoveries!</p>


</section>

 ]]></description>
  <category>tidyaml</category>
  <category>rtip</category>
  <category>data-analysis</category>
  <category>data-science</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-18/index.html</guid>
  <pubDate>Mon, 18 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Plotting Training and Testing Predictions with tidyAML</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the realm of machine learning, visualizing model predictions is essential for understanding the performance and behavior of our algorithms. When it comes to regression tasks, plotting predictions alongside actual values provides valuable insights into how well our model is capturing the underlying patterns in the data. With the <code>plot_regression_predictions()</code> function in tidyAML, this process becomes seamless and informative.</p>
</section>
<section id="introducing-plot_regression_predictions" class="level1">
<h1>Introducing <code>plot_regression_predictions()</code></h1>
<p>The <code>plot_regression_predictions()</code> function is a powerful tool for visualizing regression predictions in R. Developed as part of the tidyAML package, it leverages the capabilities of ggplot2 to create insightful plots that compare actual values with model predictions, both for training and testing datasets.</p>
</section>
<section id="syntax-and-arguments" class="level1">
<h1>Syntax and Arguments</h1>
<p>Let’s break down the syntax and arguments of <code>plot_regression_predictions()</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_predictions</span>(.data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span></code></pre></div>
<ul>
<li><code>.data</code>: This argument takes the data from the output of the <code>extract_regression_residuals()</code> function.</li>
<li><code>.output</code>: By default, this argument is set to “list”, which returns a list of plots. Alternatively, you can choose “facet”, which returns a single faceted plot.</li>
</ul>
</section>
<section id="example-usage" class="level1">
<h1>Example Usage</h1>
<p>To illustrate how <code>plot_regression_predictions()</code> works in practice, let’s consider an example using the <code>mtcars</code> dataset and a simple linear regression model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the recipe</span></span>
<span id="cb2-5">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train the model</span></span>
<span id="cb2-8">frt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb2-9">  mtcars,</span>
<span id="cb2-10">  rec_obj</span>
<span id="cb2-11">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Setting default kernel parameters  
 Setting default kernel parameters  </code></pre>
</div>
</div>
<p>In this example, we’ve created a recipe for predicting <code>mpg</code> based on other variables in the <code>mtcars</code> dataset. We then trained a fast regression model using <code>fast_regression()</code> from the recipes package.</p>
<p>Now, let’s use <code>extract_wflw_pred()</code> to extract the predictions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract predictions</span></span>
<span id="cb4-2">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(frt_tbl))</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(preds)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 4
  .model_type     .data_category .data_type .value
  &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;       &lt;dbl&gt;
1 lm - linear_reg actual         actual       15.2
2 lm - linear_reg actual         actual       30.4
3 lm - linear_reg actual         actual       21.4
4 lm - linear_reg actual         actual       33.9
5 lm - linear_reg actual         actual       19.7
6 lm - linear_reg actual         actual       10.4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(preds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.model_type)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "lm - linear_reg"            "brulee - linear_reg"       
 [3] "glm - linear_reg"           "stan - linear_reg"         
 [5] "dbarts - bart"              "xgboost - boost_tree"      
 [7] "rpart - decision_tree"      "earth - mars"              
 [9] "nnet - mlp"                 "brulee - mlp"              
[11] "kknn - nearest_neighbor"    "ranger - rand_forest"      
[13] "randomForest - rand_forest" "LiblineaR - svm_linear"    
[15] "kernlab - svm_linear"       "kernlab - svm_poly"        
[17] "kernlab - svm_rbf"         </code></pre>
</div>
</div>
<p>With the predictions extracted, we can now plot the regression predictions using <code>plot_regression_predictions()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot regression predictions</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_predictions</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"facet"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_regression_predictions</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[3]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-4.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[4]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-5.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[5]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-6.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[6]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex_files/figure-html/unnamed-chunk-3-7.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This will generate a set of plots comparing actual values with model predictions for both the training and testing datasets.</p>
</section>
<section id="interpreting-the-plots" class="level1">
<h1>Interpreting the Plots</h1>
<p>The plots produced by <code>plot_regression_predictions()</code> offer valuable insights into the performance of our regression model. Here’s what you can expect to see:</p>
<ul>
<li><p><strong>Actual vs.&nbsp;Predicted Values</strong>: The main plot compares the actual values (y-axis) with the predicted values also (y-axis). This allows you to see how the model performs across the range of observed values both in training and in testing.</p></li>
<li><p><strong>Training vs.&nbsp;Testing</strong>: If you choose the “facet” output option, you’ll see separate plots for training and testing data sets by model type.</p></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In summary, <code>plot_regression_predictions()</code> is a valuable tool for visualizing regression predictions in R. Whether you’re assessing model performance, diagnosing errors, or communicating results to stakeholders, these plots provide a clear and intuitive way to understand how well your model is capturing the underlying patterns in the data. So next time you’re working on a regression task with tidyAML, don’t forget to leverage the power of visualization with <code>plot_regression_predictions()</code>!</p>


</section>

 ]]></description>
  <category>tidyaml</category>
  <category>rtip</category>
  <category>data-analysis</category>
  <category>data-science</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-15/idnex.html</guid>
  <pubDate>Fri, 15 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unleash the Power of Your Data: Extend Excel with Python and R!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-14/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever felt limited by Excel’s capabilities? Sure, it’s fantastic for basic tasks and creating clear spreadsheets, but what if your data craves something more? What if you have complex analyses or stunning visualizations in mind? This is where my new book, <strong>Extending Excel with Python and R: Unlock the Potential of Analytics Languages for Advanced Data Manipulation and Visualization</strong>, comes in!</p>
<p>In this book, I’ll be your guide on a journey to unlock the true potential of your data. We’ll delve into the world of Python and R, two powerful programming languages that can supercharge your Excel expertise.</p>
<p><strong>Why Python and R?</strong></p>
<p>These languages aren’t Excel replacements; they’re superpowers! Python and R are designed for heavy-duty data analysis and manipulation. They can handle massive datasets, automate complex tasks, and create mind-blowing visualizations that would leave Excel speechless.</p>
<p><strong>But I don’t know how to code!</strong></p>
<p>Don’t worry! This book is designed for users at all levels. Even if you’ve never written a line of code before, I’ll break down the basics of Python and R in a way that’s easy to understand. We’ll start with simple examples and gradually build your skills, so you’ll be conquering complex tasks in no time.</p>
<p><strong>What will you learn?</strong></p>
<ul>
<li><strong>Extracting and Importing Data:</strong> Learn how to effortlessly bring data from various sources into your Python or R environment for seamless analysis.</li>
<li><strong>Data Cleaning and Manipulation:</strong> Master the art of transforming your data into a usable format. No more messy spreadsheets holding you back!</li>
<li><strong>Advanced Data Analysis:</strong> Unleash the power of statistical functions and modeling techniques to uncover hidden insights within your data.</li>
<li><strong>Creating Stunning Visualizations:</strong> Go beyond basic charts and graphs. We’ll create interactive and informative visualizations that will bring your data to life.</li>
<li><strong>Bringing it Back to Excel:</strong> Seamlessly integrate your Python and R results back into Excel, so you can leverage the best of both worlds.</li>
</ul>
<p><strong>Extending Excel with Python and R</strong> is more than just a book; it’s your gateway to a whole new level of data expertise. Imagine the possibilities! You’ll be able to:</p>
<ul>
<li><strong>Automate tedious tasks:</strong> Free up your time for what matters – strategic analysis and data-driven decision making.</li>
<li><strong>Tackle complex datasets:</strong> No dataset is too big or too messy for your new skillset.</li>
<li><strong>Impress your audience:</strong> Create presentations and reports that will leave a lasting impression.</li>
</ul>
<p><strong>Ready to unlock the true potential of your data?</strong> Get your copy of <strong>Extending Excel with Python and R: Unlock the Potential of Analytics Languages for Advanced Data Manipulation and Visualization</strong> today! Available on Amazon: <a href="https://www.amazon.com/dp/1804610690/ref=tsm_1_fb_lk" class="uri">https://www.amazon.com/dp/1804610690/ref=tsm_1_fb_lk</a></p>
<p>Let’s embark on this data adventure together!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>excel</category>
  <category>python</category>
  <category>data-analysis</category>
  <category>viz</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-14/index.html</guid>
  <pubDate>Thu, 14 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>🚀 Exciting News! 🚀</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-13/index.html</link>
  <description><![CDATA[ 




<p>I’m thrilled to announce the latest release of tidyAML, version 0.0.5, now available for download on CRAN or GitHub! 🎉</p>
<p>In this release, we’ve introduced some fantastic new features and made minor fixes and improvements to enhance your experience with tidyAML.</p>
<p><strong>New Features:</strong></p>
<p>📈 plot_regression_residuals(): Dive deeper into your data analysis with this new function that allows you to visualize residuals, providing valuable insights into your regression models.</p>
<p>📊 plot_regression_predictions(): Want to see predictions from your model? Now you can with this handy function, making it easier than ever to understand your model’s performance.</p>
<p><strong>Minor Fixes and Improvements:</strong></p>
<p>🛠️ load_deps(): We’ve listened to your feedback and dropped the selection message from this function for a smoother user experience.</p>
<p>🔄 fast_regression() and fast_classification(): Say goodbye to NULL predictions! We’ve updated these functions to ensure more accurate results for your analyses.</p>
<p>With tidyAML 0.0.5, we’re committed to providing you with the tools you need to streamline your data analysis and make informed decisions. Whether you’re a seasoned data scientist or just starting out, tidyAML has something for everyone.</p>
<p>Download tidyAML 0.0.5 today and take your data analysis to the next level! Don’t forget to share your feedback and experiences with us - we love hearing from our users.</p>
<p>Happy analyzing! 📊✨</p>



 ]]></description>
  <category>tidyaml</category>
  <category>rtip</category>
  <category>data-analysis</category>
  <category>data-science</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-13/index.html</guid>
  <pubDate>Wed, 13 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Random Sampling in R with the sample() Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-12/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The sample() function in R is a powerful tool that allows you to generate random samples from a given dataset or vector. It’s an essential function for tasks such as data analysis, Monte Carlo simulations, and randomized experiments. In this blog post, we’ll explore the sample() function in detail and provide examples to help you understand how to use it effectively.</p>
</section>
<section id="understanding-the-sample-function" class="level1">
<h1>Understanding the sample() Function</h1>
<p>The sample() function in R has the following syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(x, size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<ul>
<li><code>x</code>: This is the vector or data structure from which you want to draw the sample.</li>
<li><code>size</code>: This specifies the number of elements you want to sample from <code>x</code>.</li>
<li><code>replace</code>: This is a logical argument that determines whether sampling should be done with replacement (TRUE) or without replacement (FALSE). The default value is FALSE.</li>
<li><code>prob</code>: This is an optional vector of probability weights, allowing you to perform weighted random sampling.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="simple-random-sampling" class="level2">
<h2 class="anchored" data-anchor-id="simple-random-sampling">Simple Random Sampling</h2>
<p>Let’s start with a basic example of simple random sampling without replacement:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a vector</span></span>
<span id="cb2-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drawing a sample of 5 elements without replacement</span></span>
<span id="cb2-5">sample_without_replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(numbers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
<p>This code will generate a random sample of 5 unique elements from the <code>numbers</code> vector. The output might look something like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sample_without_replacement)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7 8 3 6 1</code></pre>
</div>
</div>
</section>
<section id="sampling-with-replacement" class="level2">
<h2 class="anchored" data-anchor-id="sampling-with-replacement">Sampling with Replacement</h2>
<p>Sometimes, you may want to sample with replacement, which means that an element can be selected multiple times. To do this, you can set the <code>replace</code> argument to <code>TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drawing a sample of 5 elements with replacement</span></span>
<span id="cb5-2">sample_with_replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(numbers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>This code might produce an output like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sample_with_replacement)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 6 6 2</code></pre>
</div>
</div>
<p>Notice that the number 2 appears twice in the sample, since we’re sampling with replacement.</p>
</section>
<section id="weighted-random-sampling" class="level2">
<h2 class="anchored" data-anchor-id="weighted-random-sampling">Weighted Random Sampling</h2>
<p>The <code>prob</code> argument in the sample() function allows you to perform weighted random sampling. This means that elements have different probabilities of being selected based on the provided weights. Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a vector of weights</span></span>
<span id="cb8-2">weights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drawing a weighted sample of 3 elements without replacement</span></span>
<span id="cb8-5">weighted_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> weights)</span></code></pre></div>
</div>
<p>In this example, the numbers 1, 2, 3, and 4 have weights of 0.1, 0.2, 0.3, and 0.4, respectively. The output might look like:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(weighted_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 3 2</code></pre>
</div>
</div>
<p>Notice how the elements with higher weights (4 and 3) are more likely to be selected in the sample.</p>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now that you’ve seen several examples of using the sample() function in R, it’s time to put your knowledge to the test! Here are some exercises for you to try:</p>
<ol type="1">
<li>Generate a random sample of 10 elements from the letters of the English alphabet.</li>
<li>Sample 5 elements with replacement from the vector <code>c(10, 20, 30, 40, 50)</code>.</li>
<li>Create a vector of weights and perform weighted random sampling to select 3 elements from the vector <code>c("apple", "banana", "orange", "grape")</code>.</li>
</ol>
<p>Feel free to experiment with different combinations of arguments and datasets to solidify your understanding of the sample() function. Happy sampling!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-12/index.html</guid>
  <pubDate>Tue, 12 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Wrangling Names in R: Your Guide to the make.names() Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-11/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever tried to use a number or special character as a name for a variable or column in R, only to be met with an error? R has specific rules for what constitutes a valid name, and the <code>make.names</code> function is your knight in shining armor when it comes to wrangling these names into something R understands.</p>
</section>
<section id="what-is-make.names" class="level1">
<h1>What is make.names?</h1>
<p>Think of <code>make.names</code> as a name janitor. It takes a vector of characters (potential names) and ensures they comply with R’s naming conventions. These conventions say a valid name:</p>
<ul>
<li>Must start with a letter or a dot (“.”)</li>
<li>Can only contain letters, numbers, periods, and underscores</li>
<li>Cannot be a reserved word in R (like <code>if</code>, <code>else</code>, or <code>for</code>)</li>
</ul>
</section>
<section id="how-to-use-make.names" class="level1">
<h1>How to Use make.names</h1>
<p>Using <code>make.names</code> is straightforward. You simply provide it with a character vector containing your desired names, and it returns a new vector with valid names. Here’s the basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">new_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make.names</span>(old_names)</span></code></pre></div>
</section>
<section id="making-names-unique-optional" class="level1">
<h1>Making Names Unique (Optional)</h1>
<p>By default, <code>make.names</code> doesn’t guarantee unique names. If you have duplicates, it might just keep them. To ensure unique names, add the <code>unique = TRUE</code> argument:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">unique_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make.names</span>(old_names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unique =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>This will modify duplicate names slightly to make them distinct.</p>
</section>
<section id="examples-in-action" class="level1">
<h1>Examples in Action!</h1>
<p>Let’s see <code>make.names</code> in action with some examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example 1: Fix numeric names</span></span>
<span id="cb3-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb3-3">valid_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make.names</span>(numbers)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(valid_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "X10" "X20" "X30"</code></pre>
</div>
</div>
<p>In this case, <code>make.names</code> prepends an “X” to each number to make them valid names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example 2: Handle special characters</span></span>
<span id="cb5-2">special_chars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data#1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"result$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"graph!"</span>)</span>
<span id="cb5-3">clean_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make.names</span>(special_chars)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(clean_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.1"  "result." "graph." </code></pre>
</div>
</div>
<p>Here, <code>make.names</code> removes special characters and replaces them with periods (except for “$” which is removed).</p>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give it a Try!</h1>
<p>R is a playground for exploration. Here are some challenges to try with <code>make.names</code>:</p>
<ol type="1">
<li>Create a vector with names containing spaces and underscores. Use <code>make.names</code> to see how it handles them.</li>
<li>Try using <code>make.names</code> on a data frame’s column names. What happens?</li>
<li>Explore the <code>unique = TRUE</code> argument. Can you think of situations where it might be necessary?</li>
</ol>
<p>Remember, <code>make.names</code> is your friend when dealing with non-standard names in R. By understanding its purpose and using it effectively, you can keep your R code clean and error-free. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-11/index.html</guid>
  <pubDate>Mon, 11 Mar 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
