<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description>Steve&#39;s Data Tips and Tricks in R, C, SQL and Linux</description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Fri, 11 Apr 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>Flow Control and Branching With case in Linux: A Beginner’s Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-04-11/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><em>This comprehensive guide explains how to use the case statement in Linux for clean, effective decision-making in your scripts. Perfect for beginners who want to understand branching logic and flow control with practical, working examples.</em></p>
</blockquote>
<p><em>Author’s Note: I am learning this as I write this series. There might be some mistakes, so please point them out in the comments. We’ll learn together!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When writing scripts in Linux, you’ll often need your program to make decisions based on different conditions. While the <code>if</code> statement is one way to handle this, the <code>case</code> statement provides a cleaner, more readable alternative when dealing with multiple choices. It’s especially useful for creating menu-driven programs or handling various command-line options.</p>
<p>The <code>case</code> statement is like a traffic director for your script - it examines a value and routes your program down different paths depending on what it finds. Let’s dive in!</p>
</section>
<section id="basic-syntax-of-the-case-statement" class="level1">
<h1>Basic Syntax of the case Statement</h1>
<p>Here’s the fundamental structure of a <code>case</code> statement:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> word <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb1-2">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">pattern1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">commands</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">pattern2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">commands</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-4">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default_commands</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
<p>Let’s break this down:</p>
<ul>
<li><code>word</code> is the variable or value you want to test</li>
<li><code>pattern1</code>, <code>pattern2</code>, etc. are the patterns you’re matching against</li>
<li><code>commands</code> are what you want to run when a match is found</li>
<li><code>*)</code> is the catch-all pattern (like an “else” statement)</li>
<li><code>;;</code> marks the end of each case option</li>
<li><code>esac</code> (that’s “case” spelled backward) closes the statement</li>
</ul>
<p>Think of it like a multiple-choice question: “If the value is X, do this; if it’s Y, do that; otherwise, do something else.”</p>
</section>
<section id="simple-working-examples" class="level1">
<h1>Simple Working Examples</h1>
<p>Let’s look at some practical examples you can try right away.</p>
<section id="example-1-simple-menu-system" class="level2">
<h2 class="anchored" data-anchor-id="example-1-simple-menu-system">Example 1: Simple Menu System</h2>
<p>This is a classic use case for the <code>case</code> statement - creating a menu for users:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please Select:</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1. Display System Information</span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2. Display Disk Space</span></span>
<span id="cb2-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3. Display Home Space Utilization</span></span>
<span id="cb2-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0. Quit"</span></span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter selection [0-3] &gt; "</span></span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$REPLY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb2-9">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Program terminated."</span></span>
<span id="cb2-10">       <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb2-11">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hostname: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOSTNAME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-12">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uptime</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb2-13">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb2-14">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Home Space Utilization"</span></span>
<span id="cb2-15">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sh</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOME</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb2-16">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid entry"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-17">       <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb2-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
<section id="how-this-works" class="level2">
<h2 class="anchored" data-anchor-id="how-this-works">How This Works:</h2>
<ol type="1">
<li>We display a menu with numbered options</li>
<li>The <code>read -p</code> command asks for input with a prompt</li>
<li>The <code>case</code> statement checks the value stored in <code>$REPLY</code> (the default variable for <code>read</code>)</li>
<li>Based on what the user entered:</li>
</ol>
<ul>
<li><code>0</code>: The program displays “Program terminated” and exits</li>
<li><code>1</code>: Shows the hostname and uptime information</li>
<li><code>2</code>: Displays disk space usage with <code>df -h</code> (human-readable format)</li>
<li><code>3</code>: Shows home directory space usage</li>
<li>Any other input: Shows an error message and exits with error code 1</li>
</ul>
<p>This is much cleaner than writing multiple <code>if/elif/else</code> statements!</p>
</section>
<section id="example-2-yesno-response-handler" class="level2">
<h2 class="anchored" data-anchor-id="example-2-yesno-response-handler">Example 2: Yes/No Response Handler</h2>
<p>Here’s a simple script that processes yes/no responses:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you want to continue? (y/n) &gt; "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">answer</span></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$answer</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb3-4">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[Yy]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[Yy][Ee][Ss]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> </span>
<span id="cb3-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Continuing..."</span></span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb3-7">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[Nn]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[Nn][Oo]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb3-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stopping..."</span></span>
<span id="cb3-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 0</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb3-11">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb3-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid response - please answer y or n"</span></span>
<span id="cb3-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb3-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb3-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
<section id="how-this-works-1" class="level2">
<h2 class="anchored" data-anchor-id="how-this-works-1">How This Works:</h2>
<ol type="1">
<li>The script asks if the user wants to continue</li>
<li>The <code>case</code> statement:</li>
</ol>
<ul>
<li>Matches <code>y</code>, <code>Y</code>, <code>yes</code>, <code>YES</code>, etc. using pattern <code>[Yy]|[Yy][Ee][Ss]</code></li>
<li>Matches <code>n</code>, <code>N</code>, <code>no</code>, <code>NO</code>, etc. using pattern <code>[Nn]|[Nn][Oo]</code></li>
<li>For any other input, shows an error message</li>
</ul>
<p>This example shows how to use pattern matching to accept multiple forms of the same answer.</p>
</section>
<section id="example-3-file-type-handler" class="level2">
<h2 class="anchored" data-anchor-id="example-3-file-type-handler">Example 3: File Type Handler</h2>
<p>This script demonstrates how to perform actions based on file extensions:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb4-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.txt"</span></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb4-4">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text file"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb4-5">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.jpg</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.png</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image file"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb4-6">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.sh</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shell script"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb4-7">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unknown file type"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb4-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
<section id="how-this-works-2" class="level2">
<h2 class="anchored" data-anchor-id="how-this-works-2">How This Works:</h2>
<ol type="1">
<li>We define a variable <code>file</code> with the value “example.txt”</li>
<li>The <code>case</code> statement checks the file name against different patterns:</li>
</ol>
<ul>
<li><code>*.txt</code> matches files ending with .txt</li>
<li><code>*.jpg|*.png</code> matches files ending with either .jpg or .png</li>
<li><code>*.sh</code> matches shell scripts</li>
<li><code>*</code> matches anything else</li>
</ul>
<p>Try modifying the <code>file</code> variable to see different results!</p>
</section>
</section>
<section id="pattern-matching-features" class="level1">
<h1>Pattern Matching Features</h1>
<p>The <code>case</code> statement supports several pattern matching techniques:</p>
<ol type="1">
<li><p><strong>Single character matches</strong>: <code>'a)'</code> matches the character ‘a’</p></li>
<li><p><strong>Character classes</strong>: <code>[[:alpha:]])</code> matches any alphabetic character</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb5-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[[:lower:]]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lowercase letter"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb5-4">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[[:upper:]]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Uppercase letter"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb5-5">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[[:digit:]]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Digit"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb5-6">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other character"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb5-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div></li>
<li><p><strong>Multiple patterns using |</strong>: <code>'a|A)'</code> matches either ‘a’ or ‘A’</p></li>
<li><p><strong>Wildcard matching</strong>: <code>'*.txt)'</code> matches any string ending with .txt</p></li>
<li><p><strong>Day of Week Example</strong>: Group similar cases together</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get current day of week (1-7, 1 is Monday)</span></span>
<span id="cb6-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">day</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +%u<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$day</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb6-5">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb6-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's Monday - Start of the work week!"</span></span>
<span id="cb6-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb6-8">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">4</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb6-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a regular work day"</span></span>
<span id="cb6-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb6-11">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">5</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb6-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's Friday - Almost weekend!"</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb6-14">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">6</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">7</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb6-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's the weekend!"</span></span>
<span id="cb6-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb6-17">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb6-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid day number"</span></span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div></li>
</ol>
<p>This example shows how to group cases (like treating Tuesday, Wednesday, and Thursday the same).</p>
</section>
<section id="advanced-feature-multiple-actions-per-match" class="level1">
<h1>Advanced Feature: Multiple Actions Per Match</h1>
<p>In Bash 4.0 and newer, you can use <code>;;&amp;</code> instead of <code>;;</code> to continue checking patterns even after a match:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb7-2">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[[:lower:]]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Is lowercase"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;&amp;</span></span>
<span id="cb7-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[[:alpha:]]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Is alphabetic"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;&amp;</span></span>
<span id="cb7-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
<p>If <code>$char</code> contains a lowercase letter, both messages will be displayed because the script continues checking patterns after the first match.</p>
<hr>
</section>
<section id="common-mistakes-to-avoid" class="level1">
<h1>Common Mistakes to Avoid</h1>
<p>When using <code>case</code> statements, watch out for these beginner pitfalls:</p>
<section id="forgetting-the-catch-all-pattern" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-the-catch-all-pattern">1. Forgetting the Catch-all Pattern</h2>
<p>Always include a catch-all pattern (<code>*</code>) as the last case. Without it, unexpected input might not be handled properly:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad example - no catch-all</span></span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb8-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 1"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb8-4">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 2"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good example - with catch-all</span></span>
<span id="cb8-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb8-9">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 1"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb8-10">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 2"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb8-11">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid option"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb8-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
<section id="not-quoting-variables" class="level2">
<h2 class="anchored" data-anchor-id="not-quoting-variables">2. Not Quoting Variables</h2>
<p>When using variables in scripts, always quote them to handle spaces and special characters properly:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad example - unquoted variable</span></span>
<span id="cb9-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file.txt</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will cause an error!</span></span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should be "$file"</span></span>
<span id="cb9-4">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text file"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good example - quoted variable</span></span>
<span id="cb9-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my file.txt"</span></span>
<span id="cb9-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb9-10">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text file"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb9-11">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Other file"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb9-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
<section id="forgetting" class="level2">
<h2 class="anchored" data-anchor-id="forgetting">3. Forgetting ;;</h2>
<p>Each case pattern must end with <code>;;</code> - forgetting this will cause syntax errors:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad example - missing ;;</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb10-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 1"</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Missing ;;</span></span>
<span id="cb10-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 2"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb10-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good example</span></span>
<span id="cb10-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb10-9">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 1"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb10-10">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Option 2"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb10-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
<section id="mixing-up-case-syntax-with-if-syntax" class="level2">
<h2 class="anchored" data-anchor-id="mixing-up-case-syntax-with-if-syntax">4. Mixing Up case Syntax With if Syntax</h2>
<p>Remember that <code>case</code> has its own unique syntax different from <code>if</code> statements:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad example - mixing syntaxes</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb11-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-eq</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1;</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">then</span>  <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">#</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Wrong!</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Don</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t use if inside case</span></span>
<span id="cb11-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        echo "Option 1"</span></span>
<span id="cb11-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    fi ;;</span></span>
<span id="cb11-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">esac</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"># Good example</span></span>
<span id="cb11-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">case $choice in</span></span>
<span id="cb11-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    1) echo "Option 1" ;;</span></span>
<span id="cb11-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">esac</span></span></code></pre></div>
</section>
</section>
<section id="best-practices-for-using-case-statements" class="level1">
<h1>Best Practices for Using case Statements</h1>
<p>Follow these guidelines for clean, effective <code>case</code> statements:</p>
<ol type="1">
<li><p><strong>Use for multiple choices</strong>: When you have 3+ options, <code>case</code> is usually cleaner than <code>if/elif/else</code></p></li>
<li><p><strong>Add comments for complex patterns</strong>: Explain what your patterns are matching</p></li>
<li><p><strong>Include a catch-all pattern</strong>: Always add <code>*)</code> as the last case</p></li>
<li><p><strong>Group related patterns</strong>: Use the <code>|</code> operator to group similar cases</p></li>
<li><p><strong>Quote your variables</strong>: Always use quotes around variables: <code>"$variable"</code></p></li>
<li><p><strong>Test your scripts</strong>: Try different inputs to ensure your script handles all cases</p></li>
</ol>
<hr>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice! Try writing a simple script that takes a command-line argument and tells you whether it’s a vowel, consonant, number, or something else.</p>
<p>Here’s a starter template:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if an argument was provided</span></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$#</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb12-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide a single character as an argument"</span></span>
<span id="cb12-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb12-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first character of the first argument</span></span>
<span id="cb12-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># YOUR case STATEMENT HERE</span></span>
<span id="cb12-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> ... <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb12-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your patterns here</span></span>
<span id="cb12-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
<details>
<summary>
Click to See Solution!
</summary>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if an argument was provided</span></span>
<span id="cb13-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$#</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb13-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please provide a single character as an argument"</span></span>
<span id="cb13-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb13-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first character of the first argument</span></span>
<span id="cb13-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the character type</span></span>
<span id="cb13-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb13-13">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[aeiouAEIOU]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> </span>
<span id="cb13-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' is a vowel"</span></span>
<span id="cb13-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb13-16">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb13-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' is a consonant"</span></span>
<span id="cb13-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb13-19">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">[0-9]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb13-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' is a number"</span></span>
<span id="cb13-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb13-22">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb13-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$char</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' is a special character"</span></span>
<span id="cb13-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb13-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
Save this to a file (e.g., <code>charcheck.sh</code>), make it executable with <code>chmod +x charcheck.sh</code>, and run it with a character argument: <code>./charcheck.sh a</code>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>The <code>case</code> statement provides a clean way to handle multiple choice decisions in shell scripts</li>
<li>It’s more readable than multiple <code>if</code> statements for handling several conditions</li>
<li>Basic syntax: <code>case variable in pattern) commands ;; esac</code></li>
<li>Always include a catch-all pattern (<code>*</code>) as the last case</li>
<li>Use pattern matching features like wildcards (<code>*</code>), character classes (<code>[:alpha:]</code>), and pattern grouping (<code>|</code>)</li>
<li>Quote your variables to avoid issues with spaces and special characters</li>
<li>Test your scripts with various inputs to ensure they work correctly</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>case</code> statement is an essential tool in your Linux scripting arsenal. By using it effectively, you can create cleaner, more readable scripts that handle multiple conditions elegantly. Whether you’re building a menu system, processing command-line options, or categorizing data, the <code>case</code> statement offers a structured approach to decision-making in your scripts.</p>
<p>Remember that practice is key - try modifying the examples we’ve covered and create your own scripts to solidify your understanding. As you become more comfortable with <code>case</code> statements, you’ll find they make your scripts more maintainable and easier to debug.</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="when-should-i-use-a-case-statement-instead-of-ifelse" class="level2">
<h2 class="anchored" data-anchor-id="when-should-i-use-a-case-statement-instead-of-ifelse">1. When should I use a case statement instead of if/else?</h2>
<p>Use a <code>case</code> statement when you need to check a single variable against multiple possible values. If you find yourself writing many <code>elif</code> statements checking the same variable, consider switching to <code>case</code>.</p>
</section>
<section id="can-i-use-case-with-numbers" class="level2">
<h2 class="anchored" data-anchor-id="can-i-use-case-with-numbers">2. Can I use case with numbers?</h2>
<p>Absolutely! You can match specific numbers or ranges. For example: <code>case $num in 1) ... ;; [2-5]) ... ;; esac</code></p>
</section>
<section id="how-do-i-match-multiple-patterns-in-one-case" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-match-multiple-patterns-in-one-case">3. How do I match multiple patterns in one case?</h2>
<p>Use the pipe symbol (<code>|</code>) to match multiple patterns: <code>case $var in a|A|apple) ... ;; esac</code></p>
</section>
<section id="can-i-use-wildcards-in-case-patterns" class="level2">
<h2 class="anchored" data-anchor-id="can-i-use-wildcards-in-case-patterns">4. Can I use wildcards in case patterns?</h2>
<p>Yes, you can use wildcards like <code>*</code> (matches anything) and <code>?</code> (matches any single character).</p>
</section>
<section id="how-do-i-make-case-statements-case-insensitive" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-make-case-statements-case-insensitive">5. How do I make case statements case-insensitive?</h2>
<p>You can either use pattern grouping like <code>[Yy][Ee][Ss]</code> to match “yes”, “YES”, “Yes”, etc., or use the <code>shopt -s nocasematch</code> command before your case statement (but remember to reset it with <code>shopt -u nocasematch</code> after).</p>
<hr>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.shell-tips.com/bash/pitfalls/">Shell Tips - “Top 10 Bash Pitfalls You Don’t Want to Make”</a><br>
<em>A comprehensive guide to common mistakes in bash scripting and how to avoid them.</em></p></li>
<li><p><a href="https://stackoverflow.com/questions/17949857/bash-does-not-allow-if-statement-inside-case-statement">Stack Overflow - “Bash does not allow if statement inside case statement”</a><br>
<em>Discussion of syntax limitations when combining different control structures in bash scripts.</em></p></li>
</ol>
<hr>
<section id="further-reading" class="level2">
<h2 class="anchored" data-anchor-id="further-reading">Further Reading</h2>
<p>The following resources were also mentioned in the original document:</p>
<ul>
<li><a href="http://tiswww.case.edu/php/chet/bash/bashref.html#SEC21">Bash Reference Manual</a></li>
<li><a href="http://tldp.org/LDP/abs/html/testbranch.html">Advanced Bash-Scripting Guide</a></li>
</ul>
<hr>
<p><strong>Note to readers:</strong> If you found this guide helpful, please consider bookmarking these resources for future reference. The online bash community is also an excellent place to ask questions and share your own experiences with flow control in Linux scripting.</p>
<p>Have you discovered any other helpful resources for learning bash scripting? Feel free to share them in the comments below!</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-04-11/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>case esac in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-04-11/</guid>
  <pubDate>Fri, 11 Apr 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Beginner’s Guide to Random File Access in C: Save, Read, and Modify Files Like a Pro</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-04-09/</link>
  <description><![CDATA[ 





<p><em>Author’s Note: Hello fellow learners! I’m writing this series as I continue my own journey with C programming. I believe the best way to learn is to teach, so I’m documenting these concepts as I understand them. We’re all learning together, and I hope my explanations help make these topics clearer for you too!</em></p>
<section id="introduction-understanding-random-file-access-in-c" class="level1">
<h1>Introduction: Understanding Random File Access in C</h1>
<p>For beginners trying to get into C programming, file handling is an important skill that opens up possibilities for data persistence. While sequential file access (reading or writing files from start to finish) might be familiar to you, today we’ll explore a more flexible approach: <strong>random file access</strong>.</p>
<p>Random file access allows you to jump to any position within a file, read or modify data at that specific location, and continue working elsewhere in the file. Think of it like a music playlist where you can skip to any song rather than having to listen from beginning to end.</p>
<p>By the end of this article, you’ll understand how to save, read, and manipulate data at any position in a file using C’s random access file functions.</p>
</section>
<section id="why-use-random-file-access" class="level1">
<h1>Why Use Random File Access?</h1>
<p>Before getting into the how-to, let’s understand why random access is valuable:</p>
<ul>
<li><strong>Efficiency</strong>: You can update specific records without rewriting the entire file</li>
<li><strong>Flexibility</strong>: Read and write operations can be performed in any order</li>
<li><strong>Data Management</strong>: Ideal for applications that need to update specific portions of data (like user records, game saves, or configuration files)</li>
</ul>
<p>As one beginner put it: “Sequential files are like cassette tapes, while random access files are like CDs where you can jump to any track instantly.”</p>
</section>
<section id="getting-started-opening-files-for-random-access" class="level1">
<h1>Getting Started: Opening Files for Random Access</h1>
<p>To work with random access files in C, you first need to open them with the right access mode. Unlike sequential files where you choose either reading or writing mode, random access requires special mode flags.</p>
<section id="random-access-file-modes" class="level2">
<h2 class="anchored" data-anchor-id="random-access-file-modes">Random Access File Modes</h2>
<p>Here are the three primary modes for random access files:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 41%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Mode</th>
<th>Description</th>
<th>Use Case</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>"r+"</code></td>
<td>Opens an existing file for both reading and writing</td>
<td>When you need to modify an existing file</td>
</tr>
<tr class="even">
<td><code>"w+"</code></td>
<td>Creates a new file (or truncates existing) for both reading and writing</td>
<td>When you need a fresh file</td>
</tr>
<tr class="odd">
<td><code>"a+"</code></td>
<td>Opens in append mode but allows reading and modification throughout</td>
<td>When you want to add data but also modify existing content</td>
</tr>
</tbody>
</table>
<p>Let’s look at how to open a file for random access:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">    </span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Opening a file for both reading and writing</span></span>
<span id="cb1-7">    filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-8">    </span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Always check if file opened successfully</span></span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-11">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// File operations would go here</span></span>
<span id="cb1-16">    </span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Close file when done</span></span>
<span id="cb1-18">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-19">    </span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The key part to notice is <code>"r+"</code> which tells C that we want to both read from and write to this file.</p>
</section>
</section>
<section id="navigating-within-files-the-magic-of-fseek" class="level1">
<h1>Navigating Within Files: The Magic of fseek()</h1>
<p>The heart of random file access is the <code>fseek()</code> function. This powerful function allows you to position the file pointer anywhere within the file before reading or writing.</p>
<section id="understanding-fseek-parameters" class="level2">
<h2 class="anchored" data-anchor-id="understanding-fseek-parameters">Understanding fseek() Parameters</h2>
<p>The <code>fseek()</code> function takes three parameters:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1">fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> origin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<ul>
<li><code>filePtr</code>: The file pointer returned by <code>fopen()</code></li>
<li><code>offset</code>: Number of bytes to move (can be positive or negative)</li>
<li><code>origin</code>: Reference point for the movement</li>
</ul>
<p>The <code>origin</code> parameter can be one of three constants:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Constant</th>
<th>Description</th>
<th>Moves From</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>SEEK_SET</code></td>
<td>Beginning of file</td>
<td>First byte (position 0)</td>
</tr>
<tr class="even">
<td><code>SEEK_CUR</code></td>
<td>Current position</td>
<td>Wherever the pointer currently is</td>
</tr>
<tr class="odd">
<td><code>SEEK_END</code></td>
<td>End of file</td>
<td>Last byte in the file</td>
</tr>
</tbody>
</table>
</section>
<section id="visual-example-of-fseek-positions" class="level2">
<h2 class="anchored" data-anchor-id="visual-example-of-fseek-positions">Visual Example of fseek() Positions</h2>
<pre><code>File: "HELLO WORLD"
       0123456789A
       
fseek(filePtr, 0, SEEK_SET) → Points to 'H'
fseek(filePtr, 6, SEEK_SET) → Points to 'W'
fseek(filePtr, -5, SEEK_END) → Points to 'W' (counting 5 back from end)
fseek(filePtr, 2, SEEK_CUR) → Moves 2 positions forward from current position</code></pre>
</section>
</section>
<section id="your-first-random-access-program-writing-and-reading-the-alphabet" class="level1">
<h1>Your First Random Access Program: Writing and Reading the Alphabet</h1>
<p>Let’s implement a simple program that writes the letters A through Z to a file and then reads them backward:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> letter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8">    </span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Open file for both writing and reading</span></span>
<span id="cb4-10">    filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letters.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-11">    </span>
<span id="cb4-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Always check if file opened successfully</span></span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-14">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-17">    </span>
<span id="cb4-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write A to Z to the file</span></span>
<span id="cb4-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>letter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> letter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> letter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-20">        fputc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>letter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-22">    </span>
<span id="cb4-23">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Just wrote the letters A through Z</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-24">    </span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Position file pointer at the last character (Z)</span></span>
<span id="cb4-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// -1 because pointer is positioned AFTER the last write</span></span>
<span id="cb4-27">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_END<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-28">    </span>
<span id="cb4-29">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here is the file backwards:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-30">    </span>
<span id="cb4-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read backwards from Z to A</span></span>
<span id="cb4-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-33">        letter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fgetc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read current character</span></span>
<span id="cb4-34">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The next letter is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> letter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-35">        </span>
<span id="cb4-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move back 2 positions (1 for the character we just read,</span></span>
<span id="cb4-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// and 1 more to go to the previous character)</span></span>
<span id="cb4-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Avoid seeking before beginning of file on last iteration</span></span>
<span id="cb4-39">            fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_CUR<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-40">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-41">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-42">    </span>
<span id="cb4-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Always close the file</span></span>
<span id="cb4-44">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-45">    </span>
<span id="cb4-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-47"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This example demonstrates several key concepts:</p>
<ol type="1">
<li>Opening a file with <code>"w+"</code> mode (create new + read/write)</li>
<li>Writing characters with <code>fputc()</code></li>
<li>Using <code>fseek()</code> to position the file pointer at the end</li>
<li>Reading characters with <code>fgetc()</code></li>
<li>Moving backward through the file with negative offsets</li>
</ol>
</section>
<section id="modifying-data-changing-specific-file-positions" class="level1">
<h1>Modifying Data: Changing Specific File Positions</h1>
<p>Now let’s create a program that demonstrates how to modify specific positions in an existing file. This program will ask the user which letter they want to replace with an asterisk:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb5-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> letter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8">    </span>
<span id="cb5-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Open existing file for reading and writing</span></span>
<span id="cb5-10">    filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"letters.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-11">    </span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-13">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file. Make sure letters.txt exists.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-16">    </span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ask user which letter to change</span></span>
<span id="cb5-18">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Which letter position would you like to change (1-26)? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-19">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-20">    </span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Validate input</span></span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-23">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid position! Must be between 1 and 26.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-24">        fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-27">    </span>
<span id="cb5-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move to the specified position (subtract 1 because file positions start at 0)</span></span>
<span id="cb5-29">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-30">    </span>
<span id="cb5-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Replace the letter with an asterisk</span></span>
<span id="cb5-32">    fputc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-33">    </span>
<span id="cb5-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return to beginning of file to read all letters</span></span>
<span id="cb5-35">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-36">    </span>
<span id="cb5-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read and display the modified content</span></span>
<span id="cb5-38">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Here is the modified alphabet:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-40">        letter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fgetc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-41">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> letter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-43">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-44">    </span>
<span id="cb5-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Close the file</span></span>
<span id="cb5-46">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-47">    </span>
<span id="cb5-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-49"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>In this example:</p>
<ol type="1">
<li>We open the file in <code>"r+"</code> mode (existing file + read/write)</li>
<li>We use <code>fseek()</code> with <code>SEEK_SET</code> to position the pointer at the exact letter we want to change</li>
<li>We write an asterisk to that position using <code>fputc()</code></li>
<li>We then return to the beginning of the file and read all letters to confirm the change</li>
</ol>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now that you’ve seen how random file access works, try this exercise:</p>
<p>Create a program that:</p>
<ol type="1">
<li>Writes numbers 1-10 to a file</li>
<li>Asks the user for a position and a new number</li>
<li>Changes the number at that position</li>
<li>Displays the modified list</li>
</ol>
<details>
<summary>
Click to See Solution!
</summary>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> newNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7">    </span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create file with numbers 1-10</span></span>
<span id="cb6-9">    filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numbers.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-10">    </span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-12">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error creating file.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write numbers 1-10 to file</span></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-18">        fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-20">    </span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get position and new number from user</span></span>
<span id="cb6-22">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Which position do you want to change (1-10)? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-23">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-24">    </span>
<span id="cb6-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-26">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid position!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-27">        fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-30">    </span>
<span id="cb6-31">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the new number: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-32">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>newNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-33">    </span>
<span id="cb6-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Position file pointer (each number takes 2 bytes: digit + newline)</span></span>
<span id="cb6-35">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>position<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-36">    </span>
<span id="cb6-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write new number</span></span>
<span id="cb6-38">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> newNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-39">    </span>
<span id="cb6-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return to beginning and display all numbers</span></span>
<span id="cb6-41">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-42">    </span>
<span id="cb6-43">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Updated numbers:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-45">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-46">        fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-47">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-49">    </span>
<span id="cb6-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Close file</span></span>
<span id="cb6-51">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>filePtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-52">    </span>
<span id="cb6-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</section>
<section id="advanced-example-a-simple-database" class="level1">
<h1>Advanced Example: A Simple Database</h1>
<p>Let’s put everything together with a more practical example: a simple database of names that can be created, read, updated, and displayed:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb7-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define NAME_LENGTH </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb7-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define MAX_RECORDS </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>NAME_LENGTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> displayMenu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> addRecord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> viewRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> updateRecord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dataFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-21">    </span>
<span id="cb7-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Open database file</span></span>
<span id="cb7-23">    dataFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"database.dat"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w+"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-24">    </span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-26">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error creating database file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-29">    </span>
<span id="cb7-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize database with empty records</span></span>
<span id="cb7-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person emptyPerson <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> MAX_RECORDS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-33">        fwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>emptyPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dataFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-35">    </span>
<span id="cb7-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Program loop</span></span>
<span id="cb7-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-38">        displayMenu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-39">        scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-40">        </span>
<span id="cb7-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> addRecord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-43">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> viewRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-44">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> updateRecord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-45">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exiting program.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid option. Try again.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-47">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-49">    </span>
<span id="cb7-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Close file</span></span>
<span id="cb7-51">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dataFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-52">    </span>
<span id="cb7-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-55"></span>
<span id="cb7-56"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> displayMenu<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-57">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">==== Simple Database ====</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-58">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1. Add a record</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-59">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2. View all records</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-60">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3. Update a record</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-61">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4. Exit</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-62">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your choice: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-63"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-64"></span>
<span id="cb7-65"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> addRecord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person newPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-67">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-68">    </span>
<span id="cb7-69">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Which record number to add (1-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MAX_RECORDS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-70">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-71">    </span>
<span id="cb7-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>recordNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> recordNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> MAX_RECORDS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-73">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid record number.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-75">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-76">    </span>
<span id="cb7-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear input buffer</span></span>
<span id="cb7-78">    getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-79">    </span>
<span id="cb7-80">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-81">    fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> NAME_LENGTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-82">    newPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>strcspn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove newline</span></span>
<span id="cb7-83">    </span>
<span id="cb7-84">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-85">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>newPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-86">    </span>
<span id="cb7-87">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Position file pointer to the correct record</span></span>
<span id="cb7-88">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-89">    </span>
<span id="cb7-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write the record</span></span>
<span id="cb7-91">    fwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>newPerson<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-92">    </span>
<span id="cb7-93">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Record added successfully!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-94"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-95"></span>
<span id="cb7-96"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> viewRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-97">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-98">    </span>
<span id="cb7-99">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=== All Records ===</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-100">    </span>
<span id="cb7-101">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Go to beginning of file</span></span>
<span id="cb7-102">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-103">    </span>
<span id="cb7-104">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read and display each record</span></span>
<span id="cb7-105">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> MAX_RECORDS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-106">        fread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-107">        </span>
<span id="cb7-108">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Record #</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-109">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(empty)"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-110">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-111">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-------------------</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-112">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-113"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-114"></span>
<span id="cb7-115"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> updateRecord<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-117">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-118">    </span>
<span id="cb7-119">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Which record number to update (1-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> MAX_RECORDS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-120">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-121">    </span>
<span id="cb7-122">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>recordNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> recordNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> MAX_RECORDS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-123">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid record number.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-124">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-125">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-126">    </span>
<span id="cb7-127">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Position file pointer to the correct record</span></span>
<span id="cb7-128">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-129">    </span>
<span id="cb7-130">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read the existing record</span></span>
<span id="cb7-131">    fread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-132">    </span>
<span id="cb7-133">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-134">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-135">    </span>
<span id="cb7-136">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear input buffer</span></span>
<span id="cb7-137">    getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-138">    </span>
<span id="cb7-139">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter new name (or press Enter to keep current): "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-140">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> tempName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>NAME_LENGTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-141">    fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tempName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> NAME_LENGTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-142">    </span>
<span id="cb7-143">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Only update if something was entered</span></span>
<span id="cb7-144">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tempName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-145">        tempName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>strcspn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tempName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove newline</span></span>
<span id="cb7-146">        strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tempName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-147">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-148">    </span>
<span id="cb7-149">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter new age (or -1 to keep current): "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-150">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tempAge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-151">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>tempAge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-152">    </span>
<span id="cb7-153">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tempAge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-154">        person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tempAge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-155">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-156">    </span>
<span id="cb7-157">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move back to the record position</span></span>
<span id="cb7-158">    fseek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>recordNum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> SEEK_SET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-159">    </span>
<span id="cb7-160">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write the updated record</span></span>
<span id="cb7-161">    fwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> file<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-162">    </span>
<span id="cb7-163">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Record updated successfully!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-164"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This advanced example demonstrates:</p>
<ol type="1">
<li>Structured data storage with <code>fwrite()</code> and <code>fread()</code></li>
<li>Using <code>fseek()</code> to access specific records</li>
<li>Reading, writing, and updating data at any position</li>
</ol>
</section>
<section id="key-takeaways-mastering-random-file-access-in-c" class="level1">
<h1>Key Takeaways: Mastering Random File Access in C</h1>
<ul>
<li><strong>File Access Modes</strong>: Use <code>"r+"</code>, <code>"w+"</code>, or <code>"a+"</code> to open files for random access</li>
<li><strong>Navigation</strong>: <code>fseek()</code> is your primary tool for moving around in a file</li>
<li><strong>Position Origin</strong>: Remember the three origin points: <code>SEEK_SET</code> (beginning), <code>SEEK_CUR</code> (current position), and <code>SEEK_END</code> (end of file)</li>
<li><strong>Safety Checks</strong>: Always verify that files opened successfully before using them</li>
<li><strong>File Closure</strong>: Don’t forget to close files with <code>fclose()</code> when done</li>
<li><strong>Data Positioning</strong>: Be careful with offsets in <code>fseek()</code> to ensure you’re at the correct position</li>
<li><strong>Two-Way Access</strong>: Random files allow both reading and writing without reopening</li>
</ul>
</section>
<section id="common-challenges-and-troubleshooting" class="level1">
<h1>Common Challenges and Troubleshooting</h1>
<p>When working with random files, beginners often encounter these issues:</p>
<ol type="1">
<li><strong>Incorrect File Position</strong>: Keep track of your position, especially after reading or writing data</li>
<li><strong>Buffer Issues</strong>: Make sure to flush buffers with <code>fflush()</code> if switching between reading and writing</li>
<li><strong>Overwriting Data</strong>: Be careful when replacing data to ensure new data fits in the allocated space</li>
<li><strong>File Not Found</strong>: Always check if <code>fopen()</code> returned NULL before proceeding</li>
</ol>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="whats-the-difference-between-sequential-and-random-file-access" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-sequential-and-random-file-access">1. What’s the difference between sequential and random file access?</h2>
<p>Sequential access reads/writes files in order from beginning to end, while random access lets you jump to any position in the file to read or write.</p>
</section>
<section id="can-i-convert-a-sequential-file-to-random-access" class="level2">
<h2 class="anchored" data-anchor-id="can-i-convert-a-sequential-file-to-random-access">2. Can I convert a sequential file to random access?</h2>
<p>Yes, any file can be opened in random access mode. The file format doesn’t determine access method—the way you open and use it does.</p>
</section>
<section id="do-i-need-to-close-and-reopen-a-file-to-switch-between-reading-and-writing" class="level2">
<h2 class="anchored" data-anchor-id="do-i-need-to-close-and-reopen-a-file-to-switch-between-reading-and-writing">3. Do I need to close and reopen a file to switch between reading and writing?</h2>
<p>No, with random access modes (<code>"r+"</code>, <code>"w+"</code>, <code>"a+"</code>), you can both read and write without reopening the file.</p>
</section>
<section id="is-there-a-way-to-find-the-current-position-in-a-file" class="level2">
<h2 class="anchored" data-anchor-id="is-there-a-way-to-find-the-current-position-in-a-file">4. Is there a way to find the current position in a file?</h2>
<p>Yes, use the <code>ftell()</code> function, which returns the current position as a long integer.</p>
</section>
<section id="how-do-i-determine-the-size-of-a-file" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-determine-the-size-of-a-file">5. How do I determine the size of a file?</h2>
<p>You can use <code>fseek(file, 0, SEEK_END)</code> to move to the end of the file, then use <code>ftell()</code> to get the position, which equals the file size in bytes.</p>
</section>
</section>
<section id="conclusion-putting-your-random-access-skills-to-work" class="level1">
<h1>Conclusion: Putting Your Random Access Skills to Work</h1>
<p>Random file access is a powerful tool in your C programming toolkit. It enables you to create more sophisticated applications that can efficiently manage data by updating specific parts without rewriting entire files.</p>
<p>By mastering functions like <code>fopen()</code>, <code>fseek()</code>, <code>fread()</code>, and <code>fwrite()</code>, you’ve gained the ability to create, read, and modify data at any position in a file—opening the door to databases, game save systems, configuration managers, and many other practical applications.</p>
<p>Remember that the key to successful file manipulation is careful position tracking and proper error checking. With these skills and a bit of practice, you’ll be creating robust file-based applications in no time.</p>
<p><strong>What will you build with your new random file access skills?</strong> I’d love to hear about your projects in the comments below!</p>
<hr>
<p><em>Did you find this guide helpful? Share it with other beginner C programmers who might benefit from understanding random file access. And stay tuned for more articles in this C programming series!</em></p>
<hr>
</section>
<section id="references-and-further-reading" class="level1">
<h1>References and Further Reading</h1>
<ol type="1">
<li><p><a href="https://www.gnu.org/software/libc/manual/html_node/File-Positioning.html">The GNU C Library: File Positioning</a> - Official documentation on file positioning functions including <code>fseek()</code> and related functions.</p></li>
<li><p><a href="https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/fseek-fseeki64">Microsoft C Runtime Library Documentation</a> - Detailed explanation of <code>fseek()</code> implementation in Microsoft’s C runtime.</p></li>
<li><p><a href="https://www.cprogramming.com/tutorial/cfileio.html">C File I/O and Binary File Operations</a> - A comprehensive guide to file operations in C including random access techniques.</p></li>
<li><p><a href="https://www.geeksforgeeks.org/c-file-io/">GeeksforGeeks: C File Handling</a> - Collection of tutorials on file handling in C with practical examples.</p></li>
<li><p><a href="https://cslibrary.stanford.edu/112/">Stanford CS Education Library: File Access in C</a> - Academic resource with explanations of file access patterns.</p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-04-09/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Save Random Files in C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-04-09/</guid>
  <pubDate>Wed, 09 Apr 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Write a Repeat Loop in R: Complete Guide with Practical Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-04-07/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The repeat loop is one of R’s powerful iteration structures that allows code to execute continuously until a specific condition is met. While loops like <code>for</code> and <code>while</code> are more commonly used in R programming, the <code>repeat</code> loop offers unique advantages in certain scenarios, particularly when you need a loop to continue indefinitely until a specific condition triggers a break.</p>
<p>In this comprehensive guide, we’ll explore everything you need to know about writing effective repeat loops in R. From basic syntax to advanced implementation strategies, we’ll cover practical examples that demonstrate the versatility and power of this control structure. Whether you’re new to R programming or looking to refine your iteration techniques, this article will provide you with the knowledge to use repeat loops confidently in your projects.</p>
</section>
<section id="understanding-the-repeat-loop-in-r" class="level1">
<h1>Understanding the Repeat Loop in R</h1>
<section id="what-is-a-repeat-loop" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-repeat-loop">What Is a Repeat Loop?</h2>
<p>The repeat loop in R is an indefinite loop that continues execution until explicitly stopped with a <code>break</code> statement. Unlike <code>for</code> loops that iterate a pre-defined number of times, or <code>while</code> loops that check a condition before each iteration, repeat loops run continuously until they encounter a breaking condition within the loop body.</p>
</section>
<section id="basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax">Basic Syntax</h2>
<p>The syntax of a repeat loop in R is remarkably simple:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to execute</span></span>
<span id="cb1-3">  </span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (condition) {</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit the loop when condition is TRUE</span></span>
<span id="cb1-6">  }</span>
<span id="cb1-7">}</span></code></pre></div>
<p>This simplicity makes repeat loops easy to write, but it also means programmers must be careful to include a valid exit condition to prevent infinite loops.</p>
</section>
<section id="when-to-use-repeat-loops" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-repeat-loops">When to Use Repeat Loops</h2>
<p>Repeat loops are particularly useful in scenarios where:</p>
<ol type="1">
<li>You need a loop to run at least once regardless of conditions</li>
<li>The exit condition is complex or depends on calculations inside the loop</li>
<li>You want to create a loop that continues until a specific event occurs</li>
<li>The number of iterations cannot be determined beforehand</li>
</ol>
</section>
<section id="repeat-vs.-while-vs.-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="repeat-vs.-while-vs.-for-loops">Repeat vs.&nbsp;While vs.&nbsp;For Loops</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 31%">
<col style="width: 34%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>Loop Type</th>
<th>Pre-test Condition</th>
<th>Guaranteed Execution</th>
<th>Use Case</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>repeat</code></td>
<td>No</td>
<td>At least once</td>
<td>When you need to execute code at least once and continue until a condition is met</td>
</tr>
<tr class="even">
<td><code>while</code></td>
<td>Yes</td>
<td>Only if condition is initially TRUE</td>
<td>When you want to check a condition before executing any loop code</td>
</tr>
<tr class="odd">
<td><code>for</code></td>
<td>N/A</td>
<td>Based on the sequence length</td>
<td>When you know exactly how many iterations you need</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="basic-example-repeat-loop-in-r" class="level1">
<h1>Basic Example: Repeat Loop in R</h1>
<p>Let’s start with a simple example to illustrate the basic structure of a repeat loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize counter</span></span>
<span id="cb2-2">counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start repeat loop</span></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb2-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print current counter value</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration:"</span>, counter))</span>
<span id="cb2-8">  </span>
<span id="cb2-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increment counter</span></span>
<span id="cb2-10">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-11">  </span>
<span id="cb2-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit condition</span></span>
<span id="cb2-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-15">  }</span>
<span id="cb2-16">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Iteration: 1"
[1] "Iteration: 2"
[1] "Iteration: 3"
[1] "Iteration: 4"
[1] "Iteration: 5"</code></pre>
</div>
</div>
<p>In this example, the loop executes five times, printing the iteration number each time. On the sixth iteration, when <code>counter</code> becomes 6, the condition <code>counter &gt; 5</code> becomes TRUE, and the loop terminates with the <code>break</code> statement.</p>
</section>
<section id="practical-example-1-finding-a-random-number-that-meets-criteria" class="level1">
<h1>Practical Example 1: Finding a Random Number That Meets Criteria</h1>
<p>In this example, we’ll use a repeat loop to generate random numbers until we find one that meets our criteria:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducible results</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize variables</span></span>
<span id="cb4-5">attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-6">target_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start repeat loop</span></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb4-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random number</span></span>
<span id="cb4-11">  random_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-12">  </span>
<span id="cb4-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increment attempt counter</span></span>
<span id="cb4-14">  attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-15">  </span>
<span id="cb4-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the current random value</span></span>
<span id="cb4-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Attempt"</span>, attempts, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": Generated value ="</span>, random_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-18">  </span>
<span id="cb4-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if we've found a value &gt;= our target</span></span>
<span id="cb4-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (random_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> target_value) {</span>
<span id="cb4-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Success! Found value &gt;="</span>, target_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"after"</span>, attempts, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attempts.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-23">  }</span>
<span id="cb4-24">  </span>
<span id="cb4-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optional: Add a safety exit to prevent potential infinite loops</span></span>
<span id="cb4-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb4-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reached maximum attempts. Exiting.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-29">  }</span>
<span id="cb4-30">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Attempt 1 : Generated value = 0.2875775 
Attempt 2 : Generated value = 0.7883051 
Attempt 3 : Generated value = 0.4089769 
Attempt 4 : Generated value = 0.8830174 
Attempt 5 : Generated value = 0.9404673 

Success! Found value &gt;= 0.9 after 5 attempts.</code></pre>
</div>
</div>
<p>When you run this code, it will generate random numbers between 0 and 1 until it finds one that’s greater than or equal to 0.9, or until it reaches 100 attempts. This is a practical use case for a repeat loop because:</p>
<ol type="1">
<li>We don’t know in advance how many iterations will be needed</li>
<li>We want to keep generating numbers until we find one that satisfies our condition</li>
</ol>
</section>
<section id="practical-example-2-user-input-validation" class="level1">
<h1>Practical Example 2: User Input Validation</h1>
<p>Repeat loops are excellent for validating user input. Let’s create a function that prompts the user for input within a specific range:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">get_validated_input <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(min_value, max_value) {</span>
<span id="cb6-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prompt for user input</span></span>
<span id="cb6-4">    user_input <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readline</span>(</span>
<span id="cb6-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prompt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter a number between "</span>, min_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" and "</span>, max_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span>)</span>
<span id="cb6-6">    ))</span>
<span id="cb6-7">    </span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the input is valid</span></span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(user_input) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> user_input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> min_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> user_input <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> max_value) {</span>
<span id="cb6-10">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Valid input, return the value and exit the loop</span></span>
<span id="cb6-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(user_input)</span>
<span id="cb6-12">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb6-13">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invalid input, print error message and loop continues</span></span>
<span id="cb6-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid input! Please enter a number between"</span>, min_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and"</span>, max_value, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-15">    }</span>
<span id="cb6-16">  }</span>
<span id="cb6-17">}</span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the function</span></span>
<span id="cb6-20">valid_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_validated_input</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You entered:"</span>, valid_number, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>In this example, the repeat loop continues to prompt the user until they enter a valid number within the specified range. The function returns the valid input, effectively breaking out of the loop.</p>
</section>
<section id="practical-example-3-numerical-algorithm---newton-raphson-method" class="level1">
<h1>Practical Example 3: Numerical Algorithm - Newton-Raphson Method</h1>
<p>The repeat loop is particularly useful for numerical algorithms where iterations continue until convergence. Here’s an implementation of the Newton-Raphson method for finding the square root of a number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">newton_sqrt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb7-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cannot compute the square root of a negative number"</span>)</span>
<span id="cb7-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-4">  </span>
<span id="cb7-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial guess</span></span>
<span id="cb7-6">  guess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-7">  </span>
<span id="cb7-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iteration counter</span></span>
<span id="cb7-9">  iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-10">  </span>
<span id="cb7-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Newton-Raphson iteration</span></span>
<span id="cb7-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate next approximation</span></span>
<span id="cb7-14">    next_guess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (guess <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> guess)</span>
<span id="cb7-15">    </span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increment counter</span></span>
<span id="cb7-17">    iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-18">    </span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the relative error</span></span>
<span id="cb7-20">    error <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(next_guess <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> guess) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(next_guess)</span>
<span id="cb7-21">    </span>
<span id="cb7-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print current iteration information</span></span>
<span id="cb7-23">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration"</span>, iterations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": approximation ="</span>, next_guess, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", error ="</span>, error, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-24">    </span>
<span id="cb7-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update guess</span></span>
<span id="cb7-26">    guess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> next_guess</span>
<span id="cb7-27">    </span>
<span id="cb7-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit conditions</span></span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (error <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tolerance) {</span>
<span id="cb7-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Converged after"</span>, iterations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-31">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(guess)</span>
<span id="cb7-32">    }</span>
<span id="cb7-33">    </span>
<span id="cb7-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> max_iterations) {</span>
<span id="cb7-35">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum iterations reached without convergence"</span>)</span>
<span id="cb7-36">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(guess)</span>
<span id="cb7-37">    }</span>
<span id="cb7-38">  }</span>
<span id="cb7-39">}</span>
<span id="cb7-40"></span>
<span id="cb7-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb7-42">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newton_sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 1 : approximation = 7.25 , error = 0.7241379 
Iteration 2 : approximation = 5.349138 , error = 0.3553586 
Iteration 3 : approximation = 5.011394 , error = 0.06739518 
Iteration 4 : approximation = 5.000013 , error = 0.002276225 
Iteration 5 : approximation = 5 , error = 2.590606e-06 
Iteration 6 : approximation = 5 , error = 3.355538e-12 

Converged after 6 iterations.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Square root ="</span>, result, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Square root = 5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Verification:"</span>, result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Verification: 25 </code></pre>
</div>
</div>
<p>This example demonstrates a practical application of the repeat loop in a numerical algorithm. The loop continues until either: 1. The approximation converges (the error is less than the specified tolerance) 2. The maximum number of iterations is reached</p>
<p>The Newton-Raphson method rapidly converges to the correct square root value, making this a computationally efficient approach.</p>
</section>
<section id="practical-example-4-monte-carlo-simulation" class="level1">
<h1>Practical Example 4: Monte Carlo Simulation</h1>
<p>Repeat loops can be useful in simulation scenarios where you need to continue until certain criteria are met. Let’s use a repeat loop to estimate π using the Monte Carlo method:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">estimate_pi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">desired_accuracy =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_points =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>) {</span>
<span id="cb13-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize counters</span></span>
<span id="cb13-3">  points_inside_circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-4">  total_points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-5">  current_estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-6">  previous_estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb13-7">  </span>
<span id="cb13-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducibility</span></span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb13-10">  </span>
<span id="cb13-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start simulation</span></span>
<span id="cb13-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb13-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a batch of random points</span></span>
<span id="cb13-14">    batch_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb13-15">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(batch_size, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-16">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(batch_size, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-17">    </span>
<span id="cb13-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count points inside unit circle</span></span>
<span id="cb13-19">    inside <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-20">    points_inside_circle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> points_inside_circle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(inside)</span>
<span id="cb13-21">    total_points <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> total_points <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> batch_size</span>
<span id="cb13-22">    </span>
<span id="cb13-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate pi estimate</span></span>
<span id="cb13-24">    previous_estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> current_estimate</span>
<span id="cb13-25">    current_estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> points_inside_circle <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_points</span>
<span id="cb13-26">    </span>
<span id="cb13-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate change in estimate</span></span>
<span id="cb13-28">    change <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(current_estimate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> previous_estimate)</span>
<span id="cb13-29">    </span>
<span id="cb13-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print progress every 10,000 points</span></span>
<span id="cb13-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (total_points <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb13-32">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Points:"</span>, total_points, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"| π estimate:"</span>, current_estimate, </span>
<span id="cb13-33">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"| Change:"</span>, change, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-34">    }</span>
<span id="cb13-35">    </span>
<span id="cb13-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit conditions</span></span>
<span id="cb13-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (total_points <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> change <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> desired_accuracy) {</span>
<span id="cb13-38">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reached desired accuracy after"</span>, total_points, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"points.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-39">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb13-40">    }</span>
<span id="cb13-41">    </span>
<span id="cb13-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (total_points <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> max_points) {</span>
<span id="cb13-43">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reached maximum number of points.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-44">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb13-45">    }</span>
<span id="cb13-46">  }</span>
<span id="cb13-47">  </span>
<span id="cb13-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Final π estimate:"</span>, current_estimate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual π value:"</span>, pi, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-50">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Absolute error:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(current_estimate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pi), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-51">  </span>
<span id="cb13-52">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(current_estimate)</span>
<span id="cb13-53">}</span>
<span id="cb13-54"></span>
<span id="cb13-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the simulation</span></span>
<span id="cb13-56">pi_estimate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">estimate_pi</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">desired_accuracy =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Points: 10000 | π estimate: 3.1376 | Change: 0.003822222 
Points: 20000 | π estimate: 3.1248 | Change: 0.002273684 
Points: 30000 | π estimate: 3.121333 | Change: 0.0005057471 

Reached desired accuracy after 32000 points.

Final π estimate: 3.123875 
Actual π value: 3.141593 
Absolute error: 0.01771765 </code></pre>
</div>
</div>
<p>This example demonstrates how a repeat loop can be used in a simulation that continues until a specific accuracy level is achieved or a maximum number of iterations is reached.</p>
</section>
<section id="practical-example-5-data-processing-with-early-termination" class="level1">
<h1>Practical Example 5: Data Processing with Early Termination</h1>
<p>Repeat loops can be useful when processing data streams or files where you might need to terminate early based on certain conditions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">process_data_until_threshold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb15-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize counters and storage</span></span>
<span id="cb15-3">  total_processed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-4">  values_above_threshold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-5">  all_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb15-6">  </span>
<span id="cb15-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create synthetic data (normally this would be a file or data stream)</span></span>
<span id="cb15-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb15-9">  data_stream <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb15-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random Poisson value</span></span>
<span id="cb15-11">  }</span>
<span id="cb15-12">  </span>
<span id="cb15-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process data</span></span>
<span id="cb15-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb15-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get next data point</span></span>
<span id="cb15-16">    next_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_stream</span>()</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add to storage</span></span>
<span id="cb15-19">    all_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(all_data, next_value)</span>
<span id="cb15-20">    </span>
<span id="cb15-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update counters</span></span>
<span id="cb15-22">    total_processed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> total_processed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (next_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> threshold) {</span>
<span id="cb15-24">      values_above_threshold <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> values_above_threshold <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-25">    }</span>
<span id="cb15-26">    </span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print status every 5 items</span></span>
<span id="cb15-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (total_processed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb15-29">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processed"</span>, total_processed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items. Found"</span>, </span>
<span id="cb15-30">          values_above_threshold, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"values above threshold.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-31">    }</span>
<span id="cb15-32">    </span>
<span id="cb15-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit condition: if we've found 10 values above the threshold</span></span>
<span id="cb15-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (values_above_threshold <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb15-35">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reached target of"</span>, values_above_threshold, </span>
<span id="cb15-36">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"values above threshold after processing"</span>, total_processed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb15-38">    }</span>
<span id="cb15-39">    </span>
<span id="cb15-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Safety exit to prevent infinite loops</span></span>
<span id="cb15-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (total_processed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) {</span>
<span id="cb15-42">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reached maximum processing limit of 100 items.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-43">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb15-44">    }</span>
<span id="cb15-45">  }</span>
<span id="cb15-46">  </span>
<span id="cb15-47">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the processed data</span></span>
<span id="cb15-48">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-49">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> all_data,</span>
<span id="cb15-50">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_processed =</span> total_processed,</span>
<span id="cb15-51">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_above_threshold =</span> values_above_threshold</span>
<span id="cb15-52">  ))</span>
<span id="cb15-53">}</span>
<span id="cb15-54"></span>
<span id="cb15-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the data processing</span></span>
<span id="cb15-56">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_data_until_threshold</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">threshold =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Processed 5 items. Found 1 values above threshold.
Processed 10 items. Found 1 values above threshold.
Processed 15 items. Found 2 values above threshold.
Processed 20 items. Found 3 values above threshold.
Processed 25 items. Found 4 values above threshold.
Processed 30 items. Found 4 values above threshold.
Processed 35 items. Found 5 values above threshold.
Processed 40 items. Found 5 values above threshold.
Processed 45 items. Found 5 values above threshold.
Processed 50 items. Found 5 values above threshold.
Processed 55 items. Found 5 values above threshold.
Processed 60 items. Found 5 values above threshold.
Processed 65 items. Found 5 values above threshold.
Processed 70 items. Found 5 values above threshold.
Processed 75 items. Found 5 values above threshold.
Processed 80 items. Found 5 values above threshold.
Processed 85 items. Found 5 values above threshold.
Processed 90 items. Found 6 values above threshold.
Processed 95 items. Found 6 values above threshold.
Processed 100 items. Found 6 values above threshold.

Reached maximum processing limit of 100 items.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Analyze the results</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Summary:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Summary:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total items processed:"</span>, result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>total_processed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Total items processed: 100 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Values above threshold:"</span>, result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values_above_threshold, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Values above threshold: 6 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Percentage above threshold:"</span>, </span>
<span id="cb23-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values_above_threshold <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>total_processed, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Percentage above threshold: 6 %</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb25-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb25-4">  data_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data),</span>
<span id="cb25-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>data</span>
<span id="cb25-7">  )</span>
<span id="cb25-8">  </span>
<span id="cb25-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data_df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> index, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb25-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data Processing with Repeat Loop"</span>,</span>
<span id="cb25-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Points above the red dashed line exceed the threshold"</span>,</span>
<span id="cb25-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data Point Index"</span>,</span>
<span id="cb25-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span></span>
<span id="cb25-18">    )</span>
<span id="cb25-19">}</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-04-07/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This example demonstrates using a repeat loop for data processing with early termination when certain conditions are met—specifically, when we’ve found 10 values above our threshold.</p>
</section>
<section id="your-turn-creating-a-repeat-loop-challenge" class="level1">
<h1>Your Turn! Creating a Repeat Loop Challenge</h1>
<p>Now that you’ve seen several examples, it’s your turn to practice. Try writing a repeat loop to implement a binary search algorithm that finds the position of a target value in a sorted vector.</p>
<p>Here’s the problem:</p>
<ul>
<li>Create a function that takes a sorted vector and a target value</li>
<li>Use a repeat loop to perform a binary search</li>
<li>Return the position of the target or -1 if not found</li>
</ul>
<details>
<summary>
See Solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">binary_search <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(sorted_vector, target) {</span>
<span id="cb26-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize search boundaries</span></span>
<span id="cb26-3">  left <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb26-4">  right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(sorted_vector)</span>
<span id="cb26-5">  iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb26-6">  </span>
<span id="cb26-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start binary search using a repeat loop</span></span>
<span id="cb26-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb26-9">    iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb26-10">    </span>
<span id="cb26-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate midpoint</span></span>
<span id="cb26-12">    mid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>((right <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> left) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-13">    </span>
<span id="cb26-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print current search state</span></span>
<span id="cb26-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration"</span>, iterations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": Searching between positions"</span>, </span>
<span id="cb26-16">        left, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and"</span>, right, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"| Looking at position"</span>, mid, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-17">    </span>
<span id="cb26-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if we've found the target</span></span>
<span id="cb26-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (sorted_vector[mid] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target) {</span>
<span id="cb26-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Found target"</span>, target, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"at position"</span>, mid, </span>
<span id="cb26-21">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"after"</span>, iterations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-22">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(mid)</span>
<span id="cb26-23">    }</span>
<span id="cb26-24">    </span>
<span id="cb26-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If we can't narrow the search further, the target isn't in the vector</span></span>
<span id="cb26-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (left <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> right) {</span>
<span id="cb26-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Target"</span>, target, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not found after"</span>, iterations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-29">    }</span>
<span id="cb26-30">    </span>
<span id="cb26-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update search boundaries</span></span>
<span id="cb26-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (sorted_vector[mid] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> target) {</span>
<span id="cb26-33">      left <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search in the right half</span></span>
<span id="cb26-34">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb26-35">      right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search in the left half</span></span>
<span id="cb26-36">    }</span>
<span id="cb26-37">  }</span>
<span id="cb26-38">}</span>
<span id="cb26-39"></span>
<span id="cb26-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the binary search function</span></span>
<span id="cb26-41">sorted_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb26-42">position <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">binary_search</span>(sorted_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 1 : Searching between positions 1 and 10 | Looking at position 5 
Iteration 2 : Searching between positions 6 and 10 | Looking at position 8 
Iteration 3 : Searching between positions 6 and 7 | Looking at position 6 
Iteration 4 : Searching between positions 7 and 7 | Looking at position 7 

Found target 13 at position 7 after 4 iterations.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Position returned:"</span>, position, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Position returned: 7 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try with a value not in the array</span></span>
<span id="cb30-2">position <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">binary_search</span>(sorted_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration 1 : Searching between positions 1 and 10 | Looking at position 5 
Iteration 2 : Searching between positions 1 and 4 | Looking at position 2 
Iteration 3 : Searching between positions 3 and 4 | Looking at position 3 
Iteration 4 : Searching between positions 4 and 4 | Looking at position 4 

Target 6 not found after 4 iterations.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Position returned:"</span>, position, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Position returned: -1 </code></pre>
</div>
</div>
The binary search is an efficient algorithm for finding items in a sorted collection. A repeat loop works well here because the search continues until either the target is found or the search space is exhausted.
</details>
</section>
<section id="common-pitfalls-and-best-practices" class="level1">
<h1>Common Pitfalls and Best Practices</h1>
<section id="avoiding-infinite-loops" class="level2">
<h2 class="anchored" data-anchor-id="avoiding-infinite-loops">Avoiding Infinite Loops</h2>
<p>The most significant risk with repeat loops is creating an infinite loop. Always ensure your loop has:</p>
<ol type="1">
<li>A clear exit condition</li>
<li>A properly incremented counter or changed state</li>
<li>A safety exit (like a maximum iteration count)</li>
</ol>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BAD EXAMPLE - Potential infinite loop with no safety exit</span></span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb34-3">  value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_data</span>()</span>
<span id="cb34-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target) {</span>
<span id="cb34-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb34-6">  }</span>
<span id="cb34-7">}</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GOOD EXAMPLE - With safety exit</span></span>
<span id="cb34-10">iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb34-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb34-12">  value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_data</span>()</span>
<span id="cb34-13">  iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb34-14">  </span>
<span id="cb34-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> max_iterations) {</span>
<span id="cb34-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb34-17">  }</span>
<span id="cb34-18">}</span></code></pre></div>
</section>
<section id="using-next-for-skipping-iterations" class="level2">
<h2 class="anchored" data-anchor-id="using-next-for-skipping-iterations">Using <code>next</code> for Skipping Iterations</h2>
<p>Like other loop structures in R, repeat loops support the <code>next</code> statement to skip to the next iteration:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb35-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_next_value</span>()</span>
<span id="cb35-3">  </span>
<span id="cb35-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip negative values</span></span>
<span id="cb35-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb35-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">next</span></span>
<span id="cb35-7">  }</span>
<span id="cb35-8">  </span>
<span id="cb35-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process positive values</span></span>
<span id="cb35-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process</span>(x)</span>
<span id="cb35-11">  </span>
<span id="cb35-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (exit_condition) {</span>
<span id="cb35-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb35-14">  }</span>
<span id="cb35-15">}</span></code></pre></div>
</section>
<section id="tracking-progress-in-long-running-loops" class="level2">
<h2 class="anchored" data-anchor-id="tracking-progress-in-long-running-loops">Tracking Progress in Long-Running Loops</h2>
<p>For long-running repeat loops, it’s good practice to provide progress updates:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">iteration <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb36-2">total_iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb36-5">  iteration <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iteration <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb36-6">  </span>
<span id="cb36-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display progress every 100 iterations</span></span>
<span id="cb36-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (iteration <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb36-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Progress:"</span>, iteration, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"of approximately"</span>, total_iterations, </span>
<span id="cb36-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"("</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iteration <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_iterations, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb36-11">  }</span>
<span id="cb36-12">  </span>
<span id="cb36-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process data</span></span>
<span id="cb36-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb36-15">  </span>
<span id="cb36-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (exit_condition <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> iteration <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> total_iterations) {</span>
<span id="cb36-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb36-18">  }</span>
<span id="cb36-19">}</span></code></pre></div>
</section>
<section id="efficient-memory-management" class="level2">
<h2 class="anchored" data-anchor-id="efficient-memory-management">Efficient Memory Management</h2>
<p>When working with large datasets in repeat loops, be mindful of memory usage:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inefficient - Grows the vector on each iteration</span></span>
<span id="cb37-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb37-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process data</span></span>
<span id="cb37-5">  new_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_next</span>()</span>
<span id="cb37-6">  </span>
<span id="cb37-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append to results (inefficient for large datasets)</span></span>
<span id="cb37-8">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(result, new_value)</span>
<span id="cb37-9">  </span>
<span id="cb37-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (exit_condition) {</span>
<span id="cb37-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb37-12">  }</span>
<span id="cb37-13">}</span>
<span id="cb37-14"></span>
<span id="cb37-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More efficient - Pre-allocate and fill</span></span>
<span id="cb37-16">max_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb37-17">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(max_size)</span>
<span id="cb37-18">index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb37-19"></span>
<span id="cb37-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">repeat</span> {</span>
<span id="cb37-21">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process data</span></span>
<span id="cb37-22">  index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb37-23">  result[index] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_next</span>()</span>
<span id="cb37-24">  </span>
<span id="cb37-25">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (exit_condition <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> max_size) {</span>
<span id="cb37-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb37-27">  }</span>
<span id="cb37-28">}</span>
<span id="cb37-29"></span>
<span id="cb37-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trim unused elements if needed</span></span>
<span id="cb37-31">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>index]</span></code></pre></div>
</section>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><strong>Repeat loops</strong> in R continue indefinitely until explicitly stopped with a <code>break</code> statement</li>
<li>They are useful when:
<ul>
<li>You need at least one iteration regardless of conditions</li>
<li>The exit condition depends on calculations inside the loop</li>
<li>The number of iterations cannot be determined in advance</li>
</ul></li>
<li>Always include a valid exit condition to prevent infinite loops</li>
<li>Consider adding a safety exit based on a maximum iteration count</li>
<li>Use <code>next</code> to skip to the next iteration when needed</li>
<li>Pre-allocate memory when building large data structures in loops</li>
<li>Track and display progress for long-running operations</li>
<li>Repeat loops are more flexible than while loops but require more careful implementation</li>
</ul>
</section>
<section id="conclusion-mastering-repeat-loops-in-r-programming" class="level1">
<h1>Conclusion: Mastering Repeat Loops in R Programming</h1>
<p>The repeat loop is a powerful and flexible control structure in R that provides an elegant solution for scenarios requiring indefinite iteration until specific conditions are met. While it may be used less frequently than for and while loops, understanding and mastering repeat loops adds a valuable tool to your R programming arsenal.</p>
<p>By following the best practices outlined in this guide and studying the provided examples, you’ll be equipped to implement efficient and effective repeat loops in your own code. Remember to always include appropriate exit conditions, consider memory management for large operations, and implement progress tracking for long-running loops.</p>
<p>Whether you’re developing numerical algorithms, processing data streams, implementing simulations, or handling user interactions, the repeat loop offers a straightforward approach to solving problems that require continuous execution with conditional termination.</p>
<p>What repeat loop applications will you explore in your R programming journey?</p>
</section>
<section id="faqs-about-repeat-loops-in-r" class="level1">
<h1>FAQs About Repeat Loops in R</h1>
<section id="q1-when-should-i-use-a-repeat-loop-instead-of-a-while-loop" class="level2">
<h2 class="anchored" data-anchor-id="q1-when-should-i-use-a-repeat-loop-instead-of-a-while-loop">Q1: When should I use a repeat loop instead of a while loop?</h2>
<p><strong>A:</strong> Use a repeat loop when you need to execute the code block at least once regardless of conditions, or when the exit condition depends on calculations performed inside the loop. While loops check the condition before the first iteration, so they might not execute at all if the condition is initially false.</p>
</section>
<section id="q2-how-do-i-prevent-infinite-loops-in-repeat-structures" class="level2">
<h2 class="anchored" data-anchor-id="q2-how-do-i-prevent-infinite-loops-in-repeat-structures">Q2: How do I prevent infinite loops in repeat structures?</h2>
<p><strong>A:</strong> Always include a clear exit condition with a <code>break</code> statement, and consider adding a safety exit based on a maximum number of iterations. Make sure variables in your exit condition change during each iteration.</p>
</section>
<section id="q3-can-i-use-multiple-break-statements-in-a-single-repeat-loop" class="level2">
<h2 class="anchored" data-anchor-id="q3-can-i-use-multiple-break-statements-in-a-single-repeat-loop">Q3: Can I use multiple break statements in a single repeat loop?</h2>
<p><strong>A:</strong> Yes, you can use multiple break statements in different parts of your repeat loop to exit under various conditions. However, using too many exit points can make code harder to understand and maintain.</p>
</section>
<section id="q4-is-there-a-performance-difference-between-repeat-while-and-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="q4-is-there-a-performance-difference-between-repeat-while-and-for-loops">Q4: Is there a performance difference between repeat, while, and for loops?</h2>
<p><strong>A:</strong> The performance differences between these loop types in R are usually negligible. Choose the loop structure based on readability and logical fit for your specific use case rather than performance concerns.</p>
</section>
<section id="q5-can-repeat-loops-be-used-in-r-functions-like-apply-lapply-etc." class="level2">
<h2 class="anchored" data-anchor-id="q5-can-repeat-loops-be-used-in-r-functions-like-apply-lapply-etc.">Q5: Can repeat loops be used in R functions like apply(), lapply(), etc.?</h2>
<p><strong>A:</strong> No, the apply family of functions in R uses its own iteration mechanism and doesn’t support custom loop structures like repeat. Use repeat loops in regular R functions rather than trying to integrate them with apply-type functions.</p>
</section>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience!</h1>
<p>Have you developed an interesting application using repeat loops in R? Share your implementation in the comments below! We’d love to see how you’re using this versatile control structure in your own projects.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Repetitive-execution">R Documentation on Control Structures</a></li>
<li><a href="https://adv-r.hadley.nz/control-flow.html">Advanced R by Hadley Wickham - Control Flow Chapter</a></li>
<li><a href="https://www.burns-stat.com/pages/Tutor/R_inferno.pdf">The R Inferno by Patrick Burns</a></li>
<li><a href="https://bookdown.org/rdpeng/rprogdatascience/">R Programming for Data Science by Roger Peng</a></li>
<li><a href="https://csgillespie.github.io/efficientR/">Efficient R Programming by Colin Gillespie and Robin Lovelace</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-04-07/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Repeat with R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-04-07/</guid>
  <pubDate>Mon, 07 Apr 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Ultimate Guide to Troubleshooting in Linux: A Comprehensive Approach</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-04-04/</link>
  <description><![CDATA[ 





<p><em>As I write this series on Linux troubleshooting, I want to share that I am learning along the way. While I strive for accuracy, there may be mistakes or areas that could be improved. I appreciate your understanding and encourage you to point out any errors or suggestions in the comments. Your feedback will help me grow as a writer and enhance the quality of this resource for everyone. Thank you for your support!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Linux troubleshooting is both an art and a science. Whether you’re a seasoned Linux programmer or just starting out, knowing how to effectively diagnose and solve problems is a skill that separates novices from experts.</p>
<p>In this comprehensive guide, I hope to cover effective strategies for troubleshooting Linux systems and applications, with a special focus on approaches that are relevant to Linux programmers. We’ll cover everything from understanding basic error types to implementing advanced debugging techniques, all explained with practical examples that work in real-world scenarios.</p>
<p>By the end of this article, I’m betting you’ll have a systematic approach to Linux troubleshooting that you can apply to virtually any problem you encounter. Let’s begin our journey toward becoming more effective Linux troubleshooters!</p>
</section>
<section id="understanding-types-of-errors-in-linux" class="level1">
<h1>Understanding Types of Errors in Linux</h1>
<p>Before we dive into specific troubleshooting techniques, it’s necessary to understand the different types of errors you might encounter in Linux. These broadly fall into two categories: syntactic errors and logical errors.</p>
<section id="syntactic-errors" class="level2">
<h2 class="anchored" data-anchor-id="syntactic-errors">Syntactic Errors</h2>
<p>Syntactic errors occur when you violate the rules of the language or command syntax. These are generally easier to fix because they prevent the program from running at all and usually generate clear error messages.</p>
<p><strong>Common syntactic errors include:</strong></p>
<ol type="1">
<li><strong>Missing or mismatched quotes</strong>: When you forget to close quotes in shell scripts or configuration files.</li>
<li><strong>Missing or unexpected tokens</strong>: Forgetting necessary syntax elements like semicolons, brackets, or keywords.</li>
<li><strong>Incorrect command options or arguments</strong>: Using the wrong flags or providing arguments in an incorrect order.</li>
</ol>
<p><strong>Example 1: Missing Quotes</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script with a missing quote error</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">echo "</span>This is a test.<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>When you run this script, you’ll see an error like:</p>
<pre><code>./script.sh: line 5: unexpected EOF while looking for matching `"'
./script.sh: line 6: syntax error: unexpected end of file</code></pre>
<p>The error message tells us that the shell reached the end of the file (EOF) while still looking for a closing quote. Note that the line number reported (line 5) might not be where the actual error is; it’s where the shell realized there was a problem.</p>
<p><strong>Example 2: Missing Token</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script with a missing semicolon in an if statement</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">number</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$number</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> 1 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number equals 1"</span></span>
<span id="cb3-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number does not equal 1"</span></span>
<span id="cb3-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>This will produce:</p>
<pre><code>./script.sh: line 7: syntax error near unexpected token `else'
./script.sh: line 7: `else'</code></pre>
<p>The actual error is the missing semicolon after <code>]</code> on line 4, but the error is reported at the <code>else</code> keyword because that’s where the shell first realizes something is wrong.</p>
</section>
<section id="logical-errors" class="level2">
<h2 class="anchored" data-anchor-id="logical-errors">Logical Errors</h2>
<p>Logical errors are more challenging to identify because they don’t necessarily prevent a program from running. Instead, the program runs but produces incorrect results or behaves unexpectedly.</p>
<p><strong>Common logical errors include:</strong></p>
<ol type="1">
<li><strong>Off-by-one errors</strong>: When counting or iterating, starting or ending at the wrong index.</li>
<li><strong>Incorrect conditional expressions</strong>: Logic that executes the wrong branch under certain conditions.</li>
<li><strong>Unanticipated situations</strong>: Not handling edge cases or unexpected input properly.</li>
<li><strong>Unintended variable expansions</strong>: When variables expand in ways you didn’t anticipate, often involving spaces or special characters.</li>
</ol>
<p><strong>Example 3: Unintended Variable Expansion</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script demonstrating unintended variable expansion</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">filename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty variable</span></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report.txt"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb5-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The file is report.txt"</span></span>
<span id="cb5-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb5-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The file is not report.txt"</span></span>
<span id="cb5-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>When run, this produces:</p>
<pre><code>./script.sh: line 4: [: =: unary operator expected
The file is not report.txt</code></pre>
<p>The error occurs because when <code>$filename</code> expands to nothing, the if statement becomes <code>if [ = "report.txt" ]</code>, which is invalid syntax. The correct approach is to quote the variable: <code>if [ "$filename" = "report.txt" ]</code>.</p>
<p><strong>Example 4: Incorrect Logic</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script with incorrect logic</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">age</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>17</span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;</span> 18 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb7-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an adult"</span></span>
<span id="cb7-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb7-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are not an adult"</span></span>
<span id="cb7-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>You might expect this to print “You are not an adult”, but it will actually print “You are an adult”. This is because <code>&gt;</code> is treated as an output redirection operator, not a comparison operator. The correct syntax would be:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-gt</span> 18 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span></code></pre></div>
<p>Understanding these error types will help you more quickly diagnose issues when they arise.</p>
</section>
</section>
<section id="essential-linux-troubleshooting-tools" class="level1">
<h1>Essential Linux Troubleshooting Tools</h1>
<p>Linux provides a rich set of tools for diagnosing problems. Here are some essential utilities you should be familiar with:</p>
<section id="system-logs" class="level2">
<h2 class="anchored" data-anchor-id="system-logs">1. System Logs</h2>
<p>System logs are your first stop for troubleshooting system-wide issues. Key log files include:</p>
<ul>
<li><strong>/var/log/syslog</strong> or <strong>/var/log/messages</strong>: General system messages</li>
<li><strong>/var/log/kern.log</strong>: Kernel messages</li>
<li><strong>/var/log/auth.log</strong> or <strong>/var/log/secure</strong>: Authentication logs</li>
<li><strong>/var/log/dmesg</strong>: Boot-time hardware detection messages</li>
</ul>
<p>You can view logs using commands like:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the last 50 lines of syslog</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 50 /var/log/syslog</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Follow new log entries as they happen</span></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> /var/log/syslog</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for specific errors</span></span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span> /var/log/syslog</span></code></pre></div>
<p><strong>Example 5: Finding Memory Issues</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"out of memory"</span> /var/log/syslog</span></code></pre></div>
<p>This command would show you any instances where a process was killed due to memory exhaustion, which could help explain why applications are terminating unexpectedly.</p>
</section>
<section id="process-monitoring" class="level2">
<h2 class="anchored" data-anchor-id="process-monitoring">2. Process Monitoring</h2>
<p>These tools help you understand what processes are running and their resource usage:</p>
<ul>
<li><strong>ps</strong>: Shows process status</li>
<li><strong>top</strong> or <strong>htop</strong>: Interactive process viewers</li>
<li><strong>lsof</strong>: Lists open files (including sockets)</li>
<li><strong>strace</strong>: Traces system calls and signals</li>
</ul>
<p><strong>Example 6: Finding Memory-Hungry Processes</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort processes by memory usage</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ps</span> aux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sort</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>-%mem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-10</span></span></code></pre></div>
<p>This shows the top 10 processes consuming the most memory, which is useful when troubleshooting performance issues.</p>
</section>
<section id="network-diagnostics" class="level2">
<h2 class="anchored" data-anchor-id="network-diagnostics">3. Network Diagnostics</h2>
<p>These tools help diagnose network connectivity issues:</p>
<ul>
<li><strong>ping</strong>: Tests basic connectivity to a host</li>
<li><strong>traceroute</strong> or <strong>tracepath</strong>: Shows the path packets take</li>
<li><strong>netstat</strong> or <strong>ss</strong>: Shows network connections</li>
<li><strong>tcpdump</strong>: Captures and analyzes network traffic</li>
<li><strong>dig</strong> or <strong>nslookup</strong>: DNS query tools</li>
</ul>
<p><strong>Example 7: Testing Connectivity</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test if you can reach Google's DNS</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ping</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 4 8.8.8.8</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If that works but domain names don't, check DNS resolution</span></span>
<span id="cb12-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dig</span> google.com</span></code></pre></div>
<p>This combination of tests can help you determine whether connectivity issues are related to general network problems or specifically to DNS resolution.</p>
</section>
<section id="file-system-tools" class="level2">
<h2 class="anchored" data-anchor-id="file-system-tools">4. File System Tools</h2>
<p>These tools help with file system issues:</p>
<ul>
<li><strong>df</strong>: Shows disk space usage</li>
<li><strong>du</strong>: Shows directory size</li>
<li><strong>fsck</strong>: Checks and repairs file systems</li>
<li><strong>mount</strong>: Shows mounted file systems</li>
<li><strong>lsblk</strong>: Lists block devices</li>
</ul>
<p><strong>Example 8: Finding Disk Space Issues</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show file system usage</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find large directories</span></span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--max-depth</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 /home <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hr</span></span></code></pre></div>
<p>These commands help you quickly identify if you’re running out of disk space and which directories are consuming the most space.</p>
</section>
<section id="system-information" class="level2">
<h2 class="anchored" data-anchor-id="system-information">5. System Information</h2>
<p>These tools provide system details:</p>
<ul>
<li><strong>uname</strong>: Shows system information</li>
<li><strong>uptime</strong>: Shows how long the system has been running</li>
<li><strong>dmesg</strong>: Displays kernel messages</li>
<li><strong>/proc</strong> filesystem: Contains runtime system information</li>
<li><strong>lspci</strong>, <strong>lsusb</strong>, <strong>lscpu</strong>: List hardware devices</li>
</ul>
<p><strong>Example 9: Checking System Load</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uptime</span></span></code></pre></div>
<p>This shows something like:</p>
<pre><code>15:40:02 up 7 days, 3:42, 2 users, load average: 0.14, 0.05, 0.01</code></pre>
<p>The load averages (0.14, 0.05, 0.01) indicate system load for the last 1, 5, and 15 minutes. Values consistently above your CPU count may indicate performance problems.</p>
</section>
</section>
<section id="common-problems-and-solutions" class="level1">
<h1>Common Problems and Solutions</h1>
<p>Now let’s look at some common Linux problems and their solutions:</p>
<section id="file-permission-issues" class="level2">
<h2 class="anchored" data-anchor-id="file-permission-issues">1. File Permission Issues</h2>
<p><strong>Problem</strong>: You get “Permission denied” errors when trying to run scripts or access files.</p>
<p><strong>Solution</strong>: Check and adjust file permissions:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show file permissions</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-la</span> myfile.sh</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a script executable</span></span>
<span id="cb16-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x myfile.sh</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change ownership of a file</span></span>
<span id="cb16-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chown</span> username:groupname myfile.sh</span></code></pre></div>
<p><strong>Example 10: Fixing Script Permissions</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a script</span></span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#!/bin/bash'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> test.sh</span>
<span id="cb17-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'echo "Hello, World!"'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> test.sh</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to run it (will fail)</span></span>
<span id="cb17-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./test.sh</span></span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make it executable</span></span>
<span id="cb17-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x test.sh</span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try again (will work)</span></span>
<span id="cb17-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./test.sh</span></span></code></pre></div>
</section>
<section id="dependency-problems" class="level2">
<h2 class="anchored" data-anchor-id="dependency-problems">2. Dependency Problems</h2>
<p><strong>Problem</strong>: A program won’t start because of missing libraries or dependencies.</p>
<p><strong>Solution</strong>: Install the required packages or libraries.</p>
<p><strong>Example 11: Resolving Library Dependencies</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to run a program that has missing dependencies</span></span>
<span id="cb18-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./myprogram</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You might see: error while loading shared libraries: libsomething.so.2: cannot open shared object file: No such file or directory</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find what package provides the missing library</span></span>
<span id="cb18-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-file</span> search libsomething.so.2   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Debian/Ubuntu</span></span>
<span id="cb18-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dnf</span> provides <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>/libsomething.so.2    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fedora/RHEL</span></span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the package</span></span>
<span id="cb18-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install package-name       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Debian/Ubuntu</span></span>
<span id="cb18-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> dnf install package-name       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fedora/RHEL</span></span></code></pre></div>
</section>
<section id="disk-space-issues" class="level2">
<h2 class="anchored" data-anchor-id="disk-space-issues">3. Disk Space Issues</h2>
<p><strong>Problem</strong>: You receive “No space left on device” errors.</p>
<p><strong>Solution</strong>: Free up disk space by identifying and removing or relocating large files.</p>
<p><strong>Example 12: Finding and Cleaning Large Files</strong></p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the largest files in /var</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> find /var <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-size</span> +100M <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-exec</span> ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lh</span> {} <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\;</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find and delete old log files (older than 30 days)</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> find /var/log <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.log"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-mtime</span> +30 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-delete</span></span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean package caches (Ubuntu/Debian)</span></span>
<span id="cb19-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt clean</span></code></pre></div>
</section>
<section id="memorycpu-usage-problems" class="level2">
<h2 class="anchored" data-anchor-id="memorycpu-usage-problems">4. Memory/CPU Usage Problems</h2>
<p><strong>Problem</strong>: System is slow or unresponsive due to high resource usage.</p>
<p><strong>Solution</strong>: Identify and address the processes consuming excessive resources.</p>
<p><strong>Example 13: Identifying Resource-Hungry Processes</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monitor processes in real-time</span></span>
<span id="cb20-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">top</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find processes using the most CPU</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ps</span> aux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sort</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>-%cpu <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-10</span></span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If something is out of control, you might need to kill it</span></span>
<span id="cb20-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">kill</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Graceful termination</span></span>
<span id="cb20-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">kill</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-9</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forced termination (last resort)</span></span></code></pre></div>
</section>
<section id="network-connectivity-issues" class="level2">
<h2 class="anchored" data-anchor-id="network-connectivity-issues">5. Network Connectivity Issues</h2>
<p><strong>Problem</strong>: Can’t connect to a network service or host.</p>
<p><strong>Solution</strong>: Troubleshoot network connectivity step by step.</p>
<p><strong>Example 14: Network Troubleshooting Sequence</strong></p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if your network interface is up</span></span>
<span id="cb21-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> link</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if you have an IP address</span></span>
<span id="cb21-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> addr</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if you can reach your gateway</span></span>
<span id="cb21-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> route show</span>
<span id="cb21-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ping</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 4 <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> route <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> default <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{print $3}'</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if DNS resolution works</span></span>
<span id="cb21-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ping</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 4 google.com</span>
<span id="cb21-13"></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If DNS fails but IP works, check /etc/resolv.conf</span></span>
<span id="cb21-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /etc/resolv.conf</span>
<span id="cb21-16"></span>
<span id="cb21-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if a specific port is open and accessible</span></span>
<span id="cb21-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-zv</span> google.com 443</span></code></pre></div>
</section>
</section>
<section id="defensive-programming-techniques" class="level1">
<h1>Defensive Programming Techniques</h1>
<p>One of the best ways to reduce troubleshooting is to write code that anticipates problems and handles them gracefully. This practice is known as defensive programming.</p>
<section id="check-command-success" class="level2">
<h2 class="anchored" data-anchor-id="check-command-success">1. Check Command Success</h2>
<p>Always check the return status of important commands, especially when one command depends on another.</p>
<p><strong>Example 15: Checking Command Success</strong></p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad approach</span></span>
<span id="cb22-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> /some/directory</span>
<span id="cb22-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better approach</span></span>
<span id="cb22-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> /some/directory<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb22-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb22-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb22-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to change directory to /some/directory. Aborting."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb22-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb22-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
<section id="quote-your-variables" class="level2">
<h2 class="anchored" data-anchor-id="quote-your-variables">2. Quote Your Variables</h2>
<p>Always quote variables unless you have a specific reason not to, especially when they might contain spaces or special characters.</p>
<p><strong>Example 16: Proper Variable Quoting</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad approach</span></span>
<span id="cb23-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file_path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/path/with <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">spaces/file.txt</span></span>
<span id="cb23-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file_path</span> /backup/</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better approach</span></span>
<span id="cb23-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file_path</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/path/with spaces/file.txt"</span></span>
<span id="cb23-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file_path</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> /backup/</span></code></pre></div>
</section>
<section id="set-default-values" class="level2">
<h2 class="anchored" data-anchor-id="set-default-values">3. Set Default Values</h2>
<p>Provide default values for variables that might be empty to prevent unexpected behavior.</p>
<p><strong>Example 17: Setting Default Values</strong></p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the provided argument or default to "world"</span></span>
<span id="cb24-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span></span></code></pre></div>
</section>
<section id="validate-input" class="level2">
<h2 class="anchored" data-anchor-id="validate-input">4. Validate Input</h2>
<p>Always validate input before processing it.</p>
<p><strong>Example 18: Input Validation</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get user age</span></span>
<span id="cb25-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">age</span></span>
<span id="cb25-5"></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate input</span></span>
<span id="cb25-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb25-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Age must be a number"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb25-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb25-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb25-11"></span>
<span id="cb25-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">age</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">age</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb25-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Age must be between 0 and 120"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb25-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb25-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb25-16"></span>
<span id="cb25-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your age is </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</section>
<section id="use-shell-options" class="level2">
<h2 class="anchored" data-anchor-id="use-shell-options">5. Use Shell Options</h2>
<p>Enable helpful shell options to catch errors early.</p>
<p><strong>Example 19: Helpful Shell Options</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb26-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit immediately if a command exits with non-zero status</span></span>
<span id="cb26-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Treat unset variables as an error</span></span>
<span id="cb26-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> pipefail  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return value of a pipeline is the value of the last command to exit with non-zero status</span></span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now your script will be much more robust</span></span>
<span id="cb26-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command_that_might_fail</span></span>
<span id="cb26-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This will only execute if the previous command succeeded"</span></span></code></pre></div>
</section>
</section>
<section id="advanced-debugging-techniques" class="level1">
<h1>Advanced Debugging Techniques</h1>
<p>When basic troubleshooting doesn’t solve the problem, it’s time to use more advanced debugging techniques.</p>
<section id="tracing-script-execution" class="level2">
<h2 class="anchored" data-anchor-id="tracing-script-execution">1. Tracing Script Execution</h2>
<p>Use the <code>set -x</code> option to trace each command as it’s executed, showing you the exact flow and variable expansions.</p>
<p><strong>Example 20: Tracing Script Execution</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn on tracing for a specific section</span></span>
<span id="cb27-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-x</span></span>
<span id="cb27-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb27-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iteration </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$i</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb27-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb27-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> +x  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off tracing</span></span></code></pre></div>
<p>Output:</p>
<pre><code>+ for i in '{1..3}'
+ echo 'Iteration 1'
Iteration 1
+ for i in '{1..3}'
+ echo 'Iteration 2'
Iteration 2
+ for i in '{1..3}'
+ echo 'Iteration 3'
Iteration 3
+ set +x</code></pre>
</section>
<section id="using-debug-print-statements" class="level2">
<h2 class="anchored" data-anchor-id="using-debug-print-statements">2. Using Debug Print Statements</h2>
<p>Strategically place echo statements to print variable values at key points.</p>
<p><strong>Example 21: Debug Print Statements</strong></p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> calculate</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb29-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEBUG: Input values - a=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, b=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb29-5">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(($1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2))</span></span>
<span id="cb29-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEBUG: Calculated result=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$result</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb29-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$result</span></span>
<span id="cb29-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">calculate</span> 5 7<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb29-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The final value is </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$value</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Output:</p>
<pre><code>DEBUG: Input values - a=5, b=7
DEBUG: Calculated result=35
The final value is 35</code></pre>
</section>
<section id="using-the-bash-debugger-bashdb" class="level2">
<h2 class="anchored" data-anchor-id="using-the-bash-debugger-bashdb">3. Using the Bash Debugger (bashdb)</h2>
<p>For complex scripts, consider using <code>bashdb</code>, a dedicated debugger for Bash scripts.</p>
<p><strong>Example 22: Installing and Using bashdb</strong></p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install bashdb (Ubuntu/Debian)</span></span>
<span id="cb31-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install bashdb</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run your script with the debugger</span></span>
<span id="cb31-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">bashdb</span> myscript.sh</span></code></pre></div>
<p>Within the debugger, you can: - Set breakpoints at specific lines - Step through execution one line at a time - Examine variable values - Monitor expressions</p>
</section>
<section id="isolating-problem-areas" class="level2">
<h2 class="anchored" data-anchor-id="isolating-problem-areas">4. Isolating Problem Areas</h2>
<p>When debugging large scripts, isolate problems by commenting out sections of code.</p>
<p><strong>Example 23: Isolating Code Sections</strong></p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Part 1"</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First functionality</span></span>
<span id="cb32-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command1</span></span>
<span id="cb32-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command2</span></span>
<span id="cb32-7"></span>
<span id="cb32-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Part 2"</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Comment out the suspected problem area</span></span>
<span id="cb32-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb32-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">command3</span></span>
<span id="cb32-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">command4</span></span>
<span id="cb32-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb32-14"></span>
<span id="cb32-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Part 3"</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last functionality</span></span>
<span id="cb32-17"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command5</span></span>
<span id="cb32-18"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command6</span></span></code></pre></div>
</section>
<section id="using-external-debugging-tools" class="level2">
<h2 class="anchored" data-anchor-id="using-external-debugging-tools">5. Using External Debugging Tools</h2>
<p>For complex issues, especially in compiled programs, use external debugging tools.</p>
<p><strong>Example 24: Using strace to Debug System Calls</strong></p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trace all system calls made by a command</span></span>
<span id="cb33-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">strace</span> ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Focus on specific system calls (e.g., file operations)</span></span>
<span id="cb33-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">strace</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> trace=open,read,write ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span></span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attach to a running process</span></span>
<span id="cb33-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">strace</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>PID<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span></code></pre></div>
</section>
</section>
<section id="troubleshooting-system-performance-issues" class="level1">
<h1>Troubleshooting System Performance Issues</h1>
<p>Performance issues can be particularly challenging to troubleshoot because they often involve multiple interconnected systems.</p>
<section id="identifying-cpu-bottlenecks" class="level2">
<h2 class="anchored" data-anchor-id="identifying-cpu-bottlenecks">1. Identifying CPU Bottlenecks</h2>
<p><strong>Example 25: CPU Performance Analysis</strong></p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View real-time CPU usage</span></span>
<span id="cb34-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">top</span></span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get more detailed CPU statistics</span></span>
<span id="cb34-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mpstat</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-P</span> ALL 2 5  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Report CPU usage every 2 seconds, 5 times</span></span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find processes consuming the most CPU</span></span>
<span id="cb34-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ps</span> aux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sort</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>-%cpu <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-10</span></span></code></pre></div>
</section>
<section id="diagnosing-memory-issues" class="level2">
<h2 class="anchored" data-anchor-id="diagnosing-memory-issues">2. Diagnosing Memory Issues</h2>
<p><strong>Example 26: Memory Troubleshooting</strong></p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View memory usage overview</span></span>
<span id="cb35-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">free</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Detailed memory information</span></span>
<span id="cb35-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /proc/meminfo</span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find processes using the most memory</span></span>
<span id="cb35-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ps</span> aux <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sort</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>-%mem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-10</span></span>
<span id="cb35-9"></span>
<span id="cb35-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for memory leaks in a specific process (requires valgrind)</span></span>
<span id="cb35-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valgrind</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--leak-check</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>full ./myprogram</span></code></pre></div>
</section>
<section id="investigating-io-problems" class="level2">
<h2 class="anchored" data-anchor-id="investigating-io-problems">3. Investigating I/O Problems</h2>
<p><strong>Example 27: I/O Analysis</strong></p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check current disk I/O</span></span>
<span id="cb36-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">iostat</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-x</span> 2 5  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Report disk stats every 2 seconds, 5 times</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find processes with the most I/O activity</span></span>
<span id="cb36-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">iotop</span></span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if any processes are in D state (uninterruptible sleep, usually I/O)</span></span>
<span id="cb36-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ps</span> aux <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" D "</span></span></code></pre></div>
</section>
<section id="profiling-applications" class="level2">
<h2 class="anchored" data-anchor-id="profiling-applications">4. Profiling Applications</h2>
<p><strong>Example 28: Application Profiling</strong></p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Profile a program's CPU usage (requires perf)</span></span>
<span id="cb37-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">perf</span> record <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-g</span> ./myprogram</span>
<span id="cb37-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">perf</span> report</span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Profile memory allocations (requires gprof)</span></span>
<span id="cb37-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gcc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-pg</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> myprogram myprogram.c</span>
<span id="cb37-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./myprogram</span></span>
<span id="cb37-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gprof</span> ./myprogram gmon.out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> analysis.txt</span></code></pre></div>
</section>
</section>
<section id="troubleshooting-network-connectivity" class="level1">
<h1>Troubleshooting Network Connectivity</h1>
<p>Network issues can range from basic connectivity problems to complex routing issues.</p>
<section id="basic-connectivity-testing" class="level2">
<h2 class="anchored" data-anchor-id="basic-connectivity-testing">1. Basic Connectivity Testing</h2>
<p><strong>Example 29: Basic Network Tests</strong></p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if network interface is up</span></span>
<span id="cb38-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> link show</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for IP address</span></span>
<span id="cb38-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> addr show</span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ping a known host</span></span>
<span id="cb38-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ping</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> 4 8.8.8.8</span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check routing table</span></span>
<span id="cb38-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ip</span> route show</span></code></pre></div>
</section>
<section id="dns-resolution-issues" class="level2">
<h2 class="anchored" data-anchor-id="dns-resolution-issues">2. DNS Resolution Issues</h2>
<p><strong>Example 30: DNS Troubleshooting</strong></p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if DNS resolution works</span></span>
<span id="cb39-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">host</span> google.com</span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check which DNS servers are being used</span></span>
<span id="cb39-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /etc/resolv.conf</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test a specific DNS server</span></span>
<span id="cb39-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">dig</span> @8.8.8.8 google.com</span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check DNS lookup times</span></span>
<span id="cb39-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">time</span> dig google.com</span></code></pre></div>
</section>
<section id="advanced-network-diagnostics" class="level2">
<h2 class="anchored" data-anchor-id="advanced-network-diagnostics">3. Advanced Network Diagnostics</h2>
<p><strong>Example 31: Advanced Network Tools</strong></p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Trace the route to a host</span></span>
<span id="cb40-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">traceroute</span> google.com</span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check listening ports and connections</span></span>
<span id="cb40-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ss</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-tuln</span></span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Capture packets on a specific interface</span></span>
<span id="cb40-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> tcpdump <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> eth0 host 192.168.1.1</span>
<span id="cb40-9"></span>
<span id="cb40-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test connectivity to a specific port</span></span>
<span id="cb40-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">nc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-zv</span> google.com 443</span></code></pre></div>
</section>
</section>
<section id="troubleshooting-file-system-issues" class="level1">
<h1>Troubleshooting File System Issues</h1>
<p>File system problems can lead to data corruption, performance issues, or even system failure.</p>
<section id="checking-disk-space" class="level2">
<h2 class="anchored" data-anchor-id="checking-disk-space">1. Checking Disk Space</h2>
<p><strong>Example 32: Disk Space Analysis</strong></p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check disk space usage</span></span>
<span id="cb41-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find large files</span></span>
<span id="cb41-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> /home <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-size</span> +100M <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-exec</span> ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-lh</span> {} <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\;</span></span>
<span id="cb41-6"></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find largest directories</span></span>
<span id="cb41-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--max-depth</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1 /var <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hr</span></span></code></pre></div>
</section>
<section id="verifying-file-system-integrity" class="level2">
<h2 class="anchored" data-anchor-id="verifying-file-system-integrity">2. Verifying File System Integrity</h2>
<p><strong>Example 33: File System Checks</strong></p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check file system (must be unmounted except for root)</span></span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> fsck /dev/sdb1</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For root partition, schedule check on next boot</span></span>
<span id="cb42-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> touch /forcefsck</span>
<span id="cb42-6"></span>
<span id="cb42-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for file system errors in system logs</span></span>
<span id="cb42-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filesystem"</span> /var/log/syslog</span></code></pre></div>
</section>
<section id="handling-inode-exhaustion" class="level2">
<h2 class="anchored" data-anchor-id="handling-inode-exhaustion">3. Handling Inode Exhaustion</h2>
<p><strong>Example 34: Inode Troubleshooting</strong></p>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check inode usage</span></span>
<span id="cb43-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span></span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find directories with many small files</span></span>
<span id="cb43-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> / <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-xdev</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> 2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uniq</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span></span></code></pre></div>
</section>
</section>
<section id="troubleshooting-shell-scripts" class="level1">
<h1>Troubleshooting Shell Scripts</h1>
<p>Shell scripts often have unique troubleshooting challenges due to their interpreted nature and text processing focus.</p>
<section id="detecting-syntax-errors" class="level2">
<h2 class="anchored" data-anchor-id="detecting-syntax-errors">1. Detecting Syntax Errors</h2>
<p><strong>Example 35: Using shellcheck</strong></p>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install shellcheck (Ubuntu/Debian)</span></span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install shellcheck</span>
<span id="cb44-3"></span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check a script for potential issues</span></span>
<span id="cb44-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shellcheck</span> myscript.sh</span></code></pre></div>
<p>shellcheck can identify many common errors and suggest best practices.</p>
</section>
<section id="tracing-variable-expansion" class="level2">
<h2 class="anchored" data-anchor-id="tracing-variable-expansion">2. Tracing Variable Expansion</h2>
<p><strong>Example 36: Tracing Variables</strong></p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb45-2"></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add verbose debugging for a specific section</span></span>
<span id="cb45-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">original_value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World"</span></span>
<span id="cb45-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$original_value</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb45-6"></span>
<span id="cb45-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-x</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn on tracing</span></span>
<span id="cb45-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">modified_value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${original_value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove spaces</span></span>
<span id="cb45-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> +x  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn off tracing</span></span>
<span id="cb45-10"></span>
<span id="cb45-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$modified_value</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</section>
<section id="handling-special-characters" class="level2">
<h2 class="anchored" data-anchor-id="handling-special-characters">3. Handling Special Characters</h2>
<p><strong>Example 37: Dealing with Special Characters</strong></p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb46-2"></span>
<span id="cb46-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print variables with potential special characters to see their exact value</span></span>
<span id="cb46-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">filename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"report-2023_04_01.txt"</span></span>
<span id="cb46-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filename raw: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb46-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filename quoted: '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span></span>
<span id="cb46-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">printf</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Filename printf: %s\n"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</section>
<section id="testing-functions-in-isolation" class="level2">
<h2 class="anchored" data-anchor-id="testing-functions-in-isolation">4. Testing Functions in Isolation</h2>
<p><strong>Example 38: Isolating Function Testing</strong></p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb47-2"></span>
<span id="cb47-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> validate_input</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb47-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb47-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$input</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb47-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Valid input</span></span>
<span id="cb47-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb47-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invalid input</span></span>
<span id="cb47-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb47-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb47-11"></span>
<span id="cb47-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test function directly</span></span>
<span id="cb47-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">validate_input</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test 1: Valid"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test 1: Invalid"</span></span>
<span id="cb47-14"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">validate_input</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test 2: Valid"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test 2: Invalid"</span></span>
<span id="cb47-15"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">validate_input</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123abc"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test 3: Valid"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test 3: Invalid"</span></span></code></pre></div>
</section>
</section>
<section id="creating-a-systematic-approach-to-problem-solving" class="level1">
<h1>Creating a Systematic Approach to Problem Solving</h1>
<p>The most effective troubleshooters follow a systematic approach rather than jumping from one potential solution to another randomly.</p>
<section id="define-the-problem-clearly" class="level2">
<h2 class="anchored" data-anchor-id="define-the-problem-clearly">1. Define the Problem Clearly</h2>
<p>Start by clearly defining what’s wrong. “The server is broken” is not specific enough. “The web server returns a 503 error when accessing /api/users” is much more actionable.</p>
</section>
<section id="gather-information" class="level2">
<h2 class="anchored" data-anchor-id="gather-information">2. Gather Information</h2>
<p>Collect relevant data about the problem: - When did it start? - What changed recently? - Is it consistent or intermittent? - What are the exact error messages?</p>
</section>
<section id="form-a-hypothesis" class="level2">
<h2 class="anchored" data-anchor-id="form-a-hypothesis">3. Form a Hypothesis</h2>
<p>Based on the information, form a hypothesis about what might be causing the problem.</p>
</section>
<section id="test-the-hypothesis" class="level2">
<h2 class="anchored" data-anchor-id="test-the-hypothesis">4. Test the Hypothesis</h2>
<p>Devise a test that would confirm or refute your hypothesis. Make only one change at a time.</p>
</section>
<section id="implement-a-solution" class="level2">
<h2 class="anchored" data-anchor-id="implement-a-solution">5. Implement a Solution</h2>
<p>Once you’ve identified the cause, implement and test a solution.</p>
</section>
<section id="document-the-problem-and-solution" class="level2">
<h2 class="anchored" data-anchor-id="document-the-problem-and-solution">6. Document the Problem and Solution</h2>
<p>Document what happened and how you fixed it, so you (or others) can learn from it in the future.</p>
<p><strong>Example 39: Systematic Troubleshooting</strong></p>
<pre><code>Problem: The web application returns 503 errors intermittently.

Gathered Information:
- Started happening after yesterday's deployment
- Error logs show "connection refused" to database
- Database server shows high CPU usage during errors

Hypothesis:
The database server might be overloaded and occasionally rejecting connections.

Test:
Monitor database server load while generating test traffic to the application.

Results:
Confirmed that errors occur when database CPU usage exceeds 90%.

Solution:
1. Optimized the most expensive database query
2. Added connection pooling to reduce connection overhead
3. Implemented retry logic in the application

Documentation:
Created incident report #2023-07 with details and added monitoring alerts for database CPU.</code></pre>
</section>
</section>
<section id="real-world-troubleshooting-scenarios" class="level1">
<h1>Real-World Troubleshooting Scenarios</h1>
<p>Let’s explore some real-world scenarios to practice our troubleshooting skills.</p>
<section id="scenario-1-script-fails-when-run-from-cron" class="level2">
<h2 class="anchored" data-anchor-id="scenario-1-script-fails-when-run-from-cron">Scenario 1: Script Fails When Run from Cron</h2>
<p><strong>Problem</strong>: A backup script works when run manually but fails when executed by cron.</p>
<p><strong>Troubleshooting Steps</strong>:</p>
<ol type="1">
<li><p><strong>Add logging to the script</strong>:</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb49-2"></span>
<span id="cb49-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add logging</span></span>
<span id="cb49-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /tmp/backup_log.txt <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb49-5"></span>
<span id="cb49-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting backup at </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb49-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PATH=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$PATH</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb49-8"></span>
<span id="cb49-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rest of script...</span></span></code></pre></div></li>
<li><p><strong>Compare environments</strong>:</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When run manually</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /tmp/manual_env.txt</span>
<span id="cb50-3"></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add to crontab</span></span>
<span id="cb50-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">*</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> /tmp/cron_env.txt</span>
<span id="cb50-6"></span>
<span id="cb50-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare</span></span>
<span id="cb50-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span> /tmp/manual_env.txt /tmp/cron_env.txt</span></code></pre></div></li>
<li><p><strong>Solution</strong>: The problem is likely related to PATH differences or missing environment variables. Fix by adding full paths to commands or setting necessary environment variables in the script.</p></li>
</ol>
</section>
<section id="scenario-2-intermittent-network-connection-drops" class="level2">
<h2 class="anchored" data-anchor-id="scenario-2-intermittent-network-connection-drops">Scenario 2: Intermittent Network Connection Drops</h2>
<p><strong>Problem</strong>: A server occasionally loses network connectivity for a few seconds.</p>
<p><strong>Troubleshooting Steps</strong>:</p>
<ol type="1">
<li><p><strong>Monitor network interface statistics</strong>:</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run in background to log interface statistics every second</span></span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nohup</span> sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'while true; do date &gt;&gt; /tmp/netstat.log; ifconfig eth0 &gt;&gt; /tmp/netstat.log; sleep 1; done'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span></span></code></pre></div></li>
<li><p><strong>Check for error messages</strong>:</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> eth0 /var/log/syslog</span></code></pre></div></li>
<li><p><strong>Monitor link status during the issue</strong>:</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log link status changes</span></span>
<span id="cb53-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nohup</span> sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'while true; do date &gt;&gt; /tmp/link.log; ethtool eth0 | grep -i link &gt;&gt; /tmp/link.log; sleep 1; done'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;</span></span></code></pre></div></li>
<li><p><strong>Solution</strong>: Analysis shows the link briefly goes down. This could be due to:</p>
<ul>
<li>Faulty network cable (try replacing)</li>
<li>Switch port issues (try a different port)</li>
<li>NIC driver issues (try updating the driver)</li>
</ul></li>
</ol>
</section>
<section id="scenario-3-disk-space-mysteriously-filling-up" class="level2">
<h2 class="anchored" data-anchor-id="scenario-3-disk-space-mysteriously-filling-up">Scenario 3: Disk Space Mysteriously Filling Up</h2>
<p><strong>Problem</strong>: A server is rapidly running out of disk space, but no obvious large files are being created.</p>
<p><strong>Troubleshooting Steps</strong>:</p>
<ol type="1">
<li><p><strong>Check for deleted but open files</strong>:</p>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find processes with open deleted files</span></span>
<span id="cb54-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">lsof</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> deleted</span></code></pre></div></li>
<li><p><strong>Look for hidden space usage</strong>:</p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if space is being used by mount points</span></span>
<span id="cb55-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--total</span></span>
<span id="cb55-3"></span>
<span id="cb55-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look for large directories including hidden ones</span></span>
<span id="cb55-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sh</span> .<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!.</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">]*</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-hr</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-20</span></span></code></pre></div></li>
<li><p><strong>Monitor file system changes</strong>:</p>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install inotify tools (Ubuntu/Debian)</span></span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt install inotify-tools</span>
<span id="cb56-3"></span>
<span id="cb56-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monitor file creations in /var</span></span>
<span id="cb56-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">inotifywait</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> create /var</span></code></pre></div></li>
<li><p><strong>Solution</strong>: A process is writing large amounts of data to a log file within a deleted directory. Restart the process to release the file handle.</p></li>
</ol>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice troubleshooting with a scenario. Imagine you have the following script that isn’t working as expected:</p>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb57-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># process_files.sh</span></span>
<span id="cb57-3"></span>
<span id="cb57-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">process_directory</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span></span>
<span id="cb57-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">output_file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span></span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing files in </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> and saving results to </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb57-8"></span>
<span id="cb57-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span></span>
<span id="cb57-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.txt"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb57-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file)</span></span>
<span id="cb57-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lines"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span></span>
<span id="cb57-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb57-14"></span>
<span id="cb57-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing complete. Found </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files."</span></span></code></pre></div>
<p>When you run it with:</p>
<pre><code>./process_files.sh /path/with spaces/ output.txt</code></pre>
<p>It fails with errors. What’s wrong and how would you fix it?</p>
<details>
<summary>
See Solution
</summary>
<p>There are multiple issues with this script:</p>
<ol type="1">
<li><strong>Missing quotes around variable expansions</strong>: This causes problems with spaces in paths</li>
<li><strong>No error checking</strong>: The script doesn’t verify if directories exist or if it can write to the output file</li>
<li><strong>Issue with the final count</strong>: The script doesn’t handle the case where no files are found</li>
</ol>
<p>Here’s a fixed version:</p>
<div class="sourceCode" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb59-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># process_files.sh - Fixed version</span></span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">process_directory</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb59-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">output_file</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb59-6"></span>
<span id="cb59-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate inputs</span></span>
<span id="cb59-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb59-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Missing arguments"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb59-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Usage: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> &lt;directory&gt; &lt;output-file&gt;"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb59-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb59-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb59-13"></span>
<span id="cb59-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if directory exists</span></span>
<span id="cb59-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb59-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Directory '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' not found"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb59-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb59-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb59-19"></span>
<span id="cb59-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear output file and check if we can write to it</span></span>
<span id="cb59-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>/dev/null</span>
<span id="cb59-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ne</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb59-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Cannot write to '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb59-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb59-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb59-26"></span>
<span id="cb59-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing files in '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' and saving results to '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span></span>
<span id="cb59-28"></span>
<span id="cb59-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use proper quoting and error handling</span></span>
<span id="cb59-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">! </span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb59-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Cannot change to directory '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$process_directory</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb59-32">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb59-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb59-34"></span>
<span id="cb59-35"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0</span>
<span id="cb59-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-type</span> f <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-name</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.txt"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb59-37">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wc</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb59-38">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> lines"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb59-39">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">file_count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((file_count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb59-40"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb59-41"></span>
<span id="cb59-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-s</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$output_file</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb59-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing complete. Found </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$file_count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> files."</span></span>
<span id="cb59-44"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb59-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No matching files found."</span></span>
<span id="cb59-46"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>The fixed script: 1. Properly quotes all variable expansions 2. Validates inputs and checks for errors 3. Provides meaningful error messages 4. Handles the case where no files are found</p>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ol type="1">
<li><p><strong>Understand Error Types</strong>: Know the difference between syntactic errors and logical errors to guide your troubleshooting approach.</p></li>
<li><p><strong>Use the Right Tools</strong>: Linux provides powerful diagnostic tools - learn them and use them appropriately.</p></li>
<li><p><strong>Follow a Systematic Approach</strong>: Define the problem, gather information, form a hypothesis, test it, implement a solution, and document your findings.</p></li>
<li><p><strong>Practice Defensive Programming</strong>: Prevent problems by writing robust code that validates input, checks for errors, and fails gracefully.</p></li>
<li><p><strong>Master Debugging Techniques</strong>: Use tracing, logging, and isolation to understand exactly what your code is doing.</p></li>
<li><p><strong>Test in Small Steps</strong>: When troubleshooting, change one thing at a time and test the results.</p></li>
<li><p><strong>Document Everything</strong>: Keep track of what you’ve tried and what worked, to build your knowledge for future problems.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Troubleshooting in Linux is an essential skill that improves with practice and experience. By understanding common error types, mastering the right tools, and following a systematic approach to problem-solving, you can efficiently diagnose and resolve even the most challenging issues.</p>
<p>Remember that effective troubleshooting is both an art and a science. The scientific part involves methodical investigation and the application of technical knowledge. The art comes from experience, intuition, and the ability to see patterns that might not be immediately obvious.</p>
<p>As you continue your Linux journey, embrace problems as learning opportunities. Each issue you solve adds to your troubleshooting toolkit and makes you a more capable Linux professional. With time, you’ll develop an intuition for quickly zeroing in on the root cause of problems and implementing effective solutions.</p>
</section>
<section id="faqs-about-linux-troubleshooting" class="level1">
<h1>FAQs About Linux Troubleshooting</h1>
<section id="q1-whats-the-first-thing-i-should-do-when-troubleshooting-any-linux-issue" class="level2">
<h2 class="anchored" data-anchor-id="q1-whats-the-first-thing-i-should-do-when-troubleshooting-any-linux-issue">Q1: What’s the first thing I should do when troubleshooting any Linux issue?</h2>
<p><strong>A:</strong> Start by checking system logs (particularly <code>/var/log/syslog</code> or <code>/var/log/messages</code>) for error messages related to the problem. Logs often contain valuable clues about what’s going wrong.</p>
</section>
<section id="q2-how-can-i-troubleshoot-a-linux-server-remotely-when-i-cant-access-the-gui" class="level2">
<h2 class="anchored" data-anchor-id="q2-how-can-i-troubleshoot-a-linux-server-remotely-when-i-cant-access-the-gui">Q2: How can I troubleshoot a Linux server remotely when I can’t access the GUI?</h2>
<p><strong>A:</strong> Use command-line tools like <code>top</code>, <code>ps</code>, <code>netstat</code>, <code>df</code>, and log files. SSH tunneling can also help you forward specific ports to run web-based tools if needed.</p>
</section>
<section id="q3-whats-the-best-way-to-troubleshoot-performance-issues" class="level2">
<h2 class="anchored" data-anchor-id="q3-whats-the-best-way-to-troubleshoot-performance-issues">Q3: What’s the best way to troubleshoot performance issues?</h2>
<p><strong>A:</strong> Start with <code>top</code> or <code>htop</code> to identify resource bottlenecks (CPU, memory, I/O). Then use specialized tools like <code>iostat</code> for disk issues, <code>vmstat</code> for memory, or <code>netstat</code> for network problems.</p>
</section>
<section id="q4-how-do-i-debug-a-shell-script-that-works-interactively-but-fails-when-run-as-a-cron-job" class="level2">
<h2 class="anchored" data-anchor-id="q4-how-do-i-debug-a-shell-script-that-works-interactively-but-fails-when-run-as-a-cron-job">Q4: How do I debug a shell script that works interactively but fails when run as a cron job?</h2>
<p><strong>A:</strong> The most common issues are environment variables and paths. Add logging to your script, explicitly set needed environment variables, use absolute paths for commands, and redirect output to a log file for later review.</p>
</section>
<section id="q5-what-should-i-do-if-my-system-wont-boot-properly" class="level2">
<h2 class="anchored" data-anchor-id="q5-what-should-i-do-if-my-system-wont-boot-properly">Q5: What should I do if my system won’t boot properly?</h2>
<p><strong>A:</strong> Boot into recovery mode or from a live USB, check log files like <code>/var/log/boot.log</code> or use <code>journalctl -b -1</code> to see logs from the previous boot attempt. Look for hardware errors with <code>dmesg</code> and verify file system integrity with <code>fsck</code>.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<section id="understanding-error-types" class="level2">
<h2 class="anchored" data-anchor-id="understanding-error-types">Understanding Error Types</h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Syntax_error">Syntax Errors - Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Logic_error">Logic Errors - Wikipedia</a></li>
</ul>
</section>
<section id="bash-programming-resources" class="level2">
<h2 class="anchored" data-anchor-id="bash-programming-resources">Bash Programming Resources</h2>
<ul>
<li><a href="http://mywiki.wooledge.org/BashPitfalls">Bash Pitfalls</a></li>
<li><a href="http://tldp.org/LDP/abs/html/gotchas.html">Advanced Bash-Scripting Guide: Gotchas</a></li>
<li><a href="http://www.gnu.org/software/bash/manual/html_node/Reserved-Word-Index.html">Bash Manual: Reserved Word Index</a></li>
</ul>
</section>
<section id="unix-programming-philosophy" class="level2">
<h2 class="anchored" data-anchor-id="unix-programming-philosophy">Unix Programming Philosophy</h2>
<ul>
<li><a href="http://www.faqs.org/docs/artu/">The Art of Unix Programming</a></li>
<li><a href="http://www.faqs.org/docs/artu/ch01s06.html">The Art of Unix Programming: The Unix Philosophy</a></li>
</ul>
</section>
<section id="advanced-debugging-tools" class="level2">
<h2 class="anchored" data-anchor-id="advanced-debugging-tools">Advanced Debugging Tools</h2>
<ul>
<li><a href="http://bashdb.sourceforge.net/">Bash Debugger</a></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-04-04/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Troubleshooting in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-04-04/</guid>
  <pubDate>Fri, 04 Apr 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Complete Guide to Saving Sequential Files in C: A Beginner’s Tutorial</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-04-02/</link>
  <description><![CDATA[ 





<p><em>Authors Note: I am learning as I write this series so please point out errors or better ways to do things if you see them in this article</em></p>
<section id="introduction-why-save-your-data" class="level1">
<h1>Introduction: Why Save Your Data?</h1>
<p>Have you ever spent hours entering data into a program, only to lose it all when you shut down your computer? If you’ve experienced this frustration, you’re not alone! None of the simple C programs beginners typically write can store data permanently.</p>
<p>Think about it: when you create a variable, assign it a value like 14, and then turn off your computer, that value disappears completely. When you restart your computer, that information is gone forever.</p>
<p>This is where file handling becomes essential. In this comprehensive guide, we’ll explore how to save data to your computer’s disk using sequential files in C. When data is saved to disk, it remains there until you explicitly change or delete it—just like music saved to your device stays there until you remove it.</p>
</section>
<section id="what-are-disk-files" class="level1">
<h1>What Are Disk Files?</h1>
<p>Disk files are containers that hold data on your computer’s storage devices. You’re already familiar with files if you’ve ever saved a C program—that .c file is stored on your disk! Files can contain either program code or data.</p>
<p>There’s an important distinction to understand about files:</p>
<ul>
<li><strong>Sequential-access files</strong>: Data must be read or written in order, from beginning to end</li>
<li><strong>Random-access files</strong>: Data can be accessed at any position without reading through all preceding data</li>
</ul>
<blockquote class="blockquote">
<p><strong>💡 Helpful Analogy</strong>: Think of sequential files like an old VHS tape where you must fast-forward through the content in order. Random-access files are like DVDs or streaming services where you can jump directly to any scene.</p>
</blockquote>
<p>In this tutorial, we’ll focus specifically on sequential files, which are perfect for beginners and cover many common use cases.</p>
</section>
<section id="step-1-understanding-file-pointers" class="level1">
<h1>Step 1: Understanding File Pointers</h1>
<p>Before you can work with files in C, you need to understand file pointers. Just as regular pointers hold memory addresses of variables, file pointers hold information about the disk location of files you’re working with.</p>
<p>To work with files in C, you’ll need to: 1. Include the standard I/O library 2. Define a file pointer variable 3. Connect that pointer to a physical file</p>
<p>Here’s how you define a file pointer:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Defines a file pointer named fptr */</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>⚠️ Important</strong>: Most C programmers define their file pointers globally (before main()) so the entire program can access them. The keyword FILE is defined in stdio.h, which is why you must include this header file when working with disk files.</p>
</blockquote>
</section>
<section id="step-2-opening-files-with-fopen" class="level1">
<h1>Step 2: Opening Files with fopen()</h1>
<p>Before reading from or writing to a file, you must open it using the <code>fopen()</code> function. This function connects your file pointer to a physical file and prepares the file for operations.</p>
<p>The basic syntax is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1">file_pointer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mode"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>Here’s a practical example:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Defines a file pointer</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-7">    </span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// File operations would go here</span></span>
<span id="cb3-9">    </span>
<span id="cb3-10">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Always close files when done!</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<section id="file-opening-modes" class="level2">
<h2 class="anchored" data-anchor-id="file-opening-modes">File Opening Modes</h2>
<p>When opening a file, you must specify how you intend to use it with one of these modes:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 31%">
<col style="width: 68%">
</colgroup>
<thead>
<tr class="header">
<th>Mode</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>“w”</td>
<td><strong>Write mode</strong>: Creates a new file (overwrites if it exists)</td>
</tr>
<tr class="even">
<td>“r”</td>
<td><strong>Read mode</strong>: Opens an existing file for reading (error if file doesn’t exist)</td>
</tr>
<tr class="odd">
<td>“a”</td>
<td><strong>Append mode</strong>: Adds data to the end of an existing file (creates file if it doesn’t exist)</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>⚠️ Warning</strong>: Opening a file in “w” mode will erase any existing data in that file! Use “a” mode if you want to preserve the existing content.</p>
</blockquote>
</section>
<section id="error-checking" class="level2">
<h2 class="anchored" data-anchor-id="error-checking">Error Checking</h2>
<p>Always check if your file opened successfully:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1">fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-3">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Exit with error code</span></span>
<span id="cb4-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="step-3-writing-to-sequential-files" class="level1">
<h1>Step 3: Writing to Sequential Files</h1>
<p>To write data to a file, we use <code>fprintf()</code>, which works just like <code>printf()</code> but writes to a file instead of the screen.</p>
<p>Here’s a basic example of writing to a file:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5">    </span>
<span id="cb5-6">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-7">    </span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-9">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-12">    </span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Writing formatted data to file</span></span>
<span id="cb5-14">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-15">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Smith"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-16">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">85.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-17">    </span>
<span id="cb5-18">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-19">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data successfully written to file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-20">    </span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="step-4-reading-from-sequential-files" class="level1">
<h1>Step 4: Reading from Sequential Files</h1>
<p>To read data from a file, we can use functions like <code>fgets()</code> which reads a line at a time from a file into a character array.</p>
<p>Here’s how to read data from a file:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Buffer to store each line</span></span>
<span id="cb6-6">    </span>
<span id="cb6-7">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-10">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-13">    </span>
<span id="cb6-14">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File contents:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Read and display each line until end of file</span></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>feof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-18">        fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>feof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check again to avoid printing last line twice</span></span>
<span id="cb6-20">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-23">    </span>
<span id="cb6-24">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>💡 Tip</strong>: The <code>feof()</code> function returns true when you’ve reached the end of the file. This helps you avoid reading beyond the file’s contents.</p>
</blockquote>
</section>
<section id="step-5-appending-to-sequential-files" class="level1">
<h1>Step 5: Appending to Sequential Files</h1>
<p>If you want to add data to an existing file without erasing its contents, use append mode (“a”):</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-5">    </span>
<span id="cb7-6">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-7">    </span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-9">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-12">    </span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Adding more data to the existing file</span></span>
<span id="cb7-14">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">--- New Records ---</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-15">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-16">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emma Johnson"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-17">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-18">    </span>
<span id="cb7-19">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-20">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data successfully appended to file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-21">    </span>
<span id="cb7-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="your-turn-building-a-simple-student-record-system" class="level1">
<h1>Your Turn! Building a Simple Student Record System</h1>
<p>Let’s practice what we’ve learned by building a simple student record system that: 1. Creates a file to store student records 2. Allows adding new student records 3. Displays all saved records</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb8-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Structure to hold student data</span></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> createFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> addStudent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> displayRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-17">    </span>
<span id="cb8-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-19">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">STUDENT RECORD SYSTEM</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-20">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1. Create new records file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-21">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2. Add student record</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-22">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3. Display all records</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-23">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4. Exit</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-24">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your choice: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-25">        scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-26">        </span>
<span id="cb8-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">switch</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>choice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-29">                createFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-32">                addStudent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-33">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-35">                displayRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-36">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-38">                printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exiting program. Goodbye!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-39">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">default</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb8-41">                printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid choice. Please try again.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-42">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-44">    </span>
<span id="cb8-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-46"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-47"></span>
<span id="cb8-48"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> createFile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-49">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-50">    </span>
<span id="cb8-51">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-52">    </span>
<span id="cb8-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-54">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error creating file!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-56">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-57">    </span>
<span id="cb8-58">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STUDENT RECORDS DATABASE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-59">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">NAME</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\t\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SCORE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-60">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"----------------------------</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-61">    </span>
<span id="cb8-62">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-63">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New records file created successfully!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-64"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-65"></span>
<span id="cb8-66"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> addStudent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-67">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-69">    </span>
<span id="cb8-70">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-71">    </span>
<span id="cb8-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-73">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file. Create a new file first!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-75">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-76">    </span>
<span id="cb8-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear input buffer</span></span>
<span id="cb8-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-79">    </span>
<span id="cb8-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get student details</span></span>
<span id="cb8-81">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter student ID: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-82">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-83">    </span>
<span id="cb8-84">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter student name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear buffer again</span></span>
<span id="cb8-86">    fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-87">    </span>
<span id="cb8-88">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove newline character from name</span></span>
<span id="cb8-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-91">            student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-92">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-93">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-94">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-95">    </span>
<span id="cb8-96">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter student score: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-97">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-98">    </span>
<span id="cb8-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write to file</span></span>
<span id="cb8-100">    fprintf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\t%s\t\t%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-101">    </span>
<span id="cb8-102">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-103">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student record added successfully!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-104"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-105"></span>
<span id="cb8-106"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> displayRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-107">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">FILE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-108">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-109">    </span>
<span id="cb8-110">    fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fopen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"students.txt"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-111">    </span>
<span id="cb8-112">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-113">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error opening file. No records found!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-115">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-116">    </span>
<span id="cb8-117">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">--- DISPLAYING ALL RECORDS ---</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-118">    </span>
<span id="cb8-119">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>feof<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-120">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-121">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> buffer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-122">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-123">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-124">    </span>
<span id="cb8-125">    fclose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>fptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-126"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<details>
<summary>
See Solution
</summary>
<p>When you run this program:</p>
<ol type="1">
<li>Choose option 1 to create a new file</li>
<li>Choose option 2 to add student records</li>
<li>Choose option 3 to display all records</li>
<li>Choose option 4 to exit</li>
</ol>
The data will be saved in “students.txt” in your program’s directory.
</details>
</section>
<section id="common-mistakes-and-how-to-avoid-them" class="level1">
<h1>Common Mistakes and How to Avoid Them</h1>
<p>When working with files in C, beginners often encounter these issues:</p>
<ol type="1">
<li><strong>Forgetting to close files</strong>: Always use <code>fclose()</code> when you’re done with a file</li>
<li><strong>Not checking if a file opened successfully</strong>: Always verify with <code>if (fptr == NULL)</code></li>
<li><strong>Opening files in wrong mode</strong>: Using “w” overwrites existing files</li>
<li><strong>Not checking for end-of-file</strong>: Use <code>feof()</code> to avoid reading beyond file content</li>
<li><strong>Forgetting file pointer positions</strong>: In <code>fprintf()</code>, the file pointer is the first parameter, but in <code>fgets()</code>, it’s the last parameter</li>
</ol>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<p>✅ Files allow programs to store data permanently on disk storage ✅ Sequential files must be accessed in order from beginning to end ✅ Always open files with <code>fopen()</code> before using them ✅ Use the appropriate mode when opening files: “w” (write), “r” (read), or “a” (append) ✅ Write to files using <code>fprintf()</code> which works like <code>printf()</code> but outputs to a file ✅ Read from files using <code>fgets()</code> to retrieve line by line content ✅ Always check for errors when opening files and for the end-of-file condition when reading ✅ Close all files with <code>fclose()</code> when you’re finished with them</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="whats-the-difference-between-sequential-and-random-access-files" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-sequential-and-random-access-files">1. What’s the difference between sequential and random access files?</h2>
<p>Sequential files must be read or written in order from start to finish, like a tape. Random access files allow you to jump to any position directly, like a DVD.</p>
</section>
<section id="can-i-open-multiple-files-at-the-same-time" class="level2">
<h2 class="anchored" data-anchor-id="can-i-open-multiple-files-at-the-same-time">2. Can I open multiple files at the same time?</h2>
<p>Yes! You just need to create a separate file pointer for each file you want to open simultaneously.</p>
</section>
<section id="what-happens-if-i-try-to-open-a-file-that-doesnt-exist-in-r-mode" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-if-i-try-to-open-a-file-that-doesnt-exist-in-r-mode">3. What happens if I try to open a file that doesn’t exist in “r” mode?</h2>
<p>Opening a non-existent file in read mode will fail, and <code>fopen()</code> will return NULL.</p>
</section>
<section id="how-do-i-know-when-ive-reached-the-end-of-a-file" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-know-when-ive-reached-the-end-of-a-file">4. How do I know when I’ve reached the end of a file?</h2>
<p>Use the <code>feof()</code> function to check if you’ve reached the end of file during reading operations.</p>
</section>
<section id="can-i-read-and-write-to-a-file-at-the-same-time" class="level2">
<h2 class="anchored" data-anchor-id="can-i-read-and-write-to-a-file-at-the-same-time">5. Can I read and write to a file at the same time?</h2>
<p>Yes, by opening the file in “r+” mode (read and write). However, this requires careful management of the file position.</p>
</section>
</section>
<section id="conclusion-start-saving-your-data-today" class="level1">
<h1>Conclusion: Start Saving Your Data Today!</h1>
<p>Congratulations! You now understand how to create, read from, and write to sequential files in C. This fundamental skill opens up endless possibilities for your programs—from saving user preferences to storing large datasets.</p>
<p>The ability to save data to files is what transforms simple programs into truly useful applications that can maintain information between runs. Now your programs can remember things long after they’ve been closed!</p>
<p>Ready to take your C programming skills to the next level? Start incorporating file handling into your projects today and watch how they transform into more powerful, useful applications!</p>
<p>What will you build with your new file handling skills? Let us know in the comments below!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.geeksforgeeks.org/c-file-io/">C File I/O Tutorial - GeeksforGeeks</a></li>
<li><a href="https://www.tutorialspoint.com/cprogramming/c_file_io.htm">File Handling in C - Tutorialspoint</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-04-02/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Saving Files with C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-04-02/</guid>
  <pubDate>Wed, 02 Apr 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Complete Guide to While Loops in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-31/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to your comprehensive guide to while loops in R! While loops are one of the fundamental control structures in R that allow you to execute a block of code repeatedly based on a condition.</p>
<p>In this guide, we’ll break down while loops into simple concepts with plenty of practical examples that you can follow along with. By the end of this article, you’ll feel confident using while loops in your own R projects!</p>
</section>
<section id="what-are-while-loops" class="level1">
<h1>What Are While Loops?</h1>
<p>A while loop in R is a control structure that repeats a block of code as long as a specified condition remains TRUE. It’s like telling R: “Keep doing this task until I tell you to stop.”</p>
<p>The basic syntax of a while loop looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (condition) {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to execute</span></span>
<span id="cb1-3">}</span></code></pre></div>
<p>The loop follows these simple steps:</p>
<ol type="1">
<li>Check if the condition is TRUE</li>
<li>If TRUE, execute the code inside the curly braces</li>
<li>Return to step 1</li>
<li>If FALSE, exit the loop and continue with the rest of the program</li>
</ol>
</section>
<section id="when-to-use-while-loops" class="level1">
<h1>When to Use While Loops</h1>
<p>While loops are particularly useful when:</p>
<ul>
<li>You don’t know in advance how many iterations you’ll need</li>
<li>You need to continue a process until a specific condition is met</li>
<li>You’re waiting for user input or an external event</li>
</ul>
</section>
<section id="basic-while-loop-example" class="level1">
<h1>Basic While Loop Example</h1>
<p>Let’s start with a simple example to see a while loop in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a counter</span></span>
<span id="cb2-2">counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a while loop that counts from 1 to 5</span></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count:"</span>, counter))</span>
<span id="cb2-7">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-8">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Count: 1"
[1] "Count: 2"
[1] "Count: 3"
[1] "Count: 4"
[1] "Count: 5"</code></pre>
</div>
</div>
<p>In this example, we:</p>
<ol type="1">
<li>Set a counter variable to 1</li>
<li>Create a while loop that runs as long as counter is less than or equal to 5</li>
<li>Print the current count</li>
<li>Increment the counter by 1</li>
<li>When counter becomes 6, the condition becomes FALSE, and the loop stops</li>
</ol>
</section>
<section id="common-pitfalls-infinite-loops" class="level1">
<h1>Common Pitfalls: Infinite Loops</h1>
<p>One of the most common issues with while loops is creating an infinite loop—a loop that never ends because the condition never becomes FALSE.</p>
<p>Here’s an example of an infinite loop:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DON'T RUN THIS CODE!</span></span>
<span id="cb4-2">counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(counter)</span>
<span id="cb4-5">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-6">}</span></code></pre></div>
<p>This loop would run forever because counter starts at 1 and keeps increasing, so it will always be greater than 0.</p>
<p>To avoid infinite loops:</p>
<ul>
<li>Always make sure your condition will eventually become FALSE</li>
<li>Include an incrementing or decrementing step</li>
<li>Consider adding a safety mechanism like a maximum iteration count</li>
</ul>
</section>
<section id="breaking-out-of-loops" class="level1">
<h1>Breaking Out of Loops</h1>
<p>Sometimes you may want to exit a loop early, even if the condition is still TRUE. R provides two commands for this:</p>
<ul>
<li><code>break</code>: Exits the loop completely</li>
<li><code>next</code>: Skips the current iteration and moves to the next one</li>
</ul>
<section id="using-break" class="level2">
<h2 class="anchored" data-anchor-id="using-break">Using break</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count:"</span>, counter))</span>
<span id="cb5-4">  </span>
<span id="cb5-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit the loop if counter reaches 5</span></span>
<span id="cb5-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb5-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Breaking the loop!"</span>)</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb5-9">  }</span>
<span id="cb5-10">  </span>
<span id="cb5-11">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-12">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Count: 1"
[1] "Count: 2"
[1] "Count: 3"
[1] "Count: 4"
[1] "Count: 5"
[1] "Breaking the loop!"</code></pre>
</div>
</div>
</section>
<section id="using-next" class="level2">
<h2 class="anchored" data-anchor-id="using-next">Using next</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb7-3">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-4">  </span>
<span id="cb7-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip printing if counter is 3</span></span>
<span id="cb7-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skipping 3..."</span>)</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">next</span></span>
<span id="cb7-9">  }</span>
<span id="cb7-10">  </span>
<span id="cb7-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count:"</span>, counter))</span>
<span id="cb7-12">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Count: 1"
[1] "Count: 2"
[1] "Skipping 3..."
[1] "Count: 4"
[1] "Count: 5"</code></pre>
</div>
</div>
</section>
</section>
<section id="practical-example-1-sum-of-numbers" class="level1">
<h1>Practical Example 1: Sum of Numbers</h1>
<p>Let’s calculate the sum of numbers from 1 to a given limit:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to calculate sum of numbers up to a limit</span></span>
<span id="cb9-2">calculate_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(limit) {</span>
<span id="cb9-3">  sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb9-4">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-5">  </span>
<span id="cb9-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> limit) {</span>
<span id="cb9-7">    sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sum <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter</span>
<span id="cb9-8">    counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-9">  }</span>
<span id="cb9-10">  </span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(sum)</span>
<span id="cb9-12">}</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate sum from 1 to 10</span></span>
<span id="cb9-15">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum of numbers from 1 to 10:"</span>, result))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sum of numbers from 1 to 10: 55"</code></pre>
</div>
</div>
</section>
<section id="practical-example-2-guessing-game" class="level1">
<h1>Practical Example 2: Guessing Game</h1>
<p>Here’s a fun example of a number guessing game using a while loop:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">play_guessing_game <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb11-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random number between 1 and 100</span></span>
<span id="cb11-3">  secret_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-4">  guess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-5">  attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-6">  </span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm thinking of a number between 1 and 100."</span>)</span>
<span id="cb11-8">  </span>
<span id="cb11-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (guess <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> secret_number) {</span>
<span id="cb11-10">    guess <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readline</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your guess: "</span>))</span>
<span id="cb11-11">    attempts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attempts <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-12">    </span>
<span id="cb11-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (guess <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> secret_number) {</span>
<span id="cb11-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Too low! Try again."</span>)</span>
<span id="cb11-15">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (guess <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> secret_number) {</span>
<span id="cb11-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Too high! Try again."</span>)</span>
<span id="cb11-17">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb11-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Congratulations! You guessed the number in"</span>, attempts, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"attempts."</span>))</span>
<span id="cb11-19">    }</span>
<span id="cb11-20">  }</span>
<span id="cb11-21">}</span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Uncomment to play the game</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># play_guessing_game()</span></span></code></pre></div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s try a simple exercise. Write a while loop that prints the first 10 even numbers.</p>
<details>
<summary>
See Solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-2">number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb12-5">  number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Next even number</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(number)</span>
<span id="cb12-7">  count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> count <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-8">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2
[1] 4
[1] 6
[1] 8
[1] 10
[1] 12
[1] 14
[1] 16
[1] 18
[1] 20</code></pre>
</div>
</div>
</details>
</section>
<section id="practical-example-3-fibonacci-sequence" class="level1">
<h1>Practical Example 3: Fibonacci Sequence</h1>
<p>The Fibonacci sequence is a classic example where we can use while loops. Each number is the sum of the two preceding ones, starting from 0 and 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Fibonacci sequence up to a limit</span></span>
<span id="cb14-2">generate_fibonacci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(limit) {</span>
<span id="cb14-3">  fibonacci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-4">  </span>
<span id="cb14-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (fibonacci[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fibonacci) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fibonacci)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> limit) {</span>
<span id="cb14-6">    next_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fibonacci[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fibonacci) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fibonacci)]</span>
<span id="cb14-7">    fibonacci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(fibonacci, next_number)</span>
<span id="cb14-8">  }</span>
<span id="cb14-9">  </span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(fibonacci)</span>
<span id="cb14-11">}</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Fibonacci numbers up to 100</span></span>
<span id="cb14-14">fib_sequence <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generate_fibonacci</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb14-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(fib_sequence)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  0  1  1  2  3  5  8 13 21 34 55 89</code></pre>
</div>
</div>
</section>
<section id="while-loop-vs.-for-loop" class="level1">
<h1>While Loop vs.&nbsp;For Loop</h1>
<p>R provides different types of loops, and it’s important to know when to use each:</p>
<ul>
<li><strong>While loops</strong>: Use when you don’t know how many iterations you’ll need</li>
<li><strong>For loops</strong>: Use when you know exactly how many iterations you need</li>
</ul>
<p>Here’s the same task using both types:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using a while loop</span></span>
<span id="cb16-2">counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"While loop:"</span>, counter))</span>
<span id="cb16-5">  counter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> counter <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb16-6">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "While loop: 1"
[1] "While loop: 2"
[1] "While loop: 3"
[1] "While loop: 4"
[1] "While loop: 5"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using a for loop</span></span>
<span id="cb18-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"For loop:"</span>, i))</span>
<span id="cb18-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "For loop: 1"
[1] "For loop: 2"
[1] "For loop: 3"
[1] "For loop: 4"
[1] "For loop: 5"</code></pre>
</div>
</div>
</section>
<section id="nested-while-loops" class="level1">
<h1>Nested While Loops</h1>
<p>You can place one while loop inside another to create nested loops:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb20-3">  j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb20-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"×"</span>, j, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span>, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>j))</span>
<span id="cb20-6">    j <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-7">  }</span>
<span id="cb20-8">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"---"</span>)</span>
<span id="cb20-10">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1 × 1 = 1"
[1] "1 × 2 = 2"
[1] "1 × 3 = 3"
[1] "---"
[1] "2 × 1 = 2"
[1] "2 × 2 = 4"
[1] "2 × 3 = 6"
[1] "---"
[1] "3 × 1 = 3"
[1] "3 × 2 = 6"
[1] "3 × 3 = 9"
[1] "---"</code></pre>
</div>
</div>
</section>
<section id="performance-considerations" class="level1">
<h1>Performance Considerations</h1>
<p>While loops are powerful, they’re not always the most efficient choice in R. R is vectorized by design, meaning it performs operations on entire vectors at once, which is typically faster than looping.</p>
<p>Consider this example:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using a while loop</span></span>
<span id="cb22-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span></span>
<span id="cb22-3">sum_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb22-4">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(numbers)) {</span>
<span id="cb22-6">  sum_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sum_result <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numbers[i]</span>
<span id="cb22-7">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-8">}</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using vectorization</span></span>
<span id="cb22-11">vec_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(numbers)</span></code></pre></div>
<p>The vectorized approach (<code>sum(numbers)</code>) will be much faster than the while loop.</p>
</section>
<section id="advanced-example-newton-raphson-method" class="level1">
<h1>Advanced Example: Newton-Raphson Method</h1>
<p>A practical application of while loops is implementing numerical algorithms. Here’s an example using the Newton-Raphson method to find the square root of a number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">newton_sqrt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tolerance =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>) {</span>
<span id="cb23-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial guess</span></span>
<span id="cb23-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb23-4">  </span>
<span id="cb23-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep track of iterations</span></span>
<span id="cb23-6">  iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb23-7">  </span>
<span id="cb23-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> tolerance) {</span>
<span id="cb23-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Newton-Raphson update formula for square root</span></span>
<span id="cb23-10">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>x)</span>
<span id="cb23-11">    iterations <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb23-12">    </span>
<span id="cb23-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Safety measure to prevent infinite loops</span></span>
<span id="cb23-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb23-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum iterations reached!"</span>)</span>
<span id="cb23-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb23-17">    }</span>
<span id="cb23-18">  }</span>
<span id="cb23-19">  </span>
<span id="cb23-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Found solution in"</span>, iterations, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations"</span>))</span>
<span id="cb23-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x)</span>
<span id="cb23-22">}</span>
<span id="cb23-23"></span>
<span id="cb23-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find square root of 16</span></span>
<span id="cb23-25">sqrt_16 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">newton_sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Found solution in 5 iterations"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Square root of 16:"</span>, sqrt_16))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Square root of 16: 4"</code></pre>
</div>
</div>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>While loops in R execute a block of code as long as a specified condition remains TRUE</li>
<li>Remember to update your condition variable to avoid infinite loops</li>
<li>Use <code>break</code> to exit a loop early and <code>next</code> to skip to the next iteration</li>
<li>While loops are best used when the number of iterations is not known in advance</li>
<li>For performance-critical code, consider vectorized operations instead of loops where possible</li>
<li>Include safety mechanisms in your loops to prevent infinite execution</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>While loops are a powerful tool in your R programming toolkit. They enable you to automate repetitive tasks and create dynamic algorithms that respond to changing conditions. By mastering while loops, you’ll significantly enhance your ability to write flexible and responsive R code.</p>
<p>Remember that while loops are just one of several loop constructs in R. As you continue your programming journey, explore for loops, repeat loops, and vectorized operations to find the most efficient solution for each specific task.</p>
<p>Now it’s your turn to practice! Try modifying the examples above or create your own while loops to solve different problems. The more you practice, the more natural these concepts will become.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="q1-how-do-i-avoid-infinite-loops-in-r" class="level2">
<h2 class="anchored" data-anchor-id="q1-how-do-i-avoid-infinite-loops-in-r">Q1: How do I avoid infinite loops in R?</h2>
<p>A1: Always ensure that the condition in your while loop will eventually become FALSE. Include code inside the loop that modifies the variables used in the condition. Additionally, consider adding a maximum iteration count as a safety measure.</p>
</section>
<section id="q2-whats-the-difference-between-while-and-repeat-loops-in-r" class="level2">
<h2 class="anchored" data-anchor-id="q2-whats-the-difference-between-while-and-repeat-loops-in-r">Q2: What’s the difference between while and repeat loops in R?</h2>
<p>A2: While loops check the condition at the beginning of each iteration, so they might not execute at all if the condition is initially FALSE. Repeat loops always execute at least once and check the condition inside the loop with a break statement.</p>
</section>
<section id="q3-when-should-i-use-a-while-loop-instead-of-a-for-loop" class="level2">
<h2 class="anchored" data-anchor-id="q3-when-should-i-use-a-while-loop-instead-of-a-for-loop">Q3: When should I use a while loop instead of a for loop?</h2>
<p>A3: Use while loops when you don’t know beforehand how many iterations you’ll need. For loops are better when you know exactly how many times you want to repeat an action.</p>
</section>
<section id="q4-can-i-have-nested-while-loops-in-r" class="level2">
<h2 class="anchored" data-anchor-id="q4-can-i-have-nested-while-loops-in-r">Q4: Can I have nested while loops in R?</h2>
<p>A4: Yes, you can nest while loops inside other while loops. This is useful for operations that require multiple levels of iteration, like working with matrices or multi-dimensional data.</p>
</section>
<section id="q5-are-there-alternatives-to-while-loops-for-better-performance-in-r" class="level2">
<h2 class="anchored" data-anchor-id="q5-are-there-alternatives-to-while-loops-for-better-performance-in-r">Q5: Are there alternatives to while loops for better performance in R?</h2>
<p>A5: Yes, R’s vectorized operations usually perform better than loops. Functions like <code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, and other members of the *apply family can replace loops in many cases with better performance.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Control-structures">R Documentation: Control Structures</a></li>
<li><a href="https://adv-r.hadley.nz/control-flow.html">Advanced R by Hadley Wickham: Control Flow</a></li>
<li><a href="https://www.r-bloggers.com/2022/01/understanding-while-loops-in-r/">R-bloggers: Understanding While Loops in R</a></li>
<li><a href="https://r4ds.had.co.nz/iteration.html">RStudio Education: R for Data Science - Iteration</a></li>
<li><a href="https://csgillespie.github.io/efficientR/programming.html#vectorisation">Efficient R Programming: Vectorization</a></li>
</ol>
</section>
<section id="share-your-learning" class="level1">
<h1>Share Your Learning!</h1>
<p><em>Did you find this guide helpful? Share it with your fellow fRiends! If you’ve created interesting while loop examples, post them in the comments below. I’d love to see what you’ve learned and how you’re applying while loops in your own projects.</em></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-31/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>While loops with R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-31/</guid>
  <pubDate>Mon, 31 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Linux Shell Loops: While and Until Commands</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-28/</link>
  <description><![CDATA[ 





<p><em>Author’s Note: I’m learning as I write this series on Linux commands and shell scripting. Join me on this journey as we explore these concepts together!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Are you tired of repeating the same commands over and over in your Linux terminal? Do you want your scripts to be more powerful and automated? Then it’s time to master Linux loops! In this comprehensive guide, we’ll explore the <code>while</code> and <code>until</code> loops in Linux shell scripting - powerful tools that can save you time and make your scripts more efficient.</p>
</section>
<section id="what-are-loops-in-shell-scripting" class="level1">
<h1>What Are Loops in Shell Scripting?</h1>
<p>Loops are programming structures that allow you to repeat a set of commands multiple times. Think about everyday activities like slicing a carrot:</p>
<ol type="1">
<li>Lift knife</li>
<li>Advance carrot</li>
<li>Slice carrot</li>
<li>If entire carrot sliced, stop. Otherwise, go back to step 1.</li>
</ol>
<p>This is exactly how loops work in programming! In Linux shell scripting, loops help automate repetitive tasks, process multiple files, or continue operations until certain conditions are met.</p>
</section>
<section id="the-while-loop-keep-going-while-condition-is-true" class="level1">
<h1>The While Loop: Keep Going While Condition is True</h1>
<p>The <code>while</code> loop executes a block of code as long as the specified condition evaluates to true (exit status 0 in shell terms).</p>
<section id="basic-while-loop-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-while-loop-syntax">Basic While Loop Syntax</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[condition]</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commands to execute</span></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
</section>
<section id="simple-while-loop-example" class="level2">
<h2 class="anchored" data-anchor-id="simple-while-loop-example">Simple While Loop Example</h2>
<p>Let’s start with a basic example that counts from 1 to 5:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple counter using while loop</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-le</span> 5 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb2-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loop finished!"</span></span></code></pre></div>
<p>When you run this script, it will output:</p>
<pre><code>Count: 1
Count: 2
Count: 3
Count: 4
Count: 5
Loop finished!</code></pre>
<p>The loop continues as long as the value of <code>count</code> is less than or equal to 5. Once <code>count</code> becomes 6, the condition evaluates to false, and the loop terminates.</p>
</section>
<section id="your-turn" class="level2">
<h2 class="anchored" data-anchor-id="your-turn">Your Turn!</h2>
<p>Try modifying the above script to count from 10 down to 1, and then print “Blast off!” at the end.</p>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Countdown using while loop</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10</span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ge</span> 1 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb4-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb4-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blast off!"</span></span></code></pre></div>
</details>
</section>
</section>
<section id="the-until-loop-keep-going-until-condition-is-true" class="level1">
<h1>The Until Loop: Keep Going Until Condition is True</h1>
<p>The <code>until</code> loop is the opposite of the <code>while</code> loop. It continues executing until the condition becomes true (exit status 0).</p>
<section id="basic-until-loop-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-until-loop-syntax">Basic Until Loop Syntax</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">until</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[condition]</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commands to execute</span></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
</section>
<section id="simple-until-loop-example" class="level2">
<h2 class="anchored" data-anchor-id="simple-until-loop-example">Simple Until Loop Example</h2>
<p>Let’s rewrite our counter using an <code>until</code> loop:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple counter using until loop</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">until</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-gt</span> 5 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb6-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-8">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb6-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb6-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loop finished!"</span></span></code></pre></div>
<p>This produces the same output as our <code>while</code> loop example. The key difference is in the condition logic - the loop continues until <code>count</code> is greater than 5.</p>
</section>
</section>
<section id="when-to-use-while-vs-until" class="level1">
<h1>When to Use While vs Until</h1>
<p>The choice between <code>while</code> and <code>until</code> usually comes down to which one allows you to write the clearest condition:</p>
<ul>
<li>Use <code>while</code> when it’s natural to express “keep going while something is true”</li>
<li>Use <code>until</code> when it’s clearer to say “keep going until something becomes true”</li>
</ul>
<p>Both loops can accomplish the same tasks, so choose the one that makes your code more readable and intuitive.</p>
</section>
<section id="breaking-out-of-loops" class="level1">
<h1>Breaking Out of Loops</h1>
<p>Sometimes you need to exit a loop before its condition naturally becomes false/true. For this, bash provides two important commands:</p>
<section id="the-break-command" class="level2">
<h2 class="anchored" data-anchor-id="the-break-command">The break Command</h2>
<p>The <code>break</code> command immediately terminates the loop and continues execution with the statement following the loop.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstrating break command</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-le</span> 10 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb7-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 5 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb7-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Breaking out of the loop!"</span></span>
<span id="cb7-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb7-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb7-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb7-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loop finished!"</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Count: 1
Count: 2
Count: 3
Count: 4
Count: 5
Breaking out of the loop!
Loop finished!</code></pre>
</section>
<section id="the-continue-command" class="level2">
<h2 class="anchored" data-anchor-id="the-continue-command">The continue Command</h2>
<p>The <code>continue</code> command skips the remaining commands in the current loop iteration and jumps to the next iteration.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Demonstrating continue command</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0</span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> 10 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb9-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb9-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Skip printing even numbers</span></span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((count</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb9-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb9-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Loop finished!"</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Count: 1
Count: 3
Count: 5
Count: 7
Count: 9
Loop finished!</code></pre>
</section>
</section>
<section id="creating-an-infinite-loop" class="level1">
<h1>Creating an Infinite Loop</h1>
<p>Sometimes you want a loop to run indefinitely until explicitly told to stop. This is called an infinite loop:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Infinite loop example</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb11-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb11-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press Ctrl+C to stop this infinite loop"</span></span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep</span> 1</span>
<span id="cb11-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
<p>This loop will continue forever until you press Ctrl+C to terminate it. Infinite loops are commonly used in menu-driven programs or daemons that need to run continuously.</p>
</section>
<section id="practical-example-a-menu-driven-program" class="level1">
<h1>Practical Example: A Menu-Driven Program</h1>
<p>Let’s create a useful menu-driven program that demonstrates the power of loops:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A menu-driven system information program</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb12-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb12-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clear</span></span>
<span id="cb12-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"======================="</span></span>
<span id="cb12-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" System Information Menu"</span></span>
<span id="cb12-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"======================="</span></span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1. Display System Hostname"</span></span>
<span id="cb12-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2. Display Disk Space"</span></span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3. Display Current Users"</span></span>
<span id="cb12-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4. Display Uptime"</span></span>
<span id="cb12-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0. Exit"</span></span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span></span>
<span id="cb12-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your choice [0-4]: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">choice</span></span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb12-19">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb12-20">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span></span>
<span id="cb12-21">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hostname: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hostname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb12-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb12-23">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb12-24">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span></span>
<span id="cb12-25">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb12-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb12-27">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb12-28">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span></span>
<span id="cb12-29">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">who</span></span>
<span id="cb12-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb12-31">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">4</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb12-32">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span></span>
<span id="cb12-33">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uptime</span></span>
<span id="cb12-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb12-35">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb12-36">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exiting program..."</span></span>
<span id="cb12-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb12-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb12-39">        <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb12-40">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid choice!"</span></span>
<span id="cb12-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb12-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span>
<span id="cb12-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span></span>
<span id="cb12-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press Enter to continue..."</span></span>
<span id="cb12-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb12-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Program terminated."</span></span></code></pre></div>
<p>This script creates a menu that repeats until the user selects the exit option (0). It demonstrates: - Using an infinite loop with <code>while true</code> - Breaking out of the loop with the <code>break</code> command - Using a case statement for menu selection</p>
</section>
<section id="reading-files-line-by-line-with-loops" class="level1">
<h1>Reading Files Line by Line with Loops</h1>
<p>A common use of loops is to process files line by line. Here’s how you can do this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reading a file line by line</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">line</span></span>
<span id="cb13-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb13-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Line: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$line</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb13-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> /etc/passwd</span></code></pre></div>
<p>This reads each line from the <code>/etc/passwd</code> file and displays it with “Line:” prepended.</p>
<section id="reading-fields-from-a-file" class="level2">
<h2 class="anchored" data-anchor-id="reading-fields-from-a-file">Reading Fields from a File</h2>
<p>We can also parse fields from each line using the <code>read</code> command:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reading and parsing fields from a file</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample file</span></span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> users.txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt; EOF</span></span>
<span id="cb14-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">john 25 engineer</span></span>
<span id="cb14-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mary 32 doctor</span></span>
<span id="cb14-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">steve 41 teacher</span></span>
<span id="cb14-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">EOF</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read and process the file</span></span>
<span id="cb14-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">username</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">age</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">profession</span></span>
<span id="cb14-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb14-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Username: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$username</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Age: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Profession: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$profession</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb14-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> users.txt</span></code></pre></div>
<p>Output:</p>
<pre><code>Username: john, Age: 25, Profession: engineer
Username: mary, Age: 32, Profession: doctor
Username: steve, Age: 41, Profession: teacher</code></pre>
</section>
<section id="your-turn-1" class="level2">
<h2 class="anchored" data-anchor-id="your-turn-1">Your Turn!</h2>
<p>Create a script that reads the <code>/etc/passwd</code> file and displays only the username (first field) and shell (last field) for each user. The fields in <code>/etc/passwd</code> are separated by colons (:).</p>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display username and shell from /etc/passwd</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">IFS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">username</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">password</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">uid</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gid</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">info</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">home</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shell</span></span>
<span id="cb16-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb16-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Username: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$username</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Shell: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$shell</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb16-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> /etc/passwd</span></code></pre></div>
Note: <code>IFS=:</code> sets the field separator to a colon for the <code>read</code> command.
</details>
</section>
</section>
<section id="processing-command-output-with-loops" class="level1">
<h1>Processing Command Output with Loops</h1>
<p>You can also pipe command output into a loop:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process the output of a command using a loop</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-l</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">permissions</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">links</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">owner</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">group</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">size</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">month</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">day</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">time</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">filename</span></span>
<span id="cb17-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb17-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Size: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$size</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> bytes, Owner: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$owner</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb17-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
<p>This script takes the output of <code>ls -l</code> (which lists files in long format) and extracts specific information from each line.</p>
<blockquote class="blockquote">
<p><strong>Note:</strong> When using pipes with loops, the loop runs in a subshell. Any variables created or modified inside the loop will not retain their values outside the loop.</p>
</blockquote>
</section>
<section id="advanced-example-monitoring-system-resources" class="level1">
<h1>Advanced Example: Monitoring System Resources</h1>
<p>Let’s create a script that monitors system CPU usage at regular intervals:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monitor CPU usage at regular intervals</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CPU Usage Monitor (Press Ctrl+C to stop)"</span></span>
<span id="cb18-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time      CPU Usage"</span></span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-----------------"</span></span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb18-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb18-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get current time and CPU idle percentage</span></span>
<span id="cb18-11">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">current_time</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +%H:%M:%S<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-12">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cpu_idle</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">top</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-bn1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cpu(s)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{print $8}'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d.</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb18-13">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cpu_usage</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cpu_idle))</span></span>
<span id="cb18-14">    </span>
<span id="cb18-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the information</span></span>
<span id="cb18-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">printf</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%s   %3d%%\n"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$current_time</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$cpu_usage</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb18-17">    </span>
<span id="cb18-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait 5 seconds before next check</span></span>
<span id="cb18-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep</span> 5</span>
<span id="cb18-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
<p>This script: 1. Runs in an infinite loop 2. Gets the current time 3. Gets the current CPU usage from the <code>top</code> command 4. Displays the information in a nice format 5. Waits 5 seconds before repeating</p>
</section>
<section id="nested-loops-loops-within-loops" class="level1">
<h1>Nested Loops: Loops Within Loops</h1>
<p>You can put one loop inside another to handle more complex scenarios:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nested loops example: multiplication table</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">..</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb19-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((i</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">j))</span></span>
<span id="cb19-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">printf</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%3d "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$result</span></span>
<span id="cb19-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb19-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print a newline after each row</span></span>
<span id="cb19-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
<p>Output:</p>
<pre><code>  1   2   3   4   5 
  2   4   6   8  10 
  3   6   9  12  15 
  4   8  12  16  20 
  5  10  15  20  25 </code></pre>
</section>
<section id="common-pitfalls-and-best-practices" class="level1">
<h1>Common Pitfalls and Best Practices</h1>
<section id="infinite-loop-protection" class="level2">
<h2 class="anchored" data-anchor-id="infinite-loop-protection">1. Infinite Loop Protection</h2>
<p>Always ensure your loops have a valid exit condition or a <code>break</code> statement. If you’re using an infinite loop with <code>while true</code>, make sure there’s a clear way to exit.</p>
</section>
<section id="variable-scope-in-piped-loops" class="level2">
<h2 class="anchored" data-anchor-id="variable-scope-in-piped-loops">2. Variable Scope in Piped Loops</h2>
<p>Remember that loops in a pipeline run in a subshell:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This won't work as expected</span></span>
<span id="cb21-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">line</span></span>
<span id="cb21-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb21-4">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10</span>
<span id="cb21-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span>
<span id="cb21-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Will be empty, not 10</span></span></code></pre></div>
<p>To fix this, you can use process substitution:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">line</span></span>
<span id="cb22-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb22-3">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">count</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>10</span>
<span id="cb22-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;(</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb22-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$count</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Will be 10</span></span></code></pre></div>
</section>
<section id="proper-exit-conditions" class="level2">
<h2 class="anchored" data-anchor-id="proper-exit-conditions">3. Proper Exit Conditions</h2>
<p>Ensure your loops have proper exit conditions to prevent unexpected behavior:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad example</span></span>
<span id="cb23-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb23-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$i</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> 10 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb23-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$i</span></span>
<span id="cb23-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forgot to increment i, creating an infinite loop</span></span>
<span id="cb23-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
<p>Correct version:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good example</span></span>
<span id="cb24-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb24-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$i</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> 10 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb24-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb24-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$i</span></span>
<span id="cb24-7">    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((i</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb24-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span></span></code></pre></div>
</section>
<section id="handling-empty-files" class="level2">
<h2 class="anchored" data-anchor-id="handling-empty-files">4. Handling Empty Files</h2>
<p>When reading files, handle the case where the file might be empty:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-s</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if file exists and is not empty</span></span>
<span id="cb25-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb25-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">line</span></span>
<span id="cb25-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">do</span></span>
<span id="cb25-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Line: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$line</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb25-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">done</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$filename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb25-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb25-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File is empty or does not exist!"</span></span>
<span id="cb25-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><strong>While loops</strong> continue as long as the condition is true (returns exit status 0)</li>
<li><strong>Until loops</strong> continue until the condition becomes true</li>
<li>Use <strong>break</strong> to exit a loop early</li>
<li>Use <strong>continue</strong> to skip to the next iteration</li>
<li>Loops can read from files using redirection or from command output using pipes</li>
<li>When using pipes with loops, remember that the loop runs in a subshell</li>
<li>Always ensure your loops have proper exit conditions</li>
<li>Choose between <code>while</code> and <code>until</code> based on which makes your code clearer</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q: What’s the difference between <code>while</code> and <code>until</code> loops?</strong><br>
A: <code>while</code> loops continue as long as the condition is true, whereas <code>until</code> loops continue until the condition becomes true. They’re essentially opposites of each other.</p>
<p><strong>Q: Can I nest <code>while</code> and <code>until</code> loops?</strong><br>
A: Yes, you can nest any combination of loops within each other. This allows for complex iterations and data processing.</p>
<p><strong>Q: How do I read a file line by line in a shell script?</strong><br>
A: Use <code>while read line; do ...; done &lt; filename</code> to read a file line by line.</p>
<p><strong>Q: What happens if I forget to increment my counter in a while loop?</strong><br>
A: You’ll create an infinite loop that will run forever unless you manually terminate it with Ctrl+C or until the system kills it.</p>
<p><strong>Q: How can I break out of nested loops?</strong><br>
A: The <code>break</code> command only breaks out of the innermost loop. To break out of multiple nested loops, you can use a flag variable or restructure your code.</p>
<p>I’ll add the References section with clickable URLs as requested:</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://www.futurelearn.com/info/courses/linux-for-bioinformatics/0/steps/203000">Linux for Bioinformatics: While Loop and Until Loop</a></li>
<li><a href="https://www.geeksforgeeks.org/bash-scripting-until-loop/">Bash Scripting: Until Loop - GeeksforGeeks</a></li>
<li><a href="https://www.cyberciti.biz/faq/bash-for-loop/">Bash For Loop - CyberCiti</a></li>
<li><a href="https://www.dcs.warwick.ac.uk/people/academic/M.S.Joy/book/s.7.5.2.php">University of Warwick: Shell Programming - Loops</a></li>
</ul>
<hr>
<p>I hope you’ve found this guide to <code>while</code> and <code>until</code> loops in Linux helpful! These powerful tools can make your scripts more efficient and help automate repetitive tasks. As you practice using loops, you’ll discover even more ways to leverage them in your Linux journey.</p>
<p>Did you find this tutorial helpful? What other Linux topics would you like to learn about next? Feel free to share your thoughts and questions!</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-28/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Do While Until in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-28/</guid>
  <pubDate>Fri, 28 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Setting Up Data Structures in C: A Complete Guide for Beginners</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-26/</link>
  <description><![CDATA[ 





<p><strong>Author’s Note</strong>: I’m learning as I write this series on C programming. If you spot any mistakes or know better ways to implement these data structures, please feel free to comment. Your feedback helps me improve and benefits everyone learning from these articles. Happy coding!</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to the world of data structures in C! If you’ve been learning the C programming language and are now ready to take the next step, you’ve come to the right place. Data structures are essential building blocks that allow you to organize and manage data efficiently in your programs.</p>
<p>In this comprehensive guide, we’ll explore the fundamentals of setting up various data structures in C, with plenty of examples and explanations in simple language. Whether you’re working on small projects or preparing for more complex programming challenges, understanding data structures will significantly improve your coding capabilities.</p>
<p>As a beginner-friendly resource, I’ll avoid unnecessary jargon and focus on clear explanations with practical code examples that you can try yourself. By the end of this article, you’ll have a solid foundation in implementing and using basic data structures in C.</p>
</section>
<section id="what-are-data-structures" class="level1">
<h1>What Are Data Structures?</h1>
<p>Before diving into specific implementations, let’s understand what data structures actually are:</p>
<p><strong>Data structure</strong>: A way of organizing and storing data in a computer’s memory so that it can be accessed and modified efficiently.</p>
<p>Think of data structures like containers for your data - just as you might store different household items in specific containers (books on shelves, clothes in drawers), data structures help you organize information in ways that make it easier to work with.</p>
<p>Why are data structures important? - They help you <strong>organize</strong> data logically - They make data <strong>access</strong> and <strong>manipulation</strong> more efficient - They allow you to <strong>solve complex problems</strong> using appropriate data organization</p>
</section>
<section id="understanding-c-structure-basics" class="level1">
<h1>Understanding C Structure Basics</h1>
<p>The most fundamental building block for creating data structures in C is the <code>struct</code> keyword. A structure in C allows you to combine different data types under a single name.</p>
<section id="defining-a-basic-structure" class="level2">
<h2 class="anchored" data-anchor-id="defining-a-basic-structure">Defining a Basic Structure</h2>
<p>Here’s how to define a simple structure:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>This creates a blueprint for a <code>Student</code> structure that contains: - A name (character array) - An age (integer) - A GPA (floating-point number)</p>
</section>
<section id="creating-structure-variables" class="level2">
<h2 class="anchored" data-anchor-id="creating-structure-variables">Creating Structure Variables</h2>
<p>After defining a structure, you need to create variables of that structure type:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Here, <code>student1</code> is a variable of type <code>struct Student</code>.</p>
</section>
<section id="accessing-structure-members" class="level2">
<h2 class="anchored" data-anchor-id="accessing-structure-members">Accessing Structure Members</h2>
<p>To access or modify structure members, use the dot (<code>.</code>) operator:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assigning values</span></span>
<span id="cb3-2">strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-3">student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-4">student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>gpa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing values</span></span>
<span id="cb3-7">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-8">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-9">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
</section>
<section id="lets-see-a-complete-example" class="level2">
<h2 class="anchored" data-anchor-id="lets-see-a-complete-example">Let’s See a Complete Example</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb4-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create a structure variable</span></span>
<span id="cb4-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13">    </span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign values to members</span></span>
<span id="cb4-15">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-16">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-17">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>gpa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-18">    </span>
<span id="cb4-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the values</span></span>
<span id="cb4-20">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student Information:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-21">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-22">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-23">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-24">    </span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Student Information:
Name: John Doe
Age: 20
GPA: 3.8</code></pre>
</section>
</section>
<section id="arrays-of-structures" class="level1">
<h1>Arrays of Structures</h1>
<p>Often, you’ll need to work with multiple instances of the same structure type. For example, managing a class of students:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Array of 3 student structures</span></span>
<span id="cb6-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-13">    </span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign values for the first student</span></span>
<span id="cb6-15">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-16">    classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-17">    classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>gpa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-18">    </span>
<span id="cb6-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign values for the second student</span></span>
<span id="cb6-20">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emma"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-21">    classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-22">    classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>gpa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-23">    </span>
<span id="cb6-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign values for the third student</span></span>
<span id="cb6-25">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michael"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-26">    classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-27">    classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>gpa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-28">    </span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print all students' information</span></span>
<span id="cb6-30">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Classroom Information:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-32">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Student </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-33">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-34">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-35">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GPA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-37">    </span>
<span id="cb6-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="structure-initialization" class="level1">
<h1>Structure Initialization</h1>
<p>You can initialize a structure at the time of declaration:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student student1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
<p>Or for an array of structures:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student classroom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb8-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emma"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb8-4">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Michael"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
</section>
<section id="nested-structures" class="level1">
<h1>Nested Structures</h1>
<p>Structures can be nested within other structures:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Date birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-16">    </span>
<span id="cb9-17">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Doe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-18">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-19">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>gpa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-20">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>day <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-21">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-22">    student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2003</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-23">    </span>
<span id="cb9-24">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-25">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Birthday: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb9-26">           student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb9-27">           student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb9-28">           student1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>birthday<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-29">    </span>
<span id="cb9-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-31"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="implementing-basic-data-structures-in-c" class="level1">
<h1>Implementing Basic Data Structures in C</h1>
<p>Now that we understand the basics of structures, let’s implement some common data structures.</p>
<section id="arrays" class="level2">
<h2 class="anchored" data-anchor-id="arrays">1. Arrays</h2>
<p>Arrays are the most basic data structure in C. They store elements of the same data type in contiguous memory locations.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Declare and initialize an array</span></span>
<span id="cb10-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-6">    </span>
<span id="cb10-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Access and print array elements</span></span>
<span id="cb10-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Array elements:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-10">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-12">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-13">    </span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modify an array element</span></span>
<span id="cb10-15">    numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-16">    </span>
<span id="cb10-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the modified array</span></span>
<span id="cb10-18">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Modified array:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-20">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-22">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-23">    </span>
<span id="cb10-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Array elements:
10 20 30 40 50
Modified array:
10 20 35 40 50</code></pre>
</section>
<section id="linked-list" class="level2">
<h2 class="anchored" data-anchor-id="linked-list">2. Linked List</h2>
<p>A linked list is a dynamic data structure where each element (node) contains a data element and a reference to the next node.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb12-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define the structure for a node</span></span>
<span id="cb12-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to create a new node</span></span>
<span id="cb12-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> newNode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb12-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newNode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-14">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-15">        exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-17">    newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-18">    newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-21"></span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to print the linked list</span></span>
<span id="cb12-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> printList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-25">    </span>
<span id="cb12-26">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linked List: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-28">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -&gt; "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-29">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-31">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NULL</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-33"></span>
<span id="cb12-34"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create nodes</span></span>
<span id="cb12-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> third <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-39">    </span>
<span id="cb12-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Connect nodes</span></span>
<span id="cb12-41">    head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-42">    second<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> third<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-43">    </span>
<span id="cb12-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the linked list</span></span>
<span id="cb12-45">    printList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-46">    </span>
<span id="cb12-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Insert a new node at the beginning</span></span>
<span id="cb12-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> newHead <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-49">    newHead<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-50">    head <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newHead<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-51">    </span>
<span id="cb12-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the updated linked list</span></span>
<span id="cb12-53">    printList<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-54">    </span>
<span id="cb12-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free allocated memory</span></span>
<span id="cb12-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> head<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-58">    </span>
<span id="cb12-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-60">        next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-61">        free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-62">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-63">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-64">    </span>
<span id="cb12-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Linked List: 10 -&gt; 20 -&gt; 30 -&gt; NULL
Linked List: 5 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; NULL</code></pre>
<section id="understanding-the-linked-list-example" class="level3">
<h3 class="anchored" data-anchor-id="understanding-the-linked-list-example">Understanding the Linked List Example</h3>
<p>Let’s break down what’s happening in the linked list code:</p>
<ol type="1">
<li>We define a <code>Node</code> structure that contains:
<ul>
<li><code>data</code>: an integer value</li>
<li><code>next</code>: a pointer to the next node</li>
</ul></li>
<li><code>createNode()</code> function:
<ul>
<li>Allocates memory for a new node</li>
<li>Sets the node’s data to the provided value</li>
<li>Sets the next pointer to NULL</li>
<li>Returns the new node</li>
</ul></li>
<li><code>printList()</code> function:
<ul>
<li>Takes the head of the list</li>
<li>Traverses the list from beginning to end</li>
<li>Prints each node’s data</li>
</ul></li>
<li>In the <code>main()</code> function:
<ul>
<li>We create three nodes with values 10, 20, and 30</li>
<li>We connect the nodes to form a linked list</li>
<li>We print the initial list</li>
<li>We add a new node with value 5 at the beginning</li>
<li>We print the updated list</li>
<li>Finally, we free the allocated memory</li>
</ul></li>
</ol>
</section>
</section>
<section id="stack" class="level2">
<h2 class="anchored" data-anchor-id="stack">3. Stack</h2>
<p>A stack is a Last-In-First-Out (LIFO) data structure. Think of it like a stack of plates - you can only add or remove items from the top.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb14-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb14-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define MAX_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Structure for stack</span></span>
<span id="cb14-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAX_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize stack</span></span>
<span id="cb14-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> initializeStack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-14">    stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if stack is full</span></span>
<span id="cb14-18"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> isFull<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> MAX_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-21"></span>
<span id="cb14-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if stack is empty</span></span>
<span id="cb14-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-26"></span>
<span id="cb14-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Push an item onto stack</span></span>
<span id="cb14-28"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isFull<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-30">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack Overflow! Cannot push </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-33">    stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[++</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-34">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> pushed to stack</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-36"></span>
<span id="cb14-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pop an item from stack</span></span>
<span id="cb14-38"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-40">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack Underflow! Cannot pop from an empty stack</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--];</span></span>
<span id="cb14-44"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-45"></span>
<span id="cb14-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get the top item without removing it</span></span>
<span id="cb14-47"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> peek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-49">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack is empty</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-53"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-54"></span>
<span id="cb14-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display stack contents</span></span>
<span id="cb14-56"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-58">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack is empty</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-60">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-61">    </span>
<span id="cb14-62">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stack contents: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>top<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-64">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb14-65">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-66">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-67"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-68"></span>
<span id="cb14-69"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Stack stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-71">    initializeStack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-72">    </span>
<span id="cb14-73">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-74">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-75">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-76">    display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-77">    </span>
<span id="cb14-78">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Top element is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> peek<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb14-79">    </span>
<span id="cb14-80">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popped element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb14-81">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Popped element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> pop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb14-82">    </span>
<span id="cb14-83">    display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-84">    </span>
<span id="cb14-85">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-86">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-87">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-88">    </span>
<span id="cb14-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Try to push beyond capacity</span></span>
<span id="cb14-90">    push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-91">    </span>
<span id="cb14-92">    display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>stack<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-93">    </span>
<span id="cb14-94">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-95"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>10 pushed to stack
20 pushed to stack
30 pushed to stack
Stack contents: 10 20 30 
Top element is 30
Popped element: 30
Popped element: 20
Stack contents: 10 
40 pushed to stack
50 pushed to stack
60 pushed to stack
Stack Overflow! Cannot push 70
Stack contents: 10 40 50 60 </code></pre>
</section>
<section id="queue" class="level2">
<h2 class="anchored" data-anchor-id="queue">4. Queue</h2>
<p>A queue is a First-In-First-Out (FIFO) data structure. Think of it like a line of people waiting - the first person to join the line is the first to be served.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb16-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb16-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define MAX_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>MAX_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb16-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> rear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize queue</span></span>
<span id="cb16-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> initializeQueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-14">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-15">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if queue is full</span></span>
<span id="cb16-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> isFull<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> MAX_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-22"></span>
<span id="cb16-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if queue is empty</span></span>
<span id="cb16-24"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-27"></span>
<span id="cb16-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add an element to the queue</span></span>
<span id="cb16-29"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isFull<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-31">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue is full! Cannot enqueue </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-34">    </span>
<span id="cb16-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-36">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-38">    </span>
<span id="cb16-39">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> MAX_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-40">    queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-41">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> enqueued to queue</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-43"></span>
<span id="cb16-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove an element from the queue</span></span>
<span id="cb16-45"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> dequeue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-46">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-47">    </span>
<span id="cb16-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-49">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue is empty! Cannot dequeue</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-51">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-52">    </span>
<span id="cb16-53">    item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb16-54">    </span>
<span id="cb16-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Last element in queue</span></span>
<span id="cb16-57">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-58">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-59">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-60">        queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> MAX_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-61">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-62">    </span>
<span id="cb16-63">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-64"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-65"></span>
<span id="cb16-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display all elements in the queue</span></span>
<span id="cb16-67"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-68">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-69">    </span>
<span id="cb16-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>isEmpty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-71">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue is empty</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-73">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-74">    </span>
<span id="cb16-75">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Queue elements: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-76">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-77">    </span>
<span id="cb16-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>front <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-80">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb16-81">            i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb16-82">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-83">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> MAX_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-85">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb16-86">            i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb16-87">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-88">        i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>rear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-90">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb16-91">            i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb16-92">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-93">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-94">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-95"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-96"></span>
<span id="cb16-97"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-98">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Queue queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-99">    initializeQueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-100">    </span>
<span id="cb16-101">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-102">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-103">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-104">    </span>
<span id="cb16-105">    display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-106">    </span>
<span id="cb16-107">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dequeued: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dequeue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb16-108">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dequeued: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dequeue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb16-109">    </span>
<span id="cb16-110">    display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-111">    </span>
<span id="cb16-112">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-113">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-114">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-115">    </span>
<span id="cb16-116">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Queue should be full now</span></span>
<span id="cb16-117">    enqueue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-118">    </span>
<span id="cb16-119">    display<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>queue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-120">    </span>
<span id="cb16-121">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-122"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>10 enqueued to queue
20 enqueued to queue
30 enqueued to queue
Queue elements: 10 20 30 
Dequeued: 10
Dequeued: 20
Queue elements: 30 
40 enqueued to queue
50 enqueued to queue
60 enqueued to queue
Queue is full! Cannot enqueue 70
Queue elements: 30 40 50 60 </code></pre>
</section>
</section>
<section id="structure-pointers-and-dynamic-memory-allocation" class="level1">
<h1>Structure Pointers and Dynamic Memory Allocation</h1>
<p>Working with pointers to structures is essential for creating dynamic data structures. Here’s how to use pointers with structures:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb18-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb18-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb18-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb18-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Declare a pointer to a Person structure</span></span>
<span id="cb18-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> personPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-13">    </span>
<span id="cb18-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Allocate memory for the structure</span></span>
<span id="cb18-15">    personPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Person<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb18-16">    </span>
<span id="cb18-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>personPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-18">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb18-21">    </span>
<span id="cb18-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Access structure members using -&gt; operator</span></span>
<span id="cb18-23">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>personPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane Doe"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-24">    personPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-25">    </span>
<span id="cb18-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the structure data</span></span>
<span id="cb18-27">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person Information:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-28">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> personPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-29">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> personPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-30">    </span>
<span id="cb18-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free the allocated memory</span></span>
<span id="cb18-32">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>personPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-33">    </span>
<span id="cb18-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="arrow-operator--" class="level1">
<h1>Arrow Operator (-&gt;)</h1>
<p>When working with structure pointers, we use the arrow operator <code>-&gt;</code> to access structure members:</p>
<ul>
<li><code>structure.member</code> is used with structure variables</li>
<li><code>pointer-&gt;member</code> is used with structure pointers (shorthand for <code>(*pointer).member</code>)</li>
</ul>
</section>
<section id="creating-a-simple-database-with-structures" class="level1">
<h1>Creating a Simple Database with Structures</h1>
<p>Now that we understand structures and pointers, let’s create a simple student database program:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb19-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb19-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb19-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb19-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb19-10"></span>
<span id="cb19-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> printStudent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-12">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | GPA: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb19-13">           student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-15"></span>
<span id="cb19-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numStudents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-19">    </span>
<span id="cb19-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get number of students</span></span>
<span id="cb19-21">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many students do you want to enter? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-22">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>numStudents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-23">    getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear the input buffer</span></span>
<span id="cb19-24">    </span>
<span id="cb19-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Allocate memory for the student array</span></span>
<span id="cb19-26">    students <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numStudents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Student<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb19-27">    </span>
<span id="cb19-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>students <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-29">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-32">    </span>
<span id="cb19-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Input student information</span></span>
<span id="cb19-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numStudents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-35">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Enter details for student </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-36">        </span>
<span id="cb19-37">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter ID: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-38">        scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-39">        getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear the input buffer</span></span>
<span id="cb19-40">        </span>
<span id="cb19-41">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-42">        fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-43">        students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>strcspn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove newline</span></span>
<span id="cb19-44">        </span>
<span id="cb19-45">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter GPA: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-46">        scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>gpa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-47">        getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Clear the input buffer</span></span>
<span id="cb19-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-49">    </span>
<span id="cb19-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display all students</span></span>
<span id="cb19-51">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Student Database:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numStudents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-53">        printStudent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb19-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-55">    </span>
<span id="cb19-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Search for a student by ID</span></span>
<span id="cb19-57">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> searchId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-58">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Enter ID to search for a student: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-59">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>searchId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-60">    </span>
<span id="cb19-61">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> numStudents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> searchId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-64">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student found:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-65">            printStudent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb19-66">            found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-67">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-68">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-69">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-70">    </span>
<span id="cb19-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>found<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb19-72">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student with ID </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> searchId<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-73">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-74">    </span>
<span id="cb19-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free allocated memory</span></span>
<span id="cb19-76">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>students<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb19-77">    </span>
<span id="cb19-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb19-79"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="binary-tree-implementation" class="level1">
<h1>Binary Tree Implementation</h1>
<p>Here’s how to implement a simple binary tree in C:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb20-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to create a new node</span></span>
<span id="cb20-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> newNode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newNode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-15">        exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-17">    newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-18">    newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19">    newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> newNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-22"></span>
<span id="cb20-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to insert a new value into the BST</span></span>
<span id="cb20-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If tree is empty, create a new node</span></span>
<span id="cb20-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> createNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-29">    </span>
<span id="cb20-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Otherwise, recur down the tree</span></span>
<span id="cb20-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-32">        root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-34">        root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-35">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-36">    </span>
<span id="cb20-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return unchanged node pointer</span></span>
<span id="cb20-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-39"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-40"></span>
<span id="cb20-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function for inorder traversal</span></span>
<span id="cb20-42"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> inorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-44">        inorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-45">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-46">        inorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-49"></span>
<span id="cb20-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function for preorder traversal</span></span>
<span id="cb20-51"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> preorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-53">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-54">        preorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-55">        preorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-56">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-57"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-58"></span>
<span id="cb20-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function for postorder traversal</span></span>
<span id="cb20-60"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> postorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-62">        postorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-63">        postorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-64">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-65">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-66"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-67"></span>
<span id="cb20-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to free the tree</span></span>
<span id="cb20-69"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> freeTree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-71">        freeTree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-72">        freeTree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-73">        free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-74">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-75"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-76"></span>
<span id="cb20-77"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-78">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> TreeNode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-79">    </span>
<span id="cb20-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Insert values into the BST</span></span>
<span id="cb20-81">    root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-82">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-83">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-84">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-85">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-86">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-87">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-88">    </span>
<span id="cb20-89">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inorder traversal: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-90">    inorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-91">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-92">    </span>
<span id="cb20-93">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Preorder traversal: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-94">    preorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-95">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-96">    </span>
<span id="cb20-97">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Postorder traversal: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-98">    postorderTraversal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-99">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-100">    </span>
<span id="cb20-101">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free the tree</span></span>
<span id="cb20-102">    freeTree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>root<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-103">    </span>
<span id="cb20-104">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-105"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Inorder traversal: 20 30 40 50 60 70 80 
Preorder traversal: 50 30 20 40 70 60 80 
Postorder traversal: 20 40 30 60 80 70 50 </code></pre>
</section>
<section id="understanding-binary-tree-traversal" class="level1">
<h1>Understanding Binary Tree Traversal</h1>
<p>The three traversal methods demonstrate different ways to visit nodes in a tree:</p>
<ol type="1">
<li><strong>Inorder Traversal</strong>: Visit left subtree, then root, then right subtree
<ul>
<li>Result is sorted in ascending order for a binary search tree</li>
</ul></li>
<li><strong>Preorder Traversal</strong>: Visit root, then left subtree, then right subtree
<ul>
<li>Useful for creating a copy of the tree</li>
</ul></li>
<li><strong>Postorder Traversal</strong>: Visit left subtree, then right subtree, then root
<ul>
<li>Useful for deleting a tree (as nodes are deleted from bottom up)</li>
</ul></li>
</ol>
</section>
<section id="hash-table-implementation" class="level1">
<h1>Hash Table Implementation</h1>
<p>A hash table is a data structure that implements an associative array, where data is stored as key-value pairs:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb22-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb22-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb22-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define TABLE_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Structure for key-value pairs</span></span>
<span id="cb22-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-13"></span>
<span id="cb22-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Hash table structure</span></span>
<span id="cb22-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TABLE_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-18"></span>
<span id="cb22-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Hash function</span></span>
<span id="cb22-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> hashValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-22">    </span>
<span id="cb22-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-24">        hashValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-26">    </span>
<span id="cb22-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> hashValue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> TABLE_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-28"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-29"></span>
<span id="cb22-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize hash table</span></span>
<span id="cb22-31"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> initHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TABLE_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-33">        hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-36"></span>
<span id="cb22-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Insert a key-value pair</span></span>
<span id="cb22-38"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-39">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-40">    </span>
<span id="cb22-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create new key-value node</span></span>
<span id="cb22-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> newPair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb22-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newPair <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-44">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-46">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-47">    </span>
<span id="cb22-48">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>newPair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-49">    newPair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-50">    newPair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-51">    </span>
<span id="cb22-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If this index is empty</span></span>
<span id="cb22-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-54">        hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newPair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-55">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Handle collision by adding at the beginning of the list</span></span>
<span id="cb22-57">        newPair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-58">        hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> newPair<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-59">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-60">    </span>
<span id="cb22-61">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inserted </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> with value </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> at index </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-62"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-63"></span>
<span id="cb22-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Look up a key</span></span>
<span id="cb22-65"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> lookup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-66">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-67">    </span>
<span id="cb22-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-69">    </span>
<span id="cb22-70">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-72">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-73">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-74">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-75">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-76">    </span>
<span id="cb22-77">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Key not found</span></span>
<span id="cb22-78">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-79"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-80"></span>
<span id="cb22-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove a key-value pair</span></span>
<span id="cb22-82"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> removeKey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-83">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-84">    </span>
<span id="cb22-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-86">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-87">    </span>
<span id="cb22-88">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If key is at the beginning</span></span>
<span id="cb22-89">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-90">        hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-91">        free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-92">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removed key </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-93">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-94">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-95">    </span>
<span id="cb22-96">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Search for key</span></span>
<span id="cb22-97">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-98">        prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-99">        current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-100">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-101">    </span>
<span id="cb22-102">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If key was not found</span></span>
<span id="cb22-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-104">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Key </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-106">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-107">    </span>
<span id="cb22-108">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove the key</span></span>
<span id="cb22-109">    prev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-110">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-111">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removed key </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-112"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-113"></span>
<span id="cb22-114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the hash table</span></span>
<span id="cb22-115"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> printHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-116">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Hash Table Contents:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-117">    </span>
<span id="cb22-118">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TABLE_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-119">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-120">        </span>
<span id="cb22-121">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-122">        </span>
<span id="cb22-123">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-124">            printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-125">            current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-126">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-127">        </span>
<span id="cb22-128">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NULL</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-129">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-130"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-131"></span>
<span id="cb22-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free the hash table</span></span>
<span id="cb22-133"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> freeHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-134">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TABLE_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-135">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb22-136">        </span>
<span id="cb22-137">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-138">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KeyValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-139">            current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>next<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-140">            free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-141">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-142">        </span>
<span id="cb22-143">        hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-144">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-145"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-146"></span>
<span id="cb22-147"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-148">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> HashTable hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-149">    initHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-150">    </span>
<span id="cb22-151">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-152">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-153">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cherry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-154">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-155">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elderberry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-156">    </span>
<span id="cb22-157">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add a collision (using a simplistic hash function)</span></span>
<span id="cb22-158">    insert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pear"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-159">    </span>
<span id="cb22-160">    printHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-161">    </span>
<span id="cb22-162">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Look up some keys</span></span>
<span id="cb22-163">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Looking up values:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-164">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lookup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb22-165">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lookup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb22-166">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grape: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lookup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grape"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb22-167">    </span>
<span id="cb22-168">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove a key</span></span>
<span id="cb22-169">    removeKey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-170">    </span>
<span id="cb22-171">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Try removing a non-existent key</span></span>
<span id="cb22-172">    removeKey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grape"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-173">    </span>
<span id="cb22-174">    printHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-175">    </span>
<span id="cb22-176">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free the hash table</span></span>
<span id="cb22-177">    freeHashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>hashTable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-178">    </span>
<span id="cb22-179">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-180"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="tips-for-working-with-data-structures-in-c" class="level1">
<h1>Tips for Working with Data Structures in C</h1>
<ol type="1">
<li><p><strong>Memory Management</strong>: Always free dynamically allocated memory to avoid memory leaks.</p></li>
<li><p><strong>Error Checking</strong>: Include error checking for all memory allocations and file operations.</p></li>
<li><p><strong>Pointer Safety</strong>: Be careful with pointers - uninitialized or dangling pointers can cause crashes.</p></li>
<li><p><strong>Abstract Data Types</strong>: Try to create functions that hide the implementation details of your data structures.</p></li>
<li><p><strong>Choose the Right Structure</strong>: Select the appropriate data structure based on your specific requirements:</p>
<ul>
<li>Arrays: Good for fixed-size collections with direct access</li>
<li>Linked Lists: Good for dynamic collections with frequent insertions/deletions</li>
<li>Stacks: Good for LIFO operations</li>
<li>Queues: Good for FIFO operations</li>
<li>Trees: Good for hierarchical data and searching</li>
<li>Hash Tables: Good for key-value lookups</li>
</ul></li>
</ol>
</section>
<section id="common-pitfalls-to-avoid" class="level1">
<h1>Common Pitfalls to Avoid</h1>
<ol type="1">
<li><p><strong>Not checking for NULL after malloc()</strong>: Always check if memory allocation was successful.</p></li>
<li><p><strong>Accessing beyond array bounds</strong>: This can cause undefined behavior.</p></li>
<li><p><strong>Forgetting to free memory</strong>: This leads to memory leaks.</p></li>
<li><p><strong>Dereferencing NULL pointers</strong>: Always check if a pointer is NULL before using it.</p></li>
<li><p><strong>Incorrect pointer arithmetic</strong>: Be careful when manipulating pointers.</p></li>
</ol>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s put your knowledge to the test with a simple exercise:</p>
<p>Create a simple program that defines a structure for a Book with fields for title, author, and year. Then create an array of three Book structures and fill it with data. Finally, print out the information for all three books.</p>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb23-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb23-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb23-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> author<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb23-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an array of 3 Book structures</span></span>
<span id="cb23-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Book library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb23-13">    </span>
<span id="cb23-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Fill the first book</span></span>
<span id="cb23-15">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The C Programming Language"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-16">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>author<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kernighan and Ritchie"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-17">    library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1978</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-18">    </span>
<span id="cb23-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Fill the second book</span></span>
<span id="cb23-20">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Pragmatic Programmer"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-21">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>author<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hunt and Thomas"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-22">    library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-23">    </span>
<span id="cb23-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Fill the third book</span></span>
<span id="cb23-25">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Algorithms"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-26">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>author<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sedgewick and Wayne"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-27">    library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-28">    </span>
<span id="cb23-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print all books</span></span>
<span id="cb23-30">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Library Contents:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-31">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-----------------</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-32">    </span>
<span id="cb23-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-34">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Book </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-35">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-36">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Author: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>author<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-37">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Year: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> library<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-38">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-39">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-40">    </span>
<span id="cb23-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><strong>Structures</strong> are the building blocks for most data structures in C</li>
<li><strong>Arrays</strong> provide simple, fixed-size collections</li>
<li><strong>Linked Lists</strong> offer dynamic memory allocation and easier insertions/deletions</li>
<li><strong>Stacks</strong> enforce Last-In-First-Out (LIFO) behavior</li>
<li><strong>Queues</strong> enforce First-In-First-Out (FIFO) behavior</li>
<li><strong>Trees</strong> enable hierarchical data organization</li>
<li><strong>Hash Tables</strong> provide efficient key-value lookups</li>
<li><strong>Memory management</strong> is critical when working with dynamic data structures</li>
<li><strong>Structure pointers</strong> are essential for dynamic memory allocation</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Congratulations on making it through this comprehensive guide to setting up data structures in C! You now have a solid foundation in understanding and implementing various data structures, from simple structures to more complex ones like linked lists, stacks, queues, trees, and hash tables.</p>
<p>Remember that mastering data structures takes practice. Try modifying the examples provided here or create your own implementations to solidify your understanding. As you become more comfortable with these concepts, you’ll find yourself better equipped to solve complex programming problems efficiently.</p>
<p>Keep coding, keep learning, and don’t be afraid to experiment!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.tutorialspoint.com/cprogramming/c_structures.htm">C Programming - Structures Basics</a></li>
<li><a href="https://www.geeksforgeeks.org/data-structures/">Data Structures and Algorithms in C</a></li>
<li><a href="https://www.learn-c.org/en/Linked_lists">Linked List Implementation in C</a></li>
<li><a href="https://mitpress.mit.edu/books/introduction-algorithms-third-edition">Introduction to Algorithms</a></li>
<li><a href="https://www.programiz.com/dsa/binary-search-tree">C Binary Search Trees</a></li>
<li><a href="https://www.journaldev.com/35238/hash-table-in-c-plus-plus">Hash Table Implementation in C</a></li>
<li><a href="https://www.cs.yale.edu/homes/aspnes/classes/223/notes.html">Advanced Data Structures in C</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-26/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Data Structures in C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-26/</guid>
  <pubDate>Wed, 26 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Use the foreach() Function in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-24/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <code>foreach()</code> function in R is a powerful tool that provides an alternative to traditional loops, offering improved readability and the potential for parallel execution. Whether you’re working with large datasets or simply want to make your code more efficient, mastering <code>foreach()</code> can significantly enhance your R programming skills.</p>
<p>In this comprehensive guide, we’ll explore how to use the <code>foreach()</code> function effectively, with plenty of practical examples explained in simple language. By the end, you’ll have a solid understanding of how to implement <code>foreach()</code> in your R projects.</p>
</section>
<section id="what-is-foreach" class="level1">
<h1>What is foreach()?</h1>
<p>The <code>foreach()</code> function comes from the foreach package in R and is designed to iterate over elements in a collection, either sequentially or in parallel, without requiring an explicit loop counter. Unlike traditional loops, <code>foreach()</code> is intended to be used primarily for its return value rather than for its side effects.</p>
</section>
<section id="getting-started-with-foreach" class="level1">
<h1>Getting Started with foreach()</h1>
<section id="installation-and-loading" class="level2">
<h2 class="anchored" data-anchor-id="installation-and-loading">Installation and Loading</h2>
<p>Before we can use <code>foreach()</code>, we need to install and load the package:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the package (if not already installed)</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foreach"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the package</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span></code></pre></div>
</section>
<section id="basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax">Basic Syntax</h2>
<p>The basic syntax of <code>foreach()</code> is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variable =</span> sequence) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to execute for each value in the sequence</span></span>
<span id="cb2-3">}</span></code></pre></div>
<p>Where: - <code>variable</code> is the name of the variable that will hold each value from the sequence - <code>sequence</code> is the collection of values to iterate over - <code>%do%</code> is an operator that tells <code>foreach()</code> to execute sequentially - The code inside the curly braces is executed for each value in the sequence</p>
</section>
</section>
<section id="simple-foreach-examples" class="level1">
<h1>Simple foreach() Examples</h1>
<section id="example-1-basic-iteration" class="level2">
<h2 class="anchored" data-anchor-id="example-1-basic-iteration">Example 1: Basic Iteration</h2>
<p>Let’s start with a simple example that sums squares of numbers from 1 to 5:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb3-2"></span>
<span id="cb3-3">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb3-4">  i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-5">}</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25</code></pre>
</div>
</div>
<p>Notice that <code>foreach()</code> returns a list where each element is the result of one iteration. This is different from a traditional <code>for</code> loop, which doesn’t automatically collect results.</p>
</section>
<section id="example-2-combining-results" class="level2">
<h2 class="anchored" data-anchor-id="example-2-combining-results">Example 2: Combining Results</h2>
<p>We can use the <code>.combine</code> parameter to specify how to combine the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum the squares of numbers from 1 to 5</span></span>
<span id="cb5-2">total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb5-3">  i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-4">}</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(total)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 55</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 55</code></pre>
</div>
</div>
<p>In this example, the <code>.combine = '+'</code> parameter tells <code>foreach()</code> to add the results together instead of returning them in a list.</p>
</section>
</section>
<section id="advanced-foreach-usage" class="level1">
<h1>Advanced foreach() Usage</h1>
<section id="example-3-multiple-input-sequences" class="level2">
<h2 class="anchored" data-anchor-id="example-3-multiple-input-sequences">Example 3: Multiple Input Sequences</h2>
<p>You can iterate over multiple sequences simultaneously:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb7-2">  a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b</span>
<span id="cb7-3">}</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 4

[[2]]
[1] 10

[[3]]
[1] 18</code></pre>
</div>
</div>
<p>In this example, we multiply corresponding elements from two sequences: 1×4=4, 2×5=10, and 3×6=18.</p>
</section>
<section id="example-4-working-with-dataframes" class="level2">
<h2 class="anchored" data-anchor-id="example-4-working-with-dataframes">Example 4: Working with Dataframes</h2>
<p>Let’s see how to use <code>foreach()</code> with a dataframe:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample dataframe</span></span>
<span id="cb9-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb9-5">)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate a new column based on values</span></span>
<span id="cb9-8">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">val =</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> id, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> val, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">squared =</span> val<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-10">}</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine results into a single dataframe</span></span>
<span id="cb9-13">combined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, results)</span>
<span id="cb9-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(combined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id value squared
1  1    10     100
2  2    20     400
3  3    30     900</code></pre>
</div>
</div>
</section>
</section>
<section id="parallel-execution-with-foreach" class="level1">
<h1>Parallel Execution with foreach()</h1>
<p>One of the most powerful features of <code>foreach()</code> is its ability to execute iterations in parallel, which can significantly speed up your code when working with large datasets.</p>
<section id="example-5-parallel-processing" class="level2">
<h2 class="anchored" data-anchor-id="example-5-parallel-processing">Example 5: Parallel Processing</h2>
<p>To use <code>foreach()</code> with parallel processing, you need to load additional packages and register a parallel backend:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(doParallel)</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Register parallel backend</span></span>
<span id="cb11-4">cores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detectCores</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use one less than available cores</span></span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>(cores)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform parallel computation</span></span>
<span id="cb11-8">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> {</span>
<span id="cb11-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate a computation-heavy task</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sleep for 1 second</span></span>
<span id="cb11-11">  i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb11-12">}</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop the parallel backend</span></span>
<span id="cb11-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopImplicitCluster</span>()</span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
<p>Notice the use of <code>%dopar%</code> instead of <code>%do%</code>. This tells <code>foreach()</code> to execute in parallel rather than sequentially.</p>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try writing a <code>foreach()</code> loop that calculates the factorial of numbers 1 through 5 and combines the results into a vector.</p>
<details>
<summary>
See Solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb13-2"></span>
<span id="cb13-3">factorials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factorial</span>(i)</span>
<span id="cb13-5">}</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(factorials)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 1 2 6 24 120</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]   1   2   6  24 120</code></pre>
</div>
</div>
This code calculates the factorial of each number from 1 to 5 and combines the results into a vector.
</details>
</section>
<section id="handling-dependencies-in-foreach" class="level1">
<h1>Handling Dependencies in foreach()</h1>
<p>When working with parallel processing using <code>foreach()</code>, you often need to load packages or pass variables to the workers.</p>
<section id="example-6-exporting-variables-and-packages" class="level2">
<h2 class="anchored" data-anchor-id="example-6-exporting-variables-and-packages">Example 6: Exporting Variables and Packages</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(doParallel)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Register parallel backend</span></span>
<span id="cb15-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a function and variable in the main environment</span></span>
<span id="cb15-8">my_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)</span>
<span id="cb15-10">}</span>
<span id="cb15-11">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use .export and .packages to make dependencies available</span></span>
<span id="cb15-14">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb15-15">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.export =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_function"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>),</span>
<span id="cb15-16">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.packages =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> {</span>
<span id="cb15-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_function</span>(i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(i, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using mean() from stats package</span></span>
<span id="cb15-18">}</span>
<span id="cb15-19"></span>
<span id="cb15-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopImplicitCluster</span>()</span>
<span id="cb15-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 12.5

[[2]]
[1] 16.5

[[3]]
[1] 22.5

[[4]]
[1] 30.5

[[5]]
[1] 40.5</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>.export = c("my_function", "y")</code> ensures that the function and variable are available to each worker</li>
<li><code>.packages = "stats"</code> ensures that the stats package is loaded in each worker environment</li>
</ul>
</section>
</section>
<section id="error-handling-in-foreach" class="level1">
<h1>Error Handling in foreach()</h1>
<section id="example-7-handling-errors-with-.errorhandling" class="level2">
<h2 class="anchored" data-anchor-id="example-7-handling-errors-with-.errorhandling">Example 7: Handling Errors with .errorhandling</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), </span>
<span id="cb17-2">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>,</span>
<span id="cb17-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.errorhandling =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'remove'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb17-4">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> i  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Will cause division by zero error for i=0</span></span>
<span id="cb17-5">}</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10.0  5.0  Inf  2.5  2.0</code></pre>
</div>
</div>
<p>The <code>.errorhandling = 'remove'</code> parameter tells <code>foreach()</code> to ignore iterations that produce errors and continue with the rest.</p>
</section>
</section>
<section id="converting-a-for-loop-to-foreach" class="level1">
<h1>Converting a for Loop to foreach()</h1>
<p>Many R programmers need to convert existing <code>for</code> loops to <code>foreach()</code> for better performance or parallel execution.</p>
<section id="example-8-converting-a-for-loop" class="level2">
<h2 class="anchored" data-anchor-id="example-8-converting-a-for-loop">Example 8: Converting a for Loop</h2>
<p>Traditional <code>for</code> loop:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Traditional for loop</span></span>
<span id="cb19-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb19-4">  result[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb19-5">}</span>
<span id="cb19-6">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(result)</span>
<span id="cb19-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]   1   8  27  64 125</code></pre>
</div>
</div>
<p>Converted to <code>foreach()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Equivalent foreach loop</span></span>
<span id="cb21-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb21-3">  i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb21-4">}</span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]   1   8  27  64 125</code></pre>
</div>
</div>
<p>Both produce the same output: <code>[1] 1 8 27 64 125</code>, but the <code>foreach()</code> version is more concise and can be easily modified to run in parallel.</p>
</section>
</section>
<section id="performance-comparison" class="level1">
<h1>Performance Comparison</h1>
<section id="example-9-comparing-sequential-and-parallel-foreach" class="level2">
<h2 class="anchored" data-anchor-id="example-9-comparing-sequential-and-parallel-foreach">Example 9: Comparing Sequential and Parallel foreach()</h2>
<p>Let’s create a more intensive task to see the performance benefits of parallel execution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(foreach)</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(doParallel)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For timing</span></span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to calculate prime numbers up to n</span></span>
<span id="cb23-6">is_prime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb23-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb23-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb23-10">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb23-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> n) {</span>
<span id="cb23-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb23-13">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb23-14">  }</span>
<span id="cb23-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-16">}</span>
<span id="cb23-17"></span>
<span id="cb23-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Large numbers to check for primality</span></span>
<span id="cb23-19">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb23-20"></span>
<span id="cb23-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sequential execution</span></span>
<span id="cb23-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sequential"</span>)</span>
<span id="cb23-23">seq_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> numbers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%do%</span> {</span>
<span id="cb23-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_prime</span>(num)</span>
<span id="cb23-25">}</span>
<span id="cb23-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sequential: 0.01 sec elapsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parallel execution</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">registerDoParallel</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use 4 cores</span></span>
<span id="cb25-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parallel"</span>)</span>
<span id="cb25-4">par_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foreach</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">num =</span> numbers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combine =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%dopar%</span> {</span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_prime</span>(num)</span>
<span id="cb25-6">}</span>
<span id="cb25-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parallel: 0.1 sec elapsed</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopImplicitCluster</span>()</span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check results match</span></span>
<span id="cb27-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(seq_result, par_result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>The <code>foreach()</code> function provides an alternative to traditional loops in R, with a focus on return values rather than side effects</li>
<li>Use <code>%do%</code> for sequential execution and <code>%dopar%</code> for parallel execution</li>
<li>The <code>.combine</code> parameter allows you to specify how results should be combined</li>
<li>For parallel processing, register a parallel backend with packages like <code>doParallel</code></li>
<li>Use <code>.export</code> and <code>.packages</code> to manage dependencies in parallel environments</li>
<li>The <code>foreach()</code> syntax is more concise than traditional loops and makes it easier to collect results</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>foreach()</code> function is a versatile and powerful tool in R that can make your code more readable and potentially much faster through parallel execution. It shines when working with large datasets or computation-intensive tasks that can benefit from parallel processing.</p>
<p>I encourage you to experiment with the examples provided in this guide and adapt them to your specific needs. As you become more comfortable with <code>foreach()</code>, you’ll find it increasingly natural to use in your everyday R programming.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: When should I use foreach() instead of a traditional for loop?</strong> A: Use <code>foreach()</code> when you need to collect results from each iteration, when you want to easily switch between sequential and parallel execution, or when you prefer the more functional programming style it offers.</p>
<p><strong>Q2: How many cores should I allocate for parallel processing?</strong> A: A common practice is to use one less than the total number of available cores (using <code>detectCores() - 1</code>). This leaves one core free for other system processes.</p>
<p><strong>Q3: Does foreach() always make my code faster?</strong> A: Not always. For small tasks, the overhead of setting up parallel workers might exceed the performance benefit. Parallel processing works best for computationally intensive tasks that can be divided into independent chunks.</p>
<p><strong>Q4: Can I use foreach() with custom combining functions?</strong> A: Yes, the <code>.combine</code> parameter can take custom functions. For example: <code>.combine = function(x, y) rbind(x, y)</code>.</p>
<p><strong>Q5: How do I debug code inside foreach() loops?</strong> A: Debugging parallel code can be challenging. Start by testing with <code>%do%</code> (sequential) before switching to <code>%dopar%</code> (parallel). You can also use <code>print()</code> statements or the <code>.errorhandling</code> parameter to help diagnose issues.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p><a href="https://beckmw.wordpress.com/tag/foreach/">foreach – R is my friend</a></p>
<p><a href="https://www.rdocumentation.org/packages/foreach/versions/1.5.2/topics/foreach">foreach function - RDocumentation</a></p>
<p><a href="https://cran.r-project.org/web/packages/foreach/vignettes/foreach.html">Using the foreach package</a></p>
<p><a href="https://www.r-bloggers.com/2016/06/the-wonders-of-foreach/">The Wonders of foreach | R-bloggers</a></p>
<p><a href="https://cran.r-project.org/web/packages/foreach/index.html">R-project foreach package</a></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-24/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>foreach() in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-24/</guid>
  <pubDate>Mon, 24 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Reading Keyboard Input in Linux: A Beginner’s Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-21/</link>
  <description><![CDATA[ 





<p><strong>Author’s Note:</strong> <em>I’m learning Linux programming as I write this series, so there might be some mistakes or oversimplifications. If you spot any errors, please let me know in the comments! We’re learning together, and I appreciate your feedback.</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When you’re just starting to write programs in Linux, one of the most important skills to learn is how to make your programs interactive. By “interactive,” I mean programs that can accept input from users as they run. This is a big step up from programs that just do the same thing every time!</p>
<p>Let’s imagine you have a program that checks whether a number is positive or negative. Without interactivity, you’d need to edit the program’s code every time you want to check a different number. That’s not very convenient. Instead, wouldn’t it be better if the program could ask you for a number each time it runs?</p>
<p>That’s exactly what we’re going to learn in this article: how to read keyboard input in Linux so your programs can interact with users.</p>
</section>
<section id="basic-keyboard-input-in-linux-shell-scripts" class="level1">
<h1>Basic Keyboard Input in Linux Shell Scripts</h1>
<section id="the-read-command" class="level2">
<h2 class="anchored" data-anchor-id="the-read-command">The <code>read</code> Command</h2>
<p>The simplest way to get keyboard input in Linux is with the <code>read</code> command in shell scripts. This built-in command reads a single line of text that the user types.</p>
<p>Here’s a basic example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter your name: "</span></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">name</span></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">! Nice to meet you!"</span></span></code></pre></div>
<p>Let’s break down what’s happening:</p>
<ol type="1">
<li>We use <code>echo -n</code> to print a message asking for input (the <code>-n</code> means don’t add a new line)</li>
<li>The <code>read name</code> command waits for the user to type something and press Enter</li>
<li>Whatever the user typed gets stored in the variable called <code>name</code></li>
<li>We then use that variable to greet the user</li>
</ol>
<p>When you run this script, it will pause after showing the prompt, waiting for you to type something. After you press Enter, it continues running with your input stored in the variable.</p>
</section>
<section id="reading-multiple-values" class="level2">
<h2 class="anchored" data-anchor-id="reading-multiple-values">Reading Multiple Values</h2>
<p>The <code>read</code> command can store input in multiple variables at once. For example:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your first name and last name: "</span></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">first_name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">last_name</span></span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your first name is </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$first_name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your last name is </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$last_name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>When you run this and type “John Smith”, the word “John” gets stored in <code>first_name</code> and “Smith” gets stored in <code>last_name</code>. If you type more words, all the extra words get added to the last variable. If you type fewer words, some variables will remain empty.</p>
</section>
<section id="using-reply-for-quick-input" class="level2">
<h2 class="anchored" data-anchor-id="using-reply-for-quick-input">Using <code>REPLY</code> for Quick Input</h2>
<p>If you don’t specify any variable names with the <code>read</code> command, Linux puts the input in a special variable called <code>REPLY</code>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How are you feeling today? "</span></span>
<span id="cb3-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You said that you're feeling: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$REPLY</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>This is useful for quick scripts where you don’t need to create a new variable name.</p>
</section>
</section>
<section id="useful-options-for-the-read-command" class="level1">
<h1>Useful Options for the <code>read</code> Command</h1>
<p>The <code>read</code> command has several helpful options that make it more powerful:</p>
<section id="table-common-read-command-options" class="level2">
<h2 class="anchored" data-anchor-id="table-common-read-command-options">Table: Common <code>read</code> Command Options</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 26%">
<col style="width: 43%">
<col style="width: 30%">
</colgroup>
<thead>
<tr class="header">
<th>Option</th>
<th>Description</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>-p "prompt"</code></td>
<td>Display a prompt before reading input</td>
<td><code>read -p "Enter your name: " name</code></td>
</tr>
<tr class="even">
<td><code>-s</code></td>
<td>Silent mode (doesn’t echo characters - useful for passwords)</td>
<td><code>read -sp "Password: " pass</code></td>
</tr>
<tr class="odd">
<td><code>-n NUM</code></td>
<td>Read only NUM characters</td>
<td><code>read -n 1 -p "Continue? (y/n) " answer</code></td>
</tr>
<tr class="even">
<td><code>-t SECONDS</code></td>
<td>Timeout after specified seconds</td>
<td><code>read -t 5 -p "Quick! " response</code></td>
</tr>
<tr class="odd">
<td><code>-a ARRAY</code></td>
<td>Store input into an array</td>
<td><code>read -a colors -p "Enter colors: "</code></td>
</tr>
<tr class="even">
<td><code>-r</code></td>
<td>Raw mode (doesn’t treat backslashes specially)</td>
<td><code>read -r text</code></td>
</tr>
<tr class="odd">
<td><code>-e</code></td>
<td>Use readline for input editing (command history, etc.)</td>
<td><code>read -e -p "Edit this: " input</code></td>
</tr>
</tbody>
</table>
</section>
<section id="showing-a-prompt-with--p" class="level2">
<h2 class="anchored" data-anchor-id="showing-a-prompt-with--p">Showing a Prompt with -p</h2>
<p>Instead of using a separate <code>echo</code> command, you can include a prompt directly:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What is your favorite color? "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">color</span></span>
<span id="cb4-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ah, </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$color</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a nice color!"</span></span></code></pre></div>
</section>
<section id="reading-passwords-with--s" class="level2">
<h2 class="anchored" data-anchor-id="reading-passwords-with--s">Reading Passwords with -s</h2>
<p>When someone is typing sensitive information like a password, you don’t want it showing on the screen:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sp</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your password: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">password</span></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This adds a blank line after input</span></span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your password is </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">password}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> characters long"</span></span></code></pre></div>
<p>The <code>-s</code> option makes the input “silent” – the characters don’t appear on screen as the user types.</p>
</section>
<section id="setting-a-timeout-with--t" class="level2">
<h2 class="anchored" data-anchor-id="setting-a-timeout-with--t">Setting a Timeout with -t</h2>
<p>Sometimes you want to give users a limited time to respond:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> 5 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quick! Enter your name in 5 seconds: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb6-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span></span>
<span id="cb6-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb6-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Too slow!"</span></span>
<span id="cb6-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>If the user doesn’t respond within 5 seconds, the script will continue and run the “else” part.</p>
</section>
<section id="reading-a-specific-number-of-characters-with--n" class="level2">
<h2 class="anchored" data-anchor-id="reading-a-specific-number-of-characters-with--n">Reading a Specific Number of Characters with -n</h2>
<p>You can limit input to a certain number of characters:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-n</span> 1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you want to continue? (y/n) "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">answer</span></span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This adds a blank line after input</span></span>
<span id="cb7-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$answer</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$answer</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb7-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Continuing..."</span></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb7-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stopping."</span></span>
<span id="cb7-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>This script reads just one character (no need to press Enter) and then continues.</p>
</section>
</section>
<section id="validating-user-input" class="level1">
<h1>Validating User Input</h1>
<p>An important part of reading input is making sure it’s valid. Users might type anything – letters when you expect numbers, empty input, or too many values. Good programs check the input before using it.</p>
<section id="checking-for-empty-input" class="level2">
<h2 class="anchored" data-anchor-id="checking-for-empty-input">Checking for Empty Input</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your username: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">username</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$username</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb8-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Username cannot be empty."</span></span>
<span id="cb8-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb8-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Username set to: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$username</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>The <code>-z</code> test checks if a string is empty.</p>
</section>
<section id="making-sure-input-is-a-number" class="level2">
<h2 class="anchored" data-anchor-id="making-sure-input-is-a-number">Making Sure Input Is a Number</h2>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">age</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Age must be a number."</span></span>
<span id="cb9-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your age is </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$age</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>The <code>=~</code> operator checks if the input matches a pattern. Here, <code>^[0-9]+$</code> is a pattern that matches only numbers.</p>
</section>
</section>
<section id="understanding-ifs-internal-field-separator" class="level1">
<h1>Understanding IFS (Internal Field Separator)</h1>
<p>The IFS (Internal Field Separator) controls how the shell splits input into separate words. By default, IFS contains a space, a tab, and a newline, which means input gets split at these characters.</p>
<p>You can change IFS to split input differently. For example, to read colon-separated data like in the <code>/etc/passwd</code> file:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reading user information..."</span></span>
<span id="cb10-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">user_info</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"john:x:1000:1000:John Smith:/home/john:/bin/bash"</span></span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save original IFS and set new one</span></span>
<span id="cb10-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">OLD_IFS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$IFS</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-7"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">IFS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":"</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the colon-separated data</span></span>
<span id="cb10-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">username</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">password</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">uid</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">gid</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">full_name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">home_dir</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">shell</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$user_info</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Restore original IFS</span></span>
<span id="cb10-13"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">IFS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$OLD_IFS</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Username: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$username</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"User ID: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$uid</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Full Name: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$full_name</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Home Directory: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$home_dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb10-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shell: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$shell</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>This changes IFS temporarily to split the input at colons instead of spaces. The <code>&lt;&lt;&lt;</code> is a “here string” operator that feeds the string to the read command’s input.</p>
</section>
<section id="creating-simple-menus" class="level1">
<h1>Creating Simple Menus</h1>
<p>A very common way to make programs user-friendly is with menus. Here’s a simple example:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clear</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear the screen</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please select an option:"</span></span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1. Show current time"</span></span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2. Show today's date"</span></span>
<span id="cb11-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3. Show calendar"</span></span>
<span id="cb11-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0. Exit"</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your choice [0-3]: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">choice</span></span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$choice</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb11-13">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb11-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Goodbye!"</span></span>
<span id="cb11-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb11-16">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb11-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current time:"</span></span>
<span id="cb11-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +%T</span>
<span id="cb11-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb11-20">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb11-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today's date:"</span></span>
<span id="cb11-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +%D</span>
<span id="cb11-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb11-24">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">3</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb11-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Calendar:"</span></span>
<span id="cb11-26">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cal</span></span>
<span id="cb11-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb11-28">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb11-29">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid option. Please try again."</span></span>
<span id="cb11-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb11-31"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span></code></pre></div>
<p>This script: 1. Shows a menu of options 2. Asks the user to choose one 3. Uses a <code>case</code> statement to run different commands based on the choice</p>
</section>
<section id="reading-input-in-c-programs" class="level1">
<h1>Reading Input in C Programs</h1>
<p>If you’re writing programs in C rather than shell scripts, you have several ways to read keyboard input.</p>
<section id="table-c-input-functions" class="level2">
<h2 class="anchored" data-anchor-id="table-c-input-functions">Table: C Input Functions</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 27%">
<col style="width: 35%">
<col style="width: 37%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Description</th>
<th>Best Used For</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>scanf()</code></td>
<td>Reads formatted input</td>
<td>Reading specific data types</td>
</tr>
<tr class="even">
<td><code>fgets()</code></td>
<td>Reads a line of text</td>
<td>Reading entire lines including spaces</td>
</tr>
<tr class="odd">
<td><code>getchar()</code></td>
<td>Reads a single character</td>
<td>Character-by-character input</td>
</tr>
<tr class="even">
<td><code>gets()</code></td>
<td>Reads a line (unsafe - avoid using)</td>
<td>Never - it can cause buffer overflows</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-input-with-scanf" class="level2">
<h2 class="anchored" data-anchor-id="basic-input-with-scanf">Basic Input with <code>scanf()</code></h2>
<p>The simplest method is using the <code>scanf()</code> function:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb12-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6">    </span>
<span id="cb12-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-8">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-9">    </span>
<span id="cb12-10">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-11">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-12">    </span>
<span id="cb12-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">! You are </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> years old.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This program asks for a name and age, then displays them. Note that <code>scanf()</code> has some limitations – it stops reading at the first space character, so it can’t handle full names with spaces.</p>
</section>
<section id="reading-whole-lines-with-fgets" class="level2">
<h2 class="anchored" data-anchor-id="reading-whole-lines-with-fgets">Reading Whole Lines with <code>fgets()</code></h2>
<p>For reading complete lines including spaces, use <code>fgets()</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb13-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb13-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> full_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-6">    </span>
<span id="cb13-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your full name: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-8">    fgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>full_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>full_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> stdin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-9">    </span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Remove the newline character that fgets keeps</span></span>
<span id="cb13-11">    full_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>strcspn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>full_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-12">    </span>
<span id="cb13-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> full_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-14">    </span>
<span id="cb13-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="getting-single-characters-with-getchar" class="level2">
<h2 class="anchored" data-anchor-id="getting-single-characters-with-getchar">Getting Single Characters with <code>getchar()</code></h2>
<p>To read a single character at a time:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb14-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-4">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press any key (q to quit): "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-5">    </span>
<span id="cb14-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> getchar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'q'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-8">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You pressed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-9">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Press any key (q to quit): "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-11">    </span>
<span id="cb14-12">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Goodbye!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice what we’ve learned by creating a simple calculator program that reads two numbers and an operation:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simple Calculator"</span></span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"----------------"</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter first number: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num1</span></span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter second number: "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num2</span></span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter operation (+, -, *, /): "</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">op</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate that inputs are numbers</span></span>
<span id="cb15-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$num1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$num2</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb15-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Please enter valid numbers."</span></span>
<span id="cb15-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb15-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform calculation based on operation</span></span>
<span id="cb15-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$op</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span></span>
<span id="cb15-18">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">+</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb15-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((num1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num2))</span></span>
<span id="cb15-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb15-21">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb15-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((num1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num2))</span></span>
<span id="cb15-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb15-24">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb15-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((num1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num2))</span></span>
<span id="cb15-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb15-27">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb15-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$num2</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb15-29">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Cannot divide by zero."</span></span>
<span id="cb15-30">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb15-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb15-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((num1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">num2))</span></span>
<span id="cb15-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb15-34">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb15-35">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Invalid operation. Use +, -, *, or /."</span></span>
<span id="cb15-36">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb15-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;;</span></span>
<span id="cb15-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">esac</span></span>
<span id="cb15-39"></span>
<span id="cb15-40"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$num1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$op</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$num2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> = </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$result</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<details>
<summary>
See Solution
</summary>
<p>To use this calculator:</p>
<ol type="1">
<li>Save the code to a file named <code>calculator.sh</code></li>
<li>Make it executable: <code>chmod +x calculator.sh</code></li>
<li>Run it: <code>./calculator.sh</code></li>
<li>Enter two numbers and an operation when prompted</li>
</ol>
The program validates that both inputs are numbers and handles division by zero as a special case. It uses the shell’s built-in arithmetic for calculations.
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>The <code>read</code> command is the main way to get keyboard input in shell scripts</li>
<li>You can read multiple values at once with a single <code>read</code> command</li>
<li>The <code>-p</code> option lets you show a prompt</li>
<li>The <code>-s</code> option hides input (great for passwords)</li>
<li>Always validate user input to make sure it’s what your program expects</li>
<li>Menus are a user-friendly way to offer multiple options</li>
<li>C programs can read input using functions like <code>scanf()</code>, <code>fgets()</code>, and <code>getchar()</code></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Reading keyboard input is an essential skill for creating interactive Linux programs. Whether you’re writing shell scripts or C programs, you now know the basic tools for getting user input and making your programs more flexible and user-friendly.</p>
<p>As you continue learning Linux programming, practice these techniques by adding interactive features to your programs. Start by converting some of your existing scripts to ask for input instead of having values hardcoded. Before long, you’ll be creating fully interactive applications that can respond to whatever the user needs!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://www.gnu.org/software/bash/manual/bashref.html#Bash-Builtins">GNU Bash Reference Manual - Bash Builtins</a></li>
<li><a href="http://linuxcommand.org/tlcl.php">The Linux Command Line by William Shotts</a></li>
<li><a href="https://www.kernel.org/doc/html/latest/input/input.html">Linux Input Subsystem Documentation</a></li>
<li><a href="https://www.gnu.org/software/libc/manual/html_node/I_002fO-on-Streams.html">GNU C Library Manual - I/O on Streams</a></li>
<li><a href="https://tldp.org/LDP/abs/html/intandnonint.html">Advanced Bash-Scripting Guide - Interactive Scripts</a></li>
<li><a href="https://man7.org/tlpi/">The Linux Programming Interface</a></li>
<li><a href="https://unix.stackexchange.com/questions/tagged/read+bash">Unix &amp; Linux Stack Exchange - read + bash</a></li>
<li><a href="https://www.cprogramming.com/tutorial/cfileio.html">C Programming - File I/O Tutorial</a></li>
</ul>
</section>
<section id="faq" class="level1">
<h1>FAQ</h1>
<section id="whats-the-difference-between-read-and-echo" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-read-and-echo">What’s the difference between <code>read</code> and <code>echo</code>?</h2>
<p><code>echo</code> sends output to the screen, while <code>read</code> gets input from the keyboard. They’re often used together – <code>echo</code> to ask a question, then <code>read</code> to get the answer.</p>
</section>
<section id="can-i-limit-what-characters-a-user-can-type" class="level2">
<h2 class="anchored" data-anchor-id="can-i-limit-what-characters-a-user-can-type">Can I limit what characters a user can type?</h2>
<p>The <code>read</code> command itself doesn’t restrict input, but you can validate what was typed after the fact using patterns and conditionals.</p>
</section>
<section id="how-do-i-handle-passwords-securely" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-handle-passwords-securely">How do I handle passwords securely?</h2>
<p>Use <code>read -s</code> to hide the input as it’s typed. For real security, avoid storing passwords in plain text variables.</p>
</section>
<section id="what-happens-if-a-user-enters-too-much-text" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-if-a-user-enters-too-much-text">What happens if a user enters too much text?</h2>
<p>With <code>read</code>, extra text gets stored (potentially truncated depending on your system’s limits). With C’s <code>scanf()</code> or <code>fgets()</code>, you need to specify buffer sizes to prevent overflow.</p>
</section>
<section id="can-i-read-input-from-files-instead-of-the-keyboard" class="level2">
<h2 class="anchored" data-anchor-id="can-i-read-input-from-files-instead-of-the-keyboard">Can I read input from files instead of the keyboard?</h2>
<p>Yes! The same commands can read from files using redirection. For example: <code>read line &lt; myfile.txt</code> reads the first line from the file.</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-21/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Keyboard Input with Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-21/</guid>
  <pubDate>Fri, 21 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Maximizing Your Computer’s Memory in C: A Beginner’s Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-19/</link>
  <description><![CDATA[ 





<section id="authors-note" class="level1">
<h1>Author’s Note</h1>
<p><em>I’m learning C as I write this series, so there might be mistakes in my explanations. If you notice any errors, please comment below! I appreciate your help as we learn together.</em></p>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When you start programming in C, you quickly learn about variables, arrays, and data structures. But what happens when your program needs more memory than you initially allocated? What if you don’t know in advance how much memory your program will need?</p>
<p>This is where <strong>memory management in C</strong> becomes crucial.</p>
<p>In this beginner-friendly guide, we’ll explore how to <strong>maximize your computer’s memory in C</strong> through dynamic memory allocation. We’ll cover the heap, understand why you need it, and learn how to allocate and free memory efficiently.</p>
<p>By the end of this tutorial, you’ll understand how to make your C programs more flexible and efficient by using memory only when you need it.</p>
</section>
<section id="what-is-the-heap-in-c" class="level1">
<h1>What is the Heap in C?</h1>
<p>Before diving into memory management techniques, let’s understand what the heap actually is.</p>
<p>The heap is essentially a collection of unused memory in your computer. After your program, variables, and operating system take their share of memory, the remaining available space is known as the “heap.”</p>
<p>Here’s a simple visualization of computer memory:</p>
<pre><code>┌─────────────────────────┐
│   Operating System      │
├─────────────────────────┤
│   Your C Program        │
├─────────────────────────┤
│   Your Variables        │
├─────────────────────────┤
│   Heap (Free Memory)    │
└─────────────────────────┘</code></pre>
<p>The heap provides additional memory that your program can use dynamically during execution. Unlike variables and arrays that you define at compile-time, heap memory can be allocated and deallocated as needed while your program runs.</p>
</section>
<section id="a-mental-model-for-understanding-the-heap" class="level1">
<h1>A Mental Model for Understanding the Heap</h1>
<p>Think of the heap as a large pile of dirt. When you need some dirt (memory), you take a shovelful from somewhere in the pile. When you’re done with that dirt, you throw it back onto the pile.</p>
<p>Important concepts to understand:</p>
<ol type="1">
<li>When you request memory from the heap, you don’t know exactly where in the heap it will come from</li>
<li>If you request memory twice, the second allocation might not be physically adjacent to the first</li>
<li>When you free memory, it goes back to the heap but not necessarily to its original location</li>
</ol>
<p>This mental model helps you avoid common misconceptions about heap memory.</p>
</section>
<section id="why-do-you-need-the-heap" class="level1">
<h1>Why Do You Need the Heap?</h1>
<p>You might wonder why we can’t just use regular variables and arrays for everything. Here’s why heap memory is essential:</p>
<section id="dynamic-sizing" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-sizing">1. Dynamic Sizing</h2>
<p>With regular arrays, you must know their size at compile time:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> temperatures<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Must decide the size when writing code</span></span></code></pre></div>
<p>What if you need to store 101 temperatures? You’d have to modify your code and recompile.</p>
<p>With heap memory, you can determine the size at runtime:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numReadings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Size determined while program runs</span></span></code></pre></div>
</section>
<section id="memory-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="memory-efficiency">2. Memory Efficiency</h2>
<p>Regular arrays exist for your entire program’s execution, even if you only need them briefly. Heap memory can be allocated when needed and freed when no longer required, making your program more efficient.</p>
</section>
<section id="flexibility-for-real-world-applications" class="level2">
<h2 class="anchored" data-anchor-id="flexibility-for-real-world-applications">3. Flexibility for Real-World Applications</h2>
<p>Commercial programs like spreadsheets and word processors rely heavily on heap memory because they can’t predict how much data users will input. The heap allows these applications to grow and shrink their memory usage based on actual needs.</p>
</section>
</section>
<section id="how-to-allocate-memory-from-the-heap" class="level1">
<h1>How to Allocate Memory from the Heap</h1>
<p>To use heap memory in C, you’ll need to understand two primary functions: <code>malloc()</code> and <code>free()</code>.</p>
<section id="the-malloc-function" class="level2">
<h2 class="anchored" data-anchor-id="the-malloc-function">The <code>malloc()</code> Function</h2>
<p><code>malloc()</code> (memory allocate) requests a block of memory from the heap. Here’s the basic syntax:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">  </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Required for malloc() and free()</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>size_in_bytes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div>
<p>Let’s break down this syntax:</p>
<ol type="1">
<li><code>size_in_bytes</code> is how many bytes you want to allocate</li>
<li><code>malloc()</code> returns a pointer to the allocated memory</li>
<li><code>(int *)</code> is a typecast that converts the generic pointer returned by <code>malloc()</code> to an integer pointer</li>
</ol>
<p>Here’s a practical example. If you want to allocate space for 10 integers:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span></code></pre></div>
<p>This line:</p>
<ol type="1">
<li>Calculates how many bytes 10 integers require using <code>sizeof(int)</code></li>
<li>Allocates that much contiguous memory</li>
<li>Returns a pointer to the first integer in that block</li>
<li>Assigns that pointer to <code>temperatures</code></li>
</ol>
<p>After allocation, you can use <code>temperatures</code> like an array:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1">temperatures<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Store first temperature</span></span>
<span id="cb6-2">temperatures<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Store second temperature</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// and so on...</span></span></code></pre></div>
</section>
<section id="checking-if-allocation-succeeded" class="level2">
<h2 class="anchored" data-anchor-id="checking-if-allocation-succeeded">Checking if Allocation Succeeded</h2>
<p><code>malloc()</code> returns a special value <code>NULL</code> (which is 0) if it fails to allocate memory. Always check if your allocation succeeded:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temperatures <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-3">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-4">    exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Exit the program with an error code</span></span>
<span id="cb7-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Many programmers use a shorter version:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>temperatures<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Same as: if (temperatures == NULL)</span></span>
<span id="cb8-2">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-3">    exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try writing code that allocates memory for a dynamic array of floating-point numbers. The size should be determined by user input:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb9-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-7">    </span>
<span id="cb9-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many floating-point numbers do you need to store? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-9">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb9-10">    </span>
<span id="cb9-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Your code here to allocate the memory</span></span>
<span id="cb9-12">    </span>
<span id="cb9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb10-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-7">    </span>
<span id="cb10-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many floating-point numbers do you need to store? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-9">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-10">    </span>
<span id="cb10-11">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb10-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-13">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-14">        exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-16">    </span>
<span id="cb10-17">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory successfully allocated for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> float values.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-18">    </span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Don't forget to free the memory when done</span></span>
<span id="cb10-20">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-21">    </span>
<span id="cb10-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</section>
<section id="freeing-heap-memory-with-free" class="level1">
<h1>Freeing Heap Memory with <code>free()</code></h1>
<p>When you’re done with heap memory, it’s crucial to release it back to the system using <code>free()</code>:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb11-1">free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temperatures<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns memory to the heap</span></span></code></pre></div>
<p>This simple function: 1. Releases all the memory that was allocated to <code>temperatures</code> 2. Makes that memory available for future allocations</p>
<section id="why-freeing-memory-matters" class="level2">
<h2 class="anchored" data-anchor-id="why-freeing-memory-matters">Why Freeing Memory Matters</h2>
<p>Failing to free memory causes “memory leaks.” While the operating system reclaims all memory when your program ends, during execution, memory leaks can:</p>
<ol type="1">
<li>Exhaust available memory</li>
<li>Slow down your program and system</li>
<li>Cause crashes in long-running applications</li>
</ol>
<p>Think of it like borrowing books from a library. If you keep borrowing books without returning them, eventually the library runs out of books!</p>
</section>
<section id="important-rules-for-using-free" class="level2">
<h2 class="anchored" data-anchor-id="important-rules-for-using-free">Important Rules for Using <code>free()</code></h2>
<ol type="1">
<li>Only free memory that was allocated with <code>malloc()</code> (or similar functions)</li>
<li>Never use memory after freeing it</li>
<li>Never free the same memory twice</li>
</ol>
<p>Breaking these rules can cause program crashes or unpredictable behavior.</p>
</section>
</section>
<section id="working-with-multiple-allocations" class="level1">
<h1>Working with Multiple Allocations</h1>
<p>In real programs, you often need multiple separate blocks of heap memory. A useful pattern is to use an array of pointers:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>cityTemps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Array of 50 pointers</span></span></code></pre></div>
<p>Each element of this array can point to a different block of heap memory:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-2">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many readings for city </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-3">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>numReadings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-4">    </span>
<span id="cb13-5">    cityTemps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numReadings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>cityTemps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-7">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-8">        exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-10">    </span>
<span id="cb13-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Code to input temperatures for this city</span></span>
<span id="cb13-12"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>When you’re done with the data, don’t forget to free each allocation:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-2">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>cityTemps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="a-complete-example-random-number-statistics" class="level1">
<h1>A Complete Example: Random Number Statistics</h1>
<p>Let’s put everything together with a complete example. This program:</p>
<ol type="1">
<li>Asks the user how many random numbers to generate</li>
<li>Dynamically allocates an array of that size</li>
<li>Fills it with random numbers between 1 and 500</li>
<li>Calculates the smallest, largest, and average values 5. Frees the memory</li>
</ol>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb15-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb15-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb15-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;time.h&gt;</span></span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arraySize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">time_t</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">double</span> total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> largest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smallest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-12">    </span>
<span id="cb15-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Seed the random number generator</span></span>
<span id="cb15-14">    srand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-15">    </span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get input from user</span></span>
<span id="cb15-17">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"How many random numbers do you want to generate? "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-18">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>arraySize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-19">    </span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Allocate memory</span></span>
<span id="cb15-21">    randomNumbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span> malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>arraySize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(!</span>randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-23">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed!</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-24">        exit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-25">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-26">    </span>
<span id="cb15-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate random numbers</span></span>
<span id="cb15-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> arraySize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-29">        randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-31">    </span>
<span id="cb15-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize for statistics</span></span>
<span id="cb15-33">    largest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-34">    smallest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">501</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-35">    </span>
<span id="cb15-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate statistics</span></span>
<span id="cb15-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> arraySize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-38">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb15-39">        </span>
<span id="cb15-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> largest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-41">            largest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb15-42">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-43">        </span>
<span id="cb15-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> smallest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-45">            smallest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb15-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-48">    </span>
<span id="cb15-49">    average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> arraySize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-50">    </span>
<span id="cb15-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display results</span></span>
<span id="cb15-52">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Largest number: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> largest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-53">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smallest number: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smallest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-54">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-55">    </span>
<span id="cb15-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free memory</span></span>
<span id="cb15-57">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>randomNumbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-58">    </span>
<span id="cb15-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-60"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">How</span> many random numbers do you want to generate<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span> 25</span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Largest</span> number: 495</span>
<span id="cb16-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Smallest</span> number: 1</span>
<span id="cb16-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Average:</span> 237.36</span></code></pre></div>
<p>Try running this program with different array sizes to see how it handles various amounts of data.</p>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>The heap is unused memory your program can allocate dynamically at runtime</li>
<li>Use <code>malloc()</code> to allocate memory and <code>free()</code> to release it back to the system</li>
<li>Always check if memory allocation succeeded before using the allocated memory</li>
<li>Use <code>sizeof()</code> to determine the correct number of bytes to allocate</li>
<li>Free memory when you’re done with it to avoid memory leaks</li>
<li>Arrays of pointers let you manage multiple allocations efficiently</li>
<li>Heap memory makes your programs more flexible by allowing them to adapt to runtime conditions</li>
</ul>
</section>
<section id="common-pitfalls-to-avoid" class="level1">
<h1>Common Pitfalls to Avoid</h1>
<ol type="1">
<li><strong>Memory Leaks</strong>: Forgetting to free allocated memory</li>
<li><strong>Dangling Pointers</strong>: Using memory after freeing it</li>
<li><strong>Double Free</strong>: Freeing the same memory block twice</li>
<li><strong>Buffer Overflows</strong>: Writing beyond the allocated memory block</li>
<li><strong>Not Checking Allocation Success</strong>: Assuming <code>malloc()</code> always succeeds</li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Dynamic memory allocation is a fundamental skill for C programmers. By understanding the heap and using <code>malloc()</code> and <code>free()</code> effectively, you can write more flexible and efficient programs that adapt to runtime conditions.</p>
<p>Remember that memory management in C is manual – the language trusts you to allocate and free memory correctly. With practice, this becomes second nature and gives you powerful control over your program’s resources.</p>
<p>Now that you understand the basics of maximizing your computer’s memory in C, you’re ready to create more sophisticated programs that can handle varying amounts of data efficiently.</p>
</section>
<section id="your-turn-extension" class="level1">
<h1>Your Turn Extension!</h1>
<p>As a learning exercise, try modifying the random number statistics program to:</p>
<ol type="1">
<li>Allow the user to specify the range of random numbers</li>
<li>Calculate additional statistics like median or mode</li>
<li>Reallocate the array if the user wants to add more numbers</li>
</ol>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="whats-the-difference-between-the-stack-and-the-heap" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-the-stack-and-the-heap">What’s the difference between the stack and the heap?</h2>
<p>The stack stores local variables and function call information, while the heap is for dynamic memory allocation. Stack memory is automatically managed, while heap memory must be managed manually with <code>malloc()</code> and <code>free()</code>.</p>
</section>
<section id="how-much-memory-can-i-allocate-with-malloc" class="level2">
<h2 class="anchored" data-anchor-id="how-much-memory-can-i-allocate-with-malloc">How much memory can I allocate with malloc()?</h2>
<p>The limit depends on available system memory. For very large allocations, check the return value from <code>malloc()</code> to ensure success.</p>
</section>
<section id="what-happens-if-i-forget-to-free-memory" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-if-i-forget-to-free-memory">What happens if I forget to free memory?</h2>
<p>Your program will have a “memory leak.” The operating system reclaims all memory when your program ends, but during execution, the leaked memory remains unavailable.</p>
</section>
<section id="can-i-resize-memory-ive-already-allocated" class="level2">
<h2 class="anchored" data-anchor-id="can-i-resize-memory-ive-already-allocated">Can I resize memory I’ve already allocated?</h2>
<p>Yes, using the <code>realloc()</code> function. It lets you change the size of a previously allocated memory block.</p>
</section>
<section id="is-there-an-alternative-to-manual-memory-management-in-c" class="level2">
<h2 class="anchored" data-anchor-id="is-there-an-alternative-to-manual-memory-management-in-c">Is there an alternative to manual memory management in C?</h2>
<p>While C itself requires manual memory management, some C libraries offer garbage collection or smart pointer alternatives. However, learning proper manual memory management is essential for C programming.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language">The C Programming Language by Kernighan and Ritchie</a></li>
<li><a href="https://en.cppreference.com/w/c/header/stdlib">C Standard Library - stdlib.h</a></li>
<li><a href="https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/">Dynamic Memory Allocation in C - GeeksforGeeks</a></li>
<li><a href="https://www.tutorialspoint.com/cprogramming/c_memory_management.htm">Memory Management in C Programming - Tutorialspoint</a></li>
</ol>
<p><strong><em>Did you find this guide helpful? Comment below with your questions or experiences with memory management in C. Don’t forget to share this post with fellow beginner C programmers who might benefit from understanding how to maximize their computer’s memory!</em></strong></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-19/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Maximize Memory in C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-19/</guid>
  <pubDate>Wed, 19 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>For-Loop with Range in R: A Complete Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-17/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>For-loops are fundamental programming structures that help automate repetitive tasks by executing code multiple times. If you’re learning R or looking to enhance your R programming skills, understanding how to use for-loops with ranges is important. This guide breaks down the concept of for-loops with ranges in R, providing clear explanations and practical examples to help you implement them in your own projects.</p>
<p>No matter where you are with your R programming, this article will walk you through everything you need to know about using for-loops with ranges in R.</p>
</section>
<section id="what-is-a-for-loop-in-r" class="level1">
<h1>What Is a For-Loop in R?</h1>
<p>A for-loop is a control flow statement that allows code to be executed repeatedly. In R, for-loops follow this basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (variable <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sequence) {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Code to be executed in each iteration</span></span>
<span id="cb1-3">}</span></code></pre></div>
<p>Let’s break this down:</p>
<ul>
<li><code>variable</code> is a placeholder that takes on each value in the sequence, one at a time</li>
<li><code>sequence</code> is a vector of values (like numbers, characters, or other data types)</li>
<li>The code inside the curly braces <code>{}</code> runs once for each value in the sequence</li>
</ul>
</section>
<section id="understanding-ranges-in-r" class="level1">
<h1>Understanding Ranges in R</h1>
<p>In R, creating a range of numbers is typically done using the colon operator (<code>:</code>). This creates a sequence of consecutive integers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creates a sequence from 1 to 5</span></span>
<span id="cb2-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Results in: 1 2 3 4 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>For more complex ranges, you can use the <code>seq()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sequence from 1 to 10, incrementing by 2</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Results in: 1 3 5 7 9</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 5 7 9</code></pre>
</div>
</div>
</section>
<section id="basic-for-loop-with-a-range-in-r" class="level1">
<h1>Basic For-Loop with a Range in R</h1>
<p>Let’s start with a simple example to print numbers from 1 to 5:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple for-loop using a range</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb6-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1
[1] 2
[1] 3
[1] 4
[1] 5</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>i</code> is our variable that takes on each value in the sequence</li>
<li><code>1:5</code> creates a range of numbers from 1 to 5</li>
<li><code>print(i)</code> outputs the current value of <code>i</code> during each iteration</li>
</ul>
</section>
<section id="practical-examples-of-for-loops-with-ranges-in-r" class="level1">
<h1>Practical Examples of For-Loops with Ranges in R</h1>
<section id="example-1-calculating-the-sum-of-numbers" class="level2">
<h2 class="anchored" data-anchor-id="example-1-calculating-the-sum-of-numbers">Example 1: Calculating the Sum of Numbers</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate sum of numbers from 1 to 10</span></span>
<span id="cb8-2">sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb8-4">  sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sum <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i</span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After adding"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the sum is:"</span>, sum))</span>
<span id="cb8-6">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "After adding 1 the sum is: 1"
[1] "After adding 2 the sum is: 3"
[1] "After adding 3 the sum is: 6"
[1] "After adding 4 the sum is: 10"
[1] "After adding 5 the sum is: 15"
[1] "After adding 6 the sum is: 21"
[1] "After adding 7 the sum is: 28"
[1] "After adding 8 the sum is: 36"
[1] "After adding 9 the sum is: 45"
[1] "After adding 10 the sum is: 55"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Final sum:"</span>, sum))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Final sum: 55"</code></pre>
</div>
</div>
</section>
<section id="example-2-creating-a-multiplication-table" class="level2">
<h2 class="anchored" data-anchor-id="example-2-creating-a-multiplication-table">Example 2: Creating a Multiplication Table</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a multiplication table for the number 7</span></span>
<span id="cb12-2">number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb12-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb12-4">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i</span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(number, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"×"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"="</span>, result))</span>
<span id="cb12-6">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "7 × 1 = 7"
[1] "7 × 2 = 14"
[1] "7 × 3 = 21"
[1] "7 × 4 = 28"
[1] "7 × 5 = 35"
[1] "7 × 6 = 42"
[1] "7 × 7 = 49"
[1] "7 × 8 = 56"
[1] "7 × 9 = 63"
[1] "7 × 10 = 70"</code></pre>
</div>
</div>
</section>
<section id="example-3-working-with-a-range-of-indices-in-a-vector" class="level2">
<h2 class="anchored" data-anchor-id="example-3-working-with-a-range-of-indices-in-a-vector">Example 3: Working with a Range of Indices in a Vector</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a vector</span></span>
<span id="cb14-2">fruits <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fig"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using a for-loop to access elements by index</span></span>
<span id="cb14-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fruits)) {</span>
<span id="cb14-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fruit at position"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is"</span>, fruits[i]))</span>
<span id="cb14-7">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Fruit at position 1 is Apple"
[1] "Fruit at position 2 is Banana"
[1] "Fruit at position 3 is Cherry"
[1] "Fruit at position 4 is Date"
[1] "Fruit at position 5 is Fig"</code></pre>
</div>
</div>
</section>
<section id="example-4-using-seq-function-for-custom-ranges" class="level2">
<h2 class="anchored" data-anchor-id="example-4-using-seq-function-for-custom-ranges">Example 4: Using seq() Function for Custom Ranges</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using seq() to create a range with specific steps</span></span>
<span id="cb16-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)) {</span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The value is"</span>, i))</span>
<span id="cb16-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "The value is 0"
[1] "The value is 0.2"
[1] "The value is 0.4"
[1] "The value is 0.6"
[1] "The value is 0.8"
[1] "The value is 1"</code></pre>
</div>
</div>
</section>
</section>
<section id="advanced-for-loop-range-techniques-in-r" class="level1">
<h1>Advanced For-Loop Range Techniques in R</h1>
<section id="example-5-nested-for-loops-with-ranges" class="level2">
<h2 class="anchored" data-anchor-id="example-5-nested-for-loops-with-ranges">Example 5: Nested For-Loops with Ranges</h2>
<p>Nested for-loops involve placing one for-loop inside another. This is useful for working with multi-dimensional data structures.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a simple matrix using nested for-loops</span></span>
<span id="cb18-2">matrix_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb18-3">my_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> matrix_size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> matrix_size)</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>matrix_size) {</span>
<span id="cb18-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>matrix_size) {</span>
<span id="cb18-7">    my_matrix[i, j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j</span>
<span id="cb18-8">  }</span>
<span id="cb18-9">}</span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    2    4    6
[3,]    3    6    9</code></pre>
</div>
</div>
</section>
<section id="example-6-reverse-range-in-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="example-6-reverse-range-in-for-loops">Example 6: Reverse Range in For-Loops</h2>
<p>You can also create reverse ranges to count backward:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Countdown using a reverse range</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rocket launch countdown:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Rocket launch countdown:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb22-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In a real program, you might add a delay here</span></span>
<span id="cb22-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10
[1] 9
[1] 8
[1] 7
[1] 6
[1] 5
[1] 4
[1] 3
[1] 2
[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blast off! 🚀"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Blast off! 🚀"</code></pre>
</div>
</div>
</section>
<section id="example-7-skipping-elements-in-a-range" class="level2">
<h2 class="anchored" data-anchor-id="example-7-skipping-elements-in-a-range">Example 7: Skipping Elements in a Range</h2>
<p>Using the <code>seq()</code> function lets you skip elements in your range:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print only even numbers from 2 to 20</span></span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) {</span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is an even number"</span>))</span>
<span id="cb26-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2 is an even number"
[1] "4 is an even number"
[1] "6 is an even number"
[1] "8 is an even number"
[1] "10 is an even number"
[1] "12 is an even number"
[1] "14 is an even number"
[1] "16 is an even number"
[1] "18 is an even number"
[1] "20 is an even number"</code></pre>
</div>
</div>
</section>
</section>
<section id="using-for-loop-ranges-with-data-manipulation" class="level1">
<h1>Using For-Loop Ranges with Data Manipulation</h1>
<section id="example-8-data-frame-iteration" class="level2">
<h2 class="anchored" data-anchor-id="example-8-data-frame-iteration">Example 8: Data Frame Iteration</h2>
<p>For-loops can be used to process data frames row by row:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a simple data frame</span></span>
<span id="cb28-2">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb28-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>),</span>
<span id="cb28-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb28-5">)</span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate letter grades based on scores</span></span>
<span id="cb28-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(students)) {</span>
<span id="cb28-9">  score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> students<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>score[i]</span>
<span id="cb28-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) {</span>
<span id="cb28-11">    grade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span></span>
<span id="cb28-12">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) {</span>
<span id="cb28-13">    grade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span></span>
<span id="cb28-14">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>) {</span>
<span id="cb28-15">    grade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span></span>
<span id="cb28-16">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb28-17">    grade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span></span>
<span id="cb28-18">  }</span>
<span id="cb28-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(students<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name[i], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scored"</span>, score, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and received a grade"</span>, grade))</span>
<span id="cb28-20">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice scored 85 and received a grade B"
[1] "Bob scored 92 and received a grade A"
[1] "Charlie scored 78 and received a grade C"
[1] "David scored 95 and received a grade A"</code></pre>
</div>
</div>
</section>
<section id="example-9-building-a-fibonacci-sequence" class="level2">
<h2 class="anchored" data-anchor-id="example-9-building-a-fibonacci-sequence">Example 9: Building a Fibonacci Sequence</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the first 10 numbers of the Fibonacci sequence</span></span>
<span id="cb30-2">fibonacci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb30-3">fibonacci[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb30-4">fibonacci[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb30-7">  fibonacci[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> fibonacci[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> fibonacci[i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-2</span>]</span>
<span id="cb30-8">}</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(fibonacci)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  0  1  1  2  3  5  8 13 21 34</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices-for-using-for-loops-with-ranges-in-r" class="level1">
<h1>Best Practices for Using For-Loops with Ranges in R</h1>
<section id="pre-allocate-memory" class="level2">
<h2 class="anchored" data-anchor-id="pre-allocate-memory">1. Pre-allocate Memory</h2>
<p>In R, it’s more efficient to pre-allocate memory for your results rather than growing objects incrementally:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good practice: Pre-allocate memory</span></span>
<span id="cb32-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb32-3">results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(n)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pre-allocate a vector</span></span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb32-6">  results[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb32-7">}</span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid this inefficient approach:</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># results &lt;- c()</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for (i in 1:n) {</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   results &lt;- c(results, i^2)  # Very inefficient for large loops</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># }</span></span></code></pre></div>
</div>
</section>
<section id="consider-vectorized-alternatives" class="level2">
<h2 class="anchored" data-anchor-id="consider-vectorized-alternatives">2. Consider Vectorized Alternatives</h2>
<p>R is optimized for vector operations. When possible, use vectorized functions instead of for-loops:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using a for-loop</span></span>
<span id="cb33-2">squares_loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb33-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb33-4">  squares_loop[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-5">}</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vectorized approach (much faster)</span></span>
<span id="cb33-8">squares_vectorized <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Both produce the same result</span></span>
<span id="cb33-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(squares_loop)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(squares_vectorized)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]   1   4   9  16  25  36  49  64  81 100</code></pre>
</div>
</div>
</section>
<section id="monitor-loop-progress-with-messages" class="level2">
<h2 class="anchored" data-anchor-id="monitor-loop-progress-with-messages">3. Monitor Loop Progress with Messages</h2>
<p>For long-running loops, it’s helpful to print progress messages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb37-2">step <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb37-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do some calculation</span></span>
<span id="cb37-5">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb37-6">  </span>
<span id="cb37-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print progress every 'step' iterations</span></span>
<span id="cb37-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> step <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb37-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processed"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"of"</span>, n, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"iterations -"</span>, (i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>))</span>
<span id="cb37-10">  }</span>
<span id="cb37-11">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Processed 10 of 100 iterations - 10 %"
[1] "Processed 20 of 100 iterations - 20 %"
[1] "Processed 30 of 100 iterations - 30 %"
[1] "Processed 40 of 100 iterations - 40 %"
[1] "Processed 50 of 100 iterations - 50 %"
[1] "Processed 60 of 100 iterations - 60 %"
[1] "Processed 70 of 100 iterations - 70 %"
[1] "Processed 80 of 100 iterations - 80 %"
[1] "Processed 90 of 100 iterations - 90 %"
[1] "Processed 100 of 100 iterations - 100 %"</code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice creating a for-loop with range in R. Try this exercise:</p>
<p><strong>Exercise</strong>: Write a for-loop that calculates the cube of each number from 1 to 5 and stores the results in a vector.</p>
<details>
<summary>
See Solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a vector to store results</span></span>
<span id="cb39-2">cubes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use a for-loop to calculate cubes</span></span>
<span id="cb39-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb39-6">  cubes[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb39-7">}</span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb39-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cubes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]   1   8  27  64 125</code></pre>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>For-loops in R follow the syntax <code>for (variable in sequence) { code }</code>.</li>
<li>Ranges in R can be created using the colon operator <code>1:5</code> or the <code>seq()</code> function.</li>
<li>Pre-allocate memory for better performance when using loops.</li>
<li>For-loops are useful for iterating through indices, especially when you need access to the position of elements.</li>
<li>When possible, consider using vectorized alternatives which are typically faster in R.</li>
<li>Nested for-loops can be used for multi-dimensional data structures like matrices.</li>
<li>The <code>seq()</code> function provides flexibility in creating custom ranges with specific steps.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>For-loops with ranges are important tools in R programming that help automate repetitive tasks. While R offers vectorized alternatives that are often faster, for-loops remain valuable for their readability and flexibility, especially when dealing with complex logic or when you need to access elements by their position.</p>
<p>By mastering for-loops with ranges in R, you’ve added a powerful technique to your programming toolkit. Whether you’re analyzing data, building models, or creating visualizations, you’ll find numerous applications for these fundamental programming structures.</p>
<p>Remember to consider performance implications when working with large datasets, and always look for opportunities to use R’s vectorized operations when appropriate.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="whats-the-difference-between-a-for-loop-and-a-while-loop-in-r" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-a-for-loop-and-a-while-loop-in-r">1. What’s the difference between a for-loop and a while-loop in R?</h2>
<p>A for-loop iterates over a predetermined sequence of values, while a while-loop continues until a specified condition becomes false. For-loops are better when you know the exact number of iterations in advance.</p>
</section>
<section id="are-for-loops-the-most-efficient-way-to-process-data-in-r" class="level2">
<h2 class="anchored" data-anchor-id="are-for-loops-the-most-efficient-way-to-process-data-in-r">2. Are for-loops the most efficient way to process data in R?</h2>
<p>No, R is optimized for vectorized operations, which are typically faster than for-loops. However, for-loops are often more readable and sometimes necessary for certain types of iterative algorithms.</p>
</section>
<section id="how-can-i-break-out-of-a-for-loop-early-in-r" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-break-out-of-a-for-loop-early-in-r">3. How can I break out of a for-loop early in R?</h2>
<p>You can use the <code>break</code> statement to exit a for-loop prematurely when a certain condition is met.</p>
</section>
<section id="can-i-skip-iterations-in-a-for-loop" class="level2">
<h2 class="anchored" data-anchor-id="can-i-skip-iterations-in-a-for-loop">4. Can I skip iterations in a for-loop?</h2>
<p>Yes, you can use the <code>next</code> statement to skip the current iteration and proceed to the next one.</p>
</section>
<section id="how-do-i-iterate-over-multiple-vectors-simultaneously-in-a-for-loop" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-iterate-over-multiple-vectors-simultaneously-in-a-for-loop">5. How do I iterate over multiple vectors simultaneously in a for-loop?</h2>
<p>You can use the <code>seq_along()</code> function to iterate over indices and then access multiple vectors using the same index.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/Control">R Documentation - Control Structures</a></li>
<li><a href="https://r4ds.had.co.nz/iteration.html">R for Data Science: Iteration chapter</a></li>
<li><a href="https://adv-r.hadley.nz/control-flow.html">Advanced R: Control Flow</a></li>
<li><a href="https://www.r-project.org/">The R Project for Statistical Computing</a></li>
<li><a href="https://www.r-bloggers.com/2019/09/for-loops-in-r/">R-bloggers: For-loops in R</a></li>
</ol>
<p>I hope you found this guide helpful for understanding and implementing for-loops with ranges in R! Feel free to experiment with the examples and adapt them to your specific needs.</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-17/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>For Loops with R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-17/</guid>
  <pubDate>Mon, 17 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Flow Control: Branching with if - A Beginner’s Guide to Linux Programming</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-14/</link>
  <description><![CDATA[ 





<p><em>Author’s Note: I’m learning alongside you as I write this series. Programming concepts can be challenging at first, but we’ll work through them together with clear explanations and practical examples.</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When writing programs, you’ll often need your code to make decisions based on certain conditions. Should it perform one action or another? This decision-making ability is called “branching”, and it forms the foundation of what programmers call “flow control”.</p>
<p>Imagine you’re at a fork in the road. Based on certain conditions (maybe it’s raining, or perhaps you’re in a hurry), you’ll choose one path over another. That’s exactly what branching in programming allows your code to do!</p>
<p>In this article, we’ll take a peek at how the Linux shell uses the <code>if</code> statement to create these decision points in your code. By the end, you’ll be able to write scripts that can adapt and respond intelligently based on different situations.</p>
</section>
<section id="what-is-flow-control" class="level1">
<h1>What is Flow Control?</h1>
<p>Flow control refers to the order in which statements and instructions are executed in a program. Without flow control, a program would simply run each line of code in sequence from top to bottom. While that works for simple tasks, most useful programs need to:</p>
<ul>
<li>Skip certain code blocks based on conditions</li>
<li>Run specific sections repeatedly</li>
<li>Jump to different parts of the program</li>
</ul>
<p>The most fundamental type of flow control is branching, which allows a program to choose between different paths of execution. In bash scripting, the primary tool for branching is the <code>if</code> statement.</p>
</section>
<section id="the-basic-structure-of-an-if-statement" class="level1">
<h1>The Basic Structure of an <code>if</code> Statement</h1>
<p>In its simplest form, an <code>if</code> statement in bash looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[condition]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commands to run when condition is true</span></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>Here’s a more complete structure that includes alternative paths:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[condition]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commands to run when condition is true</span></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[another_condition]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commands to run when the first condition is false</span></span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but another_condition is true</span></span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commands to run when all conditions are false</span></span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>The <code>if</code> statement always ends with <code>fi</code> (which is “if” spelled backward).</p>
</section>
<section id="your-first-if-statement" class="level1">
<h1>Your First if Statement</h1>
<p>Let’s start with a simple example where we check if a number equals 5:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>5</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$x</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 5 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb3-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x equals 5."</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb3-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x does not equal 5."</span></span>
<span id="cb3-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>You can try this directly in your terminal:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> x=5</span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> if [ <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$x</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-eq</span> 5 ]<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"equals 5"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does not equal 5"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">equals</span> 5</span>
<span id="cb4-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> x=0</span>
<span id="cb4-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> if [ <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$x</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-eq</span> 5 ]<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"equals 5"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"does not equal 5"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb4-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">does</span> not equal 5</span></code></pre></div>
</section>
<section id="understanding-exit-status" class="level1">
<h1>Understanding Exit Status</h1>
<p>To fully understand how <code>if</code> works in bash, you need to know about “exit status.” Every command in Linux, including the scripts and functions you write, returns a value between 0 and 255 when it completes. This value is called the exit status:</p>
<ul>
<li>An exit status of 0 means the command succeeded</li>
<li>Any other value (1-255) indicates some type of failure</li>
</ul>
<p>You can check the exit status of the last command using the special <code>$?</code> variable:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> /usr/bin</span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/usr/bin</span></span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> echo <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span></span>
<span id="cb5-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Command succeeded</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> ls <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> /bin/usr</span>
<span id="cb5-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ls:</span> cannot access <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/bin/usr'</span>: No such file or directory</span>
<span id="cb5-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> echo <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span></span>
<span id="cb5-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">2</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Command failed with exit status 2</span></span></code></pre></div>
<section id="the-true-and-false-commands" class="level2">
<h2 class="anchored" data-anchor-id="the-true-and-false-commands">The true and false Commands</h2>
<p>Linux provides two simple commands that do nothing but return success or failure: - <code>true</code> always returns an exit status of 0 (success) - <code>false</code> always returns an exit status of 1 (failure)</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> true</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> echo <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span></span>
<span id="cb6-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> false</span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> echo <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span></span>
<span id="cb6-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<p>The <code>if</code> statement evaluates the exit status of commands. If the command returns 0 (success), the code in the <code>then</code> section runs:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> if true<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's true."</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">It</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s true.</span></span>
<span id="cb7-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$ if false; then echo "It'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">s</span> true.<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"; fi</span></span>
<span id="cb7-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"># No output because the condition failed</span></span></code></pre></div>
</section>
</section>
<section id="the-test-command" class="level1">
<h1>The test Command</h1>
<p>While you can use any command with <code>if</code>, the most common one is <code>test</code>, which performs various checks and comparisons. The <code>test</code> command has two forms:</p>
<ol type="1">
<li><code>test expression</code></li>
<li><code>[ expression ]</code> (This is more popular and readable)</li>
</ol>
<p>The test command returns success (0) if the expression is true and failure (1) if it’s false.</p>
<section id="common-types-of-tests" class="level2">
<h2 class="anchored" data-anchor-id="common-types-of-tests">Common Types of Tests</h2>
<p>You can check many things with the test command. Let’s look at the most useful categories:</p>
<section id="file-tests" class="level3">
<h3 class="anchored" data-anchor-id="file-tests">1. File Tests</h3>
<p>These expressions check properties of files and directories:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> file <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the file exists</span></span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> file <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the file exists and is a directory</span></span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> file <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the file exists and is a regular file</span></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-r</span> file <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the file exists and is readable</span></span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-w</span> file <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the file exists and is writable</span></span>
<span id="cb8-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-x</span> file <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the file exists and is executable</span></span></code></pre></div>
<p>Here’s a script that demonstrates some file tests:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script to check file properties</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FILE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>~/.bashrc  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your bash configuration file</span></span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> exists"</span></span>
<span id="cb9-8">    </span>
<span id="cb9-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-f</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a regular file"</span></span>
<span id="cb9-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-12">    </span>
<span id="cb9-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a directory"</span></span>
<span id="cb9-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-16">    </span>
<span id="cb9-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-r</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is readable"</span></span>
<span id="cb9-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-20">    </span>
<span id="cb9-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-w</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-22">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is writable"</span></span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-24">    </span>
<span id="cb9-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-x</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb9-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is executable/searchable"</span></span>
<span id="cb9-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb9-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb9-29">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist"</span></span>
<span id="cb9-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
<section id="string-tests" class="level3">
<h3 class="anchored" data-anchor-id="string-tests">2. String Tests</h3>
<p>These expressions check properties of strings:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> string <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the string is empty</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-n</span> string <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the string is not empty</span></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> string1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> string2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the strings are equal</span></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> string1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!=</span> string2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if the strings are not equal</span></span></code></pre></div>
<p>Here’s a script that evaluates a string:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script to evaluate a string</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">ANSWER</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maybe"</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ANSWER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb11-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There is no answer."</span></span>
<span id="cb11-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit with error status</span></span>
<span id="cb11-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ANSWER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb11-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The answer is YES."</span></span>
<span id="cb11-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ANSWER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb11-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The answer is NO."</span></span>
<span id="cb11-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$ANSWER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maybe"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb11-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The answer is MAYBE."</span></span>
<span id="cb11-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb11-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The answer is UNKNOWN."</span></span>
<span id="cb11-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
<section id="integer-comparison-tests" class="level3">
<h3 class="anchored" data-anchor-id="integer-comparison-tests">3. Integer Comparison Tests</h3>
<p>These expressions compare integers:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> int1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> int2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if int1 equals int2</span></span>
<span id="cb12-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> int1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ne</span> int2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if int1 is not equal to int2</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> int1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> int2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if int1 is less than int2</span></span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> int1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-le</span> int2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if int1 is less than or equal to int2</span></span>
<span id="cb12-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> int1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-gt</span> int2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if int1 is greater than int2</span></span>
<span id="cb12-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> int1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ge</span> int2 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if int1 is greater than or equal to int2</span></span></code></pre></div>
<p>Here’s a script that evaluates an integer:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A script to evaluate an integer</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>7</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-z</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb13-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is empty."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb13-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb13-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb13-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is zero."</span></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb13-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-lt</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb13-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is negative."</span></span>
<span id="cb13-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb13-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is positive."</span></span>
<span id="cb13-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb13-19">    </span>
<span id="cb13-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$((INT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">))</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb13-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is even."</span></span>
<span id="cb13-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb13-23">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is odd."</span></span>
<span id="cb13-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb13-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
</section>
</section>
<section id="the-modern-test-command" class="level1">
<h1>The Modern [[ ]] Test Command</h1>
<p>Newer versions of bash provide an improved version of the test command using double brackets:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> expression <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span></span></code></pre></div>
<p>This version supports everything the original test command does, plus additional features:</p>
<section id="regular-expression-matching" class="level2">
<h2 class="anchored" data-anchor-id="regular-expression-matching">1. Regular Expression Matching</h2>
<p>One of the most useful additions is regular expression matching with the <code>=~</code> operator:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> string <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">regex</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]]</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True if string matches the regex pattern</span></span></code></pre></div>
<p>This is extremely helpful for validating user input. For example, to check if a variable contains an integer:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validating that a variable contains an integer</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-42"</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb16-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a valid integer."</span></span>
<span id="cb16-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb16-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is not a valid integer."</span></span>
<span id="cb16-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>The regular expression <code>^-?[0-9]+$</code> checks that the string: - Begins with an optional minus sign (<code>-?</code>) - Followed by one or more digits (<code>[0-9]+</code>) - With nothing else before or after (<code>^</code> marks the start and <code>$</code> marks the end)</p>
</section>
<section id="pattern-matching" class="level2">
<h2 class="anchored" data-anchor-id="pattern-matching">2. Pattern Matching</h2>
<p>The <code>==</code> operator in <code>[[ ]]</code> supports pattern matching similar to filename globbing:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">FILE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"document.txt"</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">==</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span>.txt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb17-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$FILE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is a text file."</span></span>
<span id="cb17-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
</section>
<section id="the-command-for-integer-operations" class="level1">
<h1>The (( )) Command for Integer Operations</h1>
<p>Bash provides yet another compound command specifically for integer arithmetic:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">expression</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">))</span></span></code></pre></div>
<p>This command returns true (0) if the result of the arithmetic evaluation is non-zero, and false (1) if the result is zero.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb19-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> if <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">1</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb19-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb19-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> if <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">0</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No output because 0 is false</span></span></code></pre></div>
<p>This is particularly useful for arithmetic comparisons:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using (( )) for integer evaluation</span></span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>42</span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb20-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is zero."</span></span>
<span id="cb20-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb20-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is negative."</span></span>
<span id="cb20-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb20-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is positive."</span></span>
<span id="cb20-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb20-13"></span>
<span id="cb20-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb20-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is even."</span></span>
<span id="cb20-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb20-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is odd."</span></span>
<span id="cb20-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>Notice how the syntax inside <code>(( ))</code> looks more like traditional programming languages with operators like <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, and so on.</p>
</section>
<section id="combining-expressions-with-logical-operators" class="level1">
<h1>Combining Expressions with Logical Operators</h1>
<p>You can create more complex conditions by combining expressions with logical operators:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Operation</th>
<th>test</th>
<th>[[ ]] and (( ))</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>AND</td>
<td>-a</td>
<td>&amp;&amp;</td>
</tr>
<tr class="even">
<td>OR</td>
<td>-o</td>
<td>||</td>
</tr>
<tr class="odd">
<td>NOT</td>
<td>!</td>
<td>!</td>
</tr>
</tbody>
</table>
<section id="example-checking-if-a-number-is-within-a-range" class="level2">
<h2 class="anchored" data-anchor-id="example-checking-if-a-number-is-within-a-range">Example: Checking if a Number is Within a Range</h2>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if a number is within a specified range</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MIN_VAL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb21-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MAX_VAL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>100</span>
<span id="cb21-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>50</span>
<span id="cb21-7"></span>
<span id="cb21-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb21-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> INT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ge</span> MIN_VAL <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> INT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-le</span> MAX_VAL <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb21-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is within </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MIN_VAL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MAX_VAL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb21-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb21-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is out of range."</span></span>
<span id="cb21-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb21-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb21-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is not an integer."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb21-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb21-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
<p>With the traditional test command, you’d write:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ge</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MIN_VAL</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-a</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-le</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MAX_VAL</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb22-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is within </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MIN_VAL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MAX_VAL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb22-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is out of range."</span></span>
<span id="cb22-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
<section id="using-negation" class="level2">
<h2 class="anchored" data-anchor-id="using-negation">Using Negation</h2>
<p>The <code>!</code> operator reverses the result of an expression. Here’s an example that finds values outside a range:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if a number is outside a specified range</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MIN_VAL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span>
<span id="cb23-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MAX_VAL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>100</span>
<span id="cb23-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">INT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>150</span>
<span id="cb23-7"></span>
<span id="cb23-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb23-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>INT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-ge</span> MIN_VAL <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> INT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-le</span> MAX_VAL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb23-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is outside </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MIN_VAL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$MAX_VAL</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span></span>
<span id="cb23-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb23-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$INT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is in range."</span></span>
<span id="cb23-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb23-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb23-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INT is not an integer."</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&amp;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb23-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb23-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span></code></pre></div>
</section>
</section>
<section id="control-operators-and" class="level1">
<h1>Control Operators: &amp;&amp; and ||</h1>
<p>Bash provides two more ways to perform simple conditional execution:</p>
<section id="the-and-operator" class="level2">
<h2 class="anchored" data-anchor-id="the-and-operator">The &amp;&amp; (AND) Operator</h2>
<p>The AND operator (<code>&amp;&amp;</code>) executes the second command only if the first command succeeds:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb24-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command2</span></span></code></pre></div>
<p>This is useful for chaining commands that depend on each other:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> temp <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> temp</span></code></pre></div>
<p>This creates a directory named “temp” and changes to that directory only if the directory creation succeeds.</p>
</section>
<section id="the-or-operator" class="level2">
<h2 class="anchored" data-anchor-id="the-or-operator">The || (OR) Operator</h2>
<p>The OR operator (<code>||</code>) executes the second command only if the first command fails:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb26-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">command2</span></span></code></pre></div>
<p>This is perfect for error handling:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb27-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> temp <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> temp</span></code></pre></div>
<p>This checks if the “temp” directory exists, and only creates it if the check fails (meaning the directory doesn’t exist).</p>
<p>You can use this for error handling in scripts:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> temp <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">||</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span></code></pre></div>
<p>This exits the script with an error code if the “temp” directory doesn’t exist.</p>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice what we’ve learned with a simple exercise. Try writing a script that: 1. Asks the user for a number 2. Checks if the input is actually a valid number 3. Tells the user if the number is positive, negative, or zero 4. Also tells the user if the number is even or odd</p>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number-checker.sh - Check properties of a user-provided number</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter a number:"</span></span>
<span id="cb29-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">read</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">USER_INPUT</span></span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if input is a valid number</span></span>
<span id="cb29-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=~</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">^</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">?</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">+</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb29-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: '</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' is not a valid integer."</span></span>
<span id="cb29-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb29-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if positive, negative, or zero</span></span>
<span id="cb29-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">USER_INPUT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb29-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is positive."</span></span>
<span id="cb29-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">USER_INPUT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb29-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is negative."</span></span>
<span id="cb29-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb29-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is zero."</span></span>
<span id="cb29-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb29-21"></span>
<span id="cb29-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if even or odd</span></span>
<span id="cb29-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">((</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">USER_INPUT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">));</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb29-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is even."</span></span>
<span id="cb29-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb29-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER_INPUT</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is odd."</span></span>
<span id="cb29-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb29-28"></span>
<span id="cb29-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Thanks for using the number checker!"</span></span></code></pre></div>
You can save this as <code>number-checker.sh</code>, make it executable with <code>chmod +x number-checker.sh</code>, and then run it with <code>./number-checker.sh</code>.
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><strong>Flow control</strong> allows your scripts to make decisions and take different actions based on conditions.</li>
<li>The <strong>if statement</strong> is the primary tool for branching in bash scripts.</li>
<li>Commands return an <strong>exit status</strong> (0 for success, non-zero for failure) that if statements evaluate.</li>
<li>The <strong>test command</strong> (or <code>[ ]</code>) provides various checks for files, strings, and numbers.</li>
<li>Modern bash provides <strong>[[ ]]</strong> with enhanced features like regex matching and pattern matching.</li>
<li>For integer arithmetic, use <strong>(( ))</strong> for a cleaner, more familiar syntax.</li>
<li><strong>Logical operators</strong> (&amp;&amp; and ||) allow you to combine expressions or control command execution based on success/failure.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Congratulations! You now understand the fundamentals of branching with the <code>if</code> statement in bash. This is a powerful concept that forms the foundation of program logic and decision-making. As you continue learning, you’ll find that these tools allow you to create increasingly sophisticated scripts that can handle complex tasks and respond intelligently to different conditions.</p>
<p>Remember that programming is a skill that improves with practice. Try writing your own scripts that use if statements to solve problems or automate tasks on your system. Start simple, and gradually increase the complexity as your confidence grows.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>Click on these links to learn more about flow control in Linux programming:</p>
<ul>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html">Bash Manual: Conditional Expressions</a></li>
<li><a href="https://www.gnu.org/software/coreutils/manual/html_node/test-invocation.html">GNU Coreutils: test command</a></li>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/Lists.html">Bash Manual: Control Operators</a></li>
<li><a href="https://tldp.org/LDP/abs/html/tests.html">Advanced Bash-Scripting Guide: Tests</a></li>
<li><a href="https://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-6.html">Linux Documentation Project: Control Structures</a></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-14/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Control Flow</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-14/</guid>
  <pubDate>Fri, 14 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Arrays and Pointers in C: A Complete Guide for Beginners</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-12/</link>
  <description><![CDATA[ 





<p><strong>Author’s Note</strong></p>
<p><strong>Dear Readers,</strong></p>
<p><strong>As I continue learning C programming, I want to share that I am writing this series while actively developing my skills. This means that while I strive to provide accurate and helpful information, there may be occasional mistakes or oversights in the content.</strong></p>
<p><strong>If you spot any errors or have suggestions for improvement, please don’t hesitate to leave a comment. Your feedback is invaluable—not only to me as I learn, but also to fellow readers who benefit from a collaborative learning environment. Together, we can create a more informative and enriching experience for everyone.</strong></p>
<p><strong>Thank you for your understanding and support on this exciting journey!</strong></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’re new to C programming, understanding arrays and pointers might seem intimidating at first. However, these concepts are fundamental to mastering C and can make your code more efficient once you understand them. This guide breaks down these concepts in simple language with plenty of examples to help you grasp how arrays and pointers work in C and how they relate to each other.</p>
<p>Think of arrays as containers that hold multiple items of the same type, while pointers are variables that store memory addresses. The fascinating part is how closely these two concepts are connected in C. By the end of this article, you’ll have a solid understanding of both concepts and how they can work together.</p>
</section>
<section id="what-are-arrays-in-c" class="level1">
<h1>What Are Arrays in C?</h1>
<p>An array in C is a collection of elements of the same data type, stored in contiguous memory locations. It’s like having multiple variables of the same type, accessed using a single name.</p>
<section id="creating-and-using-arrays" class="level2">
<h2 class="anchored" data-anchor-id="creating-and-using-arrays">Creating and Using Arrays</h2>
<p>To create an array, you specify its type and size:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Declaring an array of 5 integers</span></span>
<span id="cb1-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-6">    </span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initializing array elements</span></span>
<span id="cb1-8">    numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-9">    numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-10">    numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-11">    numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">    numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-13">    </span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing array elements</span></span>
<span id="cb1-15">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-16">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Third element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-17">    </span>
<span id="cb1-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>First element: 10
Third element: 30</code></pre>
<p>You can also initialize an array at declaration:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span></code></pre></div>
</section>
<section id="multi-dimensional-arrays" class="level2">
<h2 class="anchored" data-anchor-id="multi-dimensional-arrays">Multi-dimensional Arrays</h2>
<p>C supports multi-dimensional arrays. Here’s how to create and use a 2D array:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2D array: 3 rows, 4 columns</span></span>
<span id="cb4-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb4-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb4-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb4-10">    </span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing elements</span></span>
<span id="cb4-12">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Element at row 1, column 2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb4-13">    </span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Element at row 1, column 2: 7</code></pre>
</section>
</section>
<section id="what-are-pointers-in-c" class="level1">
<h1>What Are Pointers in C?</h1>
<p>A pointer is a variable that stores the memory address of another variable. Pointers are powerful because they allow direct manipulation of memory.</p>
<section id="declaring-and-using-pointers" class="level2">
<h2 class="anchored" data-anchor-id="declaring-and-using-pointers">Declaring and Using Pointers</h2>
<p>Here’s how to declare and use a basic pointer:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Regular integer variable</span></span>
<span id="cb6-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer to integer</span></span>
<span id="cb6-6">    </span>
<span id="cb6-7">    ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign address of num to ptr</span></span>
<span id="cb6-8">    </span>
<span id="cb6-9">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value of num: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-10">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Address of num: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%p\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value stored in ptr: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%p\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-12">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value that ptr points to: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-13">    </span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Change the value using the pointer</span></span>
<span id="cb6-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-16">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New value of num: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-17">    </span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Value of num: 10
Address of num: 0x7fff5fbff8ac (this address will vary)
Value stored in ptr: 0x7fff5fbff8ac (same as above)
Value that ptr points to: 10
New value of num: 20</code></pre>
</section>
<section id="key-pointer-operations" class="level2">
<h2 class="anchored" data-anchor-id="key-pointer-operations">Key Pointer Operations</h2>
<ol type="1">
<li><strong>&amp; (Address-of operator)</strong>: Gets the memory address of a variable</li>
<li><strong>* (Dereference operator)</strong>: Accesses the value at the address stored in a pointer</li>
</ol>
</section>
</section>
<section id="the-relationship-between-arrays-and-pointers" class="level1">
<h1>The Relationship Between Arrays and Pointers</h1>
<p>Here’s where things get interesting: <strong>In C, an array name is essentially a pointer to the first element of the array</strong>. This is one of the most important concepts to understand.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-5">    </span>
<span id="cb8-6">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Array name points to first element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%p\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Address of first element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%p\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb8-8">    </span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// These two print the same value</span></span>
<span id="cb8-10">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First element using array notation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb8-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First element using pointer notation: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-12">    </span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Array name points to first element: 0x7fff5fbff890 (address will vary)
Address of first element: 0x7fff5fbff890 (same as above)
First element using array notation: 10
First element using pointer notation: 10</code></pre>
<section id="accessing-array-elements-using-pointers" class="level2">
<h2 class="anchored" data-anchor-id="accessing-array-elements-using-pointers">Accessing Array Elements Using Pointers</h2>
<p>Because an array name works like a pointer, you can access array elements using pointer arithmetic:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-5">    </span>
<span id="cb10-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Using array notation</span></span>
<span id="cb10-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Array notation:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-9">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numbers[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">] = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-11">    </span>
<span id="cb10-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Using pointer notation</span></span>
<span id="cb10-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Pointer notation:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-15">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*(numbers + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">) = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span>numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb10-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-17">    </span>
<span id="cb10-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Array notation:
numbers[0] = 10
numbers[1] = 20
numbers[2] = 30
numbers[3] = 40
numbers[4] = 50

Pointer notation:
*(numbers + 0) = 10
*(numbers + 1) = 20
*(numbers + 2) = 30
*(numbers + 3) = 40
*(numbers + 4) = 50</code></pre>
</section>
<section id="key-difference-between-array-names-and-pointers" class="level2">
<h2 class="anchored" data-anchor-id="key-difference-between-array-names-and-pointers">Key Difference Between Array Names and Pointers</h2>
<p>While array names act like pointers, there’s a crucial difference: <strong>an array name is a constant pointer</strong>. You cannot change where it points:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is fine</span></span>
<span id="cb12-3"></span>
<span id="cb12-4">numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ERROR! Cannot assign to array name</span></span>
<span id="cb12-5">ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is fine</span></span></code></pre></div>
</section>
</section>
<section id="pointers-and-array-arithmetic" class="level1">
<h1>Pointers and Array Arithmetic</h1>
<p>When you perform arithmetic on pointers, C automatically scales the operation based on the data type’s size:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb13-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Points to first element</span></span>
<span id="cb13-6">    </span>
<span id="cb13-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ptr points to: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-8">    </span>
<span id="cb13-9">    ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move to next integer (adds 4 bytes, not just 1)</span></span>
<span id="cb13-10">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After ptr++, ptr points to: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-11">    </span>
<span id="cb13-12">    ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move forward 2 integers</span></span>
<span id="cb13-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After ptr += 2, ptr points to: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-14">    </span>
<span id="cb13-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>ptr points to: 10
After ptr++, ptr points to: 20
After ptr += 2, ptr points to: 40</code></pre>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice by filling in the missing parts of this code that calculates the sum of array elements using pointer notation:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb15-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb15-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* What goes here? */</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-7">    </span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">        sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* How do we access the element? */</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* How do we move to the next element? */</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-12">    </span>
<span id="cb15-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum of array elements: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb16-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb16-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Point to the first element</span></span>
<span id="cb16-7">    </span>
<span id="cb16-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-9">        sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Add the value pointed to by ptr</span></span>
<span id="cb16-10">        ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move to the next element</span></span>
<span id="cb16-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-12">    </span>
<span id="cb16-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum of array elements: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb16-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Sum of array elements: 150</code></pre>
</details>
</section>
<section id="character-arrays-and-pointers" class="level1">
<h1>Character Arrays and Pointers</h1>
<p>Character arrays and pointers have a special relationship in C, especially when dealing with strings.</p>
<section id="character-arrays-strings" class="level2">
<h2 class="anchored" data-anchor-id="character-arrays-strings">Character Arrays (Strings)</h2>
<p>In C, strings are represented as arrays of characters terminated with a null character <code>'\0'</code>:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb18-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb18-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// String declaration using character array</span></span>
<span id="cb18-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-6">    </span>
<span id="cb18-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb18-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First character: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb18-9">    </span>
<span id="cb18-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Name: John
First character: J</code></pre>
</section>
<section id="character-pointers" class="level2">
<h2 class="anchored" data-anchor-id="character-pointers">Character Pointers</h2>
<p>You can also represent strings using character pointers:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// String declaration using character pointer</span></span>
<span id="cb20-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">    </span>
<span id="cb20-7">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First character: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-9">    </span>
<span id="cb20-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Name: John
First character: J</code></pre>
</section>
<section id="key-differences-between-character-arrays-and-character-pointers" class="level2">
<h2 class="anchored" data-anchor-id="key-differences-between-character-arrays-and-character-pointers">Key Differences Between Character Arrays and Character Pointers</h2>
<p>This is an important distinction to understand:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb22-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb22-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Character array (can be modified)</span></span>
<span id="cb22-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> name1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-7">    </span>
<span id="cb22-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Character pointer (points to string literal, which cannot be modified)</span></span>
<span id="cb22-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>name2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-10">    </span>
<span id="cb22-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is fine</span></span>
<span id="cb22-12">    strcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>name1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alex"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name1 after modification: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-14">    </span>
<span id="cb22-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is NOT fine and may cause a segmentation fault</span></span>
<span id="cb22-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// strcpy(name2, "Alex");  // Trying to modify a string literal</span></span>
<span id="cb22-17">    </span>
<span id="cb22-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is fine (changing what name2 points to)</span></span>
<span id="cb22-19">    name2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alex"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-20">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name2 after reassignment: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> name2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb22-21">    </span>
<span id="cb22-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb22-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>name1 after modification: Alex
name2 after reassignment: Alex</code></pre>
</section>
</section>
<section id="arrays-of-pointers" class="level1">
<h1>Arrays of Pointers</h1>
<p>Arrays can contain pointers, which is especially useful for creating an array of strings:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb24-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Array of character pointers (array of strings)</span></span>
<span id="cb24-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>fruits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb24-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elderberry"</span></span>
<span id="cb24-11">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb24-12">    </span>
<span id="cb24-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print all fruits</span></span>
<span id="cb24-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb24-15">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fruit </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fruits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb24-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb24-17">    </span>
<span id="cb24-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing individual characters</span></span>
<span id="cb24-19">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">First letter of second fruit: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fruits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb24-20">    </span>
<span id="cb24-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Fruit 1: Apple
Fruit 2: Banana
Fruit 3: Cherry
Fruit 4: Date
Fruit 5: Elderberry

First letter of second fruit: B</code></pre>
</section>
<section id="pointers-to-arrays" class="level1">
<h1>Pointers to Arrays</h1>
<p>You can also have pointers that point to entire arrays:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb26-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb26-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb26-5">    </span>
<span id="cb26-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer to an array of 5 integers</span></span>
<span id="cb26-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-8">    </span>
<span id="cb26-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing array elements using the pointer to array</span></span>
<span id="cb26-10">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb26-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Third element: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb26-12">    </span>
<span id="cb26-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>First element: 10
Third element: 30</code></pre>
</section>
<section id="common-patterns-and-use-cases" class="level1">
<h1>Common Patterns and Use Cases</h1>
<section id="passing-arrays-to-functions" class="level2">
<h2 class="anchored" data-anchor-id="passing-arrays-to-functions">1. Passing Arrays to Functions</h2>
<p>When you pass an array to a function, you’re actually passing a pointer:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb28-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function that takes an array (or pointer to its first element)</span></span>
<span id="cb28-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> printArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-5">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Array elements: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-7">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb28-8">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-9">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-11"></span>
<span id="cb28-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb28-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb28-14">    </span>
<span id="cb28-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pass the array to function</span></span>
<span id="cb28-16">    printArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb28-17">    </span>
<span id="cb28-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb28-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Array elements: 10 20 30 40 50</code></pre>
<p>Alternative function signature with explicit pointer:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb30-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> printArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb30-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function body remains the same</span></span>
<span id="cb30-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="dynamic-memory-allocation-for-arrays" class="level2">
<h2 class="anchored" data-anchor-id="dynamic-memory-allocation-for-arrays">2. Dynamic Memory Allocation for Arrays</h2>
<p>Pointers allow you to create arrays whose size is determined at runtime:</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb31-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb31-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-6">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the size of the array: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-7">    scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-8">    </span>
<span id="cb31-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Dynamically allocate memory for the array</span></span>
<span id="cb31-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dynamicArray <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb31-11">    </span>
<span id="cb31-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dynamicArray <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-13">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory allocation failed</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-15">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-16">    </span>
<span id="cb31-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the array</span></span>
<span id="cb31-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-19">        dynamicArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-21">    </span>
<span id="cb31-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the array</span></span>
<span id="cb31-23">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dynamic array elements: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb31-25">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> dynamicArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb31-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-27">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-28">    </span>
<span id="cb31-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free the allocated memory</span></span>
<span id="cb31-30">    free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>dynamicArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb31-31">    </span>
<span id="cb31-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb31-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Sample Output (for size=4):</p>
<pre><code>Enter the size of the array: 4
Dynamic array elements: 0 10 20 30</code></pre>
</section>
<section id="string-manipulation" class="level2">
<h2 class="anchored" data-anchor-id="string-manipulation">3. String Manipulation</h2>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb33-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb33-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-7">    </span>
<span id="cb33-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Concatenate strings</span></span>
<span id="cb33-9">    strcat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> world<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-10">    </span>
<span id="cb33-11">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Concatenated string: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb33-12">    </span>
<span id="cb33-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-14"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Concatenated string: Hello, World!</code></pre>
</section>
</section>
<section id="your-turn-1" class="level1">
<h1>Your Turn!</h1>
<p>Let’s write a program that reverses an array using pointers:</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb35-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reverseArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* What parameters? */</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Your code here */</span></span>
<span id="cb35-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb35-9">    </span>
<span id="cb35-10">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original array: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb35-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-12">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb35-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb35-14">    </span>
<span id="cb35-15">    reverseArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* Arguments? */</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb35-16">    </span>
<span id="cb35-17">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reversed array: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb35-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb35-19">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb35-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb35-21">    </span>
<span id="cb35-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb35-23"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<details>
<summary>
See Solution
</summary>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb36-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reverseArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer to the start of array</span></span>
<span id="cb36-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pointer to the end of array</span></span>
<span id="cb36-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-7">    </span>
<span id="cb36-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Swap elements</span></span>
<span id="cb36-10">        temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-13">        </span>
<span id="cb36-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Move pointers toward the center</span></span>
<span id="cb36-15">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb36-16">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--;</span></span>
<span id="cb36-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb36-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb36-19"></span>
<span id="cb36-20"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb36-22">    </span>
<span id="cb36-23">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original array: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-25">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb36-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb36-27">    </span>
<span id="cb36-28">    reverseArray<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-29">    </span>
<span id="cb36-30">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Reversed array: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-32">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb36-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb36-34">    </span>
<span id="cb36-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<pre><code>Original array: 10 20 30 40 50
Reversed array: 50 40 30 20 10</code></pre>
</details>
</section>
<section id="common-mistakes-and-pitfalls" class="level1">
<h1>Common Mistakes and Pitfalls</h1>
<section id="accessing-out-of-bounds-memory" class="level2">
<h2 class="anchored" data-anchor-id="accessing-out-of-bounds-memory">1. Accessing Out-of-Bounds Memory</h2>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb38-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb38-2">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing beyond the array bounds</span></span></code></pre></div>
<p>This can lead to unpredictable behavior, program crashes, or security vulnerabilities.</p>
</section>
<section id="dangling-pointers" class="level2">
<h2 class="anchored" data-anchor-id="dangling-pointers">2. Dangling Pointers</h2>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb39-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb39-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-3">free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-4">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accessing freed memory</span></span></code></pre></div>
<p>Always set pointers to NULL after freeing them.</p>
</section>
<section id="uninitialized-pointers" class="level2">
<h2 class="anchored" data-anchor-id="uninitialized-pointers">3. Uninitialized Pointers</h2>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb40-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb40-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ptr doesn't point to valid memory yet</span></span></code></pre></div>
<p>Always initialize pointers before using them.</p>
</section>
<section id="memory-leaks" class="level2">
<h2 class="anchored" data-anchor-id="memory-leaks">4. Memory Leaks</h2>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb41-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> functionWithLeak<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb41-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ptr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb41-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Missing free(ptr) before function returns</span></span>
<span id="cb41-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Always free dynamically allocated memory when you’re done with it.</p>
</section>
<section id="modifying-string-literals" class="level2">
<h2 class="anchored" data-anchor-id="modifying-string-literals">5. Modifying String Literals</h2>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb42-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb42-2">str<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'J'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Trying to modify a string literal, which is undefined behavior</span></span></code></pre></div>
<p>Use character arrays if you need to modify strings.</p>
</section>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ol type="1">
<li><p><strong>Arrays and pointers are closely related</strong>: An array name is essentially a constant pointer to its first element.</p></li>
<li><p><strong>Array notation vs pointer notation</strong>:</p>
<ul>
<li><code>array[i]</code> is equivalent to <code>*(array + i)</code></li>
<li><code>&amp;array[i]</code> is equivalent to <code>(array + i)</code></li>
</ul></li>
<li><p><strong>Pointer arithmetic is scaled</strong>: When you add 1 to a pointer, it actually advances by the size of the data type it points to.</p></li>
<li><p><strong>Character arrays vs character pointers</strong>:</p>
<ul>
<li>Character arrays can be modified after initialization</li>
<li>Character pointers to string literals should not be modified</li>
</ul></li>
<li><p><strong>Arrays are always passed by reference</strong>: When you pass an array to a function, you’re actually passing a pointer.</p></li>
<li><p><strong>Dynamic memory allocation</strong>: Pointers are essential for dynamic memory allocation using <code>malloc()</code> and <code>free()</code>.</p></li>
</ol>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="whats-the-difference-between-int-arr-and-int-arr-in-function-parameters" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-int-arr-and-int-arr-in-function-parameters">1. What’s the difference between <code>int arr[]</code> and <code>int *arr</code> in function parameters?</h2>
<p>They are functionally equivalent in function parameters, but the array notation better communicates intent.</p>
</section>
<section id="can-i-change-where-an-array-points" class="level2">
<h2 class="anchored" data-anchor-id="can-i-change-where-an-array-points">2. Can I change where an array points?</h2>
<p>No, array names are constant pointers. You cannot reassign them.</p>
</section>
<section id="what-happens-if-i-access-an-array-out-of-bounds" class="level2">
<h2 class="anchored" data-anchor-id="what-happens-if-i-access-an-array-out-of-bounds">3. What happens if I access an array out of bounds?</h2>
<p>This leads to undefined behavior. Your program might crash, produce incorrect results, or appear to work normally but have hidden bugs.</p>
</section>
<section id="how-do-i-pass-a-2d-array-to-a-function" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-pass-a-2d-array-to-a-function">4. How do I pass a 2D array to a function?</h2>
<p>You need to specify at least the second dimension: <code>void func(int arr[][COLS], int rows)</code>.</p>
</section>
<section id="can-i-compare-two-arrays-using-the-operator" class="level2">
<h2 class="anchored" data-anchor-id="can-i-compare-two-arrays-using-the-operator">5. Can I compare two arrays using the <code>==</code> operator?</h2>
<p>No, you need to compare each element individually or use functions like <code>memcmp()</code> for byte-by-byte comparison.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Arrays and pointers are foundational concepts in C programming that work closely together. Understanding the relationship between arrays and pointers is crucial for writing efficient C code and avoiding common pitfalls.</p>
<p>Arrays provide a convenient way to store collections of data, while pointers give you the flexibility to manipulate memory directly. By mastering both concepts and how they interact, you’ll significantly improve your C programming skills.</p>
<p>Remember, practice is key! Try writing small programs that use arrays and pointers in different ways to reinforce your understanding.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://www.programiz.com/c-programming/c-pointers-arrays">C Pointers and Arrays - Programiz</a></li>
<li><a href="https://www.geeksforgeeks.org/array-of-pointers-in-c/">Array of Pointers in C - GeeksforGeeks</a></li>
<li><a href="https://www.oreilly.com/library/view/understanding-and-using/9781449344535/ch04.html">Understanding and Using C Pointers: Chapter 4. Pointers and Arrays - O’Reilly</a></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-12/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Pointers and Arrays in C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-12/</guid>
  <pubDate>Wed, 12 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create a Nested For Loop in R: A Complete Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-10/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>For loops are fundamental programming structures that allow you to repeat code operations a specific number of times. When you place one for loop inside another, you create what’s called a nested for loop. This structure is particularly useful in R programming when you need to work with multi-dimensional data or perform complex iterative tasks.</p>
<p>In this guide, we’ll explore how to create and use nested for loops in R with clear examples that even beginners can understand.</p>
</section>
<section id="what-is-a-nested-for-loop" class="level1">
<h1>What is a Nested For Loop?</h1>
<p>A nested for loop is simply one for loop placed inside another for loop. Here’s the basic structure:</p>
<ul>
<li>The outer loop runs first</li>
<li>For each iteration of the outer loop, the inner loop runs completely (all iterations)</li>
<li>Then the outer loop continues to its next iteration</li>
</ul>
<p>As described by Spark By Examples, “In each iteration of the outer loop, the inner loop will be re-started. The inner loop must finish all of its iterations before the outer loop can continue to its next iteration.”</p>
</section>
<section id="basic-syntax-of-nested-for-loops-in-r" class="level1">
<h1>Basic Syntax of Nested For Loops in R</h1>
<p>Here’s the general syntax for creating a nested for loop in R:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (outer_variable <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> outer_sequence) {</span>
<span id="cb1-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Outer loop code</span></span>
<span id="cb1-3">  </span>
<span id="cb1-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (inner_variable <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inner_sequence) {</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inner loop code</span></span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This code runs for each combination of outer_variable and inner_variable</span></span>
<span id="cb1-7">  }</span>
<span id="cb1-8">  </span>
<span id="cb1-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More outer loop code if needed</span></span>
<span id="cb1-10">}</span></code></pre></div>
</section>
<section id="simple-examples-of-nested-for-loops" class="level1">
<h1>Simple Examples of Nested For Loops</h1>
<section id="example-1-basic-nested-loop" class="level2">
<h2 class="anchored" data-anchor-id="example-1-basic-nested-loop">Example 1: Basic Nested Loop</h2>
<p>Let’s start with a simple example that prints all combinations of two sets of numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple nested for loop</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb2-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Outer loop (i):"</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inner loop (j):"</span>, j))</span>
<span id="cb2-5">  }</span>
<span id="cb2-6">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Outer loop (i): 1 Inner loop (j): 1"
[1] "Outer loop (i): 1 Inner loop (j): 2"
[1] "Outer loop (i): 2 Inner loop (j): 1"
[1] "Outer loop (i): 2 Inner loop (j): 2"
[1] "Outer loop (i): 3 Inner loop (j): 1"
[1] "Outer loop (i): 3 Inner loop (j): 2"</code></pre>
</div>
</div>
<p>This example shows how the inner loop completes all its iterations for each iteration of the outer loop.</p>
</section>
<section id="example-2-creating-a-multiplication-table" class="level2">
<h2 class="anchored" data-anchor-id="example-2-creating-a-multiplication-table">Example 2: Creating a Multiplication Table</h2>
<p>Nested for loops are perfect for creating tables of values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 5x5 multiplication table</span></span>
<span id="cb4-2">multiplication_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb4-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb4-6">    multiplication_table[i, j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> j</span>
<span id="cb4-7">  }</span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(multiplication_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    1    2    3    4    5
[2,]    2    4    6    8   10
[3,]    3    6    9   12   15
[4,]    4    8   12   16   20
[5,]    5   10   15   20   25</code></pre>
</div>
</div>
</section>
</section>
<section id="practical-applications-of-nested-for-loops" class="level1">
<h1>Practical Applications of Nested For Loops</h1>
<section id="example-3-working-with-matrices" class="level2">
<h2 class="anchored" data-anchor-id="example-3-working-with-matrices">Example 3: Working with Matrices</h2>
<p>Nested for loops are particularly useful when you need to manipulate matrices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 3x3 matrix</span></span>
<span id="cb6-2">my_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original matrix:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Original matrix:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Double the value of each element</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (row <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(my_matrix)) {</span>
<span id="cb10-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(my_matrix)) {</span>
<span id="cb10-4">    my_matrix[row, col] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_matrix[row, col] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-5">  }</span>
<span id="cb10-6">}</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Matrix after doubling each element:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Matrix after doubling each element:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    2    8   14
[2,]    4   10   16
[3,]    6   12   18</code></pre>
</div>
</div>
</section>
<section id="example-4-creating-a-custom-correlation-matrix" class="level2">
<h2 class="anchored" data-anchor-id="example-4-creating-a-custom-correlation-matrix">Example 4: Creating a Custom Correlation Matrix</h2>
<p>Let’s create a correlation matrix using nested loops:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb14-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb14-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sample data:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sample data:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]       [,3]       [,4]
[1,] -0.56047565  1.7150650  1.2240818  1.7869131
[2,] -0.23017749  0.4609162  0.3598138  0.4978505
[3,]  1.55870831 -1.2650612  0.4007715 -1.9666172
[4,]  0.07050839 -0.6868529  0.1106827  0.7013559
[5,]  0.12928774 -0.4456620 -0.5558411 -0.4727914</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create correlation matrix using nested loops</span></span>
<span id="cb18-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data)</span>
<span id="cb18-3">cor_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span>n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span>n)</span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb18-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n) {</span>
<span id="cb18-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate correlation between rows i and j</span></span>
<span id="cb18-8">    cor_matrix[i, j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor</span>(data[i,], data[j,])</span>
<span id="cb18-9">  }</span>
<span id="cb18-10">}</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Correlation matrix:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Correlation matrix:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cor_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]         [,2]       [,3]         [,4]        [,5]
[1,]  1.00000000  0.997940573 -0.9022752 -0.017392537 -0.93081902
[2,]  0.99794057  1.000000000 -0.8783591  0.005060125 -0.95161251
[3,] -0.90227516 -0.878359081  1.0000000 -0.107787642  0.69451633
[4,] -0.01739254  0.005060125 -0.1077876  1.000000000 -0.02257276
[5,] -0.93081902 -0.951612512  0.6945163 -0.022572760  1.00000000</code></pre>
</div>
</div>
</section>
</section>
<section id="memory-pre-allocation-for-efficiency" class="level1">
<h1>Memory Pre-allocation for Efficiency</h1>
<p>An important practice when using nested for loops is to pre-allocate memory for your results:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Inefficient approach (without pre-allocation)</span></span>
<span id="cb22-2">result_inefficient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb22-4">  result_inefficient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(result_inefficient, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-5">}</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Efficient approach (with pre-allocation)</span></span>
<span id="cb22-8">result_efficient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb22-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb22-10">  result_efficient[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb22-11">}</span></code></pre></div>
<p>Pre-allocating memory can significantly improve performance, especially with large datasets.</p>
</section>
<section id="example-5-simulating-data-with-nested-for-loops" class="level1">
<h1>Example 5: Simulating Data with Nested For Loops</h1>
<p>Here’s an example of using nested loops to simulate data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty dataframe with 101 rows and 10 columns</span></span>
<span id="cb23-2">simulated_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set initial values for the first row</span></span>
<span id="cb23-5">simulated_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use nested loops to fill the remaining rows</span></span>
<span id="cb23-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (col <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb23-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (row <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>) {</span>
<span id="cb23-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each new value depends on the previous value plus some random noise</span></span>
<span id="cb23-11">    simulated_data[row, col] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> simulated_data[row<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>, col] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb23-12">  }</span>
<span id="cb23-13">}</span>
<span id="cb23-14"></span>
<span id="cb23-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at the first few rows</span></span>
<span id="cb23-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(simulated_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           X1        X2        X3        X4        X5        X6         X7
1  0.14280002 0.4145463 0.4137243 0.3688455 0.1524447 0.1388061 0.23303410
2 -0.02586931 0.3493513 0.4196993 0.4372200 0.1074109 0.1938105 0.32715068
3  0.05790940 0.3728900 0.3492397 0.4311378 0.3471561 0.3174780 0.34420949
4  0.07324671 0.3806861 0.2775179 0.4944339 0.3482691 0.3313878 0.23785970
5 -0.04056699 0.2845004 0.3659829 0.6279856 0.5116259 0.3724153 0.09905479
6  0.08481451 0.2773696 0.2644236 0.6287146 0.3677752 0.3165696 0.30772654
         X8          X9       X10
1 0.4659625  0.26597264 0.8578277
2 0.4909872  0.20678343 0.9896098
3 0.5473740  0.16994817 0.9800610
4 0.5663166 -0.01531351 0.9996888
5 0.4930312 -0.13227504 1.2484886
6 0.5916678 -0.27647850 1.2915985</code></pre>
</div>
</div>
</section>
<section id="working-with-datasets" class="level1">
<h1>Working with Datasets</h1>
<p>Nested for loops are useful for working with real datasets when you need to perform operations based on multiple factors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample dataset</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb25-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb25-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb25-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subgroup =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb25-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb25-7">)</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate group and subgroup means</span></span>
<span id="cb25-10">group_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group)</span>
<span id="cb25-11">subgroup_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>subgroup)</span>
<span id="cb25-12"></span>
<span id="cb25-13">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(group_levels), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(subgroup_levels))</span>
<span id="cb25-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(result) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> group_levels</span>
<span id="cb25-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(result) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> subgroup_levels</span>
<span id="cb25-16"></span>
<span id="cb25-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (g <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(group_levels)) {</span>
<span id="cb25-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (s <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(subgroup_levels)) {</span>
<span id="cb25-19">    current_group <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> group_levels[g]</span>
<span id="cb25-20">    current_subgroup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> subgroup_levels[s]</span>
<span id="cb25-21">    </span>
<span id="cb25-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find relevant data and calculate mean</span></span>
<span id="cb25-23">    subset_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> current_group <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>subgroup <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> current_subgroup, ]</span>
<span id="cb25-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(subset_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb25-25">      result[g, s] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(subset_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value)</span>
<span id="cb25-26">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb25-27">      result[g, s] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb25-28">    }</span>
<span id="cb25-29">  }</span>
<span id="cb25-30">}</span>
<span id="cb25-31"></span>
<span id="cb25-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         1        2        3        4
a 91.48060 93.70754 28.61395 83.04476
b 64.17455 51.90959 73.65883 13.46666
c 65.69923 70.50648 45.77418 71.91123</code></pre>
</div>
</div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now, try creating a nested for loop that:</p>
<ol type="1">
<li>Creates a 4x4 matrix filled with zeros</li>
<li>Uses nested for loops to fill only the diagonal elements with the value 1</li>
<li>Prints the result</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 4x4 matrix filled with zeros</span></span>
<span id="cb27-2">my_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use nested for loops to fill diagonal elements with 1</span></span>
<span id="cb27-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb27-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb27-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> j) {</span>
<span id="cb27-8">      my_matrix[i, j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb27-9">    }</span>
<span id="cb27-10">  }</span>
<span id="cb27-11">}</span>
<span id="cb27-12"></span>
<span id="cb27-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb27-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1</code></pre>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li>Nested for loops in R consist of one for loop placed inside another</li>
<li>The inner loop completes all iterations for each iteration of the outer loop</li>
<li>Nested for loops are particularly useful for working with multi-dimensional data like matrices</li>
<li>Always pre-allocate memory for efficiency when using loops with large datasets</li>
<li>Nested for loops are considered a foundation skill in R programming</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Nested for loops are a powerful tool in R programming that allow you to work with multi-dimensional data structures and perform complex iterative operations. By placing one for loop inside another, you can efficiently execute code for multiple combinations of variables.</p>
<p>Remember that while loops are useful, they can sometimes be replaced with more efficient vectorized operations in R. For large datasets, consider optimizing your code or using parallel processing techniques.</p>
<p>Now that you understand the basics of nested for loops in R, you can start implementing them in your own projects!</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="when-should-i-use-nested-for-loops-instead-of-vectorized-operations" class="level2">
<h2 class="anchored" data-anchor-id="when-should-i-use-nested-for-loops-instead-of-vectorized-operations">1. When should I use nested for loops instead of vectorized operations?</h2>
<p>Use nested for loops when you need fine-grained control over iterations or when working with complex data structures that don’t easily fit vectorized operations.</p>
</section>
<section id="are-there-performance-concerns-with-nested-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="are-there-performance-concerns-with-nested-for-loops">2. Are there performance concerns with nested for loops?</h2>
<p>Yes, nested for loops can be slower than vectorized operations in R. Always pre-allocate memory and consider alternative approaches for large datasets.</p>
</section>
<section id="how-many-levels-of-nesting-can-i-use" class="level2">
<h2 class="anchored" data-anchor-id="how-many-levels-of-nesting-can-i-use">3. How many levels of nesting can I use?</h2>
<p>Technically, there’s no limit, but code readability decreases with each level. More than three levels of nesting often indicates a need for refactoring.</p>
</section>
<section id="can-i-break-out-of-nested-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="can-i-break-out-of-nested-for-loops">4. Can I break out of nested for loops?</h2>
<p>Yes, you can use the <code>break</code> statement to exit the current loop, but it only breaks out of the innermost loop containing it.</p>
</section>
<section id="how-do-i-handle-errors-inside-nested-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-handle-errors-inside-nested-for-loops">5. How do I handle errors inside nested for loops?</h2>
<p>You can use <code>tryCatch()</code> inside your loops to handle errors without stopping the entire operation.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://www.geeksforgeeks.org/how-to-create-a-nested-for-loop-in-r/">How to Create a Nested For Loop in R? - GeeksforGeeks</a></li>
<li><a href="https://sparkbyexamples.com/r-programming/nested-for-loop-in-r/">Nested For Loop in R - Spark By {Examples}</a></li>
<li><a href="https://scales.arabpsychology.com/stats/how-to-create-a-nested-for-loop-in-r-including-examples/">How to Create a Nested For Loop in R (Including Examples)</a></li>
<li><a href="https://www.statology.org/nested-for-loop-in-r/">Nested For Loop in R | How Nested For Loop Works in R? - Statology</a></li>
</ul>
<p>I hope you found this guide helpful! If you have any questions about nested for loops in R, feel free to experiment with the examples provided.</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-10/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Loops with R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-10/</guid>
  <pubDate>Mon, 10 Mar 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Top-Down Design in Linux: Simplifying Complex Programming Tasks</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-07/</link>
  <description><![CDATA[ 





<p><em>Author’s Note: I’m learning Linux as I write this series, so there may be mistakes along the way. If you spot any errors or have suggestions for improvement, please share them in the comments. We’re on this learning journey together!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever stared at a complex programming task and felt completely overwhelmed? You know what needs to be done, but the path from start to finish seems impossibly complicated. If so, you’re not alone! This is a common challenge for all programmers, especially those new to Linux.</p>
<p>In this article, we’ll explore a powerful problem-solving approach called <strong>top-down design</strong> that’s particularly well-suited to Linux shell programming. You’ll learn how to break daunting tasks into manageable pieces, use shell functions to organize your code, and create scripts that are easier to write, debug, and maintain.</p>
<p>By the end of this guide, you’ll have practical knowledge of: - The fundamentals of top-down design philosophy - How to implement shell functions in bash scripts - Working with local variables for modular code - Best practices for script development and testing</p>
<p>Let’s dive in and demystify top-down design in Linux!</p>
</section>
<section id="what-is-top-down-design" class="level1">
<h1>What Is Top-Down Design?</h1>
<p>Top-down design is a programming approach that starts with the big picture and progressively breaks it down into smaller, more manageable components. Think of it as tackling a complex problem by dividing it into several simpler problems, then solving each one separately.</p>
<section id="the-everyday-analogy" class="level2">
<h2 class="anchored" data-anchor-id="the-everyday-analogy">The Everyday Analogy</h2>
<p>To understand this concept, let’s consider an everyday task: going to the market to buy food. At the highest level, we might describe the process as:</p>
<ol type="1">
<li>Get in car</li>
<li>Drive to market</li>
<li>Park car</li>
<li>Enter market</li>
<li>Purchase food</li>
<li>Return to car</li>
<li>Drive home</li>
<li>Park car</li>
<li>Enter house</li>
</ol>
<p>But each of these steps can be broken down further. For example, “Park car” could be divided into:</p>
<ol type="1">
<li>Find parking space</li>
<li>Drive car into space</li>
<li>Turn off motor</li>
<li>Set parking brake</li>
<li>Exit car</li>
<li>Lock car</li>
</ol>
<p>And we could continue breaking things down even further. “Turn off motor” might include “Turn off ignition,” “Remove ignition key,” and so on.</p>
<p>This is exactly how top-down design works in programming. You start with the overall task and keep breaking it down until each subtask is simple enough to be easily implemented.</p>
</section>
</section>
<section id="why-top-down-design-works-well-for-linux-shell-programming" class="level1">
<h1>Why Top-Down Design Works Well for Linux Shell Programming</h1>
<p>Linux shell programming is particularly suited to top-down design for several reasons:</p>
<ol type="1">
<li><strong>Shell scripts often coordinate system commands</strong> - Much like our “going to market” example coordinates a series of activities</li>
<li><strong>Linux philosophy favors simple, focused tools</strong> - Each doing one thing well (similar to our detailed subtasks)</li>
<li><strong>Shell functions provide a natural way to implement subtasks</strong> - Making code organization straightforward</li>
</ol>
<p>Let’s see how to apply this approach in a real Linux shell script!</p>
</section>
<section id="shell-functions-the-building-blocks-of-top-down-design" class="level1">
<h1>Shell Functions: The Building Blocks of Top-Down Design</h1>
<p>Shell functions are “mini-scripts” within your main script. They serve as self-contained units that perform specific tasks, making them perfect for implementing the subtasks identified through top-down design.</p>
<section id="basic-syntax-of-shell-functions" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-of-shell-functions">Basic Syntax of Shell Functions</h2>
<p>There are two equivalent ways to define a shell function in bash:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> name</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb1-3">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">commands</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb1-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">commands</span></span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb1-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>Both forms work exactly the same way - choose whichever style you prefer for consistency.</p>
</section>
<section id="a-simple-function-example" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-function-example">A Simple Function Example</h2>
<p>Let’s see a basic example of how functions work:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shell function demo</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"> say_hello</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Main program starts here</span></span>
<span id="cb2-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting program"</span></span>
<span id="cb2-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">say_hello</span></span>
<span id="cb2-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Program finished"</span></span></code></pre></div>
<p>When you run this script, it will output:</p>
<pre><code>Starting program
Hello, world!
Program finished</code></pre>
<p>The execution flow is straightforward: 1. The shell reads the entire script but doesn’t execute the function definition 2. Execution begins with the first command after the function definition 3. When the function is called, execution jumps to the function body 4. After the function completes (or encounters <code>return</code>), execution resumes where it left off</p>
</section>
</section>
<section id="practical-application-building-a-system-information-page" class="level1">
<h1>Practical Application: Building a System Information Page</h1>
<p>Let’s apply top-down design to a real-world example: creating a script that generates an HTML report about your system.</p>
<section id="step-1-define-the-high-level-tasks" class="level2">
<h2 class="anchored" data-anchor-id="step-1-define-the-high-level-tasks">Step 1: Define the High-Level Tasks</h2>
<p>At the highest level, our script needs to: 1. Create the HTML document structure 2. Generate a title and header 3. Report system uptime 4. Report disk space usage 5. Report home directory space usage 6. Close the HTML document</p>
</section>
<section id="step-2-create-the-initial-script-structure" class="level2">
<h2 class="anchored" data-anchor-id="step-2-create-the-initial-script-structure">Step 2: Create the Initial Script Structure</h2>
<p>Using top-down design, we’ll first create a script with “stub” functions - empty placeholders that we’ll fill in later:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Program to output a system information page</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TITLE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"System Information Report For </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOSTNAME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CURRENT_TIME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%x %r %Z"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TIMESTAMP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generated </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CURRENT_TIME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, by </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_uptime ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_disk_space ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb4-15"></span>
<span id="cb4-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_home_space ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt; _EOF_</span></span>
<span id="cb4-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;HTML&gt;</span></span>
<span id="cb4-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;HEAD&gt;</span></span>
<span id="cb4-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;TITLE&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TITLE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/TITLE&gt;</span></span>
<span id="cb4-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/HEAD&gt;</span></span>
<span id="cb4-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;BODY&gt;</span></span>
<span id="cb4-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;H1&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TITLE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/H1&gt;</span></span>
<span id="cb4-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;P&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TIMESTAMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/P&gt;</span></span>
<span id="cb4-28"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">report_uptime</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-29"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">report_disk_space</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-30"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">report_home_space</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/BODY&gt;</span></span>
<span id="cb4-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/HTML&gt;</span></span>
<span id="cb4-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">_EOF_</span></span></code></pre></div>
<p>This script outlines the overall structure but doesn’t yet implement the individual information-gathering functions.</p>
</section>
<section id="step-3-implement-each-function" class="level2">
<h2 class="anchored" data-anchor-id="step-3-implement-each-function">Step 3: Implement Each Function</h2>
<p>Now, we’ll implement each function one by one:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_uptime ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb5-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;- _EOF_</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;H2&gt;System Uptime&lt;/H2&gt;</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;PRE&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uptime</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/PRE&gt;</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    _EOF_</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">report_disk_space () {</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cat &lt;&lt;- _EOF_</span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;H2&gt;Disk Space Utilization&lt;/H2&gt;</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;PRE&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/PRE&gt;</span></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    _EOF_</span></span>
<span id="cb5-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return</span></span>
<span id="cb5-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">report_home_space () {</span></span>
<span id="cb5-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cat &lt;&lt;- _EOF_</span></span>
<span id="cb5-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;H2&gt;Home Space Utilization&lt;/H2&gt;</span></span>
<span id="cb5-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;PRE&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sh</span> /home/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/PRE&gt;</span></span>
<span id="cb5-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    _EOF_</span></span>
<span id="cb5-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return</span></span>
<span id="cb5-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Each function now handles a specific part of the report generation. Let’s break down what’s happening:</p>
<ol type="1">
<li><code>report_uptime</code> uses the <code>uptime</code> command to show system uptime</li>
<li><code>report_disk_space</code> uses <code>df -h</code> to show disk usage in human-readable format</li>
<li><code>report_home_space</code> uses <code>du -sh</code> to show home directory sizes</li>
</ol>
</section>
<section id="step-4-test-the-script" class="level2">
<h2 class="anchored" data-anchor-id="step-4-test-the-script">Step 4: Test the Script</h2>
<p>When we run this script, it produces a complete HTML document with system information sections. Each function contributes its part to the final output.</p>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now that you understand the basics of top-down design and shell functions, let’s try a small exercise. Imagine you want to create a script that backs up important files. Break down this task into high-level steps, then further break down one of those steps.</p>
<details>
<summary>
See Solution
</summary>
<p>High-level steps for a backup script: 1. Define which files/directories to back up 2. Create a timestamp for the backup 3. Create a backup destination 4. Copy files to the backup location 5. Verify the backup completed successfully 6. Log the backup details</p>
<p>Breaking down step 4 (Copy files): 1. Check if source files/directories exist 2. Create target directory structure if needed 3. Copy files preserving permissions 4. Handle errors if files cannot be copied</p>
<p>This could be implemented with shell functions:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backup_files ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if source exists</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-e</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$SOURCE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb6-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Source </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$SOURCE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist"</span></span>
<span id="cb6-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb6-9">    </span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create target directory if needed</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DEST</span></span>
<span id="cb6-12">    </span>
<span id="cb6-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy files with permissions</span></span>
<span id="cb6-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cp</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rp</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$SOURCE</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$DEST</span></span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for errors</span></span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[[</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$?</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-eq</span> 0 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]];</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">then</span></span>
<span id="cb6-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Backup completed successfully"</span></span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span></span>
<span id="cb6-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Backup failed"</span></span>
<span id="cb6-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb6-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">fi</span></span>
<span id="cb6-23">    </span>
<span id="cb6-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</section>
<section id="the-power-of-local-variables-in-shell-functions" class="level1">
<h1>The Power of Local Variables in Shell Functions</h1>
<p>One key aspect of effective top-down design is the independence of each component. In shell scripts, we achieve this using local variables within our functions.</p>
<section id="global-vs.-local-variables" class="level2">
<h2 class="anchored" data-anchor-id="global-vs.-local-variables">Global vs.&nbsp;Local Variables</h2>
<p>By default, variables in bash scripts are global, meaning they can be accessed from anywhere in the script. While convenient, this can lead to problems when different parts of your script unintentionally interfere with each other.</p>
<p>Local variables solve this problem by limiting a variable’s scope to the function in which it’s defined. This prevents functions from accidentally modifying variables used elsewhere.</p>
</section>
<section id="defining-local-variables" class="level2">
<h2 class="anchored" data-anchor-id="defining-local-variables">Defining Local Variables</h2>
<p>To create a local variable, simply prefix the variable name with the <code>local</code> keyword:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_function ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb7-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">my_variable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is local"</span></span>
<span id="cb7-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inside function: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_variable</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">my_variable</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is global"</span></span>
<span id="cb7-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before function: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_variable</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb7-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">my_function</span></span>
<span id="cb7-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After function: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$my_variable</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Running this script would output:</p>
<pre><code>Before function: This is global
Inside function: This is local
After function: This is global</code></pre>
<p>The function’s local variable doesn’t affect the global variable with the same name!</p>
</section>
<section id="practical-example-enhanced-home-space-report" class="level2">
<h2 class="anchored" data-anchor-id="practical-example-enhanced-home-space-report">Practical Example: Enhanced Home Space Report</h2>
<p>Let’s improve our <code>report_home_space</code> function using local variables:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_home_space ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb9-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">home_dirs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-d</span> /home/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">total_size</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>0</span>
<span id="cb9-4">    </span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;- _EOF_</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;H2&gt;Home Space Utilization&lt;/H2&gt;</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;PRE&gt;</span></span>
<span id="cb9-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    _EOF_</span></span>
<span id="cb9-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    for dir in </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$home_dirs</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">; do</span></span>
<span id="cb9-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        local user=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">basename</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        local size=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">du</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$dir</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f1</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb9-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        echo "User </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$user</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$size</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        # In a real script, we'd add code to calculate total_size</span></span>
<span id="cb9-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    done</span></span>
<span id="cb9-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo "&lt;/PRE&gt;"</span></span>
<span id="cb9-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return</span></span>
<span id="cb9-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>By using local variables, this function won’t interfere with any other part of the script that might use variables with the same names.</p>
</section>
</section>
<section id="keeping-scripts-running-during-development" class="level1">
<h1>Keeping Scripts Running During Development</h1>
<p>When developing using top-down design, it’s important to keep your script in a runnable state. This allows you to test frequently and catch errors early.</p>
<section id="using-stub-functions-during-development" class="level2">
<h2 class="anchored" data-anchor-id="using-stub-functions-during-development">Using Stub Functions During Development</h2>
<p>Remember those empty functions we created earlier? These are called “stubs” - placeholder functions that do nothing yet but allow the script to run without errors.</p>
<p>As you develop, it’s helpful to add feedback to your stubs:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">report_uptime ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb10-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function report_uptime executed."</span></span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>This way, when you run your script, you can confirm that the function is being called correctly, even before implementing its actual functionality.</p>
</section>
<section id="incremental-development" class="level2">
<h2 class="anchored" data-anchor-id="incremental-development">Incremental Development</h2>
<p>The top-down approach naturally leads to incremental development:</p>
<ol type="1">
<li>First, outline the overall program structure</li>
<li>Create stub functions for each component</li>
<li>Test that the basic structure works</li>
<li>Implement and test each function one by one</li>
<li>Refine and integrate the functions</li>
</ol>
<p>This methodical approach makes debugging much easier since you’re only changing a small part of the code at a time.</p>
</section>
</section>
<section id="shell-functions-beyond-scripts" class="level1">
<h1>Shell Functions Beyond Scripts</h1>
<p>Shell functions aren’t limited to scripts - you can also use them in your interactive shell sessions!</p>
<section id="adding-functions-to-your-.bashrc" class="level2">
<h2 class="anchored" data-anchor-id="adding-functions-to-your-.bashrc">Adding Functions to Your .bashrc</h2>
<p>You can define useful functions in your <code>~/.bashrc</code> file to create custom commands:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add to your .bashrc</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ds ()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">{</span></span>
<span id="cb11-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disk Space Utilization For </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOSTNAME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb11-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">}</span></span></code></pre></div>
<p>After sourcing your <code>.bashrc</code> or opening a new terminal, you can simply type <code>ds</code> to check disk space - much more convenient than remembering the full <code>df -h</code> command and its options.</p>
</section>
<section id="functions-vs.-aliases" class="level2">
<h2 class="anchored" data-anchor-id="functions-vs.-aliases">Functions vs.&nbsp;Aliases</h2>
<p>While bash aliases are useful for simple command substitutions, shell functions offer several advantages:</p>
<ol type="1">
<li>Functions can contain multiple commands</li>
<li>Functions can use control structures (if/else, loops)</li>
<li>Functions can process arguments more flexibly</li>
<li>Functions can use local variables</li>
</ol>
<p>When deciding between an alias and a function, choose a function if your command needs any logic or complexity.</p>
</section>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><strong>Top-down design</strong> breaks complex problems into manageable subtasks, making programming more approachable</li>
<li><strong>Shell functions</strong> create modular components that implement individual subtasks</li>
<li><strong>Local variables</strong> make functions independent and reusable</li>
<li><strong>Stub functions</strong> allow for incremental development and testing</li>
<li><strong>Development best practices</strong> include keeping scripts runnable and testing frequently</li>
<li><strong>Shell functions in .bashrc</strong> extend their usefulness beyond scripts</li>
</ul>
</section>
<section id="troubleshooting-common-issues" class="level1">
<h1>Troubleshooting Common Issues</h1>
<section id="function-not-found" class="level2">
<h2 class="anchored" data-anchor-id="function-not-found">Function Not Found</h2>
<p>If you see an error like <code>function_name: command not found</code>, check that: 1. The function is defined before it’s called in the script 2. There are no syntax errors in the function definition 3. The function name is spelled correctly</p>
</section>
<section id="unexpected-variable-values" class="level2">
<h2 class="anchored" data-anchor-id="unexpected-variable-values">Unexpected Variable Values</h2>
<p>If variables aren’t behaving as expected: 1. Check if you meant to use a local variable but forgot the <code>local</code> keyword 2. Verify variable names for typos 3. Use <code>echo</code> statements to debug variable values</p>
</section>
<section id="script-works-differently-as-root" class="level2">
<h2 class="anchored" data-anchor-id="script-works-differently-as-root">Script Works Differently As Root</h2>
<p>Some commands (like the <code>du</code> example in <code>report_home_space</code>) may behave differently depending on user permissions. Always consider how your script will behave when run by different users.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Top-down design is a powerful approach for Linux shell programming that helps you tackle complex problems systematically. By breaking large tasks into small, manageable functions and using local variables to keep those functions independent, you can create scripts that are easier to write, debug, and maintain.</p>
<p>The next time you face a daunting programming task, remember to start by thinking about the big picture, then progressively refine each component until the entire solution becomes clear. This methodical approach will serve you well not only in Linux shell programming but in many other programming languages and environments.</p>
<p>Ready to keep learning? In the next article, we’ll explore how to make our scripts more adaptable by responding to different user privileges and system environments.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://en.wikipedia.org/wiki/Top-down_design">Wikipedia: Top-down Design</a></li>
<li><a href="https://en.wikipedia.org/wiki/Subroutines">Wikipedia: Subroutines</a></li>
<li><a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Functions.html">GNU Bash Manual: Shell Functions</a></li>
<li><a href="https://tldp.org/LDP/abs/html/functions.html">Linux Documentation Project: Advanced Bash-Scripting Guide</a></li>
<li><a href="https://help.ubuntu.com/community/Beginners/BashScripting">Ubuntu Documentation: Shell Scripting</a></li>
</ol>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="what-is-the-main-benefit-of-top-down-design-for-beginners" class="level2">
<h2 class="anchored" data-anchor-id="what-is-the-main-benefit-of-top-down-design-for-beginners">What is the main benefit of top-down design for beginners?</h2>
<p>Top-down design helps beginners by breaking overwhelming tasks into smaller, more manageable pieces. This makes it easier to know where to start and how to make progress on complex problems.</p>
</section>
<section id="can-i-use-shell-functions-in-any-linux-shell" class="level2">
<h2 class="anchored" data-anchor-id="can-i-use-shell-functions-in-any-linux-shell">Can I use shell functions in any Linux shell?</h2>
<p>While the examples in this article use bash syntax, most shells support functions, though the exact syntax may vary. Bash, zsh, ksh, and many others all support shell functions.</p>
</section>
<section id="how-do-i-decide-what-should-be-its-own-function" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-decide-what-should-be-its-own-function">How do I decide what should be its own function?</h2>
<p>A good rule of thumb is to create a function when a task is logically separate, might be reused, or makes your script more readable. If a section of code is longer than 15-20 lines or performs a distinct operation, it’s often a good candidate for a function.</p>
</section>
<section id="how-can-i-debug-shell-functions" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-debug-shell-functions">How can I debug shell functions?</h2>
<p>You can add <code>echo</code> statements to track execution flow, use <code>set -x</code> to enable bash trace mode, or implement error checking with conditional statements and meaningful error messages.</p>
</section>
<section id="are-there-limits-to-how-many-functions-i-can-have-in-a-script" class="level2">
<h2 class="anchored" data-anchor-id="are-there-limits-to-how-many-functions-i-can-have-in-a-script">Are there limits to how many functions I can have in a script?</h2>
<p>While technically there’s no hard limit, script readability and maintainability should guide you. If your script has dozens of functions, consider whether it should be split into multiple scripts.</p>
<hr>
<p><em>Did you find this guide to top-down design in Linux helpful? Share your thoughts and experiences in the comments below, or connect with me from one of the below to continue the conversation!</em></p>
<hr>
<p>Happy Coding! 🚀</p>
</section>
<section id="top-down-design-in-linux" class="level2">
<h2 class="anchored" data-anchor-id="top-down-design-in-linux"><img src="https://www.spsanderson.com/steveondata/posts/2025-03-07/todays_post.png" class="img-fluid" alt="Top Down Design in Linux"></h2>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-07/</guid>
  <pubDate>Fri, 07 Mar 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Complete Guide to C Pointers: Understanding Memory and Dereferencing</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-05/</link>
  <description><![CDATA[ 





<p><em>Author’s Note: As I write this series, I want to share that I am still learning along the way. There may be some mistakes or inaccuracies in the content, and I truly appreciate your understanding. If you notice any errors or have corrections to share, please don’t hesitate to comment with the corrected information. Your feedback is invaluable as I strive to improve and provide the best content possible. Thank you for your support!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’re beginning your journey in C programming, you’re about to encounter one of the language’s most powerful yet puzzling features: pointers. Pointers are often considered a stumbling block for beginners, but they’re also what gives C its remarkable efficiency and flexibility. This comprehensive guide will demystify pointers, explain memory addresses, show you how to define pointer variables, and teach you the art of dereferencing—all in a way that’s accessible to beginners.</p>
<p>When programmers first learn about pointers, the common reaction is “What’s the point?” (Yes, that pun was intended!) By the end of this article, you’ll not only understand pointers but also appreciate why they’re central to effective C programming.</p>
</section>
<section id="what-are-pointers-and-why-should-you-care" class="level1">
<h1>What Are Pointers and Why Should You Care?</h1>
<p>Pointers are variables that store memory addresses of other variables rather than storing actual data values. Think of them as signposts that point to where your data lives in the computer’s memory.</p>
<p>Why are pointers important? Here are a few reasons:</p>
<ul>
<li>They allow for dynamic memory allocation</li>
<li>They enable efficient handling of large data structures</li>
<li>They make it possible to modify function arguments permanently</li>
<li>They form the foundation of data structures like linked lists and trees</li>
<li>They provide a way to access hardware directly</li>
</ul>
<p>As Donald Knuth, one of computer science’s pioneers, stated: “I do consider assignment statements and pointer variables to be among computer science’s most valuable treasures.”</p>
</section>
<section id="understanding-memory-addresses" class="level1">
<h1>Understanding Memory Addresses</h1>
<section id="how-computer-memory-works" class="level2">
<h2 class="anchored" data-anchor-id="how-computer-memory-works">How Computer Memory Works</h2>
<p>Your computer contains memory that stores both your executing program and the variables it uses. Each location in memory has a unique address, similar to how each house on a street has a different address. These addresses are typically represented as hexadecimal numbers (like 0x7FFEE9215A0).</p>
<p>Memory can be visualized as one enormous array, with each address being a different subscript and each memory location being a different array element.</p>
</section>
<section id="variables-and-memory-addresses" class="level2">
<h2 class="anchored" data-anchor-id="variables-and-memory-addresses">Variables and Memory Addresses</h2>
<p>When you define a variable in C, the compiler finds an unused location in memory and attaches your chosen name to that memory location. This abstraction is incredibly useful—instead of remembering that an order number is stored at memory address 34532, you only need to remember the name <code>orderNum</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> orderNum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// C finds a memory location and associates it with "orderNum"</span></span></code></pre></div>
<p>Behind the scenes, this variable exists at a specific memory address, which is handled by the compiler.</p>
</section>
</section>
<section id="the-address-of-operator" class="level1">
<h1>The Address-of Operator (&amp;)</h1>
<p>To access the memory address where a variable is stored, C provides the address-of operator: <code>&amp;</code>. When placed before a variable name, it returns the memory address of that variable.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-2">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The value of age is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: 25</span></span>
<span id="cb2-3">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The address of age is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%p\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints something like: 0x7ffeeb2adabc</span></span></code></pre></div>
<p>If you’ve used <code>scanf()</code> before, you’ve already been using the address-of operator:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-2">scanf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The &amp; tells scanf() where to store the input</span></span></code></pre></div>
<p>Without the <code>&amp;</code>, <code>scanf()</code> wouldn’t know where to put the value it reads. It needs the address of the variable, not the value (which is undefined at that point anyway).</p>
</section>
<section id="defining-pointer-variables" class="level1">
<h1>Defining Pointer Variables</h1>
<p>A pointer variable is defined by including an asterisk (<code>*</code>) between the data type and the variable name:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A pointer to an integer</span></span>
<span id="cb4-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pValue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A pointer to a float</span></span>
<span id="cb4-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pCharacter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A pointer to a character</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note:</strong> The naming convention of prefixing pointer variables with ‘p’ is common but not required. It simply helps programmers visually identify pointer variables in their code.</p>
</blockquote>
<p>A pointer must be associated with a specific data type (int, float, char, etc.) because:</p>
<ol type="1">
<li>Different data types occupy different amounts of memory</li>
<li>The compiler needs to know how to interpret the data at the pointed address</li>
<li>It helps prevent type-related errors</li>
</ol>
</section>
<section id="initializing-pointers" class="level1">
<h1>Initializing Pointers</h1>
<p>A newly defined pointer doesn’t automatically point to anything useful. It contains a garbage value until you initialize it. An uninitialized pointer is dangerous to use.</p>
<p>To initialize a pointer, you assign it the address of a variable using the address-of operator:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Regular integer variable</span></span>
<span id="cb5-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pScore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// pScore now points to score</span></span></code></pre></div>
<p>Here’s what’s happening in memory:</p>
<pre><code>Memory Address:  1000        2000
                +----------+----------+
                |   95     |  1000    |
                +----------+----------+
Variable:        score      pScore</code></pre>
<p>The integer variable <code>score</code> contains the value 95 and might be stored at memory address 1000. The pointer variable <code>pScore</code> contains the value 1000 (the address of <code>score</code>) and is stored at its own location (address 2000 in this example).</p>
<p>You can also declare a pointer first and assign it later:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pCount<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Declare pointer</span></span>
<span id="cb7-3">pCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Assign address of count to pCount</span></span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Warning:</strong> Never try to assign the address of one type of variable to a pointer of a different type. Always match the pointer type with the variable type it points to.</p>
</blockquote>
</section>
<section id="the-dereferencing-operator" class="level1">
<h1>The Dereferencing Operator (*)</h1>
<p>The true power of pointers comes from the ability to access and modify the value that a pointer points to. This is done using the dereferencing operator, which is the asterisk (<code>*</code>).</p>
<p>When used in front of a pointer variable, the asterisk says “give me the value at the address stored in this pointer”:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb8-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pNumber <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-3"></span>
<span id="cb8-4">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pNumber<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: 42</span></span></code></pre></div>
<section id="the-dual-role-of-the-asterisk" class="level2">
<h2 class="anchored" data-anchor-id="the-dual-role-of-the-asterisk">The Dual Role of the Asterisk (*)</h2>
<p>The asterisk symbol has two distinct meanings in C:</p>
<ol type="1">
<li>When used in a variable declaration, it creates a pointer variable</li>
<li>When used with an existing pointer variable, it dereferences the pointer to access the value</li>
</ol>
<p>This dual role can be confusing at first, but with practice, it becomes clear from the context.</p>
</section>
<section id="modifying-values-through-pointers" class="level2">
<h2 class="anchored" data-anchor-id="modifying-values-through-pointers">Modifying Values Through Pointers</h2>
<p>One of the most powerful aspects of pointers is that they allow you to modify the value of the variable they point to:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb9-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pCount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Changes the value of count to 10</span></span>
<span id="cb9-5">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> count<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: 10</span></span></code></pre></div>
<p>In this example, we’re not changing the pointer itself (it still points to the same address), but we’re changing the value at that address.</p>
</section>
</section>
<section id="a-complete-pointer-example" class="level1">
<h1>A Complete Pointer Example</h1>
<p>Let’s put everything together in a simple program that demonstrates defining, initializing, and dereferencing pointers:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define and initialize regular variables</span></span>
<span id="cb10-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> salary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">55000.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> grade <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-8">    </span>
<span id="cb10-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define pointer variables</span></span>
<span id="cb10-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pAge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pSalary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pGrade<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-13">    </span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize pointers with addresses of regular variables</span></span>
<span id="cb10-15">    pAge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-16">    pSalary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>salary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-17">    pGrade <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>grade<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-18">    </span>
<span id="cb10-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Display values using both regular variables and pointers</span></span>
<span id="cb10-20">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Using regular variables:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-21">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-22">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Salary: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> salary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-23">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grade: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> grade<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-24">    </span>
<span id="cb10-25">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Using pointers:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-26">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pAge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-27">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Salary: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pSalary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-28">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grade: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pGrade<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-29">    </span>
<span id="cb10-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modify values using pointers</span></span>
<span id="cb10-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pAge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pSalary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">57500.75</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pGrade <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-34">    </span>
<span id="cb10-35">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"After modifying through pointers:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-36">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> age<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-37">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Salary: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> salary<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-38">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grade: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%c\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> grade<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-39">    </span>
<span id="cb10-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The output would be:</p>
<pre><code>Using regular variables:
Age: 30
Salary: $55000.50
Grade: A

Using pointers:
Age: 30
Salary: $55000.50
Grade: A

After modifying through pointers:
Age: 31
Salary: $57500.75
Grade: B</code></pre>
</section>
<section id="common-pointer-mistakes-and-how-to-avoid-them" class="level1">
<h1>Common Pointer Mistakes and How to Avoid Them</h1>
<section id="using-uninitialized-pointers" class="level2">
<h2 class="anchored" data-anchor-id="using-uninitialized-pointers">1. Using Uninitialized Pointers</h2>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb12-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Uninitialized pointer</span></span>
<span id="cb12-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">DANGER</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">! This could crash your program or cause unpredictable behavior</span></span></code></pre></div>
<p><strong>Fix:</strong> Always initialize pointers before dereferencing them.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb13-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Now it's initialized</span></span>
<span id="cb13-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is safe</span></span></code></pre></div>
</section>
<section id="dangling-pointers" class="level2">
<h2 class="anchored" data-anchor-id="dangling-pointers">2. Dangling Pointers</h2>
<p>A dangling pointer occurs when a pointer points to memory that has been freed or is no longer valid.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb14-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Allocate memory</span></span>
<span id="cb14-2">free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Free the memory</span></span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">DANGER</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">! Dereferencing freed memory</span></span></code></pre></div>
<p><strong>Fix:</strong> Set pointers to NULL after freeing them.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb15-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*)</span>malloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb15-2">free<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb15-3">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Now p is no longer dangling</span></span></code></pre></div>
</section>
<section id="pointer-type-mismatch" class="level2">
<h2 class="anchored" data-anchor-id="pointer-type-mismatch">3. Pointer Type Mismatch</h2>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb16-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb16-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pInt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">DANGER</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">! Type mismatch</span></span></code></pre></div>
<p><strong>Fix:</strong> Always match pointer types with the variables they point to.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb17-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.14</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb17-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pFloat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Correct</span></span></code></pre></div>
</section>
<section id="forgetting-to-dereference" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-to-dereference">4. Forgetting to Dereference</h2>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb18-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb18-3">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// WRONG! This prints the address, not the value</span></span></code></pre></div>
<p><strong>Fix:</strong> Use the dereference operator when you want the value.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb19-1">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Correct: prints 5</span></span></code></pre></div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s apply what you’ve learned with a short exercise. Try to predict the output of this code:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb20-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-8">    </span>
<span id="cb20-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-11">    </span>
<span id="cb20-12">    p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-14">    </span>
<span id="cb20-15">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, b = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-16">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*p1 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, *p2 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb20-17">    </span>
<span id="cb20-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb20-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<details>
<summary>
See Solution
</summary>
<p>The output will be:</p>
<pre><code>a = 15, b = 35
*p1 = 35, *p2 = 35</code></pre>
<p>Here’s what happens:</p>
<ol type="1">
<li><code>a</code> is set to 10, <code>b</code> is set to 20</li>
<li><code>p1</code> points to <code>a</code>, <code>p2</code> points to <code>b</code></li>
<li><code>*p1 = *p1 + 5</code> increases <code>a</code> to 15</li>
<li><code>*p2 = *p2 + 10</code> increases <code>b</code> to 30</li>
<li><code>p1 = p2</code> makes <code>p1</code> point to <code>b</code> (not <code>a</code> anymore)</li>
<li><code>*p1 = *p1 + 5</code> increases <code>b</code> to 35 (since <code>p1</code> now points to <code>b</code>)</li>
<li>Both <code>*p1</code> and <code>*p2</code> are 35 because both pointers now point to <code>b</code></li>
</ol>
</details>
</section>
<section id="pointers-and-arrays-a-sneak-peek" class="level1">
<h1>Pointers and Arrays: A Sneak Peek</h1>
<p>One of the most important relationships in C is between pointers and arrays. In fact, arrays in C are closely related to pointers. The name of an array actually operates as a pointer to its first element.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb22-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb22-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Equivalent to int *p = &amp;numbers[0];</span></span>
<span id="cb22-3"></span>
<span id="cb22-4">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span>        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: 10 (first element)</span></span>
<span id="cb22-5">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: 20 (second element)</span></span>
<span id="cb22-6">printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*(</span>p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: 30 (third element)</span></span></code></pre></div>
<p>This relationship between pointers and arrays is powerful and forms the basis for many advanced C programming techniques.</p>
</section>
<section id="pointers-and-functions" class="level1">
<h1>Pointers and Functions</h1>
<p>One of the primary uses of pointers in C is to allow functions to modify their arguments. When you pass a variable to a function, C passes it by value, meaning the function receives a copy of the variable’s value, not the variable itself.</p>
<p>To modify a variable from within a function, you need to pass its address (using a pointer):</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb23-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> incrementByTen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>numPtr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>numPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>numPtr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Modify the value at the address</span></span>
<span id="cb23-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-7">    incrementByTen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb23-8">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number is now: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Prints: Number is now: 15</span></span>
<span id="cb23-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb23-10"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>This capability is essential for functions that need to return multiple values or modify their input parameters.</p>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<p>Here’s a summary of the most important concepts about pointers:</p>
<ol type="1">
<li><p><strong>Memory Addresses</strong>: Every variable in C has a unique memory address where its value is stored.</p></li>
<li><p><strong>Address-of Operator (&amp;)</strong>: Use the <code>&amp;</code> operator to find the memory address of a variable.</p></li>
<li><p><strong>Pointer Variables</strong>: Pointers are variables that store memory addresses. Define them with an asterisk (*) before the variable name.</p></li>
<li><p><strong>Pointer Types</strong>: Each pointer must have a specific data type that matches the type of variable it points to.</p></li>
<li><p>**Dereferencing Operator (*)**: Use the <code>*</code> operator to access or modify the value stored at the address contained in a pointer.</p></li>
<li><p><strong>Initialization</strong>: Always initialize pointers before using them to avoid unpredictable behavior.</p></li>
<li><p><strong>Pointer Safety</strong>: Be mindful of common mistakes like uninitialized pointers, dangling pointers, and type mismatches.</p></li>
<li><p><strong>Arrays and Pointers</strong>: Arrays and pointers are closely related in C; array names act as pointers to their first elements.</p></li>
<li><p><strong>Function Arguments</strong>: Pointers allow functions to modify their arguments by passing addresses instead of values.</p></li>
<li><p><strong>Memory Management</strong>: Pointers are essential for dynamic memory allocation, which we’ll explore in advanced C programming.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Pointers may seem complex at first, but they’re an essential tool in the C programmer’s toolkit. They provide direct access to memory, enable efficient data manipulation, and form the foundation for advanced programming techniques.</p>
<p>As you continue your C programming journey, you’ll find pointers becoming increasingly intuitive and vital to your code. Remember that mastering pointers takes practice, so experiment with the examples provided and write your own code to solidify your understanding.</p>
<p>Think of this guide as your first step into a larger world of C programming. The concepts you’ve learned here will serve as the foundation for more advanced topics like dynamic memory allocation, data structures, and efficient algorithm implementation.</p>
<p>Are you ready to take your C programming to the next level with pointers? Start by reviewing the examples and exercises in this guide, then try incorporating pointers into your own projects. Happy coding!</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="whats-the-difference-between-p-var-and-p-var" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-p-var-and-p-var">1. What’s the difference between <code>*p = &amp;var</code> and <code>p = &amp;var</code>?</h2>
<p>The correct syntax is <code>p = &amp;var</code>. The statement <code>*p = &amp;var</code> is incorrect because it tries to store an address in the memory location that p points to, not in p itself.</p>
</section>
<section id="can-i-have-a-pointer-to-a-pointer" class="level2">
<h2 class="anchored" data-anchor-id="can-i-have-a-pointer-to-a-pointer">2. Can I have a pointer to a pointer?</h2>
<p>Yes! These are called multiple indirection or pointer-to-pointer variables. They’re declared using multiple asterisks: <code>int **pp;</code></p>
</section>
<section id="what-is-a-null-pointer" class="level2">
<h2 class="anchored" data-anchor-id="what-is-a-null-pointer">3. What is a NULL pointer?</h2>
<p>A NULL pointer is a pointer that doesn’t point to any memory location. It’s a good practice to initialize pointers to NULL if you’re not immediately assigning them an address: <code>int *p = NULL;</code></p>
</section>
<section id="how-are-pointers-different-in-c-compared-to-other-languages" class="level2">
<h2 class="anchored" data-anchor-id="how-are-pointers-different-in-c-compared-to-other-languages">4. How are pointers different in C compared to other languages?</h2>
<p>Many modern languages hide pointer mechanics to prevent memory-related errors. C gives you direct control over memory through pointers, which provides power but requires careful programming.</p>
</section>
<section id="whats-the-sizeof-a-pointer" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-sizeof-a-pointer">5. What’s the sizeof a pointer?</h2>
<p>The size of a pointer depends on your system architecture—typically 4 bytes on 32-bit systems and 8 bytes on 64-bit systems, regardless of what type the pointer points to.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><p><a href="https://www.geeksforgeeks.org/c-pointers/">C Pointers</a> - A comprehensive guide on pointers in C from GeeksforGeeks, covering various types of pointers and their applications.</p></li>
<li><p><a href="https://stackoverflow.com/questions/4955198/what-does-dereferencing-a-pointer-mean-in-c-c">What Does Dereferencing a Pointer Mean in C/C++?</a> - A Stack Overflow thread explaining the concept of dereferencing with practical examples and insights from experienced programmers.</p></li>
<li><p><a href="https://www.geeksforgeeks.org/dereference-pointer-in-c/">Dereference Pointer in C</a> - An in-depth GeeksforGeeks article specifically focused on the dereferencing operator and its usage in C programming.</p></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-05/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>C Pointers</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-05/</guid>
  <pubDate>Wed, 05 Mar 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Complete Guide to Handling NA Values in R Tables: Methods, Best Practices, and Solutions</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-03-03/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Missing data is a common challenge in data analysis, and R provides powerful tools for handling NA (Not Available) values effectively. This comprehensive guide will walk you through different methods, best practices, and solutions for working with NA values in R tables. Whether you’re a beginner or an experienced data analyst, you’ll find valuable insights to improve your data preprocessing workflow.</p>
</section>
<section id="understanding-na-values-in-r" class="level1">
<h1>Understanding NA Values in R</h1>
<section id="what-are-na-values" class="level2">
<h2 class="anchored" data-anchor-id="what-are-na-values">What are NA Values?</h2>
<p>NA values in R represent missing or unavailable data in datasets. These values are logical constants that indicate the absence of information, which is crucial to understand before performing any analysis.</p>
</section>
<section id="types-of-na-values-in-r" class="level2">
<h2 class="anchored" data-anchor-id="types-of-na-values-in-r">Types of NA Values in R</h2>
<p>R represents missing values using the <code>NA</code> constant, which is a logical value of length 1. This consistent representation helps in identifying and handling missing data across different data structures.</p>
</section>
</section>
<section id="methods-to-create-tables-with-na-values" class="level1">
<h1>Methods to Create Tables with NA Values</h1>
<section id="using-data.frame" class="level2">
<h2 class="anchored" data-anchor-id="using-data.frame">Using data.frame()</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-6">)</span></code></pre></div>
</div>
</section>
<section id="using-matrix" class="level2">
<h2 class="anchored" data-anchor-id="using-matrix">Using matrix()</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-2">mat</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]
[1,]    1    2
[2,]   NA    4
[3,]    5   NA</code></pre>
</div>
</div>
</section>
<section id="using-tibble" class="level2">
<h2 class="anchored" data-anchor-id="using-tibble">Using tibble()</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb4-2">tb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb4-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb4-7">)</span></code></pre></div>
</div>
</section>
</section>
<section id="retaining-na-values-in-r-tables" class="level1">
<h1>Retaining NA Values in R Tables</h1>
<p>When working with tables in R, you might want to explicitly include NA values in your analysis rather than excluding them. The <code>table()</code> function provides a powerful parameter called <code>useNA</code> that controls how NA values are handled in the resulting table.</p>
<section id="understanding-the-usena-parameter" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-usena-parameter">Understanding the useNA Parameter</h2>
<p>The <code>useNA</code> parameter in the <code>table()</code> function accepts three possible values:</p>
<ul>
<li><code>"no"</code>: Excludes NA values from the table (default behavior)</li>
<li><code>"ifany"</code>: Includes NA values only if they are present in the data</li>
<li><code>"always"</code>: Always includes NA values in the table, even if none exist</li>
</ul>
<p>Here are practical examples demonstrating each option:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data with NA values</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default behavior (excludes NA values)</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>data
1 2 3 
1 2 3 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Include NA values if present</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ifany"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>data
   1    2    3 &lt;NA&gt; 
   1    2    3    2 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Always include NA values</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"always"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>data
   1    2    3 &lt;NA&gt; 
   1    2    3    2 </code></pre>
</div>
</div>
</section>
<section id="best-practices-for-na-value-retention" class="level2">
<h2 class="anchored" data-anchor-id="best-practices-for-na-value-retention">Best Practices for NA Value Retention</h2>
<ol type="1">
<li><p><strong>Choose the Right useNA Option</strong></p>
<ul>
<li>Use <code>"ifany"</code> when you want to monitor the presence of missing values</li>
<li>Use <code>"always"</code> for consistent table structures across different datasets</li>
<li>Use <code>"no"</code> when you’re certain NA values aren’t relevant</li>
</ul></li>
<li><p><strong>Document Your NA Handling Strategy</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example with documentation</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Including NA values to track missing responses</span></span>
<span id="cb11-3">survey_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(responses, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ifany"</span>)</span></code></pre></div></li>
<li><p><strong>Consider Multiple Variables</strong></p></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating tables with multiple variables</span></span>
<span id="cb12-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb12-3"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb12-4"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">var2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb12-5">)</span>
<span id="cb12-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var1, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ifany"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      
       A B &lt;NA&gt;
  1    1 0    0
  2    0 1    1
  &lt;NA&gt; 0 1    0</code></pre>
</div>
</div>
</section>
<section id="best-practices-for-handling-na-values" class="level2">
<h2 class="anchored" data-anchor-id="best-practices-for-handling-na-values">Best Practices for Handling NA Values</h2>
<section id="identifying-na-values" class="level3">
<h3 class="anchored" data-anchor-id="identifying-na-values">1. Identifying NA Values</h3>
<p>Use the <code>is.na()</code> function to identify NA values in your dataset:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df)</span></code></pre></div>
</section>
<section id="removing-na-values" class="level3">
<h3 class="anchored" data-anchor-id="removing-na-values">2. Removing NA Values</h3>
<p>The <code>na.omit()</code> function removes rows containing NA values:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">clean_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(df)</span></code></pre></div>
</section>
<section id="handling-na-values-in-calculations" class="level3">
<h3 class="anchored" data-anchor-id="handling-na-values-in-calculations">3. Handling NA Values in Calculations</h3>
<p>Many R functions provide the <code>na.rm</code> argument for handling NA values:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</section>
<section id="using-modern-tools-with-dplyr" class="level3">
<h3 class="anchored" data-anchor-id="using-modern-tools-with-dplyr">4. Using Modern Tools with dplyr</h3>
<p>The <code>dplyr</code> package offers powerful functions for NA handling:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb17-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replace_na</span>(., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span></code></pre></div>
</section>
</section>
<section id="common-pitfalls-and-solutions" class="level2">
<h2 class="anchored" data-anchor-id="common-pitfalls-and-solutions">Common Pitfalls and Solutions</h2>
<section id="unexpected-na-rows-when-subsetting" class="level3">
<h3 class="anchored" data-anchor-id="unexpected-na-rows-when-subsetting">1. Unexpected NA Rows When Subsetting</h3>
<p><strong>Problem:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var1"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>))</span>
<span id="cb18-2">subset_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> example[example<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>var1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, ]</span>
<span id="cb18-3">subset_example</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  var1 var2
1    A    X
3    A    Z</code></pre>
</div>
</div>
<p><strong>Solution:</strong> Use proper subsetting methods and verify your data import process.</p>
</section>
<section id="functions-returning-na" class="level3">
<h3 class="anchored" data-anchor-id="functions-returning-na">2. Functions Returning NA</h3>
<p><strong>Problem:</strong></p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(numbers) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns NA</span></span></code></pre></div>
<p><strong>Solution:</strong> Use the <code>na.rm = TRUE</code> argument:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(numbers, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</section>
<section id="data-loss-from-dropping-na-values" class="level3">
<h3 class="anchored" data-anchor-id="data-loss-from-dropping-na-values">3. Data Loss from Dropping NA Values</h3>
<p><strong>Problem:</strong> Excessive data loss when using <code>na.omit()</code> or <code>drop_na()</code>.</p>
<p><strong>Solution:</strong> Consider targeted NA handling:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb22-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">drop_na</span>(specific_column)</span></code></pre></div>
</section>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Create a comprehensive NA handling workflow by trying this practical exercise:</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data with different types of NA patterns</span></span>
<span id="cb23-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb23-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb23-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb23-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>),</span>
<span id="cb23-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>)</span>
<span id="cb23-7">)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 1: Create a summary of NA patterns</span></span>
<span id="cb23-10">na_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(df, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)))</span>
<span id="cb23-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NA counts by column:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "NA counts by column:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      id   values category    score 
       0        2        1        2 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 2: Create a table with NA values included</span></span>
<span id="cb27-2">category_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>category, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useNA =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ifany"</span>)</span>
<span id="cb27-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Category distribution including NAs:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nCategory distribution including NAs:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(category_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
   A    B &lt;NA&gt; 
   2    2    1 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 3: Handle NAs using different methods</span></span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1: Remove NAs</span></span>
<span id="cb31-3">clean_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(df)</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2: Replace with mean/mode</span></span>
<span id="cb31-6">df_imputed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df</span>
<span id="cb31-7">df_imputed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df_imputed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df_imputed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare results</span></span>
<span id="cb31-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Original vs Cleaned vs Imputed rows:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nOriginal vs Cleaned vs Imputed rows:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Original: 5"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cleaned:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(clean_df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Cleaned: 1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Imputed:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_imputed)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Imputed: 5"</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>NA values in R can be handled using various methods depending on your needs</li>
<li>The <code>useNA</code> parameter in <code>table()</code> provides flexibility in NA value representation</li>
<li>Consider the impact of NA handling on your analysis before choosing a method</li>
<li>Document your NA handling decisions for reproducibility</li>
<li>Use modern tools like <code>dplyr</code> and <code>tidyr</code> for efficient NA handling</li>
</ul>
</section>
<section id="comparison-of-different-approaches" class="level1">
<h1>Comparison of Different Approaches</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 22%">
<col style="width: 17%">
<col style="width: 17%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Pros</th>
<th>Cons</th>
<th>Best Use Case</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>table(useNA="ifany")</code></td>
<td>Shows actual NA distribution</td>
<td>None</td>
<td>Exploratory analysis</td>
</tr>
<tr class="even">
<td><code>na.omit()</code></td>
<td>Simple and clean</td>
<td>Can lose data</td>
<td>Small NA counts</td>
</tr>
<tr class="odd">
<td><code>replace_na()</code></td>
<td>Preserves data size</td>
<td>May introduce bias</td>
<td>When data loss is unacceptable</td>
</tr>
<tr class="even">
<td><code>na.rm=TRUE</code></td>
<td>Easy for calculations</td>
<td>Limited to specific functions</td>
<td>Statistical summaries</td>
</tr>
</tbody>
</table>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<ol type="1">
<li><p><strong>Q: When should I use “ifany” vs “always” in the useNA parameter?</strong> A: Use “ifany” when you want to see NAs only if they exist, and “always” when you need consistent table structure regardless of NA presence.</p></li>
<li><p><strong>Q: How can I visualize NA patterns in my dataset?</strong> A: Use packages like <code>visdat</code> or <code>naniar</code> for comprehensive NA visualization:</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(visdat)</span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vis_miss</span>(df)</span></code></pre></div></li>
<li><p><strong>Q: What’s the difference between NA and NULL in R?</strong> A: NA represents missing values within data structures, while NULL represents the absence of a value or object entirely.</p></li>
<li><p><strong>Q: How can I handle NAs in grouped operations?</strong> A: Use <code>group_by()</code> with <code>summarize()</code> and specify <code>na.rm=TRUE</code>:</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(category) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div></li>
<li><p><strong>Q: Is it always best to remove NA values?</strong> A: No, removing NA values can introduce bias. Consider the nature of missingness and its impact on your analysis before deciding.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Handling NA values effectively is crucial for accurate data analysis in R. This guide has covered comprehensive methods from basic table creation to advanced NA handling techniques. Remember to consider the context of your analysis when choosing NA handling methods, and always document your decisions for reproducibility.</p>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience</h1>
<p>Have you encountered challenging situations with NA values in R? Share your experiences and solutions in the comments below! Don’t forget to bookmark this guide for future reference.</p>
<p>Based on the research reports and tool analysis, I’ll compile a formatted references section organized by relevance and authority.</p>
</section>
<section id="references-on-handling-na-values-in-r" class="level1">
<h1>References on Handling NA Values in R</h1>
<ol type="1">
<li><p><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/NA">NA: ‘Not Available’ / Missing Values</a></p></li>
<li><p><a href="https://www.r-bloggers.com/2021/04/handling-missing-values-in-r/">Handling Missing Values in R</a></p></li>
<li><p><a href="https://stats.oarc.ucla.edu/r/faq/how-does-r-handle-missing-values/">How does R handle missing values? | R FAQ</a></p></li>
<li><p><a href="https://www.statswithr.com/tutorials/missing-data-imputation-for-machine-learning">Missing Data Imputation for Machine Learning</a></p></li>
<li><p><a href="https://www.appsilon.com/post/imputation-in-r">Imputation in R: Top 3 Ways for Imputing Missing Data</a></p></li>
</ol>
</section>
<section id="additional-resources" class="level1">
<h1>Additional Resources</h1>
<ol start="6" type="1">
<li><p><a href="https://rpubs.com/rpatel40/handling_missing_data_in_R">Handling Missing Data in R Workshop</a></p></li>
<li><p><a href="https://www.geeksforgeeks.org/handling-missing-values-in-r-programming/">Handling Missing Values in R Programming</a></p></li>
<li><p><a href="https://reintech.io/blog/missing-data-imputation-r">Missing Data Imputation with R</a></p></li>
<li><p><a href="https://blairs-science-desk.com/dealing-with-missing-values-in-r">Dealing with Missing Values in R</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-03-03/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Todays R Image</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-03-03/</guid>
  <pubDate>Mon, 03 Mar 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>A Beginner’s Guide to Starting a Project in Linux</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-02-28/</link>
  <description><![CDATA[ 





<p><strong>Author’s Note</strong></p>
<p><strong>Hey there! I’m excited to share that I’m on a learning journey with Linux, just like many of you. As I write this series, I’m discovering new commands, exploring different features, and sometimes making mistakes along the way. I believe this makes the content more relatable and practical - we’re learning together!</strong></p>
<p><strong>Each article in this series comes from my hands-on experience, research, and the “aha!” moments I encounter while working with Linux. I’ll share both my successes and the challenges I face, making this a genuine learning experience for all of us.</strong></p>
<p><strong>If you spot something that could be explained better or have suggestions for future topics, please don’t hesitate to leave a comment. Your feedback helps me improve and ensures the content remains valuable for other beginners.</strong></p>
<p><strong>Let’s embrace this learning journey together!</strong></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Starting your first Linux project might seem daunting, but with the right guidance, you’ll be creating and managing projects like a pro. This comprehensive guide will walk you through everything you need to know about beginning a project in Linux, using simple language and practical examples.</p>
</section>
<section id="understanding-linux-project-basics" class="level1">
<h1>Understanding Linux Project Basics</h1>
<section id="what-is-linux" class="level2">
<h2 class="anchored" data-anchor-id="what-is-linux">What is Linux?</h2>
<p>Linux is a free, open-source operating system that gives you complete control over your development environment. Think of it as your workshop where you’ll build your projects.</p>
</section>
<section id="why-choose-linux-for-projects" class="level2">
<h2 class="anchored" data-anchor-id="why-choose-linux-for-projects">Why Choose Linux for Projects?</h2>
<ul>
<li>Open-source nature</li>
<li>Robust command-line interface</li>
<li>Built-in development tools</li>
<li>Strong community support</li>
<li>Cost-effective solution</li>
</ul>
</section>
</section>
<section id="setting-up-your-workspace" class="level1">
<h1>Setting Up Your Workspace</h1>
<section id="directory-organization" class="level2">
<h2 class="anchored" data-anchor-id="directory-organization">Directory Organization</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">project/</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> src/</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> docs/</span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">├──</span> tests/</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">└──</span> README.md</span></code></pre></div>
<p>Let’s understand each component:</p>
<ul>
<li><code>src/</code>: This directory holds all your source code files</li>
<li><code>docs/</code>: Contains project documentation, guides, and notes</li>
<li><code>tests/</code>: Stores test files to verify your code works correctly</li>
<li><code>README.md</code>: The main documentation file that explains your project</li>
</ul>
</section>
<section id="required-tools" class="level2">
<h2 class="anchored" data-anchor-id="required-tools">Required Tools</h2>
<ol type="1">
<li>Text editor (like VS Code or Vim)</li>
<li>Terminal</li>
<li>Version control system (Git)</li>
<li>Compiler/interpreter for your programming language</li>
</ol>
</section>
</section>
<section id="creating-your-first-project" class="level1">
<h1>Creating Your First Project</h1>
<section id="step-by-step-guide" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-guide">Step-by-Step Guide</h2>
<p>Let’s break down each command and understand what it does:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ~/Documents</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> my_first_project</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> my_first_project</span></code></pre></div>
<p>Command explanation:</p>
<ul>
<li><code>cd ~/Documents</code>: Changes directory to Documents folder in your home directory</li>
<li><code>mkdir my_first_project</code>: Creates a new directory for your project</li>
<li><code>cd my_first_project</code>: Moves into your newly created project directory</li>
</ul>
</section>
</section>
<section id="working-with-shell-scripts" class="level1">
<h1>Working with Shell Scripts</h1>
<section id="understanding-the-basic-script-structure" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-basic-script-structure">Understanding the Basic Script Structure</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># My first Linux project</span></span>
<span id="cb3-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TITLE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World Project"</span></span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starting </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TITLE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span></span></code></pre></div>
<p>Let’s analyze each line:</p>
<ul>
<li><code>#!/bin/bash</code>: This “shebang” line tells Linux to use the bash interpreter</li>
<li><code># My first Linux project</code>: A comment explaining the script’s purpose</li>
<li><code>TITLE="Hello World Project"</code>: Creates a variable named TITLE</li>
<li><code>echo "Starting $TITLE..."</code>: Outputs text using the variable</li>
</ul>
</section>
<section id="variables-and-constants" class="level2">
<h2 class="anchored" data-anchor-id="variables-and-constants">Variables and Constants</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Variables</span></span>
<span id="cb4-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">project_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MyProject"</span></span>
<span id="cb4-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">version</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Constants</span></span>
<span id="cb4-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">readonly</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">MAX_USERS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>100</span></code></pre></div>
<p>Understanding the code:</p>
<ul>
<li>Variables can change during program execution</li>
<li>Constants (using readonly) remain fixed</li>
<li>Use meaningful names for better code readability</li>
</ul>
</section>
</section>
<section id="advanced-script-examples" class="level1">
<h1>Advanced Script Examples</h1>
<section id="system-information-script" class="level2">
<h2 class="anchored" data-anchor-id="system-information-script">System Information Script</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb5-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TITLE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"System Information Report"</span></span>
<span id="cb5-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">CURRENT_TIME</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span> +<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%x %r %Z"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TIMESTAMP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Generated </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$CURRENT_TIME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt; EOF</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;HTML&gt;</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;HEAD&gt;</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;TITLE&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TITLE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/TITLE&gt;</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;/HEAD&gt;</span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;BODY&gt;</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;H1&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TITLE</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/H1&gt;</span></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;P&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$TIMESTAMP</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/P&gt;</span></span>
<span id="cb5-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;H2&gt;System Details:&lt;/H2&gt;</span></span>
<span id="cb5-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;P&gt;Kernel Version: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/P&gt;</span></span>
<span id="cb5-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;P&gt;Memory Usage: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">free</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/P&gt;</span></span>
<span id="cb5-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;/BODY&gt;</span></span>
<span id="cb5-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/HTML&gt;</span></span>
<span id="cb5-19"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">EOF</span></span></code></pre></div>
<p>This script demonstrates several important concepts:</p>
<ol type="1">
<li>Variable assignment and usage</li>
<li>Command substitution with <code>$()</code></li>
<li>Here document (EOF) for multi-line output</li>
<li>HTML formatting</li>
<li>System command integration</li>
</ol>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try creating a simple shell script that displays system information.</p>
<p>Problem: Create a script that shows:</p>
<ul>
<li>Current date</li>
<li>Username</li>
<li>System hostname</li>
</ul>
<details>
<summary>
Solution
</summary>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/bash</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># System Info Script</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"User: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hostname: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOSTNAME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Or:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\nUser: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$USER</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">\nHostname: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$HOSTNAME</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Start with a clear project structure</li>
<li>Use meaningful names for files and directories</li>
<li>Document your code</li>
<li>Implement version control early</li>
<li>Test frequently</li>
</ul>
</section>
<section id="common-faqs" class="level1">
<h1>Common FAQs</h1>
<ol type="1">
<li><p>Q: Do I need programming experience to start a Linux project? A: No, you can start with simple shell scripts and gradually learn more complex programming.</p></li>
<li><p>Q: Should I use a text editor or an IDE? A: For beginners, start with a simple text editor like VS Code or Gedit.</p></li>
<li><p>Q: How do I know if my project structure is correct? A: Follow standard conventions and organize files logically by function.</p></li>
<li><p>Q: What’s the importance of file permissions? A: They control who can read, write, or execute your project files.</p></li>
<li><p>Q: Should I back up my project? A: Yes, always use version control (like Git) and keep backups.</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Starting a project in Linux doesn’t have to be complicated. Begin with these basics, and you’ll build a strong foundation for future development. Remember to take it step by step and don’t hesitate to consult the community when you need help.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://en.wikipedia.org/wiki/Linux">Linux - Wikipedia</a> - A comprehensive overview of the Linux operating system, its history, and core concepts.</p></li>
<li><p><a href="https://www.geeksforgeeks.org/linux-project-ideas-for-beginners/">Linux Project Ideas for Beginners - GeeksforGeeks</a> - A collection of beginner-friendly project ideas to help you practice Linux skills.</p></li>
<li><p><a href="https://www.freecodecamp.org/news/introduction-to-linux/">Introduction to Linux - freeCodeCamp</a> - An in-depth introduction to Linux fundamentals and basic commands.</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/History_of_Linux">History of Linux - Wikipedia</a> - Explore the fascinating evolution of Linux from its inception to present day.</p></li>
</ol>
<p><em>Note: These references were last accessed on February 27, 2025. For the most up-to-date information, please visit the respective websites.</em></p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did you find this guide helpful? Share your experience starting your first Linux project in the comments below! Don’t forget to bookmark this page for future reference and share it with other beginners in the Linux community.</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-02-28/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Projects in Linux</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>linux</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-02-28/</guid>
  <pubDate>Fri, 28 Feb 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>A Beginner’s Guide to Sorting and Alphabetizing Data in C Programming</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-02-26/</link>
  <description><![CDATA[ 





<section id="authors-note" class="level1">
<h1>Author’s Note</h1>
<p>Hey there! 👋</p>
<p>I want to be completely transparent with you - I’m learning and growing as a programmer too, just like many of you. While writing this series on C programming, I’m discovering new techniques and approaches every day. That’s the beauty of programming - there’s always something new to learn!</p>
<p>If you spot any mistakes in my code examples or know of a more efficient way to implement these sorting algorithms, please don’t hesitate to share in the comments. Your feedback not only helps me improve but also benefits the entire community of learners.</p>
<p>Remember: there’s often more than one way to solve a programming problem. The solutions I’ve presented are meant to be clear and beginner-friendly, but they might not always be the most optimized. I encourage you to experiment with different approaches and share your discoveries.</p>
<p>Let’s learn together! 💻</p>
<hr>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Imagine having a messy deck of cards - that’s what unsorted data looks like in programming. Sorting is the process of arranging data in a specific order, whether it’s numerical (ascending or descending) or alphabetical. In this guide, we’ll learn how to bring order to chaos using C programming.</p>
</section>
<section id="understanding-bubble-sort" class="level1">
<h1>Understanding Bubble Sort</h1>
<p>Bubble sort is one of the simplest sorting algorithms to understand. Think of it like arranging a line of students by height - you compare two students at a time and swap their positions if needed.</p>
</section>
<section id="how-bubble-sort-works" class="level1">
<h1>How Bubble Sort Works</h1>
<p>Let’s start with a simple example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> bubbleSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-8">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Swap elements</span></span>
<span id="cb1-9">                temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-10">                arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb1-11">                arr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-12">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb1-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)/</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-20">    </span>
<span id="cb1-21">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before sorting: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-23">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-25">    </span>
<span id="cb1-26">    bubbleSort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-27">    </span>
<span id="cb1-28">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">After sorting: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb1-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-30">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numbers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb1-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Before</span> sorting: 64 34 25 12 22 11 90</span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">After</span> sorting: 11 12 22 25 34 64 90</span></code></pre></div>
</section>
<section id="working-with-random-numbers" class="level1">
<h1>Working with Random Numbers</h1>
<p>Here’s a practical example that generates and sorts random numbers:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb3-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;time.h&gt;</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">time_t</span> t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    srand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>time<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(&amp;</span>t<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize random number generator</span></span>
<span id="cb3-9">    </span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Generate random numbers</span></span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-12">        nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>rand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-13">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-14">    </span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print original array</span></span>
<span id="cb3-16">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original numbers: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb3-19">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-20">    </span>
<span id="cb3-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Sort array</span></span>
<span id="cb3-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> outer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> outer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> outer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> didSwap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> inner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> inner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> inner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-25">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>inner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>outer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-26">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>inner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-27">                nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>inner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>outer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb3-28">                nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>outer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-29">                didSwap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-30">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>didSwap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-34">    </span>
<span id="cb3-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print sorted array</span></span>
<span id="cb3-36">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Sorted numbers: "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-38">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> nums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb3-39">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-40">    </span>
<span id="cb3-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-42"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Original</span> numbers: 20 79 22 83 36 97 95 81 57 77 </span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Sorted</span> numbers: 20 79 22 83 36 97 95 81 57 77 </span></code></pre></div>
</section>
<section id="real-world-application-customer-database" class="level1">
<h1>Real-World Application: Customer Database</h1>
<p>Here’s a practical example showing how to sort customer records:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Customer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> balance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> sortCustomers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Customer customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Customer temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-11">    </span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-15">                temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-16">                customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-17">                customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-18">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-19">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-20">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-22"></span>
<span id="cb5-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> Customer customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">313</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">150.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-26">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">202</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.25</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-27">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">225.75</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-28">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">405</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">50.00</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb5-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">125.50</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb5-31">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-32">    </span>
<span id="cb5-33">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before sorting:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-35">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb5-36">               customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>balance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-38">    </span>
<span id="cb5-39">    sortCustomers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-40">    </span>
<span id="cb5-41">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">After sorting by ID:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-43">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, Balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> </span>
<span id="cb5-44">               customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> customers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">].</span>balance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-46">    </span>
<span id="cb5-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Output:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Before</span> sorting:</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 313, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span>50.50</span>
<span id="cb6-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 202, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$7</span>5.25</span>
<span id="cb6-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 101, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span>25.75</span>
<span id="cb6-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 405, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$5</span>0.00</span>
<span id="cb6-6"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 108, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span>25.50</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">After</span> sorting by ID:</span>
<span id="cb6-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 101, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$2</span>25.75</span>
<span id="cb6-10"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 108, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span>25.50</span>
<span id="cb6-11"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 202, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$7</span>5.25</span>
<span id="cb6-12"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 313, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span>50.50</span>
<span id="cb6-13"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ID:</span> 405, Balance: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$5</span>0.00</span></code></pre></div>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try implementing a bubble sort for strings. Here’s the challenge:</p>
<p>Write a program that sorts 5 names alphabetically.</p>
<details>
<summary>
Click to see solution
</summary>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb7-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;string.h&gt;</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> sortStrings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-7">    </span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>strcmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-11">                temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-12">                names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-13">                names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-14">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-15">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carol"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-22">    </span>
<span id="cb7-23">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Before sorting:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-25">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb7-26">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-27">    </span>
<span id="cb7-28">    sortStrings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-29">    </span>
<span id="cb7-30">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">After sorting:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb7-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-32">        printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb7-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-34">    </span>
<span id="cb7-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-36"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>Always use a temporary variable when swapping values</li>
<li>Bubble sort is perfect for learning and small datasets</li>
<li>For large datasets, consider more efficient algorithms</li>
<li>Sorting makes searching much faster</li>
<li>Keep parallel arrays in sync when sorting</li>
</ul>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<ol type="1">
<li><p><strong>Q: Why do we need a temporary variable when swapping?</strong> A: Without it, you’ll lose the original value during the swap. The temp variable stores one value while you make the swap.</p></li>
<li><p><strong>Q: How can I sort in descending order?</strong> A: Change the comparison operator from ‘&gt;’ to ‘&lt;’ in the if condition.</p></li>
<li><p><strong>Q: Is bubble sort efficient for large datasets?</strong> A: No, it’s best for small datasets or teaching purposes. For large datasets, use more advanced algorithms.</p></li>
<li><p><strong>Q: Can I sort decimal numbers using bubble sort?</strong> A: Yes, just change the data type from int to float or double.</p></li>
<li><p><strong>Q: How do I know if my sort worked correctly?</strong> A: Check if each element is less than or equal to the next element in the array.</p></li>
</ol>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.geeksforgeeks.org/bubble-sort/">GeeksforGeeks - Bubble Sort</a></li>
<li><a href="https://www.programiz.com/c-programming/examples">Programiz - C Programming Examples</a></li>
<li><a href="https://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html">C Programming - GNU Documentation</a></li>
<li><a href="https://www.tutorialspoint.com/cprogramming/c_arrays.htm">TutorialsPoint - C Arrays</a></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Bubble sort is an excellent starting point for understanding sorting algorithms. While it may not be the most efficient method, its simplicity makes it perfect for learning. Remember to practice with the provided examples and try creating your own sorting programs!</p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-02-26/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Sorting in C</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>c</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-02-26/</guid>
  <pubDate>Wed, 26 Feb 2025 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
