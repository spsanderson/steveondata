<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description>Steve&#39;s Data Tips and Tricks in R, C, SQL and Linux</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Wed, 24 Sep 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>Working with PDF and Word Documents in Python</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-24/</link>
  <description><![CDATA[ 






<p><em>Author‚Äôs Note: As I write this series, I‚Äôm learning these concepts alongside you! If you spot any mistakes or have suggestions for improvement, please let me know. Programming is a continuous learning process, and I‚Äôm always looking to make these tutorials clearer and more helpful for fellow beginners.</em></p>
<blockquote class="blockquote">
<p><strong>Key Insight:</strong> Python makes document automation incredibly easy with just a few lines of code. Perfect for beginners just like me who want to automate boring tasks!</p>
</blockquote>
<p><strong>Working with PDF and Word documents in Python</strong> opens up a world of automation possibilities for beginner programmers. Whether you need to extract text from dozens of PDF files (like I need t) or automatically generate Word reports, Python provides simple, powerful tools to handle these tasks efficiently.</p>
<section id="what-can-you-accomplish" class="level1">
<h1>What Can You Accomplish?</h1>
<p>With Python‚Äôs document manipulation capabilities, you can:</p>
<ul>
<li>üìÑ <strong>Extract text</strong> from PDF files (like meeting minutes or reports)<br>
</li>
<li>üîó <strong>Combine multiple PDF files</strong> into one document<br>
</li>
<li>üîÑ <strong>Rotate pages</strong> that were scanned sideways<br>
</li>
<li>üìù <strong>Create new Word documents</strong> automatically<br>
</li>
<li>‚úèÔ∏è <strong>Read and modify</strong> existing Word files<br>
</li>
<li>üîí <strong>Handle password-protected PDFs</strong></li>
</ul>
</section>
<section id="getting-started-installing-the-libraries" class="level1">
<h1>Getting Started: Installing the Libraries</h1>
<p>Before diving into code, you‚Äôll need to install two essential libraries. Open your command prompt or terminal and type:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install PyPDF2==1.26.0</span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install python-docx</span></code></pre></div>
</section>
<section id="working-with-pdf-files-using-pypdf2" class="level1">
<h1>Working with PDF Files Using PyPDF2</h1>
<section id="reading-text-from-a-pdf" class="level2">
<h2 class="anchored" data-anchor-id="reading-text-from-a-pdf">Reading Text from a PDF</h2>
<p>Let‚Äôs start with the most common task - extracting text from a PDF :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PyPDF2</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get current working directory</span></span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current Working Directory:"</span>, os.getcwd())</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the PDF file in binary read mode</span></span>
<span id="cb2-8">pdfFileObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'some_pdf.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>)</span>
<span id="cb2-9">pdfReader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDF2.PdfFileReader(pdfFileObj)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first page (Python counts from 0)</span></span>
<span id="cb2-12">pageObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pdfReader.getPage(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the text</span></span>
<span id="cb2-15">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pageObj.extractText()</span>
<span id="cb2-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(text)</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Always close the file</span></span>
<span id="cb2-19">pdfFileObj.close()</span></code></pre></div>
<p><strong>What‚Äôs happening here?</strong></p>
<ul>
<li><code>'rb'</code> means ‚Äúread binary‚Äù - PDFs aren‚Äôt text files, so we need binary mode</li>
<li><code>getPage(0)</code> gets the first page (remember, Python starts counting at 0)</li>
<li><code>extractText()</code> pulls out all the text from that page as a string</li>
</ul>
</section>
<section id="checking-pdf-information" class="level2">
<h2 class="anchored" data-anchor-id="checking-pdf-information">Checking PDF Information</h2>
<p>Want to know how many pages are in a PDF? Here‚Äôs how:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PyPDF2</span>
<span id="cb3-2"></span>
<span id="cb3-3">pdfFileObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'some_pdf.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>)</span>
<span id="cb3-4">pdfReader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDF2.PdfFileReader(pdfFileObj)</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of pages: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>pdfReader<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>numPages<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-6">pdfFileObj.close()</span></code></pre></div>
</section>
<section id="combining-multiple-pdfs" class="level2">
<h2 class="anchored" data-anchor-id="combining-multiple-pdfs">Combining Multiple PDFs</h2>
<p>Need to merge several PDF files? This is perfect for combining monthly reports :</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PyPDF2</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open both PDF files</span></span>
<span id="cb4-4">pdf1File <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'january_report.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>)</span>
<span id="cb4-5">pdf2File <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'february_report.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create readers for each file</span></span>
<span id="cb4-8">pdf1Reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDF2.PdfFileReader(pdf1File)</span>
<span id="cb4-9">pdf2Reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDF2.PdfFileReader(pdf2File)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a writer to build the new PDF</span></span>
<span id="cb4-12">pdfWriter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyPDF2.PdfFileWriter()</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add all pages from first PDF</span></span>
<span id="cb4-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pageNum <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(pdf1Reader.numPages):</span>
<span id="cb4-16">    pageObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pdf1Reader.getPage(pageNum)</span>
<span id="cb4-17">    pdfWriter.addPage(pageObj)</span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add all pages from second PDF</span></span>
<span id="cb4-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pageNum <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(pdf2Reader.numPages):</span>
<span id="cb4-21">    pageObj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pdf2Reader.getPage(pageNum)</span>
<span id="cb4-22">    pdfWriter.addPage(pageObj)</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the combined PDF</span></span>
<span id="cb4-25">pdfOutputFile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'combined_reports.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb'</span>)</span>
<span id="cb4-26">pdfWriter.write(pdfOutputFile)</span>
<span id="cb4-27">pdfOutputFile.close()</span>
<span id="cb4-28">pdf1File.close()</span>
<span id="cb4-29">pdf2File.close()</span></code></pre></div>
</section>
</section>
<section id="working-with-word-documents-using-python-docx" class="level1">
<h1>Working with Word Documents Using python-docx</h1>
<section id="creating-a-new-word-document" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-new-word-document">Creating a New Word Document</h2>
<p>Creating Word documents from scratch is surprisingly simple :</p>
<div id="0336cf73" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> docx</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new document</span></span>
<span id="cb5-4">document <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> docx.Document()</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a heading</span></span>
<span id="cb5-7">document.add_heading(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My Automated Report'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a paragraph</span></span>
<span id="cb5-10">document.add_paragraph(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This document was created automatically with Python!'</span>)</span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the document</span></span>
<span id="cb5-13">document.save(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'C:/Users/ssanders/Documents/GitHub/steveondata/posts/2025-09-24/my_report</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">docx'</span>)</span></code></pre></div>
</div>
<p><strong>What‚Äôs happening here?</strong></p>
<ul>
<li><code>Document()</code> creates a blank Word document</li>
<li><code>add_heading('text', 0)</code> adds a title (0 is the biggest heading size)</li>
<li><code>add_paragraph('text')</code> adds regular text</li>
<li><code>save('filename.docx')</code> writes the document to your computer</li>
</ul>
</section>
<section id="reading-an-existing-word-document" class="level2">
<h2 class="anchored" data-anchor-id="reading-an-existing-word-document">Reading an Existing Word Document</h2>
<p>Need to extract text from a Word document? Here‚Äôs how :</p>
<div id="0389738c" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> docx</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open an existing document</span></span>
<span id="cb6-4">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> docx.Document(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'C:/Users/ssanders/Documents/GitHub/steveondata/posts/2025-09-24/my_report</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">docx'</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print each paragraph</span></span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> para <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> doc.paragraphs:</span>
<span id="cb6-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(para.text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>My Automated Report
This document was created automatically with Python!</code></pre>
</div>
</div>
<p>This code opens a Word document and prints out each paragraph, one by one.</p>
</section>
<section id="adding-content-to-an-existing-document" class="level2">
<h2 class="anchored" data-anchor-id="adding-content-to-an-existing-document">Adding Content to an Existing Document</h2>
<p>You can also modify existing documents:</p>
<div id="a6c3404e" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> docx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Document</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the template</span></span>
<span id="cb8-4">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Document(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'C:/Users/ssanders/Documents/GitHub/steveondata/posts/2025-09-24/my_report</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">docx'</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add new content</span></span>
<span id="cb8-7">doc.add_paragraph(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New agenda item added automatically.'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save with a new name</span></span>
<span id="cb8-10">doc.save(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'C:/Users/ssanders/Documents/GitHub/steveondata/posts/2025-09-24/updated_my_report</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">docx'</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="practical-real-world-applications" class="level1">
<h1>Practical Real-World Applications</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 35%">
<col style="width: 32%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Use Case</th>
<th>Example</th>
<th>Benefit</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Students</strong></td>
<td>Extract text from research PDFs for note-taking</td>
<td>Save hours of manual copying</td>
</tr>
<tr class="even">
<td><strong>Office Workers</strong></td>
<td>Combine weekly reports into monthly summaries</td>
<td>Eliminate repetitive tasks</td>
</tr>
<tr class="odd">
<td><strong>Small Businesses</strong></td>
<td>Automatically generate invoices or contracts</td>
<td>Reduce manual errors</td>
</tr>
<tr class="even">
<td><strong>Researchers</strong></td>
<td>Process large collections of documents</td>
<td>Analyze data at scale</td>
</tr>
</tbody>
</table>
</section>
<section id="your-turn-practice-exercise" class="level1">
<h1>Your Turn! Practice Exercise</h1>
<p><strong>Challenge:</strong> Create a Python script that:</p>
<ol type="1">
<li>Opens a Word document</li>
<li>Adds today‚Äôs date as a heading</li>
<li>Adds a paragraph with your name</li>
<li>Saves it as a new file</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div id="1f51b181" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> docx <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Document</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> date</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create new document</span></span>
<span id="cb9-5">doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Document()</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add today's date as heading</span></span>
<span id="cb9-8">today <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> date.today()</span>
<span id="cb9-9">doc.add_heading(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Report for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>today<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add paragraph with name</span></span>
<span id="cb9-12">doc.add_paragraph(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Created by: [Your Name Here]'</span>)</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the document</span></span>
<span id="cb9-15">doc.save(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'C:/Users/ssanders/Documents/GitHub/steveondata/posts/2025-09-24/daily_report_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>today<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.docx'</span>)</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Document created successfully!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Document created successfully!</code></pre>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<p><strong>Quick Reference Points:</strong></p>
<ul>
<li>Use <strong>PyPDF2</strong> for reading and manipulating PDF files</li>
<li>Use <strong>python-docx</strong> for creating and editing Word documents</li>
<li>Always open PDFs in <strong>binary mode</strong> (<code>'rb'</code>)</li>
<li>Remember Python uses <strong>zero-based indexing</strong> (first page is 0)</li>
<li><strong>Close files</strong> after opening them to free up memory</li>
<li>These tools are perfect for <strong>automating repetitive tasks</strong></li>
</ul>
</section>
<section id="whats-next" class="level1">
<h1>What‚Äôs Next?</h1>
<p>Try these examples with your own PDF and Word files. Start small - maybe extract text from a single PDF or create a simple Word document. Once you‚Äôre comfortable, you can combine these techniques to build powerful document automation tools.</p>
<p>The beauty of <strong>working with PDF and Word documents in Python</strong> is that once you master these basics, you can automate almost any document-related task!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://automatetheboringstuff.com/2e/chapter15/">Automate the Boring Stuff with Python, Chapter 15: Working with PDF and Word Documents</a></li>
<li><a href="https://python-docx.readthedocs.io/en/latest/">python-docx Official Documentation</a></li>
<li><a href="https://pypdf2.readthedocs.io/">PyPDF2 Documentation</a></li>
<li><a href="https://automatetheboringstuff.com/">Automate the Boring Stuff with Python - Main Site</a></li>
<li><a href="https://automatetheboringstuff.com/2e/appendixa/">Installing Third-Party Modules Guide</a></li>
</ul>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-24/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Read PDFs and Word Docs with Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-24/</guid>
  <pubDate>Wed, 24 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Find the Max Value in Each Row in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-22/</link>
  <description><![CDATA[ 






<blockquote class="blockquote">
<p><strong>Key Insight:</strong> Finding the maximum value in each row is a common data analysis task, in R it‚Äôs simple. The <code>apply()</code> function with <code>max()</code> is the most straightforward method, but several alternatives offer better performance or integration with modern R workflows.</p>
</blockquote>
<p>Finding the <strong>max value in each row</strong> is a useful operation in data analysis. Whether you‚Äôre analyzing exam scores, stock prices, or sensor measurements, knowing how to efficiently extract row-wise maximums can save you time and improve your data processing workflows. This guide covers four proven methods using <code>apply()</code>, <code>pmax()</code>, <code>dplyr</code>, and <code>matrixStats</code> packages.</p>
<hr>
<section id="understanding-row-wise-operations-in-r" class="level1">
<h1>Understanding Row-Wise Operations in R</h1>
<p>Row-wise operations in R work across the columns of each row, rather than down the columns. When we want the <strong>max value in each row</strong>, we‚Äôre looking for the highest value across all columns for every single row in our dataset.</p>
<p><strong>Basic Concept:</strong></p>
<ul>
<li><strong>Column-wise:</strong> Operations down each column (like finding the mean of each column)</li>
<li><strong>Row-wise:</strong> Operations across columns for each row (like finding the max of each row)</li>
</ul>
</section>
<section id="method-1-using-apply---the-most-common-approach" class="level1">
<h1>Method 1: Using <code>apply()</code> - The Most Common Approach</h1>
<p>The <code>apply()</code> function is the <strong>most popular method</strong> for finding row maximums in R. It‚Äôs part of base R, so no additional packages are required.</p>
<section id="basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax">Basic Syntax</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(X, MARGIN, FUN, ...)</span></code></pre></div>
<p><strong>Parameters:</strong></p>
<ul>
<li><code>X</code>: Your data frame or matrix</li>
<li><code>MARGIN</code>: Use <code>1</code> for rows, <code>2</code> for columns<br>
</li>
<li><code>FUN</code>: The function to apply (in our case, <code>max</code>)</li>
<li><code>...</code>: Additional arguments (like <code>na.rm = TRUE</code>)</li>
</ul>
</section>
<section id="simple-example" class="level2">
<h2 class="anchored" data-anchor-id="simple-example">Simple Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">D =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find max in each row</span></span>
<span id="cb2-10">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>max_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max)</span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C D max_value
1 1 2 3 5         5
2 4 5 6 2         6
3 7 8 9 1         9
4 2 6 4 8         8
5 9 3 1 7         9</code></pre>
</div>
</div>
</section>
<section id="handling-missing-values" class="level2">
<h2 class="anchored" data-anchor-id="handling-missing-values">Handling Missing Values</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data with missing values</span></span>
<span id="cb4-2">df_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb4-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">D =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb4-7">)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use na.rm = TRUE to ignore missing values</span></span>
<span id="cb4-10">df_na<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>max_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(df_na, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   A  B  C D max_value
1  1  2  3 5         5
2  4 NA  6 2         6
3 NA  8  9 1         9
4  2  6 NA 8         8
5  9  3  1 7         9</code></pre>
</div>
</div>
</section>
</section>
<section id="method-2-using-pmax---fastest-for-few-columns" class="level1">
<h1>Method 2: Using <code>pmax()</code> - Fastest for Few Columns</h1>
<p>The <code>pmax()</code> function computes <strong>parallel maximums</strong>, making it excellent for datasets with a small number of columns .</p>
<section id="basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="basic-usage">Basic Usage</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using pmax for the same data</span></span>
<span id="cb6-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>max_pmax <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmax</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>A, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>B, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>C, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>D)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative with do.call</span></span>
<span id="cb6-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>max_pmax2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(pmax, df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C D max_value max_pmax max_pmax2
1 1 2 3 5         5        5         5
2 4 5 6 2         6        6         6
3 7 8 9 1         9        9         9
4 2 6 4 8         8        8         8
5 9 3 1 7         9        9         9</code></pre>
</div>
</div>
<p><strong>Advantages:</strong></p>
<ul>
<li>Very fast for datasets with few columns</li>
<li>Works well with missing values using <code>na.rm = TRUE</code></li>
<li>Part of base R</li>
</ul>
</section>
</section>
<section id="method-3-using-dplyr---tidyverse-approach" class="level1">
<h1>Method 3: Using <code>dplyr</code> - Tidyverse Approach</h1>
<p>For those using the <strong>tidyverse</strong>, <code>dplyr</code> offers modern, readable approaches to row-wise operations .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 3a: Using rowwise() and c_across()</span></span>
<span id="cb8-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_tidy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c_across</span>(A<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>D))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 3b: Using pmax within mutate</span></span>
<span id="cb8-10">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_pmax_tidy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmax</span>(A, B, C, D))</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 √ó 9
      A     B     C     D max_value max_pmax max_pmax2 max_tidy max_pmax_tidy
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;         &lt;dbl&gt;
1     1     2     3     5         5        5         5        5             5
2     4     5     6     2         6        6         6        6             6
3     7     8     9     1         9        9         9        9             9
4     2     6     4     8         8        8         8        8             8
5     9     3     1     7         9        9         9        9             9</code></pre>
</div>
</div>
</section>
<section id="method-4-using-matrixstats---best-for-large-datasets" class="level1">
<h1>Method 4: Using <code>matrixStats</code> - Best for Large Datasets</h1>
<p>For <strong>large datasets</strong>, the <code>matrixStats</code> package provides optimized functions that significantly outperform base R alternatives .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(matrixStats)</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to matrix and use rowMaxs</span></span>
<span id="cb10-4">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>max_matrixstats <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMaxs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]))</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 5
Columns: 10
$ A               &lt;dbl&gt; 1, 4, 7, 2, 9
$ B               &lt;dbl&gt; 2, 5, 8, 6, 3
$ C               &lt;dbl&gt; 3, 6, 9, 4, 1
$ D               &lt;dbl&gt; 5, 2, 1, 8, 7
$ max_value       &lt;dbl&gt; 5, 6, 9, 8, 9
$ max_pmax        &lt;dbl&gt; 5, 6, 9, 8, 9
$ max_pmax2       &lt;dbl&gt; 5, 6, 9, 8, 9
$ max_tidy        &lt;dbl&gt; 5, 6, 9, 8, 9
$ max_pmax_tidy   &lt;dbl&gt; 5, 6, 9, 8, 9
$ max_matrixstats &lt;dbl&gt; 5, 6, 9, 8, 9</code></pre>
</div>
</div>
</section>
<section id="method-comparison-table" class="level1">
<h1>Method Comparison Table</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 18%">
<col style="width: 21%">
<col style="width: 18%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Speed</th>
<th>Package Required</th>
<th>Best For</th>
<th>Syntax Complexity</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>apply()</code></td>
<td>Slow</td>
<td>Base R</td>
<td>General use</td>
<td>Medium</td>
</tr>
<tr class="even">
<td><code>pmax()</code></td>
<td>Fast</td>
<td>Base R</td>
<td>Few columns</td>
<td>Low</td>
</tr>
<tr class="odd">
<td><code>dplyr::rowwise()</code></td>
<td>Slow</td>
<td>dplyr</td>
<td>Tidyverse workflows</td>
<td>High</td>
</tr>
<tr class="even">
<td><code>matrixStats::rowMaxs()</code></td>
<td>Very Fast</td>
<td>matrixStats</td>
<td>Large datasets</td>
<td>Medium</td>
</tr>
</tbody>
</table>
</section>
<section id="practical-examples" class="level1">
<h1>Practical Examples</h1>
<section id="example-1-student-exam-scores" class="level2">
<h2 class="anchored" data-anchor-id="example-1-student-exam-scores">Example 1: Student Exam Scores</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Student performance data</span></span>
<span id="cb12-2">exam_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Student =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>),</span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Math =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>),</span>
<span id="cb12-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Science =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>),</span>
<span id="cb12-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">English =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">97</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">86</span>),</span>
<span id="cb12-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">History =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">94</span>)</span>
<span id="cb12-8">)</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find highest score for each student</span></span>
<span id="cb12-11">exam_scores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Highest_Score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(exam_scores[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max)</span>
<span id="cb12-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(exam_scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Student Math Science English History Highest_Score
1   Alice   85      90      88      82            90
2     Bob   92      85      89      88            92
3 Charlie   78      82      85      90            90
4   Diana   95      93      97      89            97
5     Eve   88      91      86      94            94</code></pre>
</div>
</div>
</section>
<section id="example-2-stock-price-analysis" class="level2">
<h2 class="anchored" data-anchor-id="example-2-stock-price-analysis">Example 2: Stock Price Analysis</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quarterly stock prices with missing data</span></span>
<span id="cb14-2">stock_prices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Stock =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AAPL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GOOGL"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MSFT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMZN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TSLA"</span>),</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">150.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800.0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3200.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">800.0</span>),</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2750.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">280.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3100.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">750.0</span>),</span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">145.0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">285.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3250.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">900.0</span>),</span>
<span id="cb14-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q4 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">160.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2900.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">290.0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">850.0</span>)</span>
<span id="cb14-8">)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find maximum price per stock</span></span>
<span id="cb14-11">stock_prices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Max_Price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(stock_prices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find which quarter had the max price</span></span>
<span id="cb14-14">stock_prices<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Best_Quarter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(stock_prices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb14-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.max</span>(x)]</span>
<span id="cb14-16">})</span>
<span id="cb14-17"></span>
<span id="cb14-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(stock_prices)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 5
Columns: 7
$ Stock        &lt;chr&gt; "AAPL", "GOOGL", "MSFT", "AMZN", "TSLA"
$ Q1           &lt;dbl&gt; 150.5, 2800.0, NA, 3200.0, 800.0
$ Q2           &lt;dbl&gt; NA, 2750, 280, 3100, 750
$ Q3           &lt;dbl&gt; 145, NA, 285, 3250, 900
$ Q4           &lt;dbl&gt; 160, 2900, 290, NA, 850
$ Max_Price    &lt;dbl&gt; 160, 2900, 290, 3250, 900
$ Best_Quarter &lt;chr&gt; "Q4", "Q4", "Q4", "Q3", "Q3"</code></pre>
</div>
</div>
</section>
</section>
<section id="common-pitfalls-and-solutions" class="level1">
<h1>Common Pitfalls and Solutions</h1>
<p>‚Ä¢ <strong>Forgetting <code>na.rm = TRUE</code>:</strong> Returns <code>NA</code> if any value in row is missing - <strong>Solution:</strong> Always use <code>na.rm = TRUE</code> when dealing with missing data</p>
<p>‚Ä¢ <strong>Wrong MARGIN parameter:</strong> Using <code>MARGIN = 2</code> finds column max, not row max - <strong>Solution:</strong> Remember <code>1</code> = rows, <code>2</code> = columns</p>
<p>‚Ä¢ <strong>All-NA rows:</strong> With <code>na.rm = TRUE</code>, returns <code>-Inf</code> instead of <code>NA</code> - <strong>Solution:</strong> Use custom function to check for all-NA rows</p>
<p>‚Ä¢ <strong>Character columns:</strong> <code>max()</code> doesn‚Äôt work on text data - <strong>Solution:</strong> Select only numeric columns first</p>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p><strong>Practice Exercise:</strong></p>
<p>Create a data frame with sales data for different products across four months and find the best performing month for each product.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your challenge data</span></span>
<span id="cb16-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Phone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tablet"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Watch"</span>),</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Jan =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>),</span>
<span id="cb16-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Feb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">850</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">550</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">350</span>),</span>
<span id="cb16-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">700</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>),</span>
<span id="cb16-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Apr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">820</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">380</span>)</span>
<span id="cb16-8">)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: Find the maximum sales for each product</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: Find which month had the highest sales for each product</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 1: Find maximum sales</span></span>
<span id="cb17-2">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Best_Sales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sales_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 2: Find best month</span></span>
<span id="cb17-5">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Best_Month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sales_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which.max</span>(x)]</span>
<span id="cb17-7">})</span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative using multiple methods</span></span>
<span id="cb17-10">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Max_pmax <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmax</span>(sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Jan, sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Feb, </span>
<span id="cb17-11">                           sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Mar, sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Apr)</span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Product  Jan  Feb  Mar  Apr Best_Sales Best_Month Max_pmax
1  Laptop 1200 1100 1300 1250       1300        Mar     1300
2   Phone  800  850  900  820        900        Mar      900
3  Tablet  600  550  700  650        700        Mar      700
4   Watch  300  350  400  380        400        Mar      400</code></pre>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<p>‚Ä¢ <strong><code>apply(df, 1, max)</code></strong> is the most common and versatile method for finding row maximums ‚Ä¢ <strong>Use <code>na.rm = TRUE</code></strong> when your data contains missing values ‚Ä¢ <strong><code>pmax()</code></strong> is faster for datasets with few columns ‚Ä¢ <strong><code>matrixStats::rowMaxs()</code></strong> provides the best performance for large datasets ‚Ä¢ <strong><code>dplyr::rowwise()</code></strong> integrates well with tidyverse workflows ‚Ä¢ <strong>Always specify <code>MARGIN = 1</code></strong> in <code>apply()</code> for row-wise operations</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Finding the <strong>max value in each row</strong> in R can be accomplished through multiple approaches, each with specific advantages. The <code>apply()</code> function remains the gold standard for most users due to its simplicity and reliability. For performance-critical applications, consider <code>matrixStats::rowMaxs()</code>, while tidyverse users will appreciate <code>dplyr</code>‚Äôs readable syntax.</p>
<p>Choose the method that best fits your workflow, data size, and coding style. With these techniques, you‚Äôll efficiently handle row-wise maximum calculations in any R project.</p>
<p><strong>Ready to level up your R skills?</strong> Try implementing these methods with your own datasets and see which approach works best for your specific use case!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.statology.org/r-max-value-in-each-row/">How to Find the Max Value in Each Row in R</a></li>
<li><a href="https://dplyr.tidyverse.org/articles/rowwise.html">Row-wise operations (dplyr documentation)</a></li>
<li><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/apply">Apply Functions Over Array Margins (R Documentation)</a></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-22/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Row Max R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-22/</guid>
  <pubDate>Mon, 22 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Google Sheets in Python: A Beginner‚Äôs Guide to EZSheets</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-17/</link>
  <description><![CDATA[ 






<blockquote class="blockquote">
<p><strong>Author‚Äôs Note: I‚Äôm learning as I write this series! My goal is to break down each concept and explain the syntax in simple terms so we can both build confidence working with Google Sheets in Python. Every error I encounter becomes a learning opportunity for all of us.</strong></p>
</blockquote>
<section id="what-is-ezsheets" class="level1">
<h1>What is EZSheets?</h1>
<p>Google Sheets is a free, web-based spreadsheet application that‚Äôs perfect for collaboration. <strong>EZSheets</strong> is a Python library that makes working with Google Sheets incredibly simple . Think of it as a translator between Python and Google Sheets - it handles all the complex API details so you can focus on your data.</p>
<p>Unlike the official Google Sheets API (which can be overwhelming for beginners), EZSheets uses straightforward syntax that feels natural to Python programmers.</p>
</section>
<section id="installation-and-setup" class="level1">
<h1>Installation and Setup</h1>
<section id="step-1-install-ezsheets" class="level2">
<h2 class="anchored" data-anchor-id="step-1-install-ezsheets">Step 1: Install EZSheets</h2>
<p>Open your terminal or command prompt and run:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install ezsheets</span></code></pre></div>
<p><strong>Simple Explanation:</strong> This command downloads and installs EZSheets along with all the helper libraries it needs to talk to Google‚Äôs servers .</p>
<p><strong>Troubleshooting Tips:</strong></p>
<ul>
<li>On Mac/Linux: Use <code>pip3</code> instead of <code>pip</code></li>
<li>Permission issues: Add <code>--user</code> flag: <code>pip install --user ezsheets</code></li>
</ul>
</section>
<section id="step-2-enable-google-apis" class="level2">
<h2 class="anchored" data-anchor-id="step-2-enable-google-apis">Step 2: Enable Google APIs</h2>
<p>Before Python can access your Google Sheets, you need to enable two APIs :</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>API Name</th>
<th>Purpose</th>
<th>Link</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Google Sheets API</td>
<td>Read/write spreadsheet data</td>
<td><a href="https://console.developers.google.com/apis/library/sheets.googleapis.com/">Enable Sheets API</a></td>
</tr>
<tr class="even">
<td>Google Drive API</td>
<td>Access/create files in Drive</td>
<td><a href="https://console.developers.google.com/apis/library/drive.googleapis.com/">Enable Drive API</a></td>
</tr>
</tbody>
</table>
<p><strong>Simple Explanation:</strong> APIs are like doorways that let different programs talk to each other. You‚Äôre giving Python permission to use these doorways.</p>
</section>
<section id="step-3-get-your-credentials" class="level2">
<h2 class="anchored" data-anchor-id="step-3-get-your-credentials">Step 3: Get Your Credentials</h2>
<p>You need three special files in the same folder as your Python script :</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>File Name</th>
<th>What It Does</th>
<th>How to Get It</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>credentials-sheets.json</code></td>
<td>Your ‚ÄúID card‚Äù for Google APIs</td>
<td>Download from <a href="https://developers.google.com/sheets/api/quickstart/python/">Google Sheets Python Quickstart</a> and rename</td>
</tr>
<tr class="even">
<td><code>token-sheets.pickle</code></td>
<td>Remember you‚Äôre logged in to Sheets</td>
<td>Created automatically first time you run the code</td>
</tr>
<tr class="odd">
<td><code>token-drive.pickle</code></td>
<td>Remember you‚Äôre logged in to Drive</td>
<td>Created automatically during setup</td>
</tr>
</tbody>
</table>
<p><strong>Important:</strong> Treat these files like passwords - never share them or upload them to public repositories !</p>
</section>
</section>
<section id="your-first-google-sheets-script" class="level1">
<h1>Your First Google Sheets Script</h1>
<p>Let‚Äôs start with a simple example from ‚ÄúAutomate the Boring Stuff‚Äù:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ezsheets</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will open a browser window for login (first time only)</span></span>
<span id="cb2-4">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.createSpreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'My First Python Spreadsheet'</span>)</span>
<span id="cb2-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Created spreadsheet: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Available sheets: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sheetTitles<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p><strong>What‚Äôs happening here:</strong></p>
<ul>
<li><code>import ezsheets</code>: Loads the EZSheets library</li>
<li><code>createSpreadsheet()</code>: Makes a new Google Sheet with the name you choose</li>
<li><code>ss.title</code>: Gets the name of your spreadsheet</li>
<li><code>ss.sheetTitles</code>: Shows all the worksheet tabs (like ‚ÄúSheet1‚Äù)</li>
</ul>
</section>
<section id="understanding-spreadsheet-structure" class="level1">
<h1>Understanding Spreadsheet Structure</h1>
<p>Think of Google Sheets like a filing cabinet :</p>
<ul>
<li><strong>Spreadsheet</strong>: The entire file (like a binder)</li>
<li><strong>Sheet/Worksheet</strong>: Individual tabs within the file (like pages in the binder)</li>
<li><strong>Cells</strong>: Individual boxes where data goes (like A1, B2, C3)</li>
</ul>
</section>
<section id="basic-operations" class="level1">
<h1>Basic Operations</h1>
<section id="opening-an-existing-spreadsheet" class="level2">
<h2 class="anchored" data-anchor-id="opening-an-existing-spreadsheet">Opening an Existing Spreadsheet</h2>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1: By spreadsheet ID (from the URL)</span></span>
<span id="cb3-2">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.Spreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your-spreadsheet-id-here'</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2: Upload a local file</span></span>
<span id="cb3-5">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.upload(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_excel_file.xlsx'</span>)</span></code></pre></div>
<p><strong>Finding the Spreadsheet ID:</strong> Look at your Google Sheets URL : <code>https://docs.google.com/spreadsheets/d/YOUR_ID_IS_HERE/edit</code></p>
</section>
<section id="accessing-worksheets" class="level2">
<h2 class="anchored" data-anchor-id="accessing-worksheets">Accessing Worksheets</h2>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the first sheet</span></span>
<span id="cb4-2">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using index number</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get sheet by name  </span></span>
<span id="cb4-5">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sheet1'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using sheet name</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See all available sheets</span></span>
<span id="cb4-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ss.sheetTitles)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns: ('Sheet1', 'Sheet2', ...)</span></span></code></pre></div>
</section>
<section id="reading-data" class="level2">
<h2 class="anchored" data-anchor-id="reading-data">Reading Data</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all data from a sheet</span></span>
<span id="cb5-2">all_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet.getRows()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns a list of lists</span></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(all_data)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access specific cells</span></span>
<span id="cb5-6">first_cell <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row 1, Column 1 (A1)</span></span>
<span id="cb5-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Cell A1 contains: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>first_cell<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using A1 notation (like in Excel)</span></span>
<span id="cb5-10">cell_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A1'</span>]</span>
<span id="cb5-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"A1 value: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cell_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p><strong>Simple Explanation:</strong></p>
<ul>
<li><code>getRows()</code>: Gets all the data as a list where each item is a row</li>
<li><code>[1, 1]</code>: Row and column numbers (starting from 1, not 0!)</li>
<li><code>['A1']</code>: Excel-style cell references</li>
</ul>
</section>
<section id="writing-data" class="level2">
<h2 class="anchored" data-anchor-id="writing-data">Writing Data</h2>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update a single cell</span></span>
<span id="cb6-2">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello, World!'</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update an entire row</span></span>
<span id="cb6-5">sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'City'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Occupation'</span>])</span>
<span id="cb6-6">sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New York'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Engineer'</span>])</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update multiple cells</span></span>
<span id="cb6-9">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span></span>
<span id="cb6-10">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'City'</span></span></code></pre></div>
</section>
</section>
<section id="common-use-cases" class="level1">
<h1>Common Use Cases</h1>
<section id="data-entry-automation" class="level2">
<h2 class="anchored" data-anchor-id="data-entry-automation">1. Data Entry Automation</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example: Adding survey results</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ezsheets</span>
<span id="cb7-3"></span>
<span id="cb7-4">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.createSpreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Survey Results'</span>)</span>
<span id="cb7-5">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up headers</span></span>
<span id="cb7-8">headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Participant'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rating'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comments'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>]</span>
<span id="cb7-9">sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, headers)</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add data</span></span>
<span id="cb7-12">survey_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-13">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'John Doe'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Excellent service!'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-15'</span>],</span>
<span id="cb7-14">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jane Smith'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Very good experience'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-16'</span>]</span>
<span id="cb7-15">]</span>
<span id="cb7-16"></span>
<span id="cb7-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row_data <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(survey_data, start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start from row 2</span></span>
<span id="cb7-18">    sheet.updateRow(i, row_data)</span></code></pre></div>
</section>
<section id="reading-and-processing-data" class="level2">
<h2 class="anchored" data-anchor-id="reading-and-processing-data">2. Reading and Processing Data</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read existing data for analysis</span></span>
<span id="cb8-2">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.Spreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your-existing-spreadsheet-id'</span>)</span>
<span id="cb8-3">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales Data'</span>]</span>
<span id="cb8-4"></span>
<span id="cb8-5">all_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet.getRows()</span>
<span id="cb8-6">header <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_rows[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First row is usually headers</span></span>
<span id="cb8-7">data_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_rows[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Everything except the header</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_rows)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> records"</span>)</span>
<span id="cb8-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Columns: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(header)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it‚Äôs time to put your Google Sheets automation skills into practice! Choose one of these beginner-friendly exercises to get started:</p>
<section id="exercise-1-sales-data-automation-beginner" class="level2">
<h2 class="anchored" data-anchor-id="exercise-1-sales-data-automation-beginner">üéØ Exercise 1: Sales Data Automation (Beginner)</h2>
<p><strong>Objective:</strong> Create a Python script that automatically updates a sales report in Google Sheets.</p>
<p><strong>Your Task:</strong></p>
<ol type="1">
<li>Create a new Google Sheet with columns: Date, Product, Quantity, Price, Total</li>
<li>Write a Python script using EZSheets to:
<ul>
<li>Add 5 sample sales records</li>
<li>Calculate the Total column (Quantity √ó Price)</li>
<li>Format the header row (bold, background color)</li>
<li>Add a summary row with total sales</li>
</ul></li>
</ol>
<p><strong>Solution Template:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ezsheets</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create or connect to your spreadsheet</span></span>
<span id="cb9-4">ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.createSpreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales Report Practice'</span>)</span>
<span id="cb9-5">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Set up headers</span></span>
<span id="cb9-8">headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Product'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Quantity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span>]</span>
<span id="cb9-9">sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, headers)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Add sample data</span></span>
<span id="cb9-12">sample_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-13">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget A'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.99</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>],</span>
<span id="cb9-14">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-16'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget B'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.50</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>],</span>
<span id="cb9-15">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-17'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget C'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.99</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>],</span>
<span id="cb9-16">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-18'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget A'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.99</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>],</span>
<span id="cb9-17">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-19'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget D'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.00</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>]</span>
<span id="cb9-18">]</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add each row of data</span></span>
<span id="cb9-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sample_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start at row 2</span></span>
<span id="cb9-22">    sheet.updateRow(i, row)</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Exercise complete! View your sheet at: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<details>
<summary>
Click here for Complete Solution!
</summary>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ezsheets</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_sales_report():</span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create new spreadsheet</span></span>
<span id="cb10-5">    ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.createSpreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales Report Practice'</span>)</span>
<span id="cb10-6">    sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-7">    </span>
<span id="cb10-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up headers</span></span>
<span id="cb10-9">    headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Product'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Quantity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span>]</span>
<span id="cb10-10">    sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, headers)</span>
<span id="cb10-11">    </span>
<span id="cb10-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample sales data</span></span>
<span id="cb10-13">    sales_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-14">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget A'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.99</span>],</span>
<span id="cb10-15">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-16'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget B'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">45.50</span>],</span>
<span id="cb10-16">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-17'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget C'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">19.99</span>],</span>
<span id="cb10-17">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-18'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget A'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">25.99</span>],</span>
<span id="cb10-18">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2024-01-19'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Widget D'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">75.00</span>]</span>
<span id="cb10-19">    ]</span>
<span id="cb10-20">    </span>
<span id="cb10-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add data and calculate totals</span></span>
<span id="cb10-22">    total_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (date, product, qty, price) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sales_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb10-24">        total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> price</span>
<span id="cb10-25">        total_sales <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> total</span>
<span id="cb10-26">        sheet.updateRow(i, [date, product, qty, price, total])</span>
<span id="cb10-27">    </span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add summary row</span></span>
<span id="cb10-29">    sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TOTAL'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, total_sales])</span>
<span id="cb10-30">    </span>
<span id="cb10-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format currency columns (Price and Total)</span></span>
<span id="cb10-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note: EZSheets has limited formatting - for advanced formatting, use gspread</span></span>
<span id="cb10-33">    </span>
<span id="cb10-34">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Sales report created successfully!"</span>)</span>
<span id="cb10-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Total Sales: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_sales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"View your sheet: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-37">    </span>
<span id="cb10-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ss.url</span>
<span id="cb10-39"></span>
<span id="cb10-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the function</span></span>
<span id="cb10-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb10-42">    create_sales_report()</span></code></pre></div>
</details>
<hr>
</section>
<section id="exercise-2-inventory-tracker-intermediate" class="level2">
<h2 class="anchored" data-anchor-id="exercise-2-inventory-tracker-intermediate">üéØ Exercise 2: Inventory Tracker (Intermediate)</h2>
<p><strong>Objective:</strong> Build an automated inventory management system that flags low stock items.</p>
<p><strong>Your Challenge:</strong></p>
<ol type="1">
<li>Create a sheet with columns: Item, Current Stock, Minimum Threshold, Status</li>
<li>Use Python to automatically update the Status column:
<ul>
<li>‚ÄúLow Stock‚Äù if Current Stock &lt; Minimum Threshold</li>
<li>‚ÄúIn Stock‚Äù otherwise</li>
</ul></li>
<li>Generate a list of items that need restocking</li>
</ol>
<details>
<summary>
Click here for Complete Solution!
</summary>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ezsheets</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_inventory_tracker():</span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create new spreadsheet</span></span>
<span id="cb11-5">    ss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ezsheets.createSpreadsheet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Inventory Tracker'</span>)</span>
<span id="cb11-6">    sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-7">    </span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up headers</span></span>
<span id="cb11-9">    headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Item'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Current Stock'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Minimum Threshold'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Status'</span>]</span>
<span id="cb11-10">    sheet.updateRow(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, headers)</span>
<span id="cb11-11">    </span>
<span id="cb11-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample inventory data</span></span>
<span id="cb11-13">    inventory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-14">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laptop'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb11-15">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mouse'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>],     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will be low stock</span></span>
<span id="cb11-16">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keyboard'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>],</span>
<span id="cb11-17">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Monitor'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>],   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will be low stock</span></span>
<span id="cb11-18">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Webcam'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb11-19">        [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Headset'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>]</span>
<span id="cb11-20">    ]</span>
<span id="cb11-21">    </span>
<span id="cb11-22">    low_stock_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-23">    </span>
<span id="cb11-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process each item</span></span>
<span id="cb11-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (item, current, minimum) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(inventory, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb11-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine status</span></span>
<span id="cb11-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> minimum:</span>
<span id="cb11-28">            status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Low Stock"</span></span>
<span id="cb11-29">            low_stock_items.append(item)</span>
<span id="cb11-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-31">            status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"In Stock"</span></span>
<span id="cb11-32">        </span>
<span id="cb11-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the row</span></span>
<span id="cb11-34">        sheet.updateRow(i, [item, current, minimum, status])</span>
<span id="cb11-35">    </span>
<span id="cb11-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add summary section</span></span>
<span id="cb11-37">    sheet.updateRow(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inventory) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SUMMARY:'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>])</span>
<span id="cb11-38">    sheet.updateRow(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inventory) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Low Stock Items:'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(low_stock_items), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>])</span>
<span id="cb11-39">    </span>
<span id="cb11-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List low stock items</span></span>
<span id="cb11-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j, item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(low_stock_items):</span>
<span id="cb11-42">        sheet.updateRow(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inventory) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j, [item, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Needs Restocking'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>])</span>
<span id="cb11-43">    </span>
<span id="cb11-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Inventory tracker created!"</span>)</span>
<span id="cb11-45">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Items needing restock: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(low_stock_items) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> low_stock_items <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'None'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-46">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"View your sheet: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-47">    </span>
<span id="cb11-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ss.url</span>
<span id="cb11-49"></span>
<span id="cb11-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the function</span></span>
<span id="cb11-51"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb11-52">    create_inventory_tracker()</span></code></pre></div>
</details>
<hr>
</section>
<section id="exercise-3-budget-tracker-challenge-advanced" class="level2">
<h2 class="anchored" data-anchor-id="exercise-3-budget-tracker-challenge-advanced">üéØ Exercise 3: Budget Tracker Challenge (Advanced)</h2>
<p><strong>Objective:</strong> Create a comprehensive personal budget tracker with monthly summaries and category analysis.</p>
<p><strong>Your Challenge:</strong></p>
<ol type="1">
<li>Set up categories: Housing, Food, Transportation, Entertainment, Savings</li>
<li>Add expense entries with dates and amounts</li>
<li>Create monthly summary calculations</li>
<li>Implement validation to ensure no negative amounts</li>
</ol>
<p><strong>Success Criteria:</strong></p>
<ul>
<li>‚úÖ Script runs without errors</li>
<li>‚úÖ Categories are properly organized</li>
<li>‚úÖ Monthly totals calculate correctly</li>
<li>‚úÖ Data validation prevents invalid entries</li>
<li>‚úÖ Summary section shows key insights</li>
</ul>
</section>
<section id="getting-started-tips" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-tips">üí° Getting Started Tips:</h2>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Step</th>
<th>Action</th>
<th>Command/Tip</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>1</strong></td>
<td>Install EZSheets</td>
<td><code>pip install ezsheets</code></td>
</tr>
<tr class="even">
<td><strong>2</strong></td>
<td>Set up authentication</td>
<td>Follow <a href="https://ezsheets.readthedocs.io/en/latest/quickstart.html">EZSheets quickstart guide</a></td>
</tr>
<tr class="odd">
<td><strong>3</strong></td>
<td>Start with Exercise 1</td>
<td>Build confidence with simpler tasks</td>
</tr>
<tr class="even">
<td><strong>4</strong></td>
<td>Test frequently</td>
<td>Run script after each major change</td>
</tr>
<tr class="odd">
<td><strong>5</strong></td>
<td>Use print statements</td>
<td>Debug by checking data at each step</td>
</tr>
</tbody>
</table>
</section>
<section id="completion-checklist" class="level2">
<h2 class="anchored" data-anchor-id="completion-checklist">üìã Completion Checklist:</h2>
<ul class="task-list">
<li><label><input type="checkbox">Code runs without errors</label></li>
<li><label><input type="checkbox">Google Sheet is properly formatted<br>
</label></li>
<li><label><input type="checkbox">All calculations work correctly</label></li>
<li><label><input type="checkbox">Code includes helpful comments</label></li>
<li><label><input type="checkbox">You can explain each line of code</label></li>
<li><label><input type="checkbox">You‚Äôve tested with different data sets</label></li>
</ul>
<blockquote class="blockquote">
<p><strong>Pro Tip:</strong> Start small, test often, and don‚Äôt be afraid to break things! Every expert was once a beginner who kept experimenting.</p>
</blockquote>
</section>
</section>
<section id="go-to-commands-reference" class="level1">
<h1>Go To Commands Reference</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 35%">
<col style="width: 35%">
</colgroup>
<thead>
<tr class="header">
<th>Operation</th>
<th>Code Example</th>
<th>What It Does</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Create new spreadsheet</td>
<td><code>ss = ezsheets.createSpreadsheet('Name')</code></td>
<td>Makes a new Google Sheet</td>
</tr>
<tr class="even">
<td>Open existing spreadsheet</td>
<td><code>ss = ezsheets.Spreadsheet('ID')</code></td>
<td>Opens a sheet you already have</td>
</tr>
<tr class="odd">
<td>List your spreadsheets</td>
<td><code>ezsheets.listSpreadsheets()</code></td>
<td>Shows all your Google Sheets</td>
</tr>
<tr class="even">
<td>Get sheet by index</td>
<td><code>sheet = ss[0]</code></td>
<td>Gets the first worksheet</td>
</tr>
<tr class="odd">
<td>Get sheet by name</td>
<td><code>sheet = ss['Sheet1']</code></td>
<td>Gets worksheet by name</td>
</tr>
<tr class="even">
<td>Read all data</td>
<td><code>data = sheet.getRows()</code></td>
<td>Gets everything as lists</td>
</tr>
<tr class="odd">
<td>Read one cell</td>
<td><code>value = sheet['A1']</code></td>
<td>Gets single cell value</td>
</tr>
<tr class="even">
<td>Write to cell</td>
<td><code>sheet['A1'] = 'Hello'</code></td>
<td>Puts text in a cell</td>
</tr>
<tr class="odd">
<td>Write entire row</td>
<td><code>sheet.updateRow(1, ['A', 'B', 'C'])</code></td>
<td>Fills a whole row</td>
</tr>
</tbody>
</table>
</section>
<section id="troubleshooting-common-issues" class="level1">
<h1>Troubleshooting Common Issues</h1>
<p><strong>Problem:</strong> Browser doesn‚Äôt open for authentication<br>
<strong>Solution:</strong> Try running a simple command like <code>ezsheets.listSpreadsheets()</code> to trigger the login process .</p>
<p><strong>Problem:</strong> ‚ÄúCredentials not found‚Äù error<br>
<strong>Solution:</strong> Make sure <code>credentials-sheets.json</code> is in the same folder as your Python script and spelled exactly right.</p>
<p><strong>Problem:</strong> Can‚Äôt find your spreadsheet<br>
<strong>Solution:</strong> Check that you‚Äôre using the correct spreadsheet ID from the URL, not the title.</p>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<blockquote class="blockquote">
<p><strong>Key Finding:</strong> EZSheets makes Google Sheets automation accessible to beginners through simple, intuitive syntax.</p>
</blockquote>
<ul>
<li><strong>EZSheets makes Google Sheets simple</strong> no complex API calls needed</li>
<li><strong>Three files required</strong> credentials and two token files for authentication</li>
<li><strong>Rows and columns start at 1</strong> unlike typical Python indexing that starts at 0</li>
<li><strong>Two ways to access cells</strong> either <code>sheet[1, 1]</code> or <code>sheet['A1']</code></li>
<li><strong>Always keep credentials secure</strong> treat them like passwords</li>
<li><strong>Perfect for beginners</strong> syntax is intuitive and forgiving</li>
</ul>
</section>
<section id="next-steps" class="level1">
<h1>Next Steps</h1>
<p>Now that you understand the basics, try these practice exercises:</p>
<ol type="1">
<li><strong>Create a personal budget tracker</strong> - Use EZSheets to monitor expenses</li>
<li><strong>Build a simple inventory system</strong> - Track items and quantities</li>
<li><strong>Automate data collection from web forms</strong> - Process survey responses</li>
<li><strong>Generate weekly reports from existing data</strong> - Create automated reporting</li>
</ol>
<p>Remember, every expert was once a beginner. The key is to start with simple examples and gradually work up to more complex automation tasks. Google Sheets with Python opens up endless possibilities for organizing and analyzing your data!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://developers.google.com/sheets/api/guides/concepts"><strong>Google Sheets API Overview - Official Documentation</strong></a> - Comprehensive guide to understanding the Google Sheets API architecture, authentication methods, and core concepts for developers looking to integrate spreadsheet functionality into their applications.</p></li>
<li><p><a href="https://ezsheets.readthedocs.io/en/latest/"><strong>EZSheets Official Documentation</strong></a> - Complete documentation for the EZSheets Python library, including installation instructions, authentication setup, detailed API reference, and practical examples for automating Google Sheets tasks.</p></li>
<li><p><a href="https://developers.google.com/sheets/api/quickstart/python"><strong>Google Sheets API Python Quickstart Guide</strong></a> - Step-by-step tutorial for setting up your first Python application with the Google Sheets API, including credential configuration, basic operations, and troubleshooting common setup issues.</p></li>
<li><p><a href="https://pypi.org/project/EZSheets/"><strong>EZSheets PyPI Package Page</strong></a> - Official package repository with installation commands, version history, dependency information, and community contributions for the EZSheets library, maintained by the Python Package Index.</p></li>
</ol>
<blockquote class="blockquote">
<p><strong>Ready to automate your spreadsheets?</strong> Pick an exercise above and start coding! Remember, the best way to learn is by doing. Each exercise builds on the previous one, so start with Exercise 1 and work your way up as you gain confidence.</p>
</blockquote>
<p><em>This article is part of a learning series where I explore Python automation tools. If you have questions or suggestions, remember that we‚Äôre all learning together!</em></p>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-17/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>EZSheets with Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-17/</guid>
  <pubDate>Wed, 17 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Complete Guide to Applying Functions to Each Row in R Matrices and Data Frames</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-15/</link>
  <description><![CDATA[ 






<blockquote class="blockquote">
<p><strong>Key Takeaway:</strong> The <code>apply()</code> function in R is your go-to tool for performing operations on rows or columns of matrices and data frames. With <code>MARGIN=1</code> for rows and <code>MARGIN=2</code> for columns, you can efficiently process data without writing explicit loops.</p>
</blockquote>
<section id="what-is-the-apply-function-in-r" class="level1">
<h1>What is the apply() Function in R?</h1>
<p>The <strong><code>apply()</code> function</strong> is a powerful tool in R that allows you to apply a function to the margins (rows or columns) of an array, matrix, or data frame . Instead of writing loops, you can process entire rows or columns with a single function call, making your code cleaner and more efficient.</p>
<p>The <code>apply()</code> function returns a vector, array, or list of values obtained by applying a function to the specified margins . It‚Äôs particularly useful for R programmers who need to perform the same operation across multiple rows or columns of data.</p>
</section>
<section id="basic-syntax-and-arguments" class="level1">
<h1>Basic Syntax and Arguments</h1>
<section id="core-syntax-structure" class="level2">
<h2 class="anchored" data-anchor-id="core-syntax-structure">Core Syntax Structure</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(X, MARGIN, FUN, ...)</span></code></pre></div>
</section>
<section id="parameter-breakdown" class="level2">
<h2 class="anchored" data-anchor-id="parameter-breakdown">Parameter Breakdown</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 26%">
<col style="width: 31%">
<col style="width: 19%">
<col style="width: 21%">
</colgroup>
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Values</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>X</strong></td>
<td>Input data</td>
<td>Matrix, array, or data frame</td>
<td><code>my_matrix</code></td>
</tr>
<tr class="even">
<td><strong>MARGIN</strong></td>
<td>Direction of operation</td>
<td><code>1</code> = rows, <code>2</code> = columns</td>
<td><code>1</code> for row-wise</td>
</tr>
<tr class="odd">
<td><strong>FUN</strong></td>
<td>Function to apply</td>
<td>Built-in or custom function</td>
<td><code>sum</code>, <code>mean</code></td>
</tr>
<tr class="even">
<td><strong>‚Ä¶</strong></td>
<td>Additional arguments</td>
<td>Extra parameters for FUN</td>
<td><code>na.rm = TRUE</code></td>
</tr>
</tbody>
</table>
</section>
<section id="key-points-to-remember" class="level2">
<h2 class="anchored" data-anchor-id="key-points-to-remember">Key Points to Remember</h2>
<ul>
<li><strong>MARGIN=1</strong>: Apply function to each <strong>row</strong></li>
<li><strong>MARGIN=2</strong>: Apply function to each <strong>column</strong></li>
<li><strong>X</strong> must be a matrix or data frame (data frames get coerced to matrices)</li>
<li><strong>FUN</strong> can be any R function - built-in or user-defined</li>
</ul>
</section>
</section>
<section id="row-wise-operations-with-apply" class="level1">
<h1>Row-wise Operations with apply()</h1>
<section id="basic-row-operations" class="level2">
<h2 class="anchored" data-anchor-id="basic-row-operations">Basic Row Operations</h2>
<p>Here are some row wise operations using <code>apply()</code> with <strong>MARGIN=1</strong>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample matrix</span></span>
<span id="cb2-2">sample_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(sample_matrix) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row sums</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 22 26 30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row means  </span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5.5 6.5 7.5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row maximums</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 10 11 12</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row minimums</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, min)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
</div>
</section>
<section id="custom-functions-for-rows" class="level2">
<h2 class="anchored" data-anchor-id="custom-functions-for-rows">Custom Functions for Rows</h2>
<p>You can create custom functions for more complex row operations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom function: Calculate range (max - min) for each row</span></span>
<span id="cb10-2">row_range <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x) }</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, row_range)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9 9 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom function: Count values greater than 5 in each row</span></span>
<span id="cb12-2">count_gt5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) }</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, count_gt5)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom function: Standard deviation for each row</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sd)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3.872983 3.872983 3.872983</code></pre>
</div>
</div>
</section>
<section id="working-with-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="working-with-data-frames">Working with Data Frames</h2>
<p>When applying functions to data frame rows, ensure all columns are numeric:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create numeric data frame</span></span>
<span id="cb16-2">scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">math =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>),</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">science =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>),</span>
<span id="cb16-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">english =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb16-6">)</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate student averages (row-wise means)</span></span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 85.00000 90.00000 85.66667 89.66667</code></pre>
</div>
</div>
</section>
</section>
<section id="column-wise-operations" class="level1">
<h1>Column-wise Operations</h1>
<p>While the focus is on rows, understanding column operations helps you use <code>apply()</code> more effectively:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Column operations with MARGIN=2</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> A  B  C  D 
 6 15 24 33 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(sample_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> A  B  C  D 
 2  5  8 11 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subject averages from scores data frame  </span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   math science english 
  86.25   87.75   88.75 </code></pre>
</div>
</div>
</section>
<section id="advanced-custom-functions" class="level1">
<h1>Advanced Custom Functions</h1>
<section id="functions-with-additional-arguments" class="level2">
<h2 class="anchored" data-anchor-id="functions-with-additional-arguments">Functions with Additional Arguments</h2>
<p>You can pass extra arguments to your functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Weighted average function</span></span>
<span id="cb24-2">weighted_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, weights) {</span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> weights) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(weights)</span>
<span id="cb24-4">}</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply with custom weights</span></span>
<span id="cb24-7">weights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb24-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, weighted_mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> weights)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 85.0 90.0 84.9 89.9</code></pre>
</div>
</div>
</section>
<section id="complex-conditional-logic" class="level2">
<h2 class="anchored" data-anchor-id="complex-conditional-logic">Complex Conditional Logic</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grade analysis function</span></span>
<span id="cb26-2">grade_analysis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(scores) {</span>
<span id="cb26-3">  avg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(scores)</span>
<span id="cb26-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (avg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>) {</span>
<span id="cb26-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A grade, average:'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(avg, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb26-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (avg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>) {</span>
<span id="cb26-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'B grade, average:'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(avg, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb26-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb26-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C grade, average:'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(avg, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb26-10">  }</span>
<span id="cb26-11">}</span>
<span id="cb26-12"></span>
<span id="cb26-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, grade_analysis)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "B grade, average: 85"   "A grade, average: 90"   "B grade, average: 85.7"
[4] "B grade, average: 89.7"</code></pre>
</div>
</div>
</section>
</section>
<section id="common-issues-and-troubleshooting" class="level1">
<h1>Common Issues and Troubleshooting</h1>
<section id="mixed-data-types-problem" class="level2">
<h2 class="anchored" data-anchor-id="mixed-data-types-problem">Mixed Data Types Problem</h2>
<p><strong>Issue</strong>: When using <code>apply()</code> on data frames with mixed types, R converts everything to character .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Problematic mixed data frame</span></span>
<span id="cb28-2">mixed_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb28-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bob'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charlie'</span>),</span>
<span id="cb28-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>),</span>
<span id="cb28-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>)</span>
<span id="cb28-6">)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This converts numbers to text!</span></span>
<span id="cb28-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(mixed_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' | '</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Alice | 85 | 88"   "Bob | 90 | 85"     "Charlie | 78 | 91"</code></pre>
</div>
</div>
<p><strong>Solution</strong>: Select only numeric columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select only numeric columns</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better approach</span></span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(mixed_data[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'score2'</span>)], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 86.5 87.5 84.5</code></pre>
</div>
</div>
</section>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">Error Handling</h2>
<p><strong>Issue</strong>: If one row causes an error, the entire <code>apply()</code> stops .</p>
<p><strong>Solution</strong>: Use <code>tryCatch()</code> for robust functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">safe_log <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb32-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) {</span>
<span id="cb32-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb32-5">    }</span>
<span id="cb32-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(x))</span>
<span id="cb32-7">  }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb32-8">}</span>
<span id="cb32-9"></span>
<span id="cb32-10">test_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(test_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, safe_log)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 0.000000 1.098612 1.609438

[[2]]
[1] NA</code></pre>
</div>
</div>
</section>
</section>
<section id="performance-alternatives" class="level1">
<h1>Performance Alternatives</h1>
<p>For simple operations, use specialized functions instead of <code>apply()</code>:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Operation</th>
<th>apply() Version</th>
<th>Faster Alternative</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Row sums</td>
<td><code>apply(X, 1, sum)</code></td>
<td><code>rowSums(X)</code></td>
</tr>
<tr class="even">
<td>Row means</td>
<td><code>apply(X, 1, mean)</code></td>
<td><code>rowMeans(X)</code></td>
</tr>
<tr class="odd">
<td>Column sums</td>
<td><code>apply(X, 2, sum)</code></td>
<td><code>colSums(X)</code></td>
</tr>
<tr class="even">
<td>Column means</td>
<td><code>apply(X, 2, mean)</code></td>
<td><code>colMeans(X)</code></td>
</tr>
</tbody>
</table>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Performance comparison</span></span>
<span id="cb34-2">test_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These are equivalent but rowSums() is faster:</span></span>
<span id="cb34-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(test_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 22 26 30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(test_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 22 26 30</code></pre>
</div>
</div>
<p>Let‚Äôs do a simple benchmark test using <code>rbenchmark</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rbenchmark)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: package 'ggplot2' was built under R version 4.5.1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb40-2"></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1000 by 1000 matrix</span></span>
<span id="cb40-4">test_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb40-5"></span>
<span id="cb40-6">benchmark_test_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb40-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apply"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(test_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum),</span>
<span id="cb40-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rowSums"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(test_matrix),</span>
<span id="cb40-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L,</span>
<span id="cb40-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb40-11">)</span>
<span id="cb40-12"></span>
<span id="cb40-13">benchmark_test_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb40-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     test replications elapsed relative user.self sys.self
1 rowSums          100    0.42    1.000      0.36     0.01
2   apply          100    2.97    7.071      1.84     0.83</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the results in a boxplot</span></span>
<span id="cb42-2">benchmark_test_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb42-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> test, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> elapsed)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.328</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(test))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb42-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Benchmark of apply() vs rowSums"</span>,</span>
<span id="cb42-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Function"</span>,</span>
<span id="cb42-9">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Elapsed Time (s)"</span>,</span>
<span id="cb42-10">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span></span>
<span id="cb42-11">        )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-15/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="alternative-approaches" class="level1">
<h1>Alternative Approaches</h1>
<section id="other-apply-family-functions" class="level2">
<h2 class="anchored" data-anchor-id="other-apply-family-functions">Other Apply Family Functions</h2>
<ul>
<li><strong><code>lapply()</code></strong>: Works with lists, returns a list</li>
<li><strong><code>sapply()</code></strong>: Simplifies <code>lapply()</code> output to vectors<br>
</li>
<li><strong><code>mapply()</code></strong>: Multivariate version for multiple inputs</li>
</ul>
</section>
<section id="tidyverse-alternatives" class="level2">
<h2 class="anchored" data-anchor-id="tidyverse-alternatives">Tidyverse Alternatives</h2>
<p>For complex row operations, consider:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb43-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row-wise operations in dplyr</span></span>
<span id="cb43-3">scores <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowwise</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">avg =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(math, science, english)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 4
# Rowwise: 
   math science english   avg
  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
1    85      88      82  85  
2    90      85      95  90  
3    78      91      88  85.7
4    92      87      90  89.7</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices-checklist" class="level1">
<h1>Best Practices Checklist</h1>
<p>‚úÖ <strong>Use <code>MARGIN=1</code> for rows, <code>MARGIN=2</code> for columns</strong><br>
‚úÖ <strong>Ensure data is numeric before using apply()</strong><br>
‚úÖ <strong>Use <code>rowSums()</code>, <code>colSums()</code>, <code>rowMeans()</code>, <code>colMeans()</code> for simple operations</strong><br>
‚úÖ <strong>Test custom functions on individual rows/columns first</strong><br>
‚úÖ <strong>Add error handling with <code>tryCatch()</code> for robust functions</strong><br>
‚úÖ <strong>Consider alternatives for mixed-type data frames</strong><br>
‚úÖ <strong>Remember that data frames are coerced to matrices</strong></p>
</section>
<section id="quick-reference-table" class="level1">
<h1>Quick Reference Table</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 36%">
<col style="width: 22%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Task</th>
<th>Code Example</th>
<th>MARGIN</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Row sum</td>
<td><code>apply(X, 1, sum)</code></td>
<td>1</td>
<td>Vector of row sums</td>
</tr>
<tr class="even">
<td>Row mean</td>
<td><code>apply(X, 1, mean)</code></td>
<td>1</td>
<td>Vector of row means</td>
</tr>
<tr class="odd">
<td>Custom function</td>
<td><code>apply(X, 1, my_func)</code></td>
<td>1</td>
<td>Vector of results</td>
</tr>
<tr class="even">
<td>With arguments</td>
<td><code>apply(X, 1, func, arg=value)</code></td>
<td>1</td>
<td>Vector with custom args</td>
</tr>
<tr class="odd">
<td>Anonymous function</td>
<td><code>apply(X, 1, function(x) ...)</code></td>
<td>1</td>
<td>Vector from custom logic</td>
</tr>
</tbody>
</table>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it‚Äôs time to put your knowledge into practice! Below is a real-world scenario that will test your understanding of the <code>apply()</code> function for row-wise operations.</p>
<section id="practice-scenario-student-performance-analysis" class="level2">
<h2 class="anchored" data-anchor-id="practice-scenario-student-performance-analysis"><strong>Practice Scenario: Student Performance Analysis</strong></h2>
<p>You‚Äôre analyzing test scores for students in a programming course. Each student took four exams: <strong>Midterm 1</strong>, <strong>Midterm 2</strong>, <strong>Final Project</strong>, and <strong>Final Exam</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Student score data</span></span>
<span id="cb45-2">student_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb45-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">student_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU002"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU003"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU005"</span>),</span>
<span id="cb45-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">midterm1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb45-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">midterm2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>),</span>
<span id="cb45-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>),</span>
<span id="cb45-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">final_exam =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>)</span>
<span id="cb45-8">)</span></code></pre></div>
</div>
</section>
<section id="tasks-to-complete" class="level2">
<h2 class="anchored" data-anchor-id="tasks-to-complete"><strong>Tasks to Complete:</strong></h2>
<p><strong>Task 1:</strong> Calculate the average score for each student across all four exams.</p>
<p><strong>Task 2:</strong> Find the highest score achieved by each student.</p>
<p><strong>Task 3:</strong> Create a custom function that determines if a student‚Äôs average is above 85. Apply this function to each student.</p>
<p><strong>Task 4:</strong> Calculate the range (difference between highest and lowest score) for each student.</p>
<p><strong>Task 5:</strong> Determine how many scores above 90 each student achieved.</p>
</section>
<section id="your-challenge" class="level2">
<h2 class="anchored" data-anchor-id="your-challenge"><strong>Your Challenge:</strong></h2>
<p>Write R code using the <code>apply()</code> function to solve each task. Remember:</p>
<ul>
<li>Use <code>MARGIN = 1</code> for row-wise operations</li>
<li>Select only the numeric columns (exclude <code>student_id</code>)</li>
<li>Test your code step by step</li>
</ul>
</section>
<section id="hints" class="level2">
<h2 class="anchored" data-anchor-id="hints"><strong>Hints:</strong></h2>
<ul>
<li>For numeric columns only: <code>student_scores[, 2:5]</code> or <code>student_scores[, -1]</code></li>
<li>Custom functions can be defined inline: <code>function(x) { your_logic_here }</code></li>
<li>Use <code>sum(x &gt; 90)</code> to count values above a threshold</li>
</ul>
<details>
<summary>
Click here for Solution!
</summary>
<p>Here‚Äôs the complete solution with explanations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data</span></span>
<span id="cb46-2">student_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb46-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">student_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU002"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU003"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU004"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STU005"</span>),</span>
<span id="cb46-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">midterm1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>),</span>
<span id="cb46-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">midterm2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">87</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>),</span>
<span id="cb46-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">project =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>),</span>
<span id="cb46-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">final_exam =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">89</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">93</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>)</span>
<span id="cb46-8">)</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract only numeric columns (exclude student_id)</span></span>
<span id="cb46-11">scores_only <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> student_scores[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb46-12"></span>
<span id="cb46-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 1: Calculate average score for each student</span></span>
<span id="cb46-14">student_averages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores_only, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mean)</span>
<span id="cb46-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student Averages:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Student Averages:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(student_averages)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 89.50 90.75 81.00 90.25 92.75</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 2: Find highest score for each student  </span></span>
<span id="cb50-2">student_max <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores_only, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max)</span>
<span id="cb50-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student Maximum Scores:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Student Maximum Scores:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(student_max)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 93 95 85 93 96</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 3: Custom function - average above 85?</span></span>
<span id="cb54-2">above_85 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb54-3">  avg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)</span>
<span id="cb54-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(avg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb54-5">}</span>
<span id="cb54-6">student_above_85 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores_only, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, above_85)</span>
<span id="cb54-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Students with average above 85:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Students with average above 85:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(student_above_85)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  TRUE  TRUE FALSE  TRUE  TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 4: Calculate range for each student</span></span>
<span id="cb58-2">student_range <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores_only, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(x))</span>
<span id="cb58-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Student Score Ranges:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Student Score Ranges:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(student_range)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8 8 7 5 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 5: Count scores above 90 for each student</span></span>
<span id="cb62-2">scores_above_90 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(scores_only, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>))</span>
<span id="cb62-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of scores above 90 per student:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Number of scores above 90 per student:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scores_above_90)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 2 0 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bonus: Create a comprehensive summary</span></span>
<span id="cb66-2">student_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb66-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">student_id =</span> student_scores<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>student_id,</span>
<span id="cb66-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">average =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(student_averages, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb66-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_score =</span> student_max,</span>
<span id="cb66-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">above_85_avg =</span> student_above_85,</span>
<span id="cb66-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score_range =</span> student_range,</span>
<span id="cb66-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scores_above_90 =</span> scores_above_90</span>
<span id="cb66-9">)</span>
<span id="cb66-10"></span>
<span id="cb66-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Complete Student Summary:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Complete Student Summary:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(student_summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  student_id average max_score above_85_avg score_range scores_above_90
1     STU001   89.50        93         TRUE           8               2
2     STU002   90.75        95         TRUE           8               2
3     STU003   81.00        85        FALSE           7               0
4     STU004   90.25        93         TRUE           5               2
5     STU005   92.75        96         TRUE           8               3</code></pre>
</div>
</div>
<p><strong>Key Learning Points:</strong></p>
<ul>
<li><strong>Data Selection</strong>: We used student_scores[, 2:5]` to select only numeric columns, avoiding issues with mixed data types</li>
<li><strong>Custom Functions</strong>: Task 3 and 5 showed how to write custom functions and apply them row-wise</li>
<li><strong>Anonymous Functions</strong>: Tasks 4 and 5 used <code>function(x)</code> inline for concise operations</li>
<li><strong>Practical Application</strong>: This exercise mirrors real-world data analysis scenarios</li>
</ul>
<p><strong>Alternative Solutions:</strong></p>
<div class="sourceCode" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You could also use:</span></span>
<span id="cb70-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For averages: rowMeans(scores_only) - faster for simple means</span></span>
<span id="cb70-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For sums: rowSums(scores_only) - faster for simple sums</span></span>
<span id="cb70-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But apply() gives you more flexibility for custom operations!</span></span></code></pre></div>
</details>
</section>
<section id="test-your-understanding" class="level2">
<h2 class="anchored" data-anchor-id="test-your-understanding"><strong>Test Your Understanding</strong></h2>
<p>After completing the exercise, ask yourself:</p>
<ol type="1">
<li><strong>Why did we exclude the <code>student_id</code> column?</strong> <em>(Hint: mixed data types)</em></li>
<li><strong>Could we use <code>rowMeans()</code> instead of <code>apply()</code> for Task 1?</strong> <em>(Yes, but apply() is more flexible)</em></li>
<li><strong>How would you modify the code to handle missing values (NA)?</strong> <em>(Add <code>na.rm = TRUE</code>)</em></li>
</ol>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps"><strong>Next Steps</strong></h2>
<p>Try modifying the exercise:</p>
<ul>
<li>Add a sixth student with some missing scores (<code>NA</code>)</li>
<li>Create a function that assigns letter grades based on averages</li>
<li>Calculate weighted averages (e.g., final exam worth 40%, others 20% each)</li>
</ul>
<p><strong>Great job working through this exercise!</strong> You‚Äôve now practiced the core concepts of using <code>apply()</code> for row-wise operations in real-world scenarios. This foundation will serve you well in data analysis projects.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>apply()</code> function is an essential tool for R programmers working with matrices and data frames. By using <strong>MARGIN=1</strong> for row-wise operations, you can efficiently process data without explicit loops. Remember to handle mixed data types carefully, consider performance alternatives for simple operations, and add error handling for robust code.</p>
<p><strong>Key Takeaways:</strong></p>
<ul>
<li>Use <code>apply(X, 1, FUN)</code> for row-wise operations</li>
<li>Handle mixed data types by selecting numeric columns only<br>
</li>
<li>Consider <code>rowSums()</code>, <code>rowMeans()</code> for better performance on simple operations</li>
<li>Add error handling with <code>tryCatch()</code> for production code</li>
<li>Test custom functions thoroughly before applying to large datasets</li>
</ul>
<p>Start experimenting with <code>apply()</code> in your next R project - it will make your data processing code cleaner and more efficient!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><strong>R Documentation</strong> - <a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/apply">apply: Apply Functions Over Array Margins</a><br>
<em>Official R documentation for the apply() function, including detailed syntax, arguments, usage examples, and technical specifications.</em></p></li>
<li><p><strong>DataQuest</strong> - <a href="https://www.dataquest.io/blog/apply-functions-in-r-sapply-lapply-tapply/">Apply Functions in R with Examples</a><br>
<em>In-depth tutorial explaining the apply() function family in R with practical data analysis examples, comparing efficiency with loops and vectorized operations.</em></p></li>
<li><p><strong>R-bloggers</strong> - <a href="https://www.r-bloggers.com/2022/03/complete-tutorial-on-using-apply-functions-in-r/">Complete Tutorial on Using ‚Äòapply‚Äô Functions in R</a><br>
<em>Step-by-step guide featuring real-world data analysis examples, custom function applications, and best practices for using apply() functions efficiently.</em></p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-15/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Using apply() in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-15/</guid>
  <pubDate>Mon, 15 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Excel Spreadsheets in Python: A Complete Beginner‚Äôs Guide to openpyxl</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-10/</link>
  <description><![CDATA[ 






<p><strong>Authors Note: I am learning as I write this series, so I might make mistakes or do things that are not optimal. If you find any of these situations, please comment so readers have the correct or better knowledge and I too can learn.</strong></p>
<blockquote class="blockquote">
<p><strong>Key Takeaway:</strong> openpyxl is a powerful Python library that lets you create, read, and modify Excel files without needing Microsoft Excel installed. Perfect for automating repetitive spreadsheet tasks!</p>
</blockquote>
<p>Excel spreadsheets are everywhere in the business world, and as a Python programmer, you‚Äôll often need to work with them. Whether you‚Äôre analyzing sales data, creating reports, or automating data entry, the <strong>openpyxl</strong> library is your gateway to Excel automation. This guide will teach you everything you need to know to start working with Excel files using Python.</p>
<hr>
<section id="what-is-openpyxl" class="level1">
<h1>What is openpyxl?</h1>
<p><strong>openpyxl</strong> is a Python library that allows you to read, write, and modify Excel 2010 xlsx/xlsm/xltx/xltm files . Think of it as your Python toolkit for Excel automation. Unlike other libraries, openpyxl doesn‚Äôt require Microsoft Excel to be installed on your computer, making it perfect for servers and automated systems.</p>
<section id="why-use-openpyxl" class="level2">
<h2 class="anchored" data-anchor-id="why-use-openpyxl">Why Use openpyxl?</h2>
<p>‚Ä¢ <strong>No Excel Required</strong>: Works without Microsoft Excel installed ‚Ä¢ <strong>Full Feature Support</strong>: Handles formulas, charts, styling, and more ‚Ä¢ <strong>Active Development</strong>: Regularly updated and well-maintained ‚Ä¢ <strong>Beginner Friendly</strong>: Simple syntax that‚Äôs easy to learn</p>
</section>
</section>
<section id="excel-terminology-made-simple" class="level1">
<h1>Excel Terminology Made Simple</h1>
<p>Before diving into code, let‚Äôs understand the basic Excel terms you‚Äôll encounter:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Term</th>
<th>Explanation</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Workbook</strong></td>
<td>The main Excel file you work with</td>
<td><code>mydata.xlsx</code></td>
</tr>
<tr class="even">
<td><strong>Worksheet</strong></td>
<td>A single sheet within a workbook</td>
<td>Sheet1, Sheet2</td>
</tr>
<tr class="odd">
<td><strong>Column</strong></td>
<td>Vertical line, labeled with letters</td>
<td>A, B, C, D‚Ä¶</td>
</tr>
<tr class="even">
<td><strong>Row</strong></td>
<td>Horizontal line, labeled with numbers</td>
<td>1, 2, 3, 4‚Ä¶</td>
</tr>
<tr class="odd">
<td><strong>Cell</strong></td>
<td>Intersection of column and row</td>
<td>A1, B2, C3‚Ä¶</td>
</tr>
</tbody>
</table>
</section>
<section id="getting-started-installation" class="level1">
<h1>Getting Started: Installation</h1>
<p>Installing openpyxl is straightforward. Open your terminal or command prompt and run:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install openpyxl</span></code></pre></div>
<p>That‚Äôs it! You‚Äôre ready to start working with Excel files in Python.</p>
</section>
<section id="creating-your-first-excel-file" class="level1">
<h1>Creating Your First Excel File</h1>
<p>Let‚Äôs start with the basics - creating a new Excel workbook and adding some data:</p>
<div id="508e9408" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openpyxl <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Workbook</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new workbook</span></span>
<span id="cb2-4">workbook <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Workbook()</span>
<span id="cb2-5">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workbook.active</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add some data</span></span>
<span id="cb2-8">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product"</span></span>
<span id="cb2-9">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Price"</span> </span>
<span id="cb2-10">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stock"</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add product information</span></span>
<span id="cb2-13">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span></span>
<span id="cb2-14">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">999.99</span></span>
<span id="cb2-15">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the file</span></span>
<span id="cb2-18">workbook.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"products.xlsx"</span>)</span></code></pre></div>
</div>
<p>This creates a new Excel file called <code>products.xlsx</code> with a simple product table .</p>
</section>
<section id="reading-existing-excel-files" class="level1">
<h1>Reading Existing Excel Files</h1>
<p>Reading data from existing Excel files is just as simple:</p>
<div id="e8da8bcf" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openpyxl <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_workbook</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load an existing workbook</span></span>
<span id="cb3-4">workbook <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_workbook(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"products.xlsx"</span>)</span>
<span id="cb3-5">sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workbook.active</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read cell values</span></span>
<span id="cb3-8">product_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A2"</span>].value</span>
<span id="cb3-9">price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B2"</span>].value</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Product: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>product_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Price: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>price<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Product: Laptop, Price: $999.99</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Product: Laptop, Price: $999.99</code></pre>
</div>
</div>
<section id="reading-multiple-cells-at-once" class="level2">
<h2 class="anchored" data-anchor-id="reading-multiple-cells-at-once">Reading Multiple Cells at Once</h2>
<p>For larger datasets, you can iterate through rows efficiently:</p>
<div id="f2dfd77f" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read all data from the spreadsheet</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sheet.iter_rows(values_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb5-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('Product', 'Price', 'Stock')
('Laptop', 999.99, 15)</code></pre>
</div>
</div>
<p>This prints each row as a tuple, making it easy to process data in bulk .</p>
</section>
</section>
<section id="working-with-cells-and-data" class="level1">
<h1>Working with Cells and Data</h1>
<section id="accessing-cells-in-different-ways" class="level2">
<h2 class="anchored" data-anchor-id="accessing-cells-in-different-ways">Accessing Cells in Different Ways</h2>
<p>openpyxl gives you multiple ways to access cells:</p>
<div id="1cd3f074" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 1: Cell reference (like in Excel)</span></span>
<span id="cb7-2">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span></span>
<span id="cb7-3">value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A1"</span>].value</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2: Row and column numbers (1-based indexing)</span></span>
<span id="cb7-6">sheet.cell(row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span>)</span>
<span id="cb7-7">value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sheet.cell(row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).value</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 3: Appending rows (great for adding data)</span></span>
<span id="cb7-10">sheet.append([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.99</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>])</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read all data from the spreadsheet</span></span>
<span id="cb7-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sheet.iter_rows(values_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb7-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('Hello', 'Price', 'Stock')
('Laptop', 999.99, 15)
('Mouse', 29.99, 150)</code></pre>
</div>
</div>
</section>
<section id="data-types-and-conversion" class="level2">
<h2 class="anchored" data-anchor-id="data-types-and-conversion">Data Types and Conversion</h2>
<p>openpyxl automatically handles different data types:</p>
<p>‚Ä¢ <strong>Text</strong>: <code>sheet["A1"] = "Product Name"</code> ‚Ä¢ <strong>Numbers</strong>: <code>sheet["B1"] = 299.99</code> ‚Ä¢ <strong>Dates</strong>: <code>sheet["C1"] = datetime.date(2024, 1, 15)</code> ‚Ä¢ <strong>Formulas</strong>: <code>sheet["D1"] = "=B1*C1"</code></p>
</section>
</section>
<section id="adding-style-and-formatting" class="level1">
<h1>Adding Style and Formatting</h1>
<p>Making your spreadsheets look professional is important. Here‚Äôs how to add formatting:</p>
<div id="d8a9b4cb" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openpyxl.styles <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Font, PatternFill, Alignment</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make headers bold and centered</span></span>
<span id="cb9-4">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A1"</span>].font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Font(bold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-5">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A1"</span>].alignment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Alignment(horizontal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add background color</span></span>
<span id="cb9-8">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A1"</span>].fill <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PatternFill(start_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"366092"</span>, </span>
<span id="cb9-9">                               end_color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"366092"</span>, </span>
<span id="cb9-10">                               fill_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"solid"</span>)</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format numbers as currency</span></span>
<span id="cb9-13">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B2"</span>].number_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$#,##0.00'</span></span></code></pre></div>
</div>
<section id="common-formatting-options" class="level2">
<h2 class="anchored" data-anchor-id="common-formatting-options">Common Formatting Options</h2>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Format Type</th>
<th>Code Example</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Bold Text</strong></td>
<td><code>Font(bold=True)</code></td>
<td><strong>Bold</strong></td>
</tr>
<tr class="even">
<td><strong>Currency</strong></td>
<td><code>'$#,##0.00'</code></td>
<td>$1,234.56</td>
</tr>
<tr class="odd">
<td><strong>Percentage</strong></td>
<td><code>'0.00%'</code></td>
<td>25.50%</td>
</tr>
<tr class="even">
<td><strong>Date</strong></td>
<td><code>'YYYY-MM-DD'</code></td>
<td>2024-01-15</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="working-with-multiple-worksheets" class="level1">
<h1>Working with Multiple Worksheets</h1>
<p>Most real-world Excel files have multiple sheets. Here‚Äôs how to manage them:</p>
<div id="144dd944" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create additional sheets</span></span>
<span id="cb10-2">data_sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workbook.create_sheet(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales Data"</span>)</span>
<span id="cb10-3">summary_sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workbook.create_sheet(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Summary"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Switch between sheets</span></span>
<span id="cb10-6">current_sheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> workbook[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales Data"</span>]</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List all sheet names</span></span>
<span id="cb10-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(workbook.sheetnames)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['Sheet', 'Sales Data', 'Summary']</span></span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rename a sheet</span></span>
<span id="cb10-12">summary_sheet.title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monthly Summary"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Sheet', 'Sales Data', 'Summary']</code></pre>
</div>
</div>
</section>
<section id="adding-formulas-and-calculations" class="level1">
<h1>Adding Formulas and Calculations</h1>
<p>One of Excel‚Äôs most powerful features is automatic calculations. openpyxl makes this easy:</p>
<div id="5aa15ff3" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add formulas (Excel will calculate them)</span></span>
<span id="cb12-2">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total Value"</span></span>
<span id="cb12-3">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"=B2*C2"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Price √ó Stock</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create summary calculations</span></span>
<span id="cb12-6">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B5"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"=SUM(B2:B4)"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum of prices</span></span>
<span id="cb12-7">sheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C5"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"=AVERAGE(C2:C4)"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average stock</span></span></code></pre></div>
</div>
<p><strong>Important Note</strong>: openpyxl stores formulas as text. Excel calculates the results when you open the file .</p>
</section>
<section id="creating-simple-charts" class="level1">
<h1>Creating Simple Charts</h1>
<p>Visual data representation makes reports more compelling:</p>
<div id="b2c38a11" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openpyxl.chart <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BarChart, Reference</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a bar chart</span></span>
<span id="cb13-4">chart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BarChart()</span>
<span id="cb13-5">chart.title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product Stock Levels"</span></span>
<span id="cb13-6">chart.x_axis.title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Products"</span></span>
<span id="cb13-7">chart.y_axis.title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stock Quantity"</span></span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define data range</span></span>
<span id="cb13-10">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Reference(sheet, min_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, min_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-11">categories <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Reference(sheet, min_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, min_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, max_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-12"></span>
<span id="cb13-13">chart.add_data(data, titles_from_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-14">chart.set_categories(categories)</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add chart to worksheet</span></span>
<span id="cb13-17">sheet.add_chart(chart, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E2"</span>)</span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the workbook</span></span>
<span id="cb13-19">workbook.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"products.xlsx"</span>)</span></code></pre></div>
</div>
</section>
<section id="best-practices-for-beginners" class="level1">
<h1>Best Practices for Beginners</h1>
<section id="essential-tips" class="level2">
<h2 class="anchored" data-anchor-id="essential-tips">Essential Tips</h2>
<p>‚Ä¢ <strong>Always save your workbook</strong>: Use <code>workbook.save("filename.xlsx")</code> after making changes ‚Ä¢ <strong>Use descriptive variable names</strong>: <code>student_worksheet</code> instead of <code>ws1</code> ‚Ä¢ <strong>Test with small datasets first</strong>: Verify your code works before processing large files ‚Ä¢ <strong>Handle errors gracefully</strong>: Use try-except blocks for file operations ‚Ä¢ <strong>Keep backups</strong>: Always backup important files before modifying them</p>
</section>
<section id="common-mistakes-to-avoid" class="level2">
<h2 class="anchored" data-anchor-id="common-mistakes-to-avoid">Common Mistakes to Avoid</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 45%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th>Mistake</th>
<th>Why It Happens</th>
<th>Solution</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Forgetting to save</strong></td>
<td>Code runs but file doesn‚Äôt update</td>
<td>Always call <code>workbook.save()</code></td>
</tr>
<tr class="even">
<td><strong>Wrong file extension</strong></td>
<td>Using <code>.xls</code> instead of <code>.xlsx</code></td>
<td>openpyxl only works with <code>.xlsx</code></td>
</tr>
<tr class="odd">
<td><strong>1-based vs 0-based indexing</strong></td>
<td>Excel uses 1-based indexing</td>
<td>Remember: A1 is row=1, column=1</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="practical-example-sales-report" class="level1">
<h1>Practical Example: Sales Report</h1>
<p>Let‚Äôs put everything together with a real-world example:</p>
<div id="5889f61f" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openpyxl <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Workbook</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> openpyxl.styles <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Font</span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sales report</span></span>
<span id="cb14-6">wb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Workbook()</span>
<span id="cb14-7">ws <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wb.active</span>
<span id="cb14-8">ws.title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales Report"</span></span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add headers with formatting</span></span>
<span id="cb14-11">headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Product'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Quantity'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unit Price'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Total'</span>]</span>
<span id="cb14-12">ws.append(headers)</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make headers bold</span></span>
<span id="cb14-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cell <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ws[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb14-16">    cell.font <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Font(bold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-17"></span>
<span id="cb14-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add sales data</span></span>
<span id="cb14-19">sales_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb14-20">    [datetime.date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Laptop'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">999.99</span>],</span>
<span id="cb14-21">    [datetime.date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mouse'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">29.99</span>],</span>
<span id="cb14-22">    [datetime.date(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keyboard'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.99</span>]</span>
<span id="cb14-23">]</span>
<span id="cb14-24"></span>
<span id="cb14-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sales_data:</span>
<span id="cb14-26">    ws.append(row)</span>
<span id="cb14-27"></span>
<span id="cb14-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total formulas</span></span>
<span id="cb14-29"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb14-30">    ws.cell(row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>row, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'=C</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">*D</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-31">    ws.cell(row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>row, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).number_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$#,##0.00'</span></span>
<span id="cb14-32">    ws.cell(row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>row, column<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>).number_format <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$#,##0.00'</span></span>
<span id="cb14-33"></span>
<span id="cb14-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the report</span></span>
<span id="cb14-35">wb.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sales_report.xlsx'</span>)</span></code></pre></div>
</div>
</section>
<section id="quick-reference-table" class="level1">
<h1>Quick Reference Table</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 42%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th>Task</th>
<th>Code Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Create workbook</strong></td>
<td><code>wb = Workbook()</code></td>
<td>New Excel file</td>
</tr>
<tr class="even">
<td><strong>Load workbook</strong></td>
<td><code>wb = load_workbook('file.xlsx')</code></td>
<td>Open existing file</td>
</tr>
<tr class="odd">
<td><strong>Access sheet</strong></td>
<td><code>ws = wb.active</code></td>
<td>Get current sheet</td>
</tr>
<tr class="even">
<td><strong>Read cell</strong></td>
<td><code>value = ws['A1'].value</code></td>
<td>Get cell value</td>
</tr>
<tr class="odd">
<td><strong>Write cell</strong></td>
<td><code>ws['A1'] = 'Hello'</code></td>
<td>Set cell value</td>
</tr>
<tr class="even">
<td><strong>Add row</strong></td>
<td><code>ws.append(['A', 'B', 'C'])</code></td>
<td>Add data row</td>
</tr>
<tr class="odd">
<td><strong>Save file</strong></td>
<td><code>wb.save('file.xlsx')</code></td>
<td>Save changes</td>
</tr>
</tbody>
</table>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Working with Excel spreadsheets in Python using openpyxl opens up endless possibilities for data automation and analysis. You‚Äôve learned how to create, read, and modify Excel files, add formatting and charts, and follow best practices that will serve you well in real-world projects.</p>
<p>The key to mastering openpyxl is practice. Start with simple tasks like reading data from existing files, then gradually work up to creating complex reports with multiple sheets, formulas, and charts. Remember to always test your code with small datasets first, handle errors properly, and keep backups of important files.</p>
<p><strong>Ready to automate your Excel workflows?</strong> Start with the examples in this guide and gradually build more complex solutions. Your future self will thank you for learning this valuable skill!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>Based on the research findings and best practices for digital content citations, here‚Äôs a properly formatted references section with four working, relevant clickable links for the Excel/openpyxl tutorial:</p>
</section>
<section id="references-1" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><strong>openpyxl Official Documentation</strong> - The comprehensive official documentation for the openpyxl library, including installation guides, API reference, and advanced features.<br>
<a href="https://openpyxl.readthedocs.io/">https://openpyxl.readthedocs.io/</a></p></li>
<li><p><strong>A Guide to Excel Spreadsheets in Python With openpyxl ‚Äì Real Python</strong> - An in-depth tutorial covering practical use cases, detailed code examples, and best practices for manipulating Excel spreadsheets using Python.<br>
<a href="https://realpython.com/openpyxl-excel-spreadsheets-python/">https://realpython.com/openpyxl-excel-spreadsheets-python/</a></p></li>
<li><p><strong>Reading an Excel File Using Python openpyxl Module ‚Äì GeeksforGeeks</strong> - A step-by-step beginner‚Äôs guide with code snippets for reading and extracting data from Excel files using the openpyxl library.<br>
<a href="https://www.geeksforgeeks.org/python/python-reading-excel-file-using-openpyxl-module/">https://www.geeksforgeeks.org/python/python-reading-excel-file-using-openpyxl-module/</a></p></li>
<li><p><strong>How to Read Excel File in Python using Openpyxl ‚Äì Medium</strong> - An accessible tutorial explaining the fundamentals of reading Excel files, accessing worksheets, and retrieving data with openpyxl for Python beginners.<br>
<a href="https://medium.com/@vidvatek/how-to-read-excel-file-in-python-using-openpyxl-354f3729b1cf">https://medium.com/<span class="citation" data-cites="vidvatek/how-to-read-excel-file-in-python-using-openpyxl-354f3729b1cf">@vidvatek/how-to-read-excel-file-in-python-using-openpyxl-354f3729b1cf</span></a></p></li>
</ol>
<hr>
<p><em>Have you tried automating Excel tasks with Python? Share your experiences and questions in the comments below, and don‚Äôt forget to share this guide with fellow Python beginners on social media!</em></p>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-10/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Excel Spreadsheets with Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-10/</guid>
  <pubDate>Wed, 10 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>TidyDensity Update</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-08/</link>
  <description><![CDATA[ 






<blockquote class="blockquote">
<p><strong>Key Update:</strong> TidyDensity 1.5.2 delivers significant performance improvements and enhanced mixture modeling capabilities, but introduces breaking changes.</p>
</blockquote>
<p><strong>TidyDensity 1.5.2</strong> has arrived with substantial improvements that will transform how R programmers work with statistical distributions. Released on September 6, 2025, this update brings a fundamentally redesigned <code>quantile_normalize()</code> function and powerful new mixture modeling capabilities through enhanced <code>tidy_mixture_density()</code> functionality . While these changes offer compelling performance benefits, they also introduce breaking changes that require careful consideration for existing workflows.</p>
<hr>
<section id="what-is-tidydensity" class="level1">
<h1>What is TidyDensity?</h1>
<p>TidyDensity is an R package designed to simplify the generation, analysis, and visualization of random numbers from statistical distributions within the tidyverse ecosystem. The package provides a consistent, tidy interface for working with distributional data, making it invaluable for simulation studies, statistical modeling, and exploratory data analysis.</p>
<p><strong>Core capabilities include:</strong></p>
<ul>
<li>Generating tidy random samples from numerous distributions</li>
<li>Creating and analyzing mixture models</li>
<li>Performing quantile normalization for cross-sample comparability</li>
<li>Seamless integration with tidyverse workflows</li>
</ul>
</section>
<section id="breaking-changes-the-new-quantile_normalize" class="level1">
<h1>Breaking Changes: The New <code>quantile_normalize()</code></h1>
<section id="performance-revolution" class="level2">
<h2 class="anchored" data-anchor-id="performance-revolution"><strong>Performance Revolution</strong></h2>
<p>The most significant change in TidyDensity 1.5.2 is the complete redesign of the <code>quantile_normalize()</code> function. This algorithmic overhaul delivers substantial performance improvements.</p>
</section>
<section id="technical-implementation" class="level2">
<h2 class="anchored" data-anchor-id="technical-implementation"><strong>Technical Implementation</strong></h2>
<p>The new algorithm leverages vectorized operations and indexing techniques, moving away from the classical approach that relied on memory-intensive intermediate storage. The redesign focuses on:</p>
<ul>
<li><strong>Reduced redundant sorting operations</strong></li>
<li><strong>In-place memory operations</strong> where possible</li>
<li><strong>Optimized index mapping</strong> for restoring original order</li>
<li><strong>Enhanced algorithmic efficiency</strong> for large datasets</li>
</ul>
</section>
<section id="why-breaking-changes-occurred" class="level2">
<h2 class="anchored" data-anchor-id="why-breaking-changes-occurred"><strong>Why Breaking Changes Occurred</strong></h2>
<p>The algorithmic improvements come with a trade-off: <strong>slightly different numerical outputs</strong>. While the statistical properties remain identical (same quantiles, same normalization effect), the exact element-wise values may differ between versions. The biggest difference is that the function now only returns the normalized data. The old one returned the input data, output data and other intermediate information like duplicate ranks rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: package 'TidyDensity' was built under R version 4.5.1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example: Both versions produce identical quantiles</span></span>
<span id="cb3-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-3">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile_normalize</span>(data)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(normalized_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]       [,3]       [,4]
[1,] -0.9980322  0.8648786  0.8648786  1.2291761
[2,] -0.5656369 -0.5656369  1.2291761  0.8648786
[3,]  1.2291761  0.2846513  0.2846513  0.2846513
[4,]  0.2846513  1.2291761 -0.9980322 -0.9980322
[5,]  0.8648786 -0.9980322 -0.5656369 -0.5656369</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All columns now share identical quantile distributions</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But individual elements may differ slightly from v1.5.1</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(normalized_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             V1         V2         V3         V4
0%   -0.9980322 -0.9980322 -0.9980322 -0.9980322
25%  -0.5656369 -0.5656369 -0.5656369 -0.5656369
50%   0.2846513  0.2846513  0.2846513  0.2846513
75%   0.8648786  0.8648786  0.8648786  0.8648786
100%  1.2291761  1.2291761  1.2291761  1.2291761</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return in tibble format</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile_normalize</span>(</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rand_norm_1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>),</span>
<span id="cb7-4">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rand_norm_b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)),</span>
<span id="cb7-5">           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 30 √ó 2
   rand_norm_1 rand_norm_b
         &lt;dbl&gt;       &lt;dbl&gt;
 1     -0.589       1.28  
 2     -1.17        1.04  
 3     -1.85       -0.0239
 4      0.899      -0.232 
 5      0.204       1.21  
 6      1.21       -0.796 
 7     -1.60        1.11  
 8      0.0248     -1.17  
 9     -1.22       -0.710 
10     -1.00        0.370 
# ‚Ñπ 20 more rows</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Important:</strong> The quantile normalization properties are perfectly preserved - all columns have identical quantiles after processing. Only the specific element arrangements differ.</p>
</blockquote>
</section>
</section>
<section id="new-features-enhanced-tidy_mixture_density" class="level1">
<h1>New Features: Enhanced <code>tidy_mixture_density()</code></h1>
<section id="flexible-combination-types" class="level2">
<h2 class="anchored" data-anchor-id="flexible-combination-types"><strong>Flexible Combination Types</strong></h2>
<p>TidyDensity 1.5.2 introduces a powerful <code>.combination_type</code> parameter to <code>tidy_mixture_density()</code>, enabling five different ways to combine distributions :</p>
<table class="caption-top table">
<colgroup>
<col style="width: 42%">
<col style="width: 32%">
<col style="width: 25%">
</colgroup>
<thead>
<tr class="header">
<th>Combination Type</th>
<th>Description</th>
<th>Use Case</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>stack</strong></td>
<td>Concatenate all data points (default)</td>
<td>Traditional mixture models</td>
</tr>
<tr class="even">
<td><strong>add</strong></td>
<td>Element-wise addition</td>
<td>Additive effects modeling</td>
</tr>
<tr class="odd">
<td><strong>subtract</strong></td>
<td>Element-wise subtraction</td>
<td>Difference analysis</td>
</tr>
<tr class="even">
<td><strong>multiply</strong></td>
<td>Element-wise multiplication</td>
<td>Interaction effects</td>
</tr>
<tr class="odd">
<td><strong>divide</strong></td>
<td>Element-wise division</td>
<td>Ratio analysis</td>
</tr>
</tbody>
</table>
</section>
<section id="practical-examples" class="level2">
<h2 class="anchored" data-anchor-id="practical-examples"><strong>Practical Examples</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Traditional mixture model (default behavior)</span></span>
<span id="cb9-2">mix_stack <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mixture_density</span>(</span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combination_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stack"</span></span>
<span id="cb9-6">)</span>
<span id="cb9-7">mix_stack</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
$data$dist_tbl
# A tibble: 150 √ó 2
       x      y
   &lt;int&gt;  &lt;dbl&gt;
 1     1 -0.609
 2     2 -0.370
 3     3 -0.308
 4     4 -0.786
 5     5  0.437
 6     6 -0.552
 7     7  0.303
 8     8 -0.652
 9     9 -0.144
10    10 -0.260
# ‚Ñπ 140 more rows

$data$dens_tbl
# A tibble: 150 √ó 2
       x        y
   &lt;dbl&gt;    &lt;dbl&gt;
 1 -4.28 0.000118
 2 -4.19 0.000171
 3 -4.10 0.000245
 4 -4.01 0.000349
 5 -3.91 0.000489
 6 -3.82 0.000677
 7 -3.73 0.000931
 8 -3.63 0.00126 
 9 -3.54 0.00170 
10 -3.45 0.00226 
# ‚Ñπ 140 more rows

$data$input_data
$data$input_data$`rnorm(100, 0, 1)`
  [1] -0.60865878 -0.37038002 -0.30760339 -0.78599279  0.43657861 -0.55247080
  [7]  0.30320995 -0.65226084 -0.14429342 -0.25965742 -1.57960296  0.07128014
 [13]  0.65531402  1.35367040 -0.30645307 -0.82656469  1.32659588  0.36869342
 [19]  0.31268606  1.84046365 -1.35549208 -0.15825175  0.68863337 -1.39859775
 [25] -1.07112427  1.45502151  0.06602545 -0.39876615  0.05499137  0.09214760
 [31]  0.38800665 -1.04310666 -0.93508809  0.78018540 -0.14736187  0.48487063
 [37] -0.71797977 -0.09083663  0.24619862  0.42560605 -0.91303163 -0.40070704
 [43] -0.09056107  2.12683480  0.97909343  0.25586273  0.06160965 -0.24959411
 [49] -0.63688175  0.61513865 -1.80508425 -0.10904217 -1.49586272  0.65779129
 [55] -0.21556674  1.45041449  1.64820547 -0.00864845  1.14990888 -0.14165598
 [61]  1.08637758 -0.47666081  0.31451903  1.59206247 -0.31551530 -1.60855895
 [67]  0.91927450 -0.56171737 -0.17915531  0.25223463  0.99074046  1.09265035
 [73] -0.42699577 -1.42269492  0.28942361 -0.93808071 -0.38747430 -1.04629553
 [79] -0.93624539 -0.89624495 -0.94646613  1.43409772  0.40376921  2.20170782
 [85]  0.14770417 -1.10348135 -0.84095040  0.95636639  1.13483275 -0.43345698
 [91]  0.77418611  0.24623017 -0.49152719  0.97051886 -0.40725688  0.02543623
 [97] -0.16623957 -1.15500277  1.37865589  1.67954844

$data$input_data$`tidy_normal(.mean = 5, .sd = 1)`
# A tibble: 50 √ó 7
   sim_number     x     y    dx       dy      p     q
   &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
 1 1              1  6.52  2.33 0.000974 0.936   6.52
 2 1              2  3.39  2.45 0.00261  0.0538  3.39
 3 1              3  5.54  2.57 0.00629  0.706   5.54
 4 1              4  5.40  2.69 0.0136   0.655   5.40
 5 1              5  5.64  2.81 0.0262   0.739   5.64
 6 1              6  5.40  2.93 0.0457   0.656   5.40
 7 1              7  5.02  3.05 0.0718   0.508   5.02
 8 1              8  4.34  3.17 0.102    0.254   4.34
 9 1              9  4.81  3.29 0.133    0.423   4.81
10 1             10  4.08  3.41 0.160    0.179   4.08
# ‚Ñπ 40 more rows



$plots
$plots$line_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$plots$dens_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

$input_fns
[1] "rnorm(100, 0, 1), tidy_normal(.mean = 5, .sd = 1)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Additive mixture for modeling combined effects</span></span>
<span id="cb13-2">mix_additive <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mixture_density</span>(</span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combination_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"add"</span></span>
<span id="cb13-6">)</span>
<span id="cb13-7">mix_additive</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
$data$dist_tbl
# A tibble: 50 √ó 2
       x       y
   &lt;int&gt;   &lt;dbl&gt;
 1     1  0.172 
 2     2 -0.385 
 3     3  0.388 
 4     4  0.168 
 5     5 -1.48  
 6     6  0.743 
 7     7  0.859 
 8     8  0.783 
 9     9 -0.0703
10    10 -0.992 
# ‚Ñπ 40 more rows

$data$dens_tbl
# A tibble: 50 √ó 2
       x        y
   &lt;dbl&gt;    &lt;dbl&gt;
 1 -2.41 0.000289
 2 -2.28 0.000893
 3 -2.16 0.00236 
 4 -2.04 0.00531 
 5 -1.91 0.0103  
 6 -1.79 0.0174  
 7 -1.66 0.0259  
 8 -1.54 0.0353  
 9 -1.41 0.0461  
10 -1.29 0.0597  
# ‚Ñπ 40 more rows

$data$input_data
$data$input_data$`rnorm(50)`
 [1] -0.28375667 -1.35693228 -0.44459842 -0.44189941 -1.75245474  0.56591611
 [7]  0.64969767  0.43861900 -0.29576390 -1.05083449  0.46476746 -0.09441544
[13]  0.01988715 -0.11553959 -1.06165613 -0.23215249 -0.73166009  0.85851074
[19] -0.23347946 -0.98707523  0.48980891  0.45443754 -0.06019617 -0.28090697
[25]  0.02640269  0.34780762  0.08271394  0.38223602  0.37200374  0.15833057
[31]  0.67451345  0.19271746 -0.76646273 -0.61174894 -0.66437076  0.41119339
[37]  0.94342842  1.79174540 -0.78712893  0.84426079  1.21105485 -1.08434366
[43]  0.34320348  1.51119066 -1.54429610 -0.53518346 -0.12958712  0.40503043
[49]  1.10792452 -0.35614745

$data$input_data$`rbeta(50, 0.5, 0.5)`
 [1] 0.4558286432 0.9722089635 0.8326968294 0.6098241262 0.2693505903
 [6] 0.1769712879 0.2097711862 0.3447365735 0.2255041322 0.0593279079
[11] 0.3605619162 0.7653921143 0.9300206371 0.0649047973 0.8248588302
[16] 0.4746486057 0.0007107969 0.0303139028 0.1092924293 0.9994465190
[21] 0.5447640613 0.6838621697 0.4264545201 0.0350483756 0.1439936791
[26] 0.9999991418 0.9971223513 0.9366023326 0.2380888988 0.3954270399
[31] 0.6355559970 0.0082225336 0.1935222058 0.8301693526 0.0006154042
[36] 0.9468539743 0.5805084634 0.9630710788 0.8536182424 0.0636560268
[41] 0.3383464734 0.8648131947 0.2472292868 0.7353653812 0.6462800353
[46] 0.3418460528 0.8706317638 0.0537689028 0.4028589675 0.5659417332



$plots
$plots$line_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$plots$dens_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

$input_fns
[1] "rnorm(50), rbeta(50, 0.5, 0.5)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiplicative interactions</span></span>
<span id="cb17-2">mix_multiplicative <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mixture_density</span>(</span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb17-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb17-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combination_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiply"</span></span>
<span id="cb17-6">)</span>
<span id="cb17-7">mix_multiplicative</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
$data$dist_tbl
# A tibble: 50 √ó 2
       x       y
   &lt;int&gt;   &lt;dbl&gt;
 1     1  0.0128
 2     2 -0.352 
 3     3 -0.228 
 4     4  0.0318
 5     5  0.0846
 6     6  0.0148
 7     7  0.301 
 8     8  0.125 
 9     9 -0.196 
10    10  1.58  
# ‚Ñπ 40 more rows

$data$dens_tbl
# A tibble: 50 √ó 2
        x       y
    &lt;dbl&gt;   &lt;dbl&gt;
 1 -1.49  0.00113
 2 -1.42  0.00577
 3 -1.34  0.0217 
 4 -1.27  0.0605 
 5 -1.19  0.127  
 6 -1.12  0.205  
 7 -1.04  0.261  
 8 -0.968 0.272  
 9 -0.893 0.243  
10 -0.818 0.197  
# ‚Ñπ 40 more rows

$data$input_data
$data$input_data$`rnorm(50)`
 [1]  0.32370511 -1.21400213 -1.20899806  0.03519770  0.53932734  0.02665457
 [7]  0.41845197  0.14043657 -0.55713865  1.68772225  0.33995465 -1.38935947
[13]  0.74516592 -0.04187743 -1.86673573  0.14417007 -0.44909386 -0.46806361
[19] -1.36766494  0.19793102  0.85812595  0.38882190 -1.00188631  0.43322473
[25]  0.43850846  0.84118862  1.63111722 -0.80401369 -0.96695329  0.44273011
[31]  0.18966768  0.18008685  0.47594963  2.67993093  0.56240726 -0.68272322
[37]  2.07827084  2.87539786  0.07352364 -0.59474395  0.54737811  0.70341946
[43] -0.46216676 -1.04391929 -0.53857891  0.60391106 -1.06072413  0.36132956
[49] -1.24601342 -0.67495126

$data$input_data$`rbeta(50, 0.5, 0.5)`
 [1] 0.03961826 0.28965374 0.18885811 0.90263774 0.15690042 0.55506535
 [7] 0.71961247 0.88995670 0.35266007 0.93680182 0.79821917 0.79099196
[13] 0.47833454 0.88224189 0.06153885 0.96803949 0.16677721 0.08155236
[19] 0.78180736 0.89987410 0.06377253 0.99049015 0.92083908 0.81639438
[25] 0.11599055 0.89253034 0.99961689 0.06746365 0.94993344 0.93847486
[31] 0.04346734 0.97125746 0.01042851 0.07114067 0.04258062 0.31699967
[37] 0.57796230 0.62059110 0.28030112 0.95068023 0.21437376 0.46588256
[43] 0.60081481 0.98127380 0.03041642 0.67000409 0.72883674 0.26381406
[49] 0.43238751 0.07012001



$plots
$plots$line_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-5.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$plots$dens_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-6.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

$input_fns
[1] "rnorm(50), rbeta(50, 0.5, 0.5)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtration for differencing</span></span>
<span id="cb21-2">mix_subtract <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mixture_density</span>(</span>
<span id="cb21-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb21-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb21-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combination_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subtract"</span></span>
<span id="cb21-6">)</span>
<span id="cb21-7">mix_subtract</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
$data$dist_tbl
# A tibble: 50 √ó 2
       x       y
   &lt;int&gt;   &lt;dbl&gt;
 1     1 -0.934 
 2     2  0.0255
 3     3 -0.807 
 4     4  0.639 
 5     5 -0.151 
 6     6  0.261 
 7     7  0.383 
 8     8 -1.06  
 9     9 -1.17  
10    10  0.868 
# ‚Ñπ 40 more rows

$data$dens_tbl
# A tibble: 50 √ó 2
       x        y
   &lt;dbl&gt;    &lt;dbl&gt;
 1 -3.33 0.000267
 2 -3.22 0.000687
 3 -3.10 0.00159 
 4 -2.99 0.00333 
 5 -2.88 0.00633 
 6 -2.76 0.0109  
 7 -2.65 0.0173  
 8 -2.54 0.0252  
 9 -2.43 0.0342  
10 -2.31 0.0442  
# ‚Ñπ 40 more rows

$data$input_data
$data$input_data$`rnorm(50)`
 [1]  0.04741171  0.78106971 -0.51649345  0.79333600  0.84698156  0.44755311
 [7]  0.42599173 -0.05861854 -0.17167764  1.86283568 -0.34825311  1.15277765
[13] -0.43388248 -0.44234758  0.18575088 -1.14766103 -1.00124274 -1.29743634
[19]  0.04227262  1.88358997 -1.03996542  0.01229659  0.54674453  0.78417878
[25] -0.68734596  1.46836234  1.17552232  0.21217058  0.58419970  1.79239641
[31] -0.15530648  0.77885429  1.54672370  1.11665693  0.35566983  0.52467994
[37]  0.30117165 -0.38017897 -0.35182655 -0.50842405  1.54094057  0.01395280
[43] -0.56581282 -0.36566571  0.98543508 -0.48095752 -0.08275619 -0.53918661
[49] -0.51094105  0.65497036

$data$input_data$`rbeta(50, 0.5, 0.5)`
 [1] 0.981019342 0.755544020 0.290997064 0.153894509 0.997501146 0.187018584
 [7] 0.042874119 0.997810266 0.998535547 0.994524920 0.049740075 0.053181972
[13] 0.009592371 0.127241021 0.385442338 0.141428843 0.966020263 0.998885522
[19] 0.194088533 0.709788033 0.479590987 0.346260596 0.958567049 0.796353667
[25] 0.928775994 0.981901862 0.241413100 0.061032775 0.789884132 0.895207272
[31] 0.011005119 0.931750374 0.761540209 0.632937614 0.959700133 0.065693893
[37] 0.654884437 0.980215158 0.887362439 0.347511106 0.982633970 0.108274936
[43] 0.898851715 0.602077489 0.104709882 0.286286952 0.181128702 0.670655445
[49] 0.287199855 0.910472770



$plots
$plots$line_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-7.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$plots$dens_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-8.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

$input_fns
[1] "rnorm(50), rbeta(50, 0.5, 0.5)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Division for ratios</span></span>
<span id="cb25-2">mix_divide <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mixture_density</span>(</span>
<span id="cb25-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb25-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb25-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.combination_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"divide"</span></span>
<span id="cb25-6">)</span>
<span id="cb25-7">mix_divide</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
$data$dist_tbl
# A tibble: 50 √ó 2
       x         y
   &lt;int&gt;     &lt;dbl&gt;
 1     1     3.00 
 2     2    -1.79 
 3     3     0.603
 4     4     1.36 
 5     5 25721.   
 6     6  9101.   
 7     7     1.80 
 8     8    -0.620
 9     9    -0.698
10    10     1.73 
# ‚Ñπ 40 more rows

$data$dens_tbl
# A tibble: 50 √ó 2
        x        y
    &lt;dbl&gt;    &lt;dbl&gt;
 1 -445.  6.46e- 3
 2   89.1 5.56e- 4
 3  623.  2.49e-20
 4 1157.  3.46e-20
 5 1691.  5.86e-19
 6 2225.  1.04e-19
 7 2759.  1.06e-18
 8 3293.  0       
 9 3827.  0       
10 4362.  0       
# ‚Ñπ 40 more rows

$data$input_data
$data$input_data$`rnorm(50)`
 [1]  1.14765189 -0.65037474  0.56076429  0.14529634  2.07643060  1.35312739
 [7]  1.36098704 -0.38382420 -0.60398679  1.72618260  1.02326275  0.53904945
[13]  0.58427997 -1.24784343  0.54468193  0.23675504 -0.06278437 -0.19938179
[19]  0.29774594 -1.73700726 -0.95278639  1.50377661  0.76641470 -1.64577160
[25] -1.87538645  0.20415661 -0.02288698  0.03017884 -1.11147919 -0.53853737
[31]  0.58745346  1.53857208 -0.71316156  0.30820280  1.12513966 -1.22796997
[37] -0.43473722 -1.17160252 -1.49085069 -0.97810140  0.77343726 -0.27780074
[43]  0.10606935  1.18324993 -0.66469916  0.77692003 -1.72619510  0.12750687
[49] -0.63319646 -0.44339251

$data$input_data$`rbeta(50, 0.5, 0.5)`
 [1] 3.820203e-01 3.628845e-01 9.300254e-01 1.067735e-01 8.072951e-05
 [6] 1.486745e-04 7.576313e-01 6.194406e-01 8.654029e-01 9.957012e-01
[11] 4.249757e-01 1.018361e-01 9.576092e-01 9.578569e-03 1.354495e-03
[16] 9.547469e-01 9.999004e-01 6.847354e-03 2.532576e-01 8.101000e-01
[21] 9.979821e-01 7.362087e-01 1.718800e-01 1.436152e-01 7.798669e-01
[26] 9.892079e-01 5.585185e-01 8.395558e-01 2.514851e-03 6.805656e-01
[31] 9.669103e-01 1.653675e-04 7.284081e-01 9.800184e-01 9.538534e-02
[36] 8.859544e-01 9.990685e-01 1.933901e-01 9.998451e-01 5.631759e-01
[41] 4.015837e-02 3.758858e-01 9.970344e-01 6.033153e-01 5.793981e-01
[46] 2.345981e-03 9.560933e-01 7.753198e-01 2.004754e-01 7.424075e-01



$plots
$plots$line_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-9.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
$plots$dens_plot</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/index_files/figure-html/unnamed-chunk-2-10.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>

$input_fns
[1] "rnorm(50), rbeta(50, 0.5, 0.5)"</code></pre>
</div>
</div>
<p>Each combination returns comprehensive output including:</p>
<ul>
<li><strong>Tidy data tables</strong> with combined distributions</li>
<li><strong>Density estimates</strong> for visualization</li>
<li><strong>Ready-to-use plots</strong> for immediate analysis</li>
<li><strong>Input function metadata</strong> for reproducibility</li>
</ul>
</section>
</section>
<section id="best-practices-and-recommendations" class="level1">
<h1>Best Practices and Recommendations</h1>
<section id="for-existing-users" class="level2">
<h2 class="anchored" data-anchor-id="for-existing-users"><strong>For Existing Users</strong></h2>
<ul>
<li><strong>Gradually migrate</strong> critical workflows after thorough testing</li>
<li><strong>Document any code</strong> that depends on exact quantile_normalize() outputs</li>
<li><strong>Leverage new mixture modeling</strong> for more sophisticated statistical modeling</li>
<li><strong>Test downstream analyses</strong> to ensure compatibility</li>
</ul>
</section>
<section id="for-new-users" class="level2">
<h2 class="anchored" data-anchor-id="for-new-users"><strong>For New Users</strong></h2>
<ul>
<li><strong>Start with v1.5.2</strong> to benefit from performance improvements immediately</li>
<li><strong>Explore mixture modeling capabilities</strong> for creative statistical applications</li>
<li><strong>Use in tidyverse pipelines</strong> for seamless data science workflows</li>
</ul>
</section>
</section>
<section id="looking-forward" class="level1">
<h1>Looking Forward</h1>
<p>TidyDensity 1.5.2 represents a significant evolution in the package‚Äôs capabilities. The performance improvements in <code>quantile_normalize()</code> make it more suitable for large-scale data science applications, while the enhanced <code>tidy_mixture_density()</code> opens new possibilities for sophisticated statistical modeling.</p>
<p>The breaking changes, though initially challenging, position the package for better scalability and more efficient memory usage, crucial factors for modern data science workflows.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p><strong>TidyDensity 1.5.2</strong> delivers substantial improvements that will benefit R programmers working with statistical distributions. The 48.6% performance improvement in <code>quantile_normalize()</code> and flexible mixture modeling capabilities make this update highly valuable, despite the breaking changes.</p>
<p><strong>Key takeaways:</strong></p>
<ul>
<li>‚úÖ Significant performance gains across all dataset sizes</li>
<li>‚úÖ Enhanced mixture modeling with five combination types</li>
<li>‚úÖ Preserved statistical properties in quantile normalization</li>
<li>‚ö†Ô∏è Breaking changes require testing of existing workflows</li>
<li>üöÄ Improved scalability for large-scale data science applications</li>
</ul>
<p><strong>Ready to upgrade?</strong> Update to TidyDensity 1.5.2 and test your critical workflows to ensure compatibility. The performance benefits and new capabilities make this update well worth the migration effort.</p>
<blockquote class="blockquote">
<p>üí° <strong>What‚Äôs your experience with TidyDensity 1.5.2?</strong></p>
</blockquote>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-08/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>TidyDensity Update</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/<span class="citation" data-cites="stevensanderson">@stevensanderson</span></a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/<span class="citation" data-cites="spsanderson">@spsanderson</span></a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: <em>Extending Excel with Python and R</em> here</em>: <a href="https://packt.link/oTyZJ">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-08/</guid>
  <pubDate>Mon, 08 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Beginner‚Äôs Guide to Web Scraping in Python: From Zero to Web Data Hero</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-03/</link>
  <description><![CDATA[ 






<section id="authors-note" class="level2">
<h2 class="anchored" data-anchor-id="authors-note">Author‚Äôs Note</h2>
<blockquote class="blockquote">
<p><strong>Learning Together:</strong> Hey there! I want to be completely honest with you from the start. I‚Äôm learning web scraping as I write this series, which means we‚Äôre on this journey together. My goal isn‚Äôt to pretend I‚Äôm an expert, but rather to share what I discover in the clearest, most beginner friendly way possible. Every example in this guide has been tested to ensure it works, and I‚Äôll explain every piece of code like I‚Äôm talking to a friend who‚Äôs never seen Python before. Let‚Äôs dive in!</p>
</blockquote>
<hr>
</section>
<section id="introduction-what-is-web-scraping-and-why-should-you-care" class="level1">
<h1>Introduction: What Is Web Scraping and Why Should You Care?</h1>
<p><strong>Web scraping</strong> is like having a super-powered copy-and-paste tool for the internet. Instead of manually visiting websites and copying information by hand, you can write Python programs that automatically visit web pages, extract the data you need, and organize it for you .</p>
<p>Think of it this way: if you wanted to collect product prices from 100 different online stores, you could spend days clicking through websites, or you could write a 20-line Python script that does it in minutes.</p>
<blockquote class="blockquote">
<p><strong>Key Insight:</strong> Web scraping transforms the entire internet into your personal database, accessible through Python code.</p>
</blockquote>
</section>
<section id="understanding-the-python-web-scraping-ecosystem" class="level1">
<h1>Understanding the Python Web Scraping Ecosystem</h1>
<p>Before we start coding, let‚Äôs understand the tools in our toolkit. Python offers several libraries for web scraping, each with its own strengths and use cases.</p>
<section id="the-big-three-requests-beautifulsoup-and-selenium" class="level2">
<h2 class="anchored" data-anchor-id="the-big-three-requests-beautifulsoup-and-selenium">The Big Three: Requests, BeautifulSoup, and Selenium</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 22%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th>Library</th>
<th>Purpose</th>
<th>Best For</th>
<th>Learning Curve</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>requests</strong></td>
<td>Fetches web pages</td>
<td>Static content, APIs</td>
<td>Easy</td>
</tr>
<tr class="even">
<td><strong>BeautifulSoup</strong></td>
<td>Parses HTML</td>
<td>Simple HTML extraction</td>
<td>Easy</td>
</tr>
<tr class="odd">
<td><strong>Selenium</strong></td>
<td>Controls browsers</td>
<td>Dynamic content, JavaScript</td>
<td>Moderate</td>
</tr>
</tbody>
</table>
<section id="what-about-the-webbrowser-module" class="level3">
<h3 class="anchored" data-anchor-id="what-about-the-webbrowser-module">What About the <code>webbrowser</code> Module?</h3>
<p>You might have heard about Python‚Äôs <code>webbrowser</code> module, but here‚Äôs the thing: <strong>it‚Äôs not actually for scraping</strong> . The <code>webbrowser</code> module simply opens URLs in your default browser - it can‚Äôt extract or process data. Think of it as Python‚Äôs way of saying ‚ÄúHey browser, open this page for the human to look at.‚Äù</p>
</section>
</section>
</section>
<section id="setting-up-your-web-scraping-environment" class="level1">
<h1>Setting Up Your Web Scraping Environment</h1>
<p>Before we can start scraping, we need to install our tools. Open your terminal or command prompt and run:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install requests beautifulsoup4</span></code></pre></div>
<p>For Selenium (we‚Äôll cover this later):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install selenium</span></code></pre></div>
</section>
<section id="your-first-web-scraping-script-static-content" class="level1">
<h1>Your First Web Scraping Script: Static Content</h1>
<p>Let‚Äôs start with the simplest possible example. We‚Äôll scrape a basic webpage and extract some information.</p>
<section id="step-by-step-breakdown" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-breakdown">Step-by-Step Breakdown</h2>
<div id="0b4e1643" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Send HTTP request to get web page</span></span>
<span id="cb3-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://example.com"</span></span>
<span id="cb3-6">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Check if request was successful</span></span>
<span id="cb3-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb3-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"‚úì Successfully fetched the page!"</span>)</span>
<span id="cb3-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Content length: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(response.text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> characters"</span>)</span>
<span id="cb3-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"‚úó Failed to fetch page. Status code: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>status_code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Parse HTML with BeautifulSoup</span></span>
<span id="cb3-16">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Extract data</span></span>
<span id="cb3-19">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>).get_text()</span>
<span id="cb3-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Page title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all paragraphs</span></span>
<span id="cb3-23">paragraphs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>)</span>
<span id="cb3-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(paragraphs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> paragraph(s):"</span>)</span>
<span id="cb3-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(paragraphs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_text()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strip()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>‚úì Successfully fetched the page!
Content length: 1256 characters
Page title: Example Domain
Found 2 paragraph(s):
  1. This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.
  2. More information...</code></pre>
</div>
</div>
</section>
<section id="function-explanations-in-simple-terms" class="level2">
<h2 class="anchored" data-anchor-id="function-explanations-in-simple-terms">Function Explanations (In Simple Terms)</h2>
<ul>
<li><strong><code>requests.get(url)</code></strong>: Think of this as knocking on a website‚Äôs door and asking for its content</li>
<li><strong><code>response.status_code</code></strong>: The website‚Äôs response - 200 means ‚Äúsure, here‚Äôs the page!‚Äù</li>
<li><strong><code>BeautifulSoup(html, 'html.parser')</code></strong>: Takes messy HTML and organizes it so we can easily find things</li>
<li><strong><code>soup.find('title')</code></strong>: Looks for the first <code>&lt;title&gt;</code> tag on the page</li>
<li><strong><code>soup.find_all('p')</code></strong>: Finds ALL <code>&lt;p&gt;</code> (paragraph) tags on the page</li>
<li><strong><code>.get_text()</code></strong>: Extracts just the text content, ignoring HTML tags</li>
</ul>
</section>
</section>
<section id="mastering-beautifulsoup-different-ways-to-find-elements" class="level1">
<h1>Mastering BeautifulSoup: Different Ways to Find Elements</h1>
<p>BeautifulSoup gives you multiple ways to find HTML elements. Here‚Äôs a comparison of the most common methods:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 37%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Syntax</th>
<th>What It Finds</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>By Tag</strong></td>
<td><code>soup.find("tag")</code></td>
<td>First element with that tag</td>
<td><code>soup.find("title")</code></td>
</tr>
<tr class="even">
<td><strong>By ID</strong></td>
<td><code>soup.find("tag", id="id-name")</code></td>
<td>Element with specific ID</td>
<td><code>soup.find("h1", id="main-title")</code></td>
</tr>
<tr class="odd">
<td><strong>By Class</strong></td>
<td><code>soup.find("tag", class_="class-name")</code></td>
<td>Element with specific CSS class</td>
<td><code>soup.find("p", class_="intro")</code></td>
</tr>
<tr class="even">
<td><strong>CSS Selectors</strong></td>
<td><code>soup.select_one("css-selector")</code></td>
<td>First element matching CSS selector</td>
<td><code>soup.select_one(".footer a")</code></td>
</tr>
<tr class="odd">
<td><strong>Find All</strong></td>
<td><code>soup.find_all("tag")</code></td>
<td>ALL elements with that tag</td>
<td><code>soup.find_all("li", class_="item")</code></td>
</tr>
</tbody>
</table>
<section id="practical-example-multiple-selection-methods" class="level2">
<h2 class="anchored" data-anchor-id="practical-example-multiple-selection-methods">Practical Example: Multiple Selection Methods</h2>
<div id="d31508f3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample HTML structure</span></span>
<span id="cb5-2">html_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;html&gt;</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;body&gt;</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;h1 id="main-title"&gt;Welcome to Web Scraping&lt;/h1&gt;</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;p class="intro"&gt;This is an introduction.&lt;/p&gt;</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;ul&gt;</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;li class="item"&gt;Item 1&lt;/li&gt;</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;li class="item featured"&gt;Item 2 (Featured)&lt;/li&gt;</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;li class="item"&gt;Item 3&lt;/li&gt;</span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;/ul&gt;</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/body&gt;</span></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/html&gt;</span></span>
<span id="cb5-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(html_content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Different ways to extract data</span></span>
<span id="cb5-19">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h1'</span>).get_text()                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "Welcome to Web Scraping"</span></span>
<span id="cb5-20">intro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'intro'</span>).get_text()     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "This is an introduction."</span></span>
<span id="cb5-21">featured <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'li'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'item featured'</span>).get_text()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "Item 2 (Featured)"</span></span>
<span id="cb5-22">all_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [li.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> li <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'li'</span>)]      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of all items</span></span>
<span id="cb5-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(featured)</span>
<span id="cb5-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(all_items)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Item 2 (Featured)
['Item 1', 'Item 2 (Featured)', 'Item 3']</code></pre>
</div>
</div>
</section>
</section>
<section id="when-static-scraping-isnt-enough-enter-selenium" class="level1">
<h1>When Static Scraping Isn‚Äôt Enough: Enter Selenium</h1>
<p>Some websites load their content using JavaScript after the initial page loads. This is called <strong>dynamic content</strong>. When <code>requests</code> and <code>BeautifulSoup</code> visit these pages, they only see the empty shell - not the data that gets filled in later.</p>
<p>This is where <strong>Selenium</strong> comes in. Selenium actually opens a real web browser and can wait for JavaScript to run.</p>
<section id="when-to-use-each-tool" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-each-tool">When to Use Each Tool</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 29%">
<col style="width: 38%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Scenario</th>
<th>Tool Choice</th>
<th>Reasoning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Static HTML pages</strong></td>
<td>requests + BeautifulSoup</td>
<td>Faster and more efficient</td>
</tr>
<tr class="even">
<td><strong>JavaScript-heavy sites</strong></td>
<td>Selenium</td>
<td>Can execute JavaScript</td>
</tr>
<tr class="odd">
<td><strong>Need to interact</strong> (click, scroll, forms)</td>
<td>Selenium</td>
<td>Full browser control</td>
</tr>
<tr class="even">
<td><strong>Large-scale scraping</strong></td>
<td>requests + BeautifulSoup</td>
<td>Better performance</td>
</tr>
<tr class="odd">
<td><strong>Sites behind login</strong></td>
<td>Either (with sessions)</td>
<td>Depends on complexity</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-selenium-example" class="level2">
<h2 class="anchored" data-anchor-id="basic-selenium-example">Basic Selenium Example</h2>
<div id="59bef735" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> webdriver</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.common.by <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> By</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.chrome.options <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Options</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup Chrome to run in the background (headless)</span></span>
<span id="cb7-6">chrome_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Options()</span>
<span id="cb7-7">chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--headless"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run without opening browser window</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create WebDriver instance</span></span>
<span id="cb7-10">driver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> webdriver.Chrome(options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrome_options)</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Navigate to webpage</span></span>
<span id="cb7-14">    driver.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://example.com"</span>)</span>
<span id="cb7-15">    </span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait for page to load (implicit wait)</span></span>
<span id="cb7-17">    driver.implicitly_wait(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb7-18">    </span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find elements</span></span>
<span id="cb7-20">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.find_element(By.TAG_NAME, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h1"</span>).text</span>
<span id="cb7-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Page title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-22">    </span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find multiple elements</span></span>
<span id="cb7-24">    paragraphs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.find_elements(By.TAG_NAME, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>)</span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> paragraphs:</span>
<span id="cb7-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Paragraph: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-27">        </span>
<span id="cb7-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span>:</span>
<span id="cb7-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Always close the browser</span></span>
<span id="cb7-30">    driver.quit()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Page title: Example Domain
Paragraph: This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.
Paragraph: More information...</code></pre>
</div>
</div>
<p><strong>Selenium Function Explanations:</strong></p>
<ul>
<li><strong><code>webdriver.Chrome()</code></strong>: Starts a Chrome browser that Python can control</li>
<li><strong><code>driver.get(url)</code></strong>: Tells the browser to navigate to a specific webpage</li>
<li><strong><code>driver.find_element(By.TAG_NAME, "h1")</code></strong>: Finds the first <code>&lt;h1&gt;</code> element on the page</li>
<li><strong><code>driver.quit()</code></strong>: Closes the browser (very important - don‚Äôt leave browsers running!)</li>
</ul>
</section>
</section>
<section id="handling-common-challenges-the-reality-of-web-scraping" class="level1">
<h1>Handling Common Challenges: The Reality of Web Scraping</h1>
<p>Web scraping isn‚Äôt always smooth sailing. Here are the most common challenges you‚Äôll face and how to handle them:</p>
<section id="challenge-solutions-table" class="level2">
<h2 class="anchored" data-anchor-id="challenge-solutions-table">Challenge Solutions Table</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 20%">
<col style="width: 22%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>Challenge</th>
<th>Problem</th>
<th>Solution</th>
<th>Code Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Rate Limiting</strong></td>
<td>Server blocks rapid requests</td>
<td>Add delays</td>
<td><code>time.sleep(1)</code></td>
</tr>
<tr class="even">
<td><strong>Bot Detection</strong></td>
<td>Server detects automated requests</td>
<td>Use realistic headers</td>
<td><code>headers = {'User-Agent': 'Mozilla/5.0...'}</code></td>
</tr>
<tr class="odd">
<td><strong>Dynamic Content</strong></td>
<td>Data loads via JavaScript</td>
<td>Use Selenium</td>
<td><code>driver.get(url)</code></td>
</tr>
<tr class="even">
<td><strong>Session Management</strong></td>
<td>Need to stay logged in</td>
<td>Use requests.Session()</td>
<td><code>session = requests.Session()</code></td>
</tr>
<tr class="odd">
<td><strong>Changing Structure</strong></td>
<td>Website layout changes</td>
<td>Use multiple selectors</td>
<td><code>soup.find('h1') or soup.find('h2')</code></td>
</tr>
</tbody>
</table>
</section>
<section id="robust-scraping-with-error-handling" class="level2">
<h2 class="anchored" data-anchor-id="robust-scraping-with-error-handling">Robust Scraping with Error Handling</h2>
<p>Here‚Äôs a more professional scraping function that handles errors gracefully:</p>
<div id="3d74338e" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> robust_scrape(url, max_retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, delay_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)):</span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A robust scraping function with error handling</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        url (str): Website URL to scrape</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_retries (int): How many times to retry if something fails</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        delay_range (tuple): Random delay between requests (min, max seconds)</span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        BeautifulSoup object or None if failed</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Headers to look like a real browser</span></span>
<span id="cb9-19">    headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'User-Agent'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'</span></span>
<span id="cb9-21">    }</span>
<span id="cb9-22">    </span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> attempt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_retries):</span>
<span id="cb9-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random delay to seem human-like</span></span>
<span id="cb9-26">            delay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>delay_range)</span>
<span id="cb9-27">            time.sleep(delay)</span>
<span id="cb9-28">            </span>
<span id="cb9-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the request</span></span>
<span id="cb9-30">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-31">            response.raise_for_status()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Raises error for bad status codes</span></span>
<span id="cb9-32">            </span>
<span id="cb9-33">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse and return</span></span>
<span id="cb9-34">            soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb9-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> soup</span>
<span id="cb9-36">            </span>
<span id="cb9-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> requests.exceptions.Timeout:</span>
<span id="cb9-38">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Attempt </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>attempt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Request timed out"</span>)</span>
<span id="cb9-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> requests.exceptions.RequestException <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb9-40">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Attempt </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>attempt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Request error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-41">        </span>
<span id="cb9-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> attempt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_retries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb9-43">            wait_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> attempt  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait longer each time (1s, 2s, 4s)</span></span>
<span id="cb9-44">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Waiting </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>wait_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds before retry..."</span>)</span>
<span id="cb9-45">            time.sleep(wait_time)</span>
<span id="cb9-46">    </span>
<span id="cb9-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All retry attempts failed"</span>)</span>
<span id="cb9-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb9-49"></span>
<span id="cb9-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Usage example</span></span>
<span id="cb9-51">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> robust_scrape(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://example.com"</span>)</span>
<span id="cb9-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> soup:</span>
<span id="cb9-53">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>).get_text()</span>
<span id="cb9-54">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully scraped: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-56">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scraping failed after all retries"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Successfully scraped: Example Domain</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices-and-ethical-considerations" class="level1">
<h1>Best Practices and Ethical Considerations</h1>
<p>Web scraping comes with great power and great responsibility. Here are the essential guidelines every scraper should follow:</p>
<section id="technical-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="technical-best-practices">Technical Best Practices</h2>
<ul>
<li><strong>Always check robots.txt</strong> before scraping (visit website.com/robots.txt)</li>
<li><strong>Add delays between requests</strong> to avoid overwhelming servers</li>
<li><strong>Use proper User-Agent headers</strong> to identify your scraper honestly</li>
<li><strong>Handle errors gracefully</strong> with try/except blocks</li>
<li><strong>Validate and clean your data</strong> after extraction</li>
<li><strong>Close browser instances</strong> when using Selenium (use <code>driver.quit()</code>)</li>
</ul>
</section>
<section id="ethical-guidelines" class="level2">
<h2 class="anchored" data-anchor-id="ethical-guidelines">Ethical Guidelines</h2>
<ul>
<li><strong>Respect website Terms of Service</strong> - read them before scraping</li>
<li><strong>Don‚Äôt scrape personal or private data</strong> without permission</li>
<li><strong>Use official APIs when available</strong> - they‚Äôre usually better than scraping</li>
<li><strong>Give attribution</strong> when using scraped data in your projects</li>
<li><strong>Be transparent</strong> about your scraping activities if asked</li>
<li><strong>Don‚Äôt overload servers</strong> - be respectful of website resources</li>
</ul>
</section>
<section id="legal-considerations" class="level2">
<h2 class="anchored" data-anchor-id="legal-considerations">Legal Considerations</h2>
<p><strong>Important:</strong> This is not legal advice, but here are some general principles:</p>
<ul>
<li>Scraping publicly available data is generally okay</li>
<li>Always respect copyright and intellectual property rights</li>
<li>Be extra careful with personal data due to privacy laws (GDPR, CCPA)</li>
<li>When in doubt, contact the website owner for permission</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it‚Äôs your turn to practice! Here‚Äôs a hands-on exercise to reinforce what you‚Äôve learned.</p>
<p><strong>Challenge:</strong> Create a script that scrapes quotes from a test website and saves them to a text file.</p>
<p><strong>Your Task:</strong></p>
<ol type="1">
<li>Visit <code>https://quotes.toscrape.com/</code> (a site designed for scraping practice)</li>
<li>Extract the first 5 quotes on the page</li>
<li>For each quote, get the text, author, and tags</li>
<li>Save the results to a text file</li>
</ol>
<p><strong>Starter Code:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb11-3"></span>
<span id="cb11-4">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://quotes.toscrape.com/"</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here!</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hint: Look for &lt;div class="quote"&gt; elements</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each quote has text in &lt;span class="text"&gt;</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Authors are in &lt;small class="author"&gt;</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tags are in &lt;div class="tags"&gt; with &lt;a&gt; elements</span></span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<div id="570a204e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scrape_quotes():</span>
<span id="cb12-5">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://quotes.toscrape.com/"</span></span>
<span id="cb12-6">    </span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch the page</span></span>
<span id="cb12-8">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb12-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb12-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to fetch the page"</span>)</span>
<span id="cb12-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb12-12">    </span>
<span id="cb12-13">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all quote containers</span></span>
<span id="cb12-16">    quotes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quote'</span>)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract data from first 5 quotes</span></span>
<span id="cb12-19">    scraped_quotes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> quote <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quotes[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb12-21">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quote.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'span'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>).get_text()</span>
<span id="cb12-22">        author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quote.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'small'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author'</span>).get_text()</span>
<span id="cb12-23">        tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tag.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tag <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quote.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tag'</span>)]</span>
<span id="cb12-24">        </span>
<span id="cb12-25">        scraped_quotes.append({</span>
<span id="cb12-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>: text,</span>
<span id="cb12-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author'</span>: author,</span>
<span id="cb12-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tags'</span>: tags</span>
<span id="cb12-29">        })</span>
<span id="cb12-30">    </span>
<span id="cb12-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save to file</span></span>
<span id="cb12-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scraped_quotes.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb12-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, quote <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scraped_quotes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb12-34">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Quote </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-35">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>quote[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-36">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Author: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>quote[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-37">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Tags: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(quote[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tags'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-38">            f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-39">    </span>
<span id="cb12-40">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully scraped </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(scraped_quotes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> quotes!"</span>)</span>
<span id="cb12-41">    </span>
<span id="cb12-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb12-43">    scrape_quotes()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Successfully scraped 5 quotes!</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways-your-web-scraping-cheat-sheet" class="level1">
<h1>Quick Takeaways: Your Web Scraping Cheat Sheet</h1>
<p>Here are the key points to remember from this guide:</p>
<ul>
<li><strong>Start Simple</strong>: Begin with <code>requests</code> + <code>BeautifulSoup</code> for static websites</li>
<li><strong>Use Selenium for JavaScript</strong>: Only when content loads dynamically</li>
<li><strong>Always Be Respectful</strong>: Add delays, check robots.txt, follow terms of service</li>
<li><strong>Handle Errors Gracefully</strong>: Use try/except blocks and retry logic</li>
<li><strong>Clean Your Data</strong>: Validate and normalize scraped data</li>
<li><strong>Choose the Right Tool</strong>: Static content = requests; Dynamic content = Selenium</li>
<li><strong>Practice Makes Perfect</strong>: Start with simple sites before tackling complex ones</li>
<li><strong>Stay Ethical</strong>: Respect privacy, copyright, and website policies</li>
</ul>
</section>
<section id="conclusion-your-web-scraping-journey-starts-now" class="level1">
<h1>Conclusion: Your Web Scraping Journey Starts Now</h1>
<p>Congratulations! You‚Äôve just taken your first steps into the powerful world of web scraping with Python. We‚Äôve covered the essential tools (requests, BeautifulSoup, and Selenium), learned how to handle common challenges, and explored the ethical considerations that make you a responsible scraper.</p>
<p>Remember, web scraping is like learning to drive - you start in empty parking lots (simple websites) before tackling busy highways (complex sites). The examples in this guide give you a solid foundation, but the real learning happens when you start building your own projects.</p>
<p><strong>Your Next Steps:</strong></p>
<ol type="1">
<li>Practice with the exercise above</li>
<li>Try scraping your favorite website (responsibly!)<br>
</li>
<li>Explore advanced topics like handling forms and sessions</li>
<li>Build a project that solves a real problem for you</li>
</ol>
<p><strong>Ready to Level Up Your Python Skills?</strong> Start your next web scraping project today, and remember - every expert was once a beginner. You‚Äôve got this! üöÄ</p>
<hr>
<p><em>Have questions about web scraping or want to share your first scraping success story? Drop a comment below - I‚Äôd love to hear about your journey and help with any challenges you encounter along the way!</em></p>
<hr>
<p>Happy Coding! üöÄ</p>
<section id="webscraping-in-python" class="level2">
<h2 class="anchored" data-anchor-id="webscraping-in-python"><img src="https://www.spsanderson.com/steveondata/posts/2025-09-03/todays_post.png" class="img-fluid" alt="Webscraping in Python"></h2>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/<span class="citation" data-cites="stevensanderson">@stevensanderson</span></a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/<span class="citation" data-cites="spsanderson">@spsanderson</span></a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: <em>Extending Excel with Python and R</em> here</em>: <a href="https://packt.link/oTyZJ">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-03/</guid>
  <pubDate>Wed, 03 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Reset Row Numbers of Data Frame in R: Complete Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-01/</link>
  <description><![CDATA[ 






<section id="primary-methods-for-resetting-row-numbers" class="level1">
<h1>Primary Methods for Resetting Row Numbers</h1>
<section id="setting-row-names-to-null-recommended" class="level2">
<h2 class="anchored" data-anchor-id="setting-row-names-to-null-recommended">1. Setting Row Names to NULL (Recommended)</h2>
<p>The <strong>most straightforward and widely recommended</strong> method is setting row names to <code>NULL</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic syntax</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span></code></pre></div>
<p>This approach removes any custom row names and resets them to the default sequence (1, 2, 3, ‚Ä¶) . After execution, your data frame will have continuous sequential row numbers starting from 1.</p>
<p><strong>Example:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data with non-sequential row names</span></span>
<span id="cb2-2">iris_subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), ]</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(iris_subset))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "77" "1" "55" "20" "6" "10"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "77" "1"  "55" "20" "6"  "10"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset row numbers</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(iris_subset) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(iris_subset))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4" "5" "6"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4" "5" "6"</code></pre>
</div>
</div>
</section>
<section id="assigning-new-sequential-numbers" class="level2">
<h2 class="anchored" data-anchor-id="assigning-new-sequential-numbers">2. Assigning New Sequential Numbers</h2>
<p>You can explicitly assign a new sequence of numbers to row names:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2A: Using seq_len()</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df))</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2B: Using range notation</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)</span></code></pre></div>
<p>This method ensures row names are numeric and sequential, particularly useful after subsetting or reordering operations .</p>
</section>
<section id="using-tidyverse-approaches" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyverse-approaches">3. Using Tidyverse Approaches</h2>
<p>While base R methods are most common, tidyverse users have alternative options:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a sequential ID column</span></span>
<span id="cb7-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>())</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to tibble (removes row names by default)</span></span>
<span id="cb7-7">df_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df)</span></code></pre></div>
<hr>
</section>
</section>
<section id="common-use-cases-and-scenarios" class="level1">
<h1>Common Use Cases and Scenarios</h1>
<section id="after-filtering-or-subsetting-data" class="level2">
<h2 class="anchored" data-anchor-id="after-filtering-or-subsetting-data">After Filtering or Subsetting Data</h2>
<p><strong>Most frequent scenario:</strong> When rows are filtered, original row numbers are retained, creating non-sequential indices .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original data</span></span>
<span id="cb8-2">original_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>),</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>),</span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-6">)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter data (creates gaps in row numbers)</span></span>
<span id="cb8-9">filtered_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> original_df[original_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, ]</span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset row numbers for clean indexing</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3"</code></pre>
</div>
</div>
</section>
<section id="after-removing-duplicates" class="level2">
<h2 class="anchored" data-anchor-id="after-removing-duplicates">After Removing Duplicates</h2>
<p>Duplicate removal often leaves non-sequential row numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data with duplicates</span></span>
<span id="cb12-2">data_with_dups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>)</span>
<span id="cb12-5">)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove duplicates</span></span>
<span id="cb12-8">unique_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(data_with_dups)</span>
<span id="cb12-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(unique_data))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-sequential: "1" "2" "4" "7"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "4" "5" "7"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset for clean presentation</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(unique_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(unique_data))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sequential: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4" "5"</code></pre>
</div>
</div>
</section>
<section id="after-sorting-or-reordering" class="level2">
<h2 class="anchored" data-anchor-id="after-sorting-or-reordering">After Sorting or Reordering</h2>
<p>Sorting doesn‚Äôt automatically update row numbers :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Student data</span></span>
<span id="cb16-2">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carol"</span>),</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">GPA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>)</span>
<span id="cb16-5">)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort by GPA (descending)</span></span>
<span id="cb16-8">students_sorted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> students[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(students<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>GPA, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), ]</span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(students_sorted))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows original row numbers: "4" "2" "3" "1"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "4" "2" "3" "1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset to reflect new order</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(students_sorted) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(students_sorted))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="advanced-techniques-and-considerations" class="level1">
<h1>Advanced Techniques and Considerations</h1>
<section id="handling-large-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="handling-large-data-frames">Handling Large Data Frames</h2>
<p>For <strong>large datasets</strong>, the performance differences between methods are minimal:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 21%">
<col style="width: 37%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Average Time</th>
<th>Best Use Case</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>rownames(df) &lt;- NULL</code></td>
<td>Fastest</td>
<td>General purpose</td>
</tr>
<tr class="even">
<td><code>rownames(df) &lt;- 1:nrow(df)</code></td>
<td>Slightly slower</td>
<td>When explicit numbering needed</td>
</tr>
<tr class="odd">
<td><code>df %&gt;% mutate(row_id = row_number())</code></td>
<td>Moderate</td>
<td>When keeping original structure</td>
</tr>
</tbody>
</table>
</section>
<section id="data-integrity-considerations" class="level2">
<h2 class="anchored" data-anchor-id="data-integrity-considerations">Data Integrity Considerations</h2>
<blockquote class="blockquote">
<p><strong>Important:</strong> Resetting row names can obscure original data structure. Consider keeping original identifiers as separate columns when traceability is important .</p>
</blockquote>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preserve original row information</span></span>
<span id="cb20-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>original_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df)</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="potential-issues-and-edge-cases" class="level1">
<h1>Potential Issues and Edge Cases</h1>
<section id="confusion-between-row-names-vs.-row-numbers" class="level2">
<h2 class="anchored" data-anchor-id="confusion-between-row-names-vs.-row-numbers">1. Confusion Between Row Names vs.&nbsp;Row Numbers</h2>
<p><strong>Critical distinction:</strong> Row names are labels, while row numbers indicate position .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After subsetting</span></span>
<span id="cb21-2">subset_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> original_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), ]</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(subset_df))     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row names: "1" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(subset_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ])          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accesses second row (originally row 4)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Score
4 David    88</code></pre>
</div>
</div>
</section>
<section id="non-unique-row-names-error" class="level2">
<h2 class="anchored" data-anchor-id="non-unique-row-names-error">2. Non-Unique Row Names Error</h2>
<p>Attempting to assign duplicate values as row names fails:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will cause an error</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error: duplicate 'row.names' are not allowed</span></span></code></pre></div>
</section>
<section id="na-values-in-row-names" class="level2">
<h2 class="anchored" data-anchor-id="na-values-in-row-names">3. NA Values in Row Names</h2>
<p>Row names cannot be NA or missing:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will cause an error</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error: missing values not allowed</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p><strong>Practice Exercise:</strong> Create a data frame, filter it to create non-sequential row numbers, then reset them using different methods.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create sample data</span></span>
<span id="cb27-2">practice_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb27-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>),</span>
<span id="cb27-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),</span>
<span id="cb27-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>)</span>
<span id="cb27-6">)</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Filter for specific categories (creates gaps)</span></span>
<span id="cb27-9">filtered_practice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[practice_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Category <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>), ]</span>
<span id="cb27-10"></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Try different reset methods and compare results</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here...</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create sample data</span></span>
<span id="cb28-2">practice_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb28-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>),</span>
<span id="cb28-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),</span>
<span id="cb28-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>)</span>
<span id="cb28-6">)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Filter for specific categories</span></span>
<span id="cb28-9">filtered_practice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[practice_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Category <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>), ]</span>
<span id="cb28-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original row names after filtering:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Original row names after filtering:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_practice))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "3" "4" "6"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "3" "4" "6"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Method 1 - Set to NULL</span></span>
<span id="cb32-2">method1_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_practice</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method1_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb32-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method 1 result:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Method 1 result:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method1_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Method 2 - Explicit sequence</span></span>
<span id="cb36-2">method2_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_practice  </span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method2_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(method2_df)</span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method 2 result:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Method 2 result:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method2_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 5: Method 3 - Using dplyr</span></span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">method3_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_practice <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>new_id)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the helper column</span></span>
<span id="cb44-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method3_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb44-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method 3 result:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Method 3 result:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method3_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
</div>
</details>
<hr>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<p>‚Ä¢ <strong>Primary Method:</strong> Use <code>rownames(df) &lt;- NULL</code> for most scenarios - it‚Äôs simple, fast, and reliable</p>
<p>‚Ä¢ <strong>Common Use Cases:</strong> Essential after filtering, removing duplicates, sorting, or sampling data</p>
<p>‚Ä¢ <strong>Performance:</strong> All methods perform similarly; choose based on functional requirements rather than speed</p>
<p>‚Ä¢ <strong>Data Integrity:</strong> Consider preserving original row identifiers as separate columns when traceability matters</p>
<p>‚Ä¢ <strong>Error Prevention:</strong> Ensure row names are unique and non-missing to avoid common pitfalls</p>
<p>‚Ä¢ <strong>Best Practice:</strong> Reset row numbers as part of data cleaning workflows for cleaner presentation and export</p>
<hr>
</section>
<section id="method-comparison-table" class="level1">
<h1>Method Comparison Table</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 38%">
<col style="width: 28%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th>Scenario</th>
<th>Recommended Method</th>
<th>Code Example</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>General reset</td>
<td><code>rownames(df) &lt;- NULL</code></td>
<td><code>rownames(filtered_df) &lt;- NULL</code></td>
<td>Fastest, most common</td>
</tr>
<tr class="even">
<td>Explicit numbering</td>
<td><code>rownames(df) &lt;- 1:nrow(df)</code></td>
<td><code>rownames(sorted_df) &lt;- 1:nrow(sorted_df)</code></td>
<td>When specific sequence needed</td>
</tr>
<tr class="odd">
<td>Tidyverse workflow</td>
<td><code>as_tibble()</code> or <code>mutate()</code></td>
<td><code>df %&gt;% as_tibble()</code></td>
<td>Integrates with dplyr pipelines</td>
</tr>
<tr class="even">
<td>Preserve original</td>
<td>Keep as column</td>
<td><code>df$orig_row &lt;- rownames(df)</code></td>
<td>When traceability required</td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Resetting row numbers in R data frames is a fundamental skill for effective data manipulation and presentation. The <code>rownames(df) &lt;- NULL</code> method provides the most straightforward solution for most use cases, ensuring clean sequential indexing essential for professional data analysis workflows.</p>
<p>Whether you‚Äôre filtering datasets, removing duplicates, or preparing data for export, understanding these techniques ensures your data frames maintain proper structure and readability. The choice between methods should be driven by your specific requirements rather than performance considerations, as the differences are minimal in practical applications.</p>
<p><strong>Ready to implement these techniques in your next R project? Start with the basic <code>rownames(df) &lt;- NULL</code> method and expand to more specialized approaches as your needs develop.</strong></p>
<hr>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: When should I reset row numbers in my data frame?</strong> Reset row numbers after filtering, subsetting, removing duplicates, sorting, or any operation that creates gaps in the row sequence. This ensures clean, sequential indexing.</p>
<p><strong>Q2: What‚Äôs the difference between <code>rownames(df) &lt;- NULL</code> and <code>rownames(df) &lt;- 1:nrow(df)</code>?</strong> Both create sequential row numbers, but <code>NULL</code> is faster and more commonly used. The explicit sequence method gives you more control over the exact values assigned.</p>
<p><strong>Q3: Will resetting row numbers affect my data frame‚Äôs content?</strong> No, resetting row numbers only changes the row labels/names, not the actual data content. Your data remains unchanged.</p>
<p><strong>Q4: Can I reset row numbers in tibbles?</strong> Tibbles don‚Äôt use row names by default. If you need sequential IDs, add them as a regular column using <code>mutate(id = row_number())</code>.</p>
<p><strong>Q5: What happens if I try to set duplicate row names?</strong> R will throw an error: ‚Äúduplicate ‚Äòrow.names‚Äô are not allowed.‚Äù Row names must be unique across the entire data frame.</p>
<hr>
<p><em>Found this guide helpful? Share your experience with row number resetting in the comments below, and don‚Äôt forget to share this article with fellow R users who might benefit from these techniques!</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><strong>Stack Overflow Community</strong>. (2023). <a href="https://stackoverflow.com/questions/5208679/how-to-reset-row-names"><em>How to reset row names?</em></a>. Stack Overflow. Retrieved August 28, 2025.</p></li>
<li><p><strong>Wickham, H., Fran√ßois, R., Henry, L., &amp; M√ºller, K.</strong> (2023). <a href="https://dplyr.tidyverse.org/articles/rowwise.html"><em>Row-wise operations</em></a>. dplyr: A Grammar of Data Manipulation Documentation. Posit PBC.</p></li>
<li><p><strong>M√ºller, K. &amp; Wickham, H.</strong> (2023). <a href="https://tibble.tidyverse.org/reference/rownames.html"><em>Tools for working with row names ‚Äî rownames</em></a>. tibble: Simple Data Frames Documentation. Posit PBC.</p></li>
<li><p><strong>R-bloggers Community</strong>. (2020). <a href="https://www.r-bloggers.com/2020/08/data-manipulation-in-r-using-data-frames-an-extensive-article-of-basics/"><em>Data manipulation in R using data frames ‚Äì an extensive article of basics</em></a>. R-bloggers.</p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-01/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Rownumbers in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-01/</guid>
  <pubDate>Mon, 01 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Revolutionary RandomWalker Update: 23 New Functions Transform Stochastic Modeling in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-08-19/</link>
  <description><![CDATA[ 






<blockquote class="blockquote">
<p><strong>Key Update:</strong> RandomWalker version 0.3.0 introduces 21 new distribution-based random walk generators plus 2 enhanced utility functions, expanding from basic normal distributions to comprehensive stochastic modeling across discrete, continuous, and statistical test distributions.</p>
</blockquote>
<p>The RandomWalker package has undergone a revolutionary transformation, evolving from a basic random walk generator to a comprehensive stochastic modeling toolkit. This update represents the most significant expansion in the package‚Äôs history, introducing <strong>21 new random walk generator functions</strong> and <strong>2 enhanced utility functions</strong> that will fundamentally change how R programmers approach random walk simulations.</p>
<section id="complete-function-arsenal-from-basic-to-advanced" class="level1">
<h1><strong>Complete Function Arsenal: From Basic to Advanced</strong></h1>
<p>The new RandomWalker update delivers an unprecedented collection of functions covering every major category of statistical distributions.</p>
<section id="continuous-distribution-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="continuous-distribution-random-walks"><strong>Continuous Distribution Random Walks</strong></h2>
<p>The package now supports nine sophisticated continuous distribution functions, each optimized for specific modeling scenarios:</p>
<ul>
<li><strong><code>random_uniform_walk()</code></strong>: Perfect for Monte Carlo simulations requiring flat probability distributions</li>
<li><strong><code>random_weibull_walk()</code></strong>: Essential for reliability engineering and survival analysis applications</li>
<li><strong><code>random_t_walk()</code></strong>: Ideal for heavy-tailed financial processes and robust statistical modeling</li>
<li><strong><code>random_logistic_walk()</code></strong>: Designed for growth modeling and S-curve phenomena</li>
<li><strong><code>random_lognormal_walk()</code></strong>: Critical for asset pricing and multiplicative processes</li>
<li><strong><code>random_gamma_walk()</code></strong>: Optimized for waiting times and shape-scale modeling scenarios</li>
<li><strong><code>random_exponential_walk()</code></strong>: Built for Poisson process intervals and decay modeling</li>
<li><strong><code>random_beta_walk()</code></strong>: Perfect for bounded probability processes and proportion modeling</li>
<li><strong><code>random_cauchy_walk()</code></strong>: Specialized for extreme value theory and heavy-tailed phenomena</li>
</ul>
<div class="cell" data-warnng="false">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RandomWalker)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Continuous Walks</span></span>
<span id="cb1-5">ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-8">rw_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brownian_motion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brownian Motion"</span>),</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geometric_brownian_motion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Geometric Brownian Motion"</span>),</span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_beta_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beta"</span>),</span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_cauchy_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cauchy"</span>),</span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_chisquared_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chisquared"</span>),</span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_exponential_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exponential"</span>),</span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_f_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F Distribution"</span>),</span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_gamma_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamma"</span>),</span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_logistic_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logisitic"</span>),</span>
<span id="cb1-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_lognormal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log-Normal"</span>),</span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_drift_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Normal Drift"</span>),</span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Normal"</span>),</span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_t_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T Distribution"</span>),</span>
<span id="cb1-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_uniform_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Uniform"</span>),</span>
<span id="cb1-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_weibull_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weibull"</span>)</span>
<span id="cb1-39">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(step_number, x, y, walk_type)</span>
<span id="cb1-41"></span>
<span id="cb1-42">rw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> walk_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb1-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> rw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-48">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-49">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb1-50">        step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(step_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-51">          step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(step_number)</span>
<span id="cb1-52">      ),</span>
<span id="cb1-53">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number),</span>
<span id="cb1-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-55">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-58">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb1-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Walks for Continuous Distributions"</span>,</span>
<span id="cb1-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb1-61">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Simulations: "</span>, ns, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" - "</span>,</span>
<span id="cb1-62">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Steps: "</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-63">    ),</span>
<span id="cb1-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Value"</span>,</span>
<span id="cb1-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Value"</span></span>
<span id="cb1-66">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-68">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb1-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb1-73">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/continuous_random_walks-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="discrete-distribution-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="discrete-distribution-random-walks"><strong>Discrete Distribution Random Walks</strong></h2>
<p>Six new discrete distribution functions enable precise modeling of count processes and success-based scenarios:</p>
<ul>
<li><strong><code>random_poisson_walk()</code></strong>: Event counting and arrival processes</li>
<li><strong><code>random_binomial_walk()</code></strong>: Fixed trials with success/failure modeling</li>
<li><strong><code>random_negbinomial_walk()</code></strong>: Over-dispersed counts and waiting for multiple successes</li>
<li><strong><code>random_geometric_walk()</code></strong>: First success timing with memoryless properties</li>
<li><strong><code>random_hypergeometric_walk()</code></strong>: Sampling without replacement from finite populations</li>
<li><strong><code>random_multinomial_walk()</code></strong>: Multi-category outcomes for complex probability spaces</li>
</ul>
</section>
<section id="statistical-test-based-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="statistical-test-based-random-walks"><strong>Statistical Test-Based Random Walks</strong></h2>
<p>Four specialized functions bring nonparametric testing capabilities to random walk modeling:</p>
<ul>
<li><strong><code>random_wilcox_walk()</code></strong>: Wilcoxon signed-rank applications for nonparametric analysis</li>
<li><strong><code>random_wilcoxon_sr_walk()</code></strong>: Enhanced Wilcoxon with step specification functionality</li>
<li><strong><code>random_smirnov_walk()</code></strong>: Distribution comparison and goodness-of-fit testing</li>
<li><strong><code>random_f_walk()</code></strong>: Variance ratio testing and ANOVA applications</li>
<li><strong><code>random_chisquared_walk()</code></strong>: Goodness-of-fit and variance testing scenarios</li>
</ul>
</section>
<section id="specialized-functions" class="level2">
<h2 class="anchored" data-anchor-id="specialized-functions"><strong>Specialized Functions</strong></h2>
<p>The update includes a powerful custom modeling function:</p>
<ul>
<li><strong><code>random_displacement_walk()</code></strong>: User-defined step distributions enabling unlimited flexibility for custom modeling scenarios.</li>
</ul>
<div class="cell" data-warnng="false">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Discrete Walks</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb2-3">dw_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discrete_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Discrete"</span>),</span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_binomial_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Binomial"</span>),</span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_displacement_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Displacement"</span>),</span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_geometric_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Geometric"</span>),</span>
<span id="cb2-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_hypergeometric_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hypergeometric"</span>),</span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_multinomial_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Multinomial"</span>),</span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_negbinomial_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb2-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative Binomial"</span>),</span>
<span id="cb2-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_poisson_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poisson"</span>),</span>
<span id="cb2-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_smirnov_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sizes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smirnov"</span>),</span>
<span id="cb2-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_wilcoxon_sr_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wilcoxon Signed Rank"</span>),</span>
<span id="cb2-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_wilcox_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wilcox"</span>)</span>
<span id="cb2-28">  )</span>
<span id="cb2-29"></span>
<span id="cb2-30">dw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> walk_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb2-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-36">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-37">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb2-38">        step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(step_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-39">          step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(step_number)</span>
<span id="cb2-40">      ),</span>
<span id="cb2-41">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number),</span>
<span id="cb2-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-43">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb2-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Walks for Discrete Distributions"</span>,</span>
<span id="cb2-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb2-49">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Simulations: "</span>, ns, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" - "</span>,</span>
<span id="cb2-50">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Steps: "</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-51">    ),</span>
<span id="cb2-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Value"</span>,</span>
<span id="cb2-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Value"</span></span>
<span id="cb2-54">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb2-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb2-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb2-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb2-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb2-61">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/discrete_random_walks-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="enhanced-utility-functions-powerful-new-capabilities" class="level1">
<h1><strong>Enhanced Utility Functions: Powerful New Capabilities</strong></h1>
<p>Two critical utility functions received major enhancements that dramatically expand their functionality:</p>
<section id="advanced-subsetting-with-subset_walks" class="level2">
<h2 class="anchored" data-anchor-id="advanced-subsetting-with-subset_walks"><strong>Advanced Subsetting with <code>subset_walks()</code></strong></h2>
<p>The updated <code>subset_walks()</code> function introduces the <code>.value</code> parameter, allowing users to subset random walks based on any column, not just the default ‚Äúy‚Äù position :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb3-2">walks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rw30</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="girafe html-widget html-fill-item" id="htmlwidget-75c802b17b45502efefe" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-75c802b17b45502efefe">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f' viewBox='0 0 504 360'>\n <defs id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_defs'>\n  <clipPath id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c1'>\n   <rect x='0' y='0' width='504' height='360'/>\n  <\/clipPath>\n  <clipPath id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c2'>\n   <rect x='30.17' y='66.51' width='458.39' height='248.36'/>\n  <\/clipPath>\n  <clipPath id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c3'>\n   <rect x='5.48' y='38.85' width='493.04' height='302.04'/>\n  <\/clipPath>\n <\/defs>\n <g id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_rootg' class='ggiraph-svg-rootg'>\n  <g clip-path='url(#svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c1)'>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='round'/>\n  <\/g>\n  <g clip-path='url(#svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c2)'>\n   <polyline points='30.17,273.74 488.56,273.74' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,214.06 488.56,214.06' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,154.37 488.56,154.37' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,94.69 488.56,94.69' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='99.41,314.87 99.41,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='204.64,314.87 204.64,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='309.87,314.87 309.87,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='415.11,314.87 415.11,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,303.58 488.56,303.58' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,243.90 488.56,243.90' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,184.22 488.56,184.22' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,124.53 488.56,124.53' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='46.79,314.87 46.79,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='152.02,314.87 152.02,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='257.26,314.87 257.26,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='362.49,314.87 362.49,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='467.72,314.87 467.72,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e1' points='51.00,303.58 55.21,294.87 59.42,301.88 63.63,301.87 67.84,275.44 72.05,263.87 76.26,254.70 80.47,267.93 84.68,277.31 88.89,250.05 93.09,263.10 97.30,260.54 101.51,249.89 105.72,237.72 109.93,224.72 114.14,226.67 118.35,236.47 122.56,240.14 126.77,250.91 130.98,243.42 135.19,230.05 139.40,204.66 143.61,200.29 147.82,210.73 152.02,198.50 156.23,187.70 160.44,190.54 164.65,209.14 168.86,200.05 173.07,186.57 177.28,190.10 181.49,183.69 185.70,186.99 189.91,178.84 194.12,180.24 198.33,184.36 202.54,183.02 206.75,186.41 210.95,193.46 215.16,197.23 219.37,197.33 223.58,194.85 227.79,176.56 232.00,192.77 236.21,195.16 240.42,187.62 244.63,166.58 248.84,161.50 253.05,161.66 257.26,165.33 261.47,160.39 265.68,148.58 269.88,150.78 274.09,148.82 278.30,146.23 282.51,137.53 286.72,124.26 290.93,120.93 295.14,121.84 299.35,105.19 303.56,103.23 307.77,84.39 311.98,85.13 316.19,77.80 320.40,96.26 324.61,97.60 328.82,97.86 333.02,106.91 337.23,119.28 341.44,107.96 345.65,97.05 349.86,112.55 354.07,107.48 358.28,120.76 362.49,133.31 366.70,127.04 370.91,135.23 375.12,123.37 379.33,122.91 383.54,116.51 387.75,122.76 391.95,136.50 396.16,125.58 400.37,122.74 404.58,125.59 408.79,124.77 413.00,108.94 417.21,117.27 421.42,126.22 425.63,133.62 429.84,152.54 434.05,142.75 438.26,140.46 442.47,137.98 446.68,138.50 450.88,144.59 455.09,154.42 459.30,144.25 463.51,161.27 467.72,156.02' fill='none' stroke='#F8766D' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e2' cx='51' cy='303.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e3' cx='55.21' cy='294.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 2 | y: 0.73'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e4' cx='59.42' cy='301.88' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 3 | y: 0.143'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e5' cx='63.63' cy='301.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 4 | y: 0.143'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e6' cx='67.84' cy='275.44' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 5 | y: 2.358'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e7' cx='72.05' cy='263.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 6 | y: 3.327'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e8' cx='76.26' cy='254.7' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 7 | y: 4.095'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e9' cx='80.47' cy='267.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 8 | y: 2.987'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e10' cx='84.68' cy='277.31' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 9 | y: 2.201'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e11' cx='88.89' cy='250.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 10 | y: 4.485'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e12' cx='93.09' cy='263.1' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 11 | y: 3.392'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e13' cx='97.3' cy='260.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 12 | y: 3.606'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e14' cx='101.51' cy='249.89' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 13 | y: 4.499'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e15' cx='105.72' cy='237.72' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 14 | y: 5.517'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e16' cx='109.93' cy='224.72' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 15 | y: 6.606'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e17' cx='114.14' cy='226.67' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 16 | y: 6.443'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e18' cx='118.35' cy='236.47' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 17 | y: 5.622'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e19' cx='122.56' cy='240.14' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 18 | y: 5.315'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e20' cx='126.77' cy='250.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 19 | y: 4.413'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e21' cx='130.98' cy='243.42' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 20 | y: 5.04'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e22' cx='135.19' cy='230.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 21 | y: 6.16'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e23' cx='139.4' cy='204.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 22 | y: 8.288'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e24' cx='143.61' cy='200.29' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 23 | y: 8.654'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e25' cx='147.82' cy='210.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 24 | y: 7.779'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e26' cx='152.02' cy='198.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 25 | y: 8.803'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e27' cx='156.23' cy='187.7' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 26 | y: 9.708'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e28' cx='160.44' cy='190.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 27 | y: 9.47'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e29' cx='164.65' cy='209.14' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 28 | y: 7.912'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e30' cx='168.86' cy='200.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 29 | y: 8.673'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e31' cx='173.07' cy='186.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 30 | y: 9.803'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e32' cx='177.28' cy='190.1' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 31 | y: 9.507'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e33' cx='181.49' cy='183.69' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 32 | y: 10.044'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e34' cx='185.7' cy='186.99' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 33 | y: 9.768'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e35' cx='189.91' cy='178.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 34 | y: 10.45'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e36' cx='194.12' cy='180.24' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 35 | y: 10.333'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e37' cx='198.33' cy='184.36' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 36 | y: 9.988'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e38' cx='202.54' cy='183.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 37 | y: 10.1'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e39' cx='206.75' cy='186.41' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 38 | y: 9.816'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e40' cx='210.95' cy='193.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 39 | y: 9.225'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e41' cx='215.16' cy='197.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 40 | y: 8.909'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e42' cx='219.37' cy='197.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 41 | y: 8.901'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e43' cx='223.58' cy='194.85' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 42 | y: 9.109'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e44' cx='227.79' cy='176.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 43 | y: 10.641'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e45' cx='232' cy='192.77' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 44 | y: 9.283'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e46' cx='236.21' cy='195.16' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 45 | y: 9.084'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e47' cx='240.42' cy='187.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 46 | y: 9.715'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e48' cx='244.63' cy='166.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 47 | y: 11.477'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e49' cx='248.84' cy='161.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 48 | y: 11.903'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e50' cx='253.05' cy='161.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 49 | y: 11.889'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e51' cx='257.26' cy='165.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 50 | y: 11.582'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e52' cx='261.47' cy='160.39' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 51 | y: 11.996'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e53' cx='265.68' cy='148.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 52 | y: 12.985'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e54' cx='269.88' cy='150.78' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 53 | y: 12.801'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e55' cx='274.09' cy='148.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 54 | y: 12.965'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e56' cx='278.3' cy='146.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 55 | y: 13.182'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e57' cx='282.51' cy='137.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 56 | y: 13.911'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e58' cx='286.72' cy='124.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 57 | y: 15.023'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e59' cx='290.93' cy='120.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 58 | y: 15.302'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e60' cx='295.14' cy='121.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 59 | y: 15.226'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e61' cx='299.35' cy='105.19' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 60 | y: 16.62'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e62' cx='303.56' cy='103.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 61 | y: 16.785'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e63' cx='307.77' cy='84.39' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 62 | y: 18.363'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e64' cx='311.98' cy='85.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 63 | y: 18.301'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e65' cx='316.19' cy='77.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 64 | y: 18.915'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e66' cx='320.4' cy='96.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 65 | y: 17.369'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e67' cx='324.61' cy='97.6' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 66 | y: 17.256'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e68' cx='328.82' cy='97.86' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 67 | y: 17.234'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e69' cx='333.02' cy='106.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 68 | y: 16.476'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e70' cx='337.23' cy='119.28' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 69 | y: 15.44'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e71' cx='341.44' cy='107.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 70 | y: 16.388'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e72' cx='345.65' cy='97.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 71 | y: 17.302'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e73' cx='349.86' cy='112.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 72 | y: 16.004'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e74' cx='354.07' cy='107.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 73 | y: 16.428'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e75' cx='358.28' cy='120.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 74 | y: 15.316'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e76' cx='362.49' cy='133.31' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 75 | y: 14.265'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e77' cx='366.7' cy='127.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 76 | y: 14.79'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e78' cx='370.91' cy='135.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 77 | y: 14.104'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e79' cx='375.12' cy='123.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 78 | y: 15.097'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e80' cx='379.33' cy='122.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 79 | y: 15.136'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e81' cx='383.54' cy='116.51' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 80 | y: 15.672'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e82' cx='387.75' cy='122.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 81 | y: 15.148'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e83' cx='391.95' cy='136.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 82 | y: 13.997'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e84' cx='396.16' cy='125.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 83 | y: 14.912'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e85' cx='400.37' cy='122.74' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 84 | y: 15.15'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e86' cx='404.58' cy='125.59' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 85 | y: 14.911'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e87' cx='408.79' cy='124.77' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 86 | y: 14.98'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e88' cx='413' cy='108.94' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 87 | y: 16.306'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e89' cx='417.21' cy='117.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 88 | y: 15.608'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e90' cx='421.42' cy='126.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 89 | y: 14.859'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e91' cx='425.63' cy='133.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 90 | y: 14.239'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e92' cx='429.84' cy='152.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 91 | y: 12.654'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e93' cx='434.05' cy='142.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 92 | y: 13.474'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e94' cx='438.26' cy='140.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 93 | y: 13.666'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e95' cx='442.47' cy='137.98' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 94 | y: 13.873'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e96' cx='446.68' cy='138.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 95 | y: 13.83'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e97' cx='450.88' cy='144.59' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 96 | y: 13.32'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e98' cx='455.09' cy='154.42' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 97 | y: 12.496'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e99' cx='459.3' cy='144.25' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 98 | y: 13.348'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e100' cx='463.51' cy='161.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 99 | y: 11.922'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e101' cx='467.72' cy='156.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 100 | y: 12.362'/>\n  <\/g>\n  <g clip-path='url(#svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c1)'>\n   <text x='20.34' y='306.73' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='20.34' y='247.05' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>5<\/text>\n   <text x='15.44' y='187.37' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>10<\/text>\n   <text x='15.44' y='127.68' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>15<\/text>\n   <text x='44.34' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='147.13' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>25<\/text>\n   <text x='252.36' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>50<\/text>\n   <text x='357.59' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>75<\/text>\n   <text x='460.38' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>100<\/text>\n   <text x='248.04' y='338.57' font-size='8.25pt' font-family='Arial'>Step<\/text>\n   <text x='30.17' y='58.26' font-size='9.9pt' font-family='Arial'>y<\/text>\n   <text x='330.01' y='352.67' font-size='6.6pt' font-family='Arial'>1 dimensions, 100 steps, mu = 0, sd = 1.<\/text>\n   <text x='15.44' y='31.05' font-size='8.25pt' font-family='Arial'>Function: rw30<\/text>\n   <text x='15.44' y='14.93' font-size='9.9pt' font-family='Arial'>30 Random Walks<\/text>\n  <\/g>\n <\/g>\n<\/svg>","js":null,"uid":"svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f","ratio":1.4,"settings":{"tooltip":{"css":".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}","placement":"doc","opacity":0.7,"offx":200,"offy":5,"use_cursor_pos":false,"use_fill":false,"use_stroke":false,"delay_over":200,"delay_out":500},"hover":{"css":".hover_data_SVGID_ { stroke:black;stroke-width:2pt; }","reactive":false,"nearest_distance":null},"hover_inv":{"css":".hover_inv_SVGID_ { opacity:0.4; }"},"hover_key":{"css":".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\nimage.hover_key_SVGID_ { stroke:orange; }","reactive":true},"hover_theme":{"css":".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\nimage.hover_theme_SVGID_ { stroke:orange; }","reactive":true},"select":{"css":".select_data_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_data_SVGID_ { stroke:none;fill:red; }\ncircle.select_data_SVGID_ { fill:red;stroke:black; }\nline.select_data_SVGID_, polyline.select_data_SVGID_ { fill:none;stroke:red; }\nrect.select_data_SVGID_, polygon.select_data_SVGID_, path.select_data_SVGID_ { fill:red;stroke:none; }\nimage.select_data_SVGID_ { stroke:red; }","type":"multiple","only_shiny":true,"selected":[]},"select_inv":{"css":""},"select_key":{"css":".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_key_SVGID_ { stroke:none;fill:red; }\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\nimage.select_key_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"select_theme":{"css":".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\nimage.select_theme_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"zoom":{"min":1,"max":5,"duration":300},"toolbar":{"position":"topright","pngname":"diagram","tooltips":null,"fixed":false,"hidden":[],"delay_over":200,"delay_out":500},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="girafe html-widget html-fill-item" id="htmlwidget-6fc14a306ffce2a6ae61" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-6fc14a306ffce2a6ae61">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2' viewBox='0 0 504 360'>\n <defs id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_defs'>\n  <clipPath id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c1'>\n   <rect x='0' y='0' width='504' height='360'/>\n  <\/clipPath>\n  <clipPath id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c2'>\n   <rect x='33.1' y='66.51' width='455.46' height='248.36'/>\n  <\/clipPath>\n  <clipPath id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c3'>\n   <rect x='5.48' y='38.85' width='493.04' height='302.04'/>\n  <\/clipPath>\n <\/defs>\n <g id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_rootg' class='ggiraph-svg-rootg'>\n  <g clip-path='url(#svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c1)'>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='round'/>\n  <\/g>\n  <g clip-path='url(#svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c2)'>\n   <polyline points='33.10,278.11 488.56,278.11' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,233.60 488.56,233.60' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,189.08 488.56,189.08' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,144.57 488.56,144.57' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,100.06 488.56,100.06' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='101.90,314.87 101.90,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='206.46,314.87 206.46,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='311.02,314.87 311.02,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='415.58,314.87 415.58,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,300.37 488.56,300.37' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,255.85 488.56,255.85' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,211.34 488.56,211.34' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,166.83 488.56,166.83' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,122.31 488.56,122.31' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,77.80 488.56,77.80' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='49.62,314.87 49.62,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='154.18,314.87 154.18,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='258.74,314.87 258.74,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='363.30,314.87 363.30,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='467.86,314.87 467.86,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e1' points='53.80,77.80 57.98,84.81 62.16,95.93 66.35,105.52 70.53,103.30 74.71,104.36 78.89,107.04 83.08,127.70 87.26,139.49 91.44,140.66 95.62,148.48 99.81,155.57 103.99,146.23 108.17,144.66 112.35,153.96 116.53,158.13 120.72,160.66 124.90,166.72 129.08,175.30 133.26,175.76 137.45,169.17 141.63,167.15 145.81,168.93 149.99,165.48 154.18,158.41 158.36,159.66 162.54,155.60 166.72,165.80 170.91,168.02 175.09,171.76 179.27,170.02 183.45,166.84 187.64,167.94 191.82,174.76 196.00,183.04 200.18,180.56 204.36,168.48 208.55,175.49 212.73,178.91 216.91,175.97 221.09,180.91 225.28,179.83 229.46,180.25 233.64,187.16 237.82,179.76 242.01,172.22 246.19,163.11 250.37,151.82 254.55,156.33 258.74,160.46 262.92,158.13 267.10,152.53 271.28,155.55 275.47,159.32 279.65,164.82 283.83,151.63 288.01,173.96 292.19,175.45 296.38,175.11 300.56,184.54 304.74,181.11 308.92,198.62 313.11,190.12 317.29,204.93 321.47,224.54 325.65,231.34 329.84,229.89 334.02,235.69 338.20,240.67 342.38,237.71 346.57,247.13 350.75,247.90 354.93,243.46 359.11,228.92 363.30,224.65 367.48,209.38 371.66,205.35 375.84,205.38 380.02,225.47 384.21,236.37 388.39,239.21 392.57,232.87 396.75,235.74 400.94,230.90 405.12,240.37 409.30,242.81 413.48,240.88 417.67,244.08 421.85,243.07 426.03,249.05 430.21,245.71 434.40,246.43 438.58,246.85 442.76,264.20 446.94,270.20 451.13,283.46 455.31,297.76 459.49,302.15 463.67,303.58 467.86,301.06' fill='none' stroke='#F8766D' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e2' cx='53.8' cy='77.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e3' cx='57.98' cy='84.81' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 2 | y: -0.787'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e4' cx='62.16' cy='95.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 3 | y: -2.036'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e5' cx='66.35' cy='105.52' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 4 | y: -3.114'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e6' cx='70.53' cy='103.3' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 5 | y: -2.864'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e7' cx='74.71' cy='104.36' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 6 | y: -2.983'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e8' cx='78.89' cy='107.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 7 | y: -3.284'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e9' cx='83.08' cy='127.7' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 8 | y: -5.605'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e10' cx='87.26' cy='139.49' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 9 | y: -6.929'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e11' cx='91.44' cy='140.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 10 | y: -7.061'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e12' cx='95.62' cy='148.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 11 | y: -7.939'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e13' cx='99.81' cy='155.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 12 | y: -8.735'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e14' cx='103.99' cy='146.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 13 | y: -7.686'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e15' cx='108.17' cy='144.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 14 | y: -7.51'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e16' cx='112.35' cy='153.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 15 | y: -8.554'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e17' cx='116.53' cy='158.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 16 | y: -9.023'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e18' cx='120.72' cy='160.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 17 | y: -9.308'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e19' cx='124.9' cy='166.72' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 18 | y: -9.988'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e20' cx='129.08' cy='175.3' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 19 | y: -10.952'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e21' cx='133.26' cy='175.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 20 | y: -11.004'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e22' cx='137.45' cy='169.17' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 21 | y: -10.263'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e23' cx='141.63' cy='167.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 22 | y: -10.036'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e24' cx='145.81' cy='168.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 23 | y: -10.236'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e25' cx='149.99' cy='165.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 24 | y: -9.848'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e26' cx='154.18' cy='158.41' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 25 | y: -9.054'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e27' cx='158.36' cy='159.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 26 | y: -9.195'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e28' cx='162.54' cy='155.6' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 27 | y: -8.739'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e29' cx='166.72' cy='165.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 28 | y: -9.885'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e30' cx='170.91' cy='168.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 29 | y: -10.134'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e31' cx='175.09' cy='171.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 30 | y: -10.554'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e32' cx='179.27' cy='170.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 31 | y: -10.359'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e33' cx='183.45' cy='166.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 32 | y: -10.002'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e34' cx='187.64' cy='167.94' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 33 | y: -10.125'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e35' cx='191.82' cy='174.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 34 | y: -10.891'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e36' cx='196' cy='183.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 35 | y: -11.821'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e37' cx='200.18' cy='180.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 36 | y: -11.543'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e38' cx='204.36' cy='168.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 37 | y: -10.186'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e39' cx='208.55' cy='175.49' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 38 | y: -10.973'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e40' cx='212.73' cy='178.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 39 | y: -11.358'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e41' cx='216.91' cy='175.97' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 40 | y: -11.027'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e42' cx='221.09' cy='180.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 41 | y: -11.582'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e43' cx='225.28' cy='179.83' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 42 | y: -11.46'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e44' cx='229.46' cy='180.25' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 43 | y: -11.508'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e45' cx='233.64' cy='187.16' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 44 | y: -12.284'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e46' cx='237.82' cy='179.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 45 | y: -11.452'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e47' cx='242.01' cy='172.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 46 | y: -10.606'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e48' cx='246.19' cy='163.11' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 47 | y: -9.582'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e49' cx='250.37' cy='151.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 48 | y: -8.314'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e50' cx='254.55' cy='156.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 49 | y: -8.82'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e51' cx='258.74' cy='160.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 50 | y: -9.285'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e52' cx='262.92' cy='158.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 51 | y: -9.024'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e53' cx='267.1' cy='152.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 52 | y: -8.394'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e54' cx='271.28' cy='155.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 53 | y: -8.733'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e55' cx='275.47' cy='159.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 54 | y: -9.156'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e56' cx='279.65' cy='164.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 55 | y: -9.775'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e57' cx='283.83' cy='151.63' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 56 | y: -8.293'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e58' cx='288.01' cy='173.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 57 | y: -10.801'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e59' cx='292.19' cy='175.45' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 58 | y: -10.968'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e60' cx='296.38' cy='175.11' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 59 | y: -10.93'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e61' cx='300.56' cy='184.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 60 | y: -11.99'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e62' cx='304.74' cy='181.11' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 61 | y: -11.604'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e63' cx='308.92' cy='198.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 62 | y: -13.571'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e64' cx='313.11' cy='190.12' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 63 | y: -12.616'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e65' cx='317.29' cy='204.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 64 | y: -14.28'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e66' cx='321.47' cy='224.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 65 | y: -16.482'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e67' cx='325.65' cy='231.34' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 66 | y: -17.246'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e68' cx='329.84' cy='229.89' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 67 | y: -17.084'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e69' cx='334.02' cy='235.69' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 68 | y: -17.736'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e70' cx='338.2' cy='240.67' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 69 | y: -18.295'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e71' cx='342.38' cy='237.71' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 70 | y: -17.962'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e72' cx='346.57' cy='247.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 71 | y: -19.021'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e73' cx='350.75' cy='247.9' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 72 | y: -19.106'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e74' cx='354.93' cy='243.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 73 | y: -18.608'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e75' cx='359.11' cy='228.92' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 74 | y: -16.974'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e76' cx='363.3' cy='224.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 75 | y: -16.495'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e77' cx='367.48' cy='209.38' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 76 | y: -14.78'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e78' cx='371.66' cy='205.35' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 77 | y: -14.327'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e79' cx='375.84' cy='205.38' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 78 | y: -14.33'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e80' cx='380.02' cy='225.47' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 79 | y: -16.587'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e81' cx='384.21' cy='236.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 80 | y: -17.811'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e82' cx='388.39' cy='239.21' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 81 | y: -18.13'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e83' cx='392.57' cy='232.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 82 | y: -17.418'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e84' cx='396.75' cy='235.74' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 83 | y: -17.741'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e85' cx='400.94' cy='230.9' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 84 | y: -17.197'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e86' cx='405.12' cy='240.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 85 | y: -18.261'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e87' cx='409.3' cy='242.81' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 86 | y: -18.535'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e88' cx='413.48' cy='240.88' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 87 | y: -18.318'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e89' cx='417.67' cy='244.08' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 88 | y: -18.677'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e90' cx='421.85' cy='243.07' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 89 | y: -18.565'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e91' cx='426.03' cy='249.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 90 | y: -19.235'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e92' cx='430.21' cy='245.71' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 91 | y: -18.861'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e93' cx='434.4' cy='246.43' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 92 | y: -18.942'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e94' cx='438.58' cy='246.85' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 93 | y: -18.989'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e95' cx='442.76' cy='264.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 94 | y: -20.938'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e96' cx='446.94' cy='270.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 95 | y: -21.612'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e97' cx='451.13' cy='283.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 96 | y: -23.101'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e98' cx='455.31' cy='297.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 97 | y: -24.707'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e99' cx='459.49' cy='302.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 98 | y: -25.201'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e100' cx='463.67' cy='303.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 99 | y: -25.362'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e101' cx='467.86' cy='301.06' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 100 | y: -25.078'/>\n  <\/g>\n  <g clip-path='url(#svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c1)'>\n   <text x='15.44' y='303.52' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-25<\/text>\n   <text x='15.44' y='259' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-20<\/text>\n   <text x='15.44' y='214.49' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-15<\/text>\n   <text x='15.44' y='169.98' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-10<\/text>\n   <text x='20.34' y='125.46' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-5<\/text>\n   <text x='23.27' y='80.95' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='47.17' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='149.28' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>25<\/text>\n   <text x='253.84' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>50<\/text>\n   <text x='358.4' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>75<\/text>\n   <text x='460.51' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>100<\/text>\n   <text x='249.51' y='338.57' font-size='8.25pt' font-family='Arial'>Step<\/text>\n   <text x='33.1' y='58.26' font-size='9.9pt' font-family='Arial'>y<\/text>\n   <text x='330.01' y='352.67' font-size='6.6pt' font-family='Arial'>1 dimensions, 100 steps, mu = 0, sd = 1.<\/text>\n   <text x='15.44' y='31.05' font-size='8.25pt' font-family='Arial'>Function: rw30<\/text>\n   <text x='15.44' y='14.93' font-size='9.9pt' font-family='Arial'>30 Random Walks<\/text>\n  <\/g>\n <\/g>\n<\/svg>","js":null,"uid":"svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2","ratio":1.4,"settings":{"tooltip":{"css":".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}","placement":"doc","opacity":0.7,"offx":200,"offy":5,"use_cursor_pos":false,"use_fill":false,"use_stroke":false,"delay_over":200,"delay_out":500},"hover":{"css":".hover_data_SVGID_ { stroke:black;stroke-width:2pt; }","reactive":false,"nearest_distance":null},"hover_inv":{"css":".hover_inv_SVGID_ { opacity:0.4; }"},"hover_key":{"css":".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\nimage.hover_key_SVGID_ { stroke:orange; }","reactive":true},"hover_theme":{"css":".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\nimage.hover_theme_SVGID_ { stroke:orange; }","reactive":true},"select":{"css":".select_data_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_data_SVGID_ { stroke:none;fill:red; }\ncircle.select_data_SVGID_ { fill:red;stroke:black; }\nline.select_data_SVGID_, polyline.select_data_SVGID_ { fill:none;stroke:red; }\nrect.select_data_SVGID_, polygon.select_data_SVGID_, path.select_data_SVGID_ { fill:red;stroke:none; }\nimage.select_data_SVGID_ { stroke:red; }","type":"multiple","only_shiny":true,"selected":[]},"select_inv":{"css":""},"select_key":{"css":".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_key_SVGID_ { stroke:none;fill:red; }\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\nimage.select_key_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"select_theme":{"css":".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\nimage.select_theme_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"zoom":{"min":1,"max":5,"duration":300},"toolbar":{"position":"topright","pngname":"diagram","tooltips":null,"fixed":false,"hidden":[],"delay_over":200,"delay_out":500},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset by custom criteria</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="girafe html-widget html-fill-item" id="htmlwidget-ef21ebe1ba1bb7886db8" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-ef21ebe1ba1bb7886db8">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_13db3af7_5c79_452f_b102_263548f29962' viewBox='0 0 504 360'>\n <defs id='svg_13db3af7_5c79_452f_b102_263548f29962_defs'>\n  <clipPath id='svg_13db3af7_5c79_452f_b102_263548f29962_c1'>\n   <rect x='0' y='0' width='504' height='360'/>\n  <\/clipPath>\n  <clipPath id='svg_13db3af7_5c79_452f_b102_263548f29962_c2'>\n   <rect x='33.1' y='66.51' width='455.46' height='248.36'/>\n  <\/clipPath>\n  <clipPath id='svg_13db3af7_5c79_452f_b102_263548f29962_c3'>\n   <rect x='5.48' y='38.85' width='493.04' height='302.04'/>\n  <\/clipPath>\n <\/defs>\n <g id='svg_13db3af7_5c79_452f_b102_263548f29962_rootg' class='ggiraph-svg-rootg'>\n  <g clip-path='url(#svg_13db3af7_5c79_452f_b102_263548f29962_c1)'>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='round'/>\n  <\/g>\n  <g clip-path='url(#svg_13db3af7_5c79_452f_b102_263548f29962_c2)'>\n   <polyline points='33.10,301.74 488.56,301.74' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,250.75 488.56,250.75' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,199.75 488.56,199.75' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,148.76 488.56,148.76' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,97.76 488.56,97.76' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='101.90,314.87 101.90,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='206.46,314.87 206.46,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='311.02,314.87 311.02,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='415.58,314.87 415.58,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,276.24 488.56,276.24' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,225.25 488.56,225.25' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,174.26 488.56,174.26' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,123.26 488.56,123.26' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,72.27 488.56,72.27' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='49.62,314.87 49.62,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='154.18,314.87 154.18,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='258.74,314.87 258.74,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='363.30,314.87 363.30,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='467.86,314.87 467.86,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline id='svg_13db3af7_5c79_452f_b102_263548f29962_e1' points='53.80,174.26 57.98,170.53 62.16,173.53 66.35,173.52 70.53,162.23 74.71,157.29 78.89,153.37 83.08,159.02 87.26,163.03 91.44,151.39 95.62,156.96 99.81,155.87 103.99,151.32 108.17,146.12 112.35,140.57 116.53,141.40 120.72,145.58 124.90,147.15 129.08,151.75 133.26,148.55 137.45,142.84 141.63,131.99 145.81,130.13 149.99,134.59 154.18,129.36 158.36,124.75 162.54,125.96 166.72,133.91 170.91,130.03 175.09,124.27 179.27,125.77 183.45,123.04 187.64,124.45 191.82,120.97 196.00,121.56 200.18,123.32 204.36,122.75 208.55,124.20 212.73,127.21 216.91,128.82 221.09,128.86 225.28,127.81 229.46,119.99 233.64,126.92 237.82,127.93 242.01,124.71 246.19,115.73 250.37,113.56 254.55,113.63 258.74,115.20 262.92,113.08 267.10,108.04 271.28,108.98 275.47,108.14 279.65,107.04 283.83,103.32 288.01,97.65 292.19,96.23 296.38,96.61 300.56,89.50 304.74,88.66 308.92,80.62 313.11,80.93 317.29,77.80 321.47,85.69 325.65,86.26 329.84,86.37 334.02,90.24 338.20,95.52 342.38,90.68 346.57,86.02 350.75,92.65 354.93,90.48 359.11,96.15 363.30,101.51 367.48,98.84 371.66,102.33 375.84,97.27 380.02,97.07 384.21,94.34 388.39,97.01 392.57,102.88 396.75,98.21 400.94,97.00 405.12,98.22 409.30,97.87 413.48,91.10 417.67,94.66 421.85,98.49 426.03,101.65 430.21,109.73 434.40,105.55 438.58,104.57 442.76,103.51 446.94,103.73 451.13,106.33 455.31,110.53 459.49,106.19 463.67,113.46 467.86,111.22' fill='none' stroke='#F8766D' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <polyline id='svg_13db3af7_5c79_452f_b102_263548f29962_e2' points='53.80,174.26 57.98,178.27 62.16,184.64 66.35,190.13 70.53,188.86 74.71,189.47 78.89,191.00 83.08,202.84 87.26,209.59 91.44,210.26 95.62,214.74 99.81,218.80 103.99,213.45 108.17,212.55 112.35,217.88 116.53,220.27 120.72,221.72 124.90,225.19 129.08,230.10 133.26,230.37 137.45,226.59 141.63,225.43 145.81,226.45 149.99,224.48 154.18,220.43 158.36,221.14 162.54,218.82 166.72,224.66 170.91,225.93 175.09,228.08 179.27,227.08 183.45,225.26 187.64,225.89 191.82,229.80 196.00,234.54 200.18,233.12 204.36,226.20 208.55,230.21 212.73,232.17 216.91,230.49 221.09,233.31 225.28,232.69 229.46,232.94 233.64,236.90 237.82,232.66 242.01,228.34 246.19,223.12 250.37,216.65 254.55,219.23 258.74,221.60 262.92,220.27 267.10,217.06 271.28,218.79 275.47,220.95 279.65,224.10 283.83,216.54 288.01,229.33 292.19,230.19 296.38,229.99 300.56,235.40 304.74,233.43 308.92,243.46 313.11,238.59 317.29,247.07 321.47,258.31 325.65,262.20 329.84,261.37 334.02,264.70 338.20,267.55 342.38,265.85 346.57,271.25 350.75,271.69 354.93,269.15 359.11,260.82 363.30,258.37 367.48,249.63 371.66,247.32 375.84,247.33 380.02,258.84 384.21,265.08 388.39,266.71 392.57,263.08 396.75,264.72 400.94,261.95 405.12,267.38 409.30,268.77 413.48,267.67 417.67,269.50 421.85,268.92 426.03,272.34 430.21,270.44 434.40,270.85 438.58,271.09 442.76,281.03 446.94,284.46 451.13,292.06 455.31,300.25 459.49,302.76 463.67,303.58 467.86,302.14' fill='none' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e3' cx='53.8' cy='174.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e4' cx='57.98' cy='170.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 2 | y: 0.73'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e5' cx='62.16' cy='173.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 3 | y: 0.143'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e6' cx='66.35' cy='173.52' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 4 | y: 0.143'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e7' cx='70.53' cy='162.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 5 | y: 2.358'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e8' cx='74.71' cy='157.29' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 6 | y: 3.327'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e9' cx='78.89' cy='153.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 7 | y: 4.095'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e10' cx='83.08' cy='159.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 8 | y: 2.987'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e11' cx='87.26' cy='163.03' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 9 | y: 2.201'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e12' cx='91.44' cy='151.39' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 10 | y: 4.485'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e13' cx='95.62' cy='156.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 11 | y: 3.392'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e14' cx='99.81' cy='155.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 12 | y: 3.606'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e15' cx='103.99' cy='151.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 13 | y: 4.499'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e16' cx='108.17' cy='146.12' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 14 | y: 5.517'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e17' cx='112.35' cy='140.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 15 | y: 6.606'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e18' cx='116.53' cy='141.4' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 16 | y: 6.443'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e19' cx='120.72' cy='145.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 17 | y: 5.622'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e20' cx='124.9' cy='147.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 18 | y: 5.315'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e21' cx='129.08' cy='151.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 19 | y: 4.413'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e22' cx='133.26' cy='148.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 20 | y: 5.04'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e23' cx='137.45' cy='142.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 21 | y: 6.16'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e24' cx='141.63' cy='131.99' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 22 | y: 8.288'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e25' cx='145.81' cy='130.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 23 | y: 8.654'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e26' cx='149.99' cy='134.59' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 24 | y: 7.779'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e27' cx='154.18' cy='129.36' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 25 | y: 8.803'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e28' cx='158.36' cy='124.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 26 | y: 9.708'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e29' cx='162.54' cy='125.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 27 | y: 9.47'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e30' cx='166.72' cy='133.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 28 | y: 7.912'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e31' cx='170.91' cy='130.03' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 29 | y: 8.673'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e32' cx='175.09' cy='124.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 30 | y: 9.803'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e33' cx='179.27' cy='125.77' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 31 | y: 9.507'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e34' cx='183.45' cy='123.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 32 | y: 10.044'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e35' cx='187.64' cy='124.45' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 33 | y: 9.768'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e36' cx='191.82' cy='120.97' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 34 | y: 10.45'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e37' cx='196' cy='121.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 35 | y: 10.333'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e38' cx='200.18' cy='123.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 36 | y: 9.988'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e39' cx='204.36' cy='122.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 37 | y: 10.1'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e40' cx='208.55' cy='124.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 38 | y: 9.816'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e41' cx='212.73' cy='127.21' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 39 | y: 9.225'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e42' cx='216.91' cy='128.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 40 | y: 8.909'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e43' cx='221.09' cy='128.86' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 41 | y: 8.901'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e44' cx='225.28' cy='127.81' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 42 | y: 9.109'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e45' cx='229.46' cy='119.99' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 43 | y: 10.641'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e46' cx='233.64' cy='126.92' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 44 | y: 9.283'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e47' cx='237.82' cy='127.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 45 | y: 9.084'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e48' cx='242.01' cy='124.71' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 46 | y: 9.715'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e49' cx='246.19' cy='115.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 47 | y: 11.477'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e50' cx='250.37' cy='113.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 48 | y: 11.903'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e51' cx='254.55' cy='113.63' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 49 | y: 11.889'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e52' cx='258.74' cy='115.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 50 | y: 11.582'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e53' cx='262.92' cy='113.08' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 51 | y: 11.996'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e54' cx='267.1' cy='108.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 52 | y: 12.985'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e55' cx='271.28' cy='108.98' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 53 | y: 12.801'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e56' cx='275.47' cy='108.14' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 54 | y: 12.965'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e57' cx='279.65' cy='107.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 55 | y: 13.182'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e58' cx='283.83' cy='103.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 56 | y: 13.911'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e59' cx='288.01' cy='97.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 57 | y: 15.023'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e60' cx='292.19' cy='96.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 58 | y: 15.302'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e61' cx='296.38' cy='96.61' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 59 | y: 15.226'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e62' cx='300.56' cy='89.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 60 | y: 16.62'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e63' cx='304.74' cy='88.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 61 | y: 16.785'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e64' cx='308.92' cy='80.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 62 | y: 18.363'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e65' cx='313.11' cy='80.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 63 | y: 18.301'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e66' cx='317.29' cy='77.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 64 | y: 18.915'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e67' cx='321.47' cy='85.69' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 65 | y: 17.369'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e68' cx='325.65' cy='86.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 66 | y: 17.256'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e69' cx='329.84' cy='86.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 67 | y: 17.234'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e70' cx='334.02' cy='90.24' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 68 | y: 16.476'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e71' cx='338.2' cy='95.52' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 69 | y: 15.44'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e72' cx='342.38' cy='90.68' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 70 | y: 16.388'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e73' cx='346.57' cy='86.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 71 | y: 17.302'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e74' cx='350.75' cy='92.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 72 | y: 16.004'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e75' cx='354.93' cy='90.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 73 | y: 16.428'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e76' cx='359.11' cy='96.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 74 | y: 15.316'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e77' cx='363.3' cy='101.51' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 75 | y: 14.265'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e78' cx='367.48' cy='98.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 76 | y: 14.79'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e79' cx='371.66' cy='102.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 77 | y: 14.104'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e80' cx='375.84' cy='97.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 78 | y: 15.097'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e81' cx='380.02' cy='97.07' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 79 | y: 15.136'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e82' cx='384.21' cy='94.34' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 80 | y: 15.672'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e83' cx='388.39' cy='97.01' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 81 | y: 15.148'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e84' cx='392.57' cy='102.88' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 82 | y: 13.997'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e85' cx='396.75' cy='98.21' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 83 | y: 14.912'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e86' cx='400.94' cy='97' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 84 | y: 15.15'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e87' cx='405.12' cy='98.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 85 | y: 14.911'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e88' cx='409.3' cy='97.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 86 | y: 14.98'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e89' cx='413.48' cy='91.1' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 87 | y: 16.306'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e90' cx='417.67' cy='94.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 88 | y: 15.608'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e91' cx='421.85' cy='98.49' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 89 | y: 14.859'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e92' cx='426.03' cy='101.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 90 | y: 14.239'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e93' cx='430.21' cy='109.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 91 | y: 12.654'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e94' cx='434.4' cy='105.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 92 | y: 13.474'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e95' cx='438.58' cy='104.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 93 | y: 13.666'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e96' cx='442.76' cy='103.51' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 94 | y: 13.873'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e97' cx='446.94' cy='103.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 95 | y: 13.83'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e98' cx='451.13' cy='106.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 96 | y: 13.32'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e99' cx='455.31' cy='110.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 97 | y: 12.496'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e100' cx='459.49' cy='106.19' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 98 | y: 13.348'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e101' cx='463.67' cy='113.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 99 | y: 11.922'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e102' cx='467.86' cy='111.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 100 | y: 12.362'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e103' cx='53.8' cy='174.26' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e104' cx='57.98' cy='178.27' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 2 | y: -0.787'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e105' cx='62.16' cy='184.64' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 3 | y: -2.036'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e106' cx='66.35' cy='190.13' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 4 | y: -3.114'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e107' cx='70.53' cy='188.86' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 5 | y: -2.864'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e108' cx='74.71' cy='189.47' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 6 | y: -2.983'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e109' cx='78.89' cy='191' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 7 | y: -3.284'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e110' cx='83.08' cy='202.84' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 8 | y: -5.605'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e111' cx='87.26' cy='209.59' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 9 | y: -6.929'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e112' cx='91.44' cy='210.26' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 10 | y: -7.061'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e113' cx='95.62' cy='214.74' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 11 | y: -7.939'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e114' cx='99.81' cy='218.8' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 12 | y: -8.735'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e115' cx='103.99' cy='213.45' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 13 | y: -7.686'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e116' cx='108.17' cy='212.55' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 14 | y: -7.51'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e117' cx='112.35' cy='217.88' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 15 | y: -8.554'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e118' cx='116.53' cy='220.27' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 16 | y: -9.023'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e119' cx='120.72' cy='221.72' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 17 | y: -9.308'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e120' cx='124.9' cy='225.19' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 18 | y: -9.988'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e121' cx='129.08' cy='230.1' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 19 | y: -10.952'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e122' cx='133.26' cy='230.37' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 20 | y: -11.004'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e123' cx='137.45' cy='226.59' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 21 | y: -10.263'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e124' cx='141.63' cy='225.43' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 22 | y: -10.036'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e125' cx='145.81' cy='226.45' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 23 | y: -10.236'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e126' cx='149.99' cy='224.48' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 24 | y: -9.848'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e127' cx='154.18' cy='220.43' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 25 | y: -9.054'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e128' cx='158.36' cy='221.14' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 26 | y: -9.195'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e129' cx='162.54' cy='218.82' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 27 | y: -8.739'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e130' cx='166.72' cy='224.66' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 28 | y: -9.885'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e131' cx='170.91' cy='225.93' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 29 | y: -10.134'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e132' cx='175.09' cy='228.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 30 | y: -10.554'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e133' cx='179.27' cy='227.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 31 | y: -10.359'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e134' cx='183.45' cy='225.26' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 32 | y: -10.002'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e135' cx='187.64' cy='225.89' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 33 | y: -10.125'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e136' cx='191.82' cy='229.8' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 34 | y: -10.891'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e137' cx='196' cy='234.54' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 35 | y: -11.821'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e138' cx='200.18' cy='233.12' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 36 | y: -11.543'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e139' cx='204.36' cy='226.2' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 37 | y: -10.186'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e140' cx='208.55' cy='230.21' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 38 | y: -10.973'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e141' cx='212.73' cy='232.17' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 39 | y: -11.358'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e142' cx='216.91' cy='230.49' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 40 | y: -11.027'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e143' cx='221.09' cy='233.31' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 41 | y: -11.582'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e144' cx='225.28' cy='232.69' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 42 | y: -11.46'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e145' cx='229.46' cy='232.94' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 43 | y: -11.508'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e146' cx='233.64' cy='236.9' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 44 | y: -12.284'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e147' cx='237.82' cy='232.66' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 45 | y: -11.452'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e148' cx='242.01' cy='228.34' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 46 | y: -10.606'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e149' cx='246.19' cy='223.12' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 47 | y: -9.582'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e150' cx='250.37' cy='216.65' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 48 | y: -8.314'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e151' cx='254.55' cy='219.23' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 49 | y: -8.82'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e152' cx='258.74' cy='221.6' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 50 | y: -9.285'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e153' cx='262.92' cy='220.27' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 51 | y: -9.024'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e154' cx='267.1' cy='217.06' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 52 | y: -8.394'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e155' cx='271.28' cy='218.79' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 53 | y: -8.733'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e156' cx='275.47' cy='220.95' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 54 | y: -9.156'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e157' cx='279.65' cy='224.1' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 55 | y: -9.775'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e158' cx='283.83' cy='216.54' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 56 | y: -8.293'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e159' cx='288.01' cy='229.33' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 57 | y: -10.801'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e160' cx='292.19' cy='230.19' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 58 | y: -10.968'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e161' cx='296.38' cy='229.99' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 59 | y: -10.93'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e162' cx='300.56' cy='235.4' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 60 | y: -11.99'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e163' cx='304.74' cy='233.43' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 61 | y: -11.604'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e164' cx='308.92' cy='243.46' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 62 | y: -13.571'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e165' cx='313.11' cy='238.59' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 63 | y: -12.616'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e166' cx='317.29' cy='247.07' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 64 | y: -14.28'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e167' cx='321.47' cy='258.31' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 65 | y: -16.482'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e168' cx='325.65' cy='262.2' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 66 | y: -17.246'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e169' cx='329.84' cy='261.37' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 67 | y: -17.084'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e170' cx='334.02' cy='264.7' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 68 | y: -17.736'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e171' cx='338.2' cy='267.55' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 69 | y: -18.295'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e172' cx='342.38' cy='265.85' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 70 | y: -17.962'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e173' cx='346.57' cy='271.25' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 71 | y: -19.021'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e174' cx='350.75' cy='271.69' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 72 | y: -19.106'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e175' cx='354.93' cy='269.15' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 73 | y: -18.608'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e176' cx='359.11' cy='260.82' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 74 | y: -16.974'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e177' cx='363.3' cy='258.37' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 75 | y: -16.495'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e178' cx='367.48' cy='249.63' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 76 | y: -14.78'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e179' cx='371.66' cy='247.32' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 77 | y: -14.327'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e180' cx='375.84' cy='247.33' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 78 | y: -14.33'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e181' cx='380.02' cy='258.84' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 79 | y: -16.587'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e182' cx='384.21' cy='265.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 80 | y: -17.811'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e183' cx='388.39' cy='266.71' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 81 | y: -18.13'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e184' cx='392.57' cy='263.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 82 | y: -17.418'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e185' cx='396.75' cy='264.72' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 83 | y: -17.741'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e186' cx='400.94' cy='261.95' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 84 | y: -17.197'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e187' cx='405.12' cy='267.38' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 85 | y: -18.261'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e188' cx='409.3' cy='268.77' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 86 | y: -18.535'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e189' cx='413.48' cy='267.67' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 87 | y: -18.318'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e190' cx='417.67' cy='269.5' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 88 | y: -18.677'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e191' cx='421.85' cy='268.92' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 89 | y: -18.565'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e192' cx='426.03' cy='272.34' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 90 | y: -19.235'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e193' cx='430.21' cy='270.44' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 91 | y: -18.861'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e194' cx='434.4' cy='270.85' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 92 | y: -18.942'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e195' cx='438.58' cy='271.09' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 93 | y: -18.989'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e196' cx='442.76' cy='281.03' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 94 | y: -20.938'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e197' cx='446.94' cy='284.46' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 95 | y: -21.612'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e198' cx='451.13' cy='292.06' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 96 | y: -23.101'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e199' cx='455.31' cy='300.25' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 97 | y: -24.707'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e200' cx='459.49' cy='302.76' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 98 | y: -25.201'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e201' cx='463.67' cy='303.58' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 99 | y: -25.362'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e202' cx='467.86' cy='302.14' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 100 | y: -25.078'/>\n  <\/g>\n  <g clip-path='url(#svg_13db3af7_5c79_452f_b102_263548f29962_c1)'>\n   <text x='15.44' y='279.39' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-20<\/text>\n   <text x='15.44' y='228.4' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-10<\/text>\n   <text x='23.27' y='177.41' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='18.37' y='126.41' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>10<\/text>\n   <text x='18.37' y='75.42' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>20<\/text>\n   <text x='47.17' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='149.28' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>25<\/text>\n   <text x='253.84' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>50<\/text>\n   <text x='358.4' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>75<\/text>\n   <text x='460.51' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>100<\/text>\n   <text x='249.51' y='338.57' font-size='8.25pt' font-family='Arial'>Step<\/text>\n   <text x='33.1' y='58.26' font-size='9.9pt' font-family='Arial'>y<\/text>\n   <text x='330.01' y='352.67' font-size='6.6pt' font-family='Arial'>1 dimensions, 100 steps, mu = 0, sd = 1.<\/text>\n   <text x='15.44' y='31.05' font-size='8.25pt' font-family='Arial'>Function: rw30<\/text>\n   <text x='15.44' y='14.93' font-size='9.9pt' font-family='Arial'>30 Random Walks<\/text>\n  <\/g>\n <\/g>\n<\/svg>","js":null,"uid":"svg_13db3af7_5c79_452f_b102_263548f29962","ratio":1.4,"settings":{"tooltip":{"css":".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}","placement":"doc","opacity":0.7,"offx":200,"offy":5,"use_cursor_pos":false,"use_fill":false,"use_stroke":false,"delay_over":200,"delay_out":500},"hover":{"css":".hover_data_SVGID_ { stroke:black;stroke-width:2pt; }","reactive":false,"nearest_distance":null},"hover_inv":{"css":".hover_inv_SVGID_ { opacity:0.4; }"},"hover_key":{"css":".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\nimage.hover_key_SVGID_ { stroke:orange; }","reactive":true},"hover_theme":{"css":".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\nimage.hover_theme_SVGID_ { stroke:orange; }","reactive":true},"select":{"css":".select_data_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_data_SVGID_ { stroke:none;fill:red; }\ncircle.select_data_SVGID_ { fill:red;stroke:black; }\nline.select_data_SVGID_, polyline.select_data_SVGID_ { fill:none;stroke:red; }\nrect.select_data_SVGID_, polygon.select_data_SVGID_, path.select_data_SVGID_ { fill:red;stroke:none; }\nimage.select_data_SVGID_ { stroke:red; }","type":"multiple","only_shiny":true,"selected":[]},"select_inv":{"css":""},"select_key":{"css":".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_key_SVGID_ { stroke:none;fill:red; }\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\nimage.select_key_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"select_theme":{"css":".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\nimage.select_theme_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"zoom":{"min":1,"max":5,"duration":300},"toolbar":{"position":"topright","pngname":"diagram","tooltips":null,"fixed":false,"hidden":[],"delay_over":200,"delay_out":500},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
<section id="multi-column-visualization-with-visualize_walks" class="level2">
<h2 class="anchored" data-anchor-id="multi-column-visualization-with-visualize_walks"><strong>Multi-Column Visualization with <code>visualize_walks()</code></strong></h2>
<p>The enhanced <code>visualize_walks()</code> function now accepts vector inputs for the <code>.pluck</code> parameter, enabling simultaneous visualization of multiple walk types or simulations :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb6-2">rw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>()</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize specific simulations</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(rw, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pluck =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/pluck_visualizations-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare multiple distribution types</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(rw, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pluck =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_min"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_max"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/pluck_visualizations-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="multi-dimensional-modeling-revolution" class="level1">
<h1><strong>Multi-Dimensional Modeling Revolution</strong></h1>
<p>All 21 generator functions support multi-dimensional random walks through the <code>.dimensions</code> parameter, breaking the traditional 1D limitation. This capability transforms spatial modeling applications:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D random walks for spatial modeling</span></span>
<span id="cb8-2">walk_2d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(walk_2d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]         
walk_number "1"          
step_number "1"          
x           "0.03563341" 
y           "-0.01747179"
cum_sum_x   "0.03563341" 
cum_sum_y   "-0.01747179"
cum_prod_x  "0"          
cum_prod_y  "0"          
cum_min_x   "0.03563341" 
cum_min_y   "-0.01747179"
cum_max_x   "0.03563341" 
cum_max_y   "-0.01747179"
cum_mean_x  "0.03563341" 
cum_mean_y  "-0.01747179"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3D random walks for complex spatial analysis  </span></span>
<span id="cb10-2">walk_3d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_uniform_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(walk_3d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       
walk_number "1"        
step_number "1"        
x           "0.3000542"
y           "0.8856108"
z           "0.6017601"
cum_sum_x   "0.3000542"
cum_sum_y   "0.8856108"
cum_sum_z   "0.6017601"
cum_prod_x  "0"        
cum_prod_y  "0"        
cum_prod_z  "0"        
cum_min_x   "0.3000542"
cum_min_y   "0.8856108"
cum_min_z   "0.6017601"
cum_max_x   "0.3000542"
cum_max_y   "0.8856108"
cum_max_z   "0.6017601"
cum_mean_x  "0.3000542"
cum_mean_y  "0.8856108"
cum_mean_z  "0.6017601"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multi-dimensional discrete processes</span></span>
<span id="cb12-2">poisson_2d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_poisson_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(poisson_2d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]
walk_number "1" 
step_number "1" 
x           "3" 
y           "1" 
cum_sum_x   "3" 
cum_sum_y   "1" 
cum_prod_x  "0" 
cum_prod_y  "0" 
cum_min_x   "3" 
cum_min_y   "1" 
cum_max_x   "3" 
cum_max_y   "1" 
cum_mean_x  "3" 
cum_mean_y  "1" </code></pre>
</div>
</div>
</section>
<section id="real-world-applications-across-industries" class="level1">
<h1><strong>Real-World Applications Across Industries</strong></h1>
<section id="financial-modeling-excellence" class="level2">
<h2 class="anchored" data-anchor-id="financial-modeling-excellence"><strong>Financial Modeling Excellence</strong></h2>
<p>The expanded distribution set revolutionizes financial applications:</p>
<ul>
<li><strong>Asset Pricing</strong>: Use <code>random_lognormal_walk()</code> for realistic stock price simulations</li>
<li><strong>Risk Management</strong>: Apply <code>random_weibull_walk()</code> for failure time analysis in portfolios</li>
<li><strong>Heavy-Tail Modeling</strong>: Leverage <code>random_cauchy_walk()</code> for extreme market events</li>
</ul>
</section>
<section id="engineering-and-reliability-analysis" class="level2">
<h2 class="anchored" data-anchor-id="engineering-and-reliability-analysis"><strong>Engineering and Reliability Analysis</strong></h2>
<p>Engineering applications benefit from specialized distributions:</p>
<ul>
<li><strong>Failure Analysis</strong>: <code>random_weibull_walk()</code> and <code>random_exponential_walk()</code> for system reliability</li>
<li><strong>Quality Control</strong>: <code>random_binomial_walk()</code> and <code>random_hypergeometric_walk()</code> for sampling processes</li>
<li><strong>System Testing</strong>: <code>random_chisquared_walk()</code> and <code>random_f_walk()</code> for statistical validation</li>
</ul>
</section>
<section id="biological-and-ecological-modeling" class="level2">
<h2 class="anchored" data-anchor-id="biological-and-ecological-modeling"><strong>Biological and Ecological Modeling</strong></h2>
<p>Life sciences gain powerful new modeling tools:</p>
<ul>
<li><strong>Population Dynamics</strong>: <code>random_negbinomial_walk()</code> for over-dispersed population counts</li>
<li><strong>Disease Modeling</strong>: <code>random_poisson_walk()</code> and <code>random_multinomial_walk()</code> for epidemic spread</li>
<li><strong>Genetic Analysis</strong>: <code>random_hypergeometric_walk()</code> for sampling genetic variants</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1><strong>Your Turn!</strong></h1>
<p><strong>Challenge</strong>: Create a portfolio simulation comparing three different risk models using normal, t-distribution, and Weibull random walks.</p>
<p><strong>Task</strong>:</p>
<ol type="1">
<li>Generate 1000-step walks for each distribution</li>
<li>Calculate risk metrics (max drawdown, volatility)</li>
<li>Compare performance characteristics</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Portfolio simulation with different risk models</span></span>
<span id="cb14-2">normal_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mu =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, </span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(walk_number, y)</span>
<span id="cb14-8"></span>
<span id="cb14-9">t_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_t_walk</span>(</span>
<span id="cb14-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb14-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.df =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(walk_number, y)</span>
<span id="cb14-14"></span>
<span id="cb14-15">weibull_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_weibull_walk</span>(</span>
<span id="cb14-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb14-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.shape =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, </span>
<span id="cb14-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.scale =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(walk_number, y)</span>
<span id="cb14-21"></span>
<span id="cb14-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate risk metrics grouped on walk_number with y as the value</span></span>
<span id="cb14-23">calculate_risk_metrics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(walks) {</span>
<span id="cb14-24">  max_drawdowns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> walks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_drawdowns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cummax</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(max_drawdowns)</span>
<span id="cb14-29">  volatility <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> walks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">volatility =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(volatility)</span>
<span id="cb14-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb14-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_drawdown =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(max_drawdowns), </span>
<span id="cb14-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">volatility =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(volatility))</span>
<span id="cb14-37">      )</span>
<span id="cb14-38">}</span>
<span id="cb14-39"></span>
<span id="cb14-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_risk_metrics</span>(normal_portfolio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$max_drawdown
[1] 1.200971

$volatility
[1] 0.2005195</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_risk_metrics</span>(t_portfolio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$max_drawdown
[1] 21.07394

$volatility
[1] 1.698124</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_risk_metrics</span>(weibull_portfolio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$max_drawdown
[1] 3.641576

$volatility
[1] 0.611113</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways-key-points-for-r-programmers" class="level1">
<h1><strong>Quick Takeaways: Key Points for R Programmers</strong></h1>
<p>‚Ä¢ <strong>Complete Coverage</strong>: 21 new distribution-based generators plus 2 enhanced utilities cover every major statistical distribution family</p>
<p>‚Ä¢ <strong>Multi-Dimensional</strong>: All functions support 2D and 3D random walks through the <code>.dimensions</code> parameter</p>
<p>‚Ä¢ <strong>Enhanced Utilities</strong>: <code>subset_walks()</code> gains <code>.value</code> parameter flexibility; <code>visualize_walks()</code> supports vector <code>.pluck</code> inputs</p>
<p>‚Ä¢ <strong>Custom Flexibility</strong>: <code>random_displacement_walk()</code> enables unlimited user-defined step distributions</p>
<p>‚Ä¢ <strong>Tidyverse Integration</strong>: Full compatibility with dplyr, ggplot2, and pipe-friendly workflows</p>
<p>‚Ä¢ <strong>Industry Applications</strong>: Purpose-built functions for finance, engineering, biology, and statistical testing</p>
</section>
<section id="migration-and-best-practices" class="level1">
<h1><strong>Migration and Best Practices</strong></h1>
<p>Existing RandomWalker users can seamlessly integrate the new functions while maintaining backward compatibility. The package maintains its tidyverse-friendly design philosophy, ensuring smooth integration with existing R workflows .</p>
<p><strong>Documentation</strong>: Each function includes comprehensive documentation with parameter specifications, use cases, and practical examples.</p>
</section>
<section id="conclusion-the-future-of-stochastic-modeling-in-r" class="level1">
<h1><strong>Conclusion: The Future of Stochastic Modeling in R</strong></h1>
<p>The RandomWalker v0.3.0 update represents a paradigm shift in R-based stochastic modeling. With 23 new and enhanced functions covering the complete spectrum of statistical distributions, R programmers now have unprecedented power to model complex random processes across any domain.</p>
<p>Whether you‚Äôre simulating financial markets with heavy tailed distributions, modeling biological populations with discrete processes, or conducting advanced statistical testing with nonparametric approaches, RandomWalker delivers the tools needed for sophisticated analysis.</p>
<p><strong>Ready to explore the new capabilities?</strong> Install the latest version and discover how these powerful new functions can transform your stochastic modeling projects. The future of random walk simulation in R has arrived.</p>
<hr>
<p><em>Have you tried the new RandomWalker functions? Share your experiences and applications in the comments below, and don‚Äôt forget to spread the word about these exciting updates on social media!</em></p>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Update to RandomWalker</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-08-19/</guid>
  <pubDate>Tue, 19 Aug 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Complete Beginner‚Äôs Guide to Python Debugging: Assertions, Exceptions, Logging, and More</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-08-06/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>exit</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Key Takeaway:</strong> Python debugging doesn‚Äôt have to be intimidating. With the right tools and techniques‚Äîassertions, exception handling, logging, and systematic debugging approaches‚Äîyou can quickly identify and fix issues in your code.</p>
</blockquote>
<p><em>Author‚Äôs Note: Dear Reader, I want to be completely honest with you from the start: I am learning Python debugging as I write this series. This isn‚Äôt coming from someone who has mastered every aspect of Python development, it‚Äôs coming from someone who is actively working through these concepts, making mistakes, and discovering better ways to debug code.</em></p>
<p><strong>P.S. - Keep a debugging journal! I wish I had started one earlier. Writing down the problems you solve helps you recognize patterns and builds your debugging intuition over time. Hopefully this blog series will serve as that.</strong></p>
<p><strong>Here is a list of links that will continue to grow and hopefully help out: <a href="https://app.dotadda.io/teams/ab732481-52f3-4388-896c-23d34e828b35/dots?date=2025-08-16&amp;timespan=month">Python on Dots</a></strong></p>
<hr>
<section id="understanding-python-debugging-fundamentals" class="level1">
<h1>Understanding Python Debugging Fundamentals</h1>
<p><strong>Debugging</strong> is the process of finding and fixing errors (bugs) in your code . As a beginner Python programmer, you‚Äôll encounter various types of errors that can seem overwhelming at first. However, with the right approach and tools, debugging becomes much more manageable.</p>
<p>Python provides several built-in tools and techniques to help you identify and resolve issues:</p>
<ul>
<li><strong>Assertions</strong> for checking assumptions during development</li>
<li><strong>Exception handling</strong> for managing runtime errors gracefully</li>
<li><strong>Logging</strong> for tracking program execution and events</li>
<li><strong>Debug statements</strong> and interactive debugging tools</li>
</ul>
<p>Let‚Äôs explore each of these techniques with practical, working examples.</p>
<hr>
</section>
<section id="mastering-python-assertions" class="level1">
<h1>Mastering Python Assertions</h1>
<p><strong>Assertions</strong> are statements that check if a condition is true at a specific point in your code . If the condition is false, Python raises an <code>AssertionError</code> and stops execution, helping you catch bugs early in development.</p>
<section id="basic-assertion-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-assertion-syntax">Basic Assertion Syntax</h2>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> condition, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Optional error message"</span></span></code></pre></div>
<p>The assertion checks if the <code>condition</code> is <code>True</code>. If it‚Äôs <code>False</code>, Python raises an <code>AssertionError</code> with your optional message.</p>
</section>
<section id="working-example-input-validation" class="level2">
<h2 class="anchored" data-anchor-id="working-example-input-validation">Working Example: Input Validation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_square_root(x):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate square root with assertion check."""</span></span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be non-negative for square root"</span></span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test successful case</span></span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Square root of 9 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>calculate_square_root(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works fine</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Square root of 9 = 3.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test assertion failure</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb5-3">    calculate_square_root(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will raise AssertionError</span></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AssertionError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb5-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"AssertionError: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>AssertionError: Input must be non-negative for square root</code></pre>
</div>
</div>
</section>
<section id="when-to-use-assertions" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-assertions">When to Use Assertions</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 57%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Use Assertions For</strong></th>
<th><strong>Don‚Äôt Use Assertions For</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Internal self-checks during development</td>
<td>Handling user input errors</td>
</tr>
<tr class="even">
<td>Verifying algorithm assumptions</td>
<td>Production error handling</td>
</tr>
<tr class="odd">
<td>Checking data structure integrity</td>
<td>Validating external data</td>
</tr>
<tr class="even">
<td>Testing function preconditions</td>
<td>Runtime error management</td>
</tr>
</tbody>
</table>
</section>
<section id="practical-assertion-example-data-validation" class="level2">
<h2 class="anchored" data-anchor-id="practical-assertion-example-data-validation">Practical Assertion Example: Data Validation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> process_student_grades(grades):</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Process a list of student grades with validation."""</span></span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(grades, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grades must be a list"</span></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grades) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grades list cannot be empty"</span></span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> grade <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> grade <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> grades), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All grades must be between 0 and 100"</span></span>
<span id="cb7-6">    </span>
<span id="cb7-7">    average <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(grades) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grades)</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(average, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Valid case</span></span>
<span id="cb7-11">valid_grades <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">96</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>]</span>
<span id="cb7-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Average grade: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>process_student_grades(valid_grades)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Average grade: 87.8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Invalid case (grade out of range)</span></span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-3">    invalid_grades <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 105 is invalid</span></span>
<span id="cb9-4">    process_student_grades(invalid_grades)</span>
<span id="cb9-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AssertionError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb9-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Validation failed: All grades must be between 0 and 100</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="exception-handling-managing-runtime-errors" class="level1">
<h1>Exception Handling: Managing Runtime Errors</h1>
<p><strong>Exception handling</strong> allows your program to respond to runtime errors gracefully instead of crashing . Python uses a <code>try-except</code> structure to catch and handle different types of errors.</p>
<section id="common-python-exceptions" class="level2">
<h2 class="anchored" data-anchor-id="common-python-exceptions">Common Python Exceptions</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 36%">
<col style="width: 36%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Exception Type</strong></th>
<th><strong>When It Occurs</strong></th>
<th><strong>Example</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ValueError</code></td>
<td>Invalid value for a function</td>
<td><code>int("abc")</code></td>
</tr>
<tr class="even">
<td><code>TypeError</code></td>
<td>Operation on incompatible types</td>
<td><code>"a" + 1</code></td>
</tr>
<tr class="odd">
<td><code>ZeroDivisionError</code></td>
<td>Division by zero</td>
<td><code>10 / 0</code></td>
</tr>
<tr class="even">
<td><code>IndexError</code></td>
<td>List index out of range</td>
<td>1, 2]<code>| |</code>KeyError<code>| Dictionary key not found |</code>[‚Äúmissing‚Äù]<code>| |</code>FileNotFoundError<code>| File doesn't exist |</code>open(‚Äúmissing.txt‚Äù)`</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-exception-handling" class="level2">
<h2 class="anchored" data-anchor-id="basic-exception-handling">Basic Exception Handling</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> safe_divide(a, b):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Safely divide two numbers with exception handling."""</span></span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb11-4">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b</span>
<span id="cb11-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ZeroDivisionError</span>:</span>
<span id="cb11-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error: Cannot divide </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> by zero!"</span>)</span>
<span id="cb11-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>:</span>
<span id="cb11-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error: Both arguments must be numbers"</span>)</span>
<span id="cb11-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test cases</span></span>
<span id="cb11-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"10 √∑ 2 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>safe_divide(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works: 5.0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10 √∑ 2 = 5.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"10 √∑ 0 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>safe_divide(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handles error gracefully</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error: Cannot divide 10 by zero!
10 √∑ 0 = None</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"'hi' √∑ 5 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>safe_divide(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hi'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Handles type error</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Error: Both arguments must be numbers
'hi' √∑ 5 = None</code></pre>
</div>
</div>
</section>
<section id="complete-exception-handling-structure" class="level2">
<h2 class="anchored" data-anchor-id="complete-exception-handling-structure">Complete Exception Handling Structure</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_file_safely(filename):</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Demonstrate complete exception handling structure."""</span></span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb17-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-5">            content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb17-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> content</span>
<span id="cb17-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileNotFoundError</span>:</span>
<span id="cb17-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error: File '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">' not found"</span>)</span>
<span id="cb17-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">PermissionError</span>:</span>
<span id="cb17-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Error: Permission denied for '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'"</span>)</span>
<span id="cb17-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb17-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb17-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This runs only if no exception occurred</span></span>
<span id="cb17-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully read </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span>:</span>
<span id="cb17-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This always runs</span></span>
<span id="cb17-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File operation completed"</span>)</span></code></pre></div>
<p>The <code>try-except-else-finally</code> structure provides complete control: - <strong>try</strong>: Code that might raise an exception - <strong>except</strong>: Handle specific exceptions - <strong>else</strong>: Runs only if no exception occurs - <strong>finally</strong>: Always runs (cleanup code)</p>
<hr>
</section>
</section>
<section id="python-logging-better-than-print-statements" class="level1">
<h1>Python Logging: Better Than Print Statements</h1>
<p><strong>Logging</strong> is the process of recording events during program execution [[4]]. Unlike print statements, logging provides levels, timestamps, and flexible output options.</p>
<section id="logging-levels-explained" class="level2">
<h2 class="anchored" data-anchor-id="logging-levels-explained">Logging Levels Explained</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 29%">
<col style="width: 45%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Level</strong></th>
<th><strong>Purpose</strong></th>
<th><strong>Example Use Case</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>DEBUG</code></td>
<td>Detailed diagnostic information</td>
<td>Variable values, function calls</td>
</tr>
<tr class="even">
<td><code>INFO</code></td>
<td>Confirmation things work as expected</td>
<td>Process completed successfully</td>
</tr>
<tr class="odd">
<td><code>WARNING</code></td>
<td>Something unexpected happened</td>
<td>Deprecated feature used</td>
</tr>
<tr class="even">
<td><code>ERROR</code></td>
<td>Serious problem occurred</td>
<td>Database connection failed</td>
</tr>
<tr class="odd">
<td><code>CRITICAL</code></td>
<td>Very serious error</td>
<td>System crash imminent</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-logging-setup" class="level2">
<h2 class="anchored" data-anchor-id="basic-logging-setup">Basic Logging Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configure logging</span></span>
<span id="cb18-4">logging.basicConfig(</span>
<span id="cb18-5">    level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logging.DEBUG,</span>
<span id="cb18-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(asctime)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(levelname)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(message)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb18-7">    datefmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%H:%M:%S'</span></span>
<span id="cb18-8">)</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create logger</span></span>
<span id="cb18-11">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use different logging levels</span></span>
<span id="cb18-14">logger.debug(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is detailed debug information"</span>)</span>
<span id="cb18-15">logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This confirms normal operation"</span>)</span>
<span id="cb18-16">logger.warning(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This warns about unexpected events"</span>)</span>
<span id="cb18-17">logger.error(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This reports serious problems"</span>)</span>
<span id="cb18-18">logger.critical(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This reports critical system failures"</span>)</span></code></pre></div>
</div>
</section>
<section id="logging-in-functions-practical-example" class="level2">
<h2 class="anchored" data-anchor-id="logging-in-functions-practical-example">Logging in Functions: Practical Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calculate_factorial(n):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculate factorial with comprehensive logging."""</span></span>
<span id="cb19-3">    logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Starting factorial calculation for n=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-4">    </span>
<span id="cb19-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input validation with logging</span></span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(n, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb19-7">        logger.error(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Invalid input type: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(n)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, expected int"</span>)</span>
<span id="cb19-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb19-9">    </span>
<span id="cb19-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb19-11">        logger.error(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Negative input not allowed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb19-13">    </span>
<span id="cb19-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>:</span>
<span id="cb19-15">        logger.warning(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Large input </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> may cause overflow"</span>)</span>
<span id="cb19-16">    </span>
<span id="cb19-17">    logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Input validation passed for n=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-18">    </span>
<span id="cb19-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate factorial</span></span>
<span id="cb19-20">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb19-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb19-22">        result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> i</span>
<span id="cb19-23">        logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Step </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: result = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-24">    </span>
<span id="cb19-25">    logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Factorial calculation complete: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">! = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result</span>
<span id="cb19-27"></span>
<span id="cb19-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb19-29">factorial_5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb19-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"5! = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>factorial_5<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>5! = 120</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="debugging-techniques-and-strategies" class="level1">
<h1>Debugging Techniques and Strategies</h1>
<section id="strategic-print-statement-debugging" class="level2">
<h2 class="anchored" data-anchor-id="strategic-print-statement-debugging">Strategic Print Statement Debugging</h2>
<p>While logging is preferred for production code, print statements are useful for quick debugging during development:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_maximum_in_list(numbers):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Find maximum with debug print statements."""</span></span>
<span id="cb21-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"DEBUG: Starting with list = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>numbers<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-4">    </span>
<span id="cb21-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> numbers:</span>
<span id="cb21-6">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DEBUG: Empty list provided"</span>)</span>
<span id="cb21-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb21-8">    </span>
<span id="cb21-9">    max_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-10">    max_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb21-11">    </span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(numbers):</span>
<span id="cb21-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"DEBUG: Checking index </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, value = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> max_value:</span>
<span id="cb21-15">            max_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value</span>
<span id="cb21-16">            max_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i</span>
<span id="cb21-17">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"DEBUG: New maximum: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> at index </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-18">    </span>
<span id="cb21-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"DEBUG: Final result: max_value=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, index=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>max_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> max_value, max_index</span>
<span id="cb21-21"></span>
<span id="cb21-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb21-23">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_maximum_in_list([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DEBUG: Starting with list = [3, 7, 2, 9, 1, 5]
DEBUG: Checking index 0, value = 3
DEBUG: Checking index 1, value = 7
DEBUG: New maximum: 7 at index 1
DEBUG: Checking index 2, value = 2
DEBUG: Checking index 3, value = 9
DEBUG: New maximum: 9 at index 3
DEBUG: Checking index 4, value = 1
DEBUG: Checking index 5, value = 5
DEBUG: Final result: max_value=9, index=3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Maximum: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> at position </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Maximum: 9 at position 3</code></pre>
</div>
</div>
</section>
<section id="using-pythons-built-in-debugger-pdb" class="level2">
<h2 class="anchored" data-anchor-id="using-pythons-built-in-debugger-pdb">Using Python‚Äôs Built-in Debugger (pdb)</h2>
<p>Python‚Äôs <code>pdb</code> module allows interactive debugging:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pdb</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> problematic_function(x, y):</span>
<span id="cb25-4">    pdb.set_trace()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execution will pause here</span></span>
<span id="cb25-5">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb25-6">    final_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y)</span>
<span id="cb25-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> final_result</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># When you run this, you can inspect variables interactively</span></span></code></pre></div>
<p><strong>Common pdb commands:</strong></p>
<ul>
<li><code>n</code> (next line)</li>
<li><code>s</code> (step into function)</li>
<li><code>c</code> (continue execution)</li>
<li><code>p variable_name</code> (print variable value)</li>
<li><code>q</code> (quit debugger)</li>
</ul>
<hr>
</section>
</section>
<section id="your-turn-practice-exercise" class="level1">
<h1>Your Turn! Practice Exercise</h1>
<p><strong>Challenge:</strong> Create a simple bank account class that uses all the debugging techniques we‚Äôve covered.</p>
<p><strong>Requirements:</strong> 1. Use assertions to validate inputs 2. Handle exceptions for invalid operations 3. Add logging for all transactions 4. Include debug information for troubleshooting</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BankAccount:</span>
<span id="cb26-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, account_number, initial_balance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb26-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span>
<span id="cb26-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb26-7">    </span>
<span id="cb26-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> deposit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, amount):</span>
<span id="cb26-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span>
<span id="cb26-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb26-11">    </span>
<span id="cb26-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> withdraw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, amount):</span>
<span id="cb26-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span>
<span id="cb26-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb26-15">    </span>
<span id="cb26-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_balance(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb26-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span>
<span id="cb26-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb26-19"></span>
<span id="cb26-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test your implementation</span></span>
<span id="cb26-21">account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BankAccount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12345"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb26-22">account.deposit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb26-23">account.withdraw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb26-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Final balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>account<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_balance()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Final balance: $None</code></pre>
</div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Configure logging</span></span>
<span id="cb28-4">logging.basicConfig(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logging.INFO, </span>
<span id="cb28-5">                   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(asctime)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(levelname)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(message)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb28-6">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BankAccount:</span>
<span id="cb28-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, account_number, initial_balance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>):</span>
<span id="cb28-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use assertions to validate inputs</span></span>
<span id="cb28-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(account_number, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Account number must be a string"</span></span>
<span id="cb28-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(account_number) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Account number cannot be empty"</span></span>
<span id="cb28-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(initial_balance, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial balance must be a number"</span></span>
<span id="cb28-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> initial_balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Initial balance cannot be negative"</span></span>
<span id="cb28-15">        </span>
<span id="cb28-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.account_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> account_number</span>
<span id="cb28-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_balance</span>
<span id="cb28-18">        </span>
<span id="cb28-19">        logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Account </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>account_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> created with balance $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>initial_balance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-20">    </span>
<span id="cb28-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> deposit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, amount):</span>
<span id="cb28-22">        logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Deposit request: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amount<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to account </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>account_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-23">        </span>
<span id="cb28-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb28-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate input</span></span>
<span id="cb28-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(amount, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deposit amount must be a number"</span></span>
<span id="cb28-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> amount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deposit amount must be positive"</span></span>
<span id="cb28-28">            </span>
<span id="cb28-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process deposit</span></span>
<span id="cb28-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> amount</span>
<span id="cb28-31">            logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Deposited $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amount<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. New balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-32">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb28-33">            </span>
<span id="cb28-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AssertionError</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb28-35">            logger.error(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Deposit failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb28-38">            logger.critical(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unexpected error during deposit: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-40">    </span>
<span id="cb28-41">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> withdraw(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, amount):</span>
<span id="cb28-42">        logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Withdrawal request: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amount<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> from account </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>account_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-43">        </span>
<span id="cb28-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb28-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate input</span></span>
<span id="cb28-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(amount, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Withdrawal amount must be a number"</span></span>
<span id="cb28-47">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> amount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Withdrawal amount must be positive"</span></span>
<span id="cb28-48">            </span>
<span id="cb28-49">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check sufficient funds</span></span>
<span id="cb28-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> amount <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balance:</span>
<span id="cb28-51">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Insufficient funds. Balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Requested: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amount<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-52">            </span>
<span id="cb28-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process withdrawal</span></span>
<span id="cb28-54">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> amount</span>
<span id="cb28-55">            logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Withdrew $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>amount<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. New balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>balance<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-56">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb28-57">            </span>
<span id="cb28-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> (<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">AssertionError</span>, <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb28-59">            logger.error(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Withdrawal failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-60">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb28-62">            logger.critical(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unexpected error during withdrawal: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb28-64">    </span>
<span id="cb28-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_balance(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb28-66">        logger.debug(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Balance inquiry for account </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>account_number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.balance</span>
<span id="cb28-68"></span>
<span id="cb28-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the implementation</span></span>
<span id="cb28-70"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb28-71">    account <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BankAccount(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"12345"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb28-72">    account.deposit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb28-73">    account.withdraw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb28-74">    account.withdraw(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This should fail</span></span>
<span id="cb28-75">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Final balance: $</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>account<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_balance()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-76"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb28-77">    logger.critical(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Account creation failed: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True
True
False
Final balance: $1300</code></pre>
</div>
</div>
</details>
<hr>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<p>‚Ä¢ <strong>Assertions</strong> are your first line of defense against logic errors‚Äîuse them to verify assumptions during development</p>
<p>‚Ä¢ <strong>Exception handling</strong> prevents crashes by gracefully managing runtime errors with try-except blocks</p>
<p>‚Ä¢ <strong>Logging</strong> is superior to print statements for tracking program execution‚Äîit provides levels, timestamps, and flexible output</p>
<p>‚Ä¢ <strong>Strategic debugging</strong> involves reading error messages carefully, using print statements judiciously, and leveraging Python‚Äôs built-in debugger</p>
<p>‚Ä¢ <strong>Always validate inputs</strong> and handle edge cases to make your code more robust</p>
<p>‚Ä¢ <strong>Read error messages from bottom to top</strong>‚Äîthe most relevant information is usually at the end</p>
<p>‚Ä¢ <strong>Test your code incrementally</strong> rather than writing large chunks before testing</p>
<hr>
</section>
<section id="debugging-techniques-comparison" class="level1">
<h1>Debugging Techniques Comparison</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 24%">
<col style="width: 24%">
<col style="width: 26%">
<col style="width: 24%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Technique</strong></th>
<th><strong>Best Used For</strong></th>
<th><strong>When NOT to Use</strong></th>
<th><strong>Example</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Assertions</strong></td>
<td>Internal validation, algorithm invariants</td>
<td>Production error handling</td>
<td><code>assert x &gt; 0, "Value must be positive"</code></td>
</tr>
<tr class="even">
<td><strong>Exceptions</strong></td>
<td>User input errors, file operations</td>
<td>Internal logic checks</td>
<td><code>try: ... except ValueError: ...</code></td>
</tr>
<tr class="odd">
<td><strong>Logging</strong></td>
<td>Production monitoring, detailed tracking</td>
<td>Simple one-time debugging</td>
<td><code>logging.info("Process started")</code></td>
</tr>
<tr class="even">
<td><strong>Print Statements</strong></td>
<td>Quick debugging, temporary inspection</td>
<td>Production code</td>
<td><code>print(f"DEBUG: x = {x}")</code></td>
</tr>
<tr class="odd">
<td><strong>PDB Debugger</strong></td>
<td>Complex bugs, step-by-step analysis</td>
<td>Simple issues</td>
<td><code>import pdb; pdb.set_trace()</code></td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="common-python-errors-and-solutions" class="level1">
<h1>Common Python Errors and Solutions</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 30%">
<col style="width: 36%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Error Type</strong></th>
<th><strong>Common Cause</strong></th>
<th><strong>Prevention</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>SyntaxError</code></td>
<td>Missing colons, incorrect indentation</td>
<td>Use IDE with syntax highlighting</td>
</tr>
<tr class="even">
<td><code>NameError</code></td>
<td>Using undefined variables</td>
<td>Initialize variables before use</td>
</tr>
<tr class="odd">
<td><code>TypeError</code></td>
<td>Wrong data types in operations</td>
<td>Use type hints and validation</td>
</tr>
<tr class="even">
<td><code>ValueError</code></td>
<td>Invalid values for functions</td>
<td>Add input validation</td>
</tr>
<tr class="odd">
<td><code>IndexError</code></td>
<td>List index out of range</td>
<td>Use <code>len()</code> to check bounds</td>
</tr>
<tr class="even">
<td><code>KeyError</code></td>
<td>Dictionary key not found</td>
<td>Use <code>dict.get()</code> with defaults</td>
</tr>
<tr class="odd">
<td><code>ZeroDivisionError</code></td>
<td>Division by zero</td>
<td>Add zero checks before division</td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Python debugging doesn‚Äôt have to be a frustrating experience. By mastering <strong>assertions</strong>, <strong>exception handling</strong>, <strong>logging</strong>, and systematic debugging approaches, you can quickly identify and resolve issues in your code.</p>
<p>Remember these key principles: - <strong>Use assertions</strong> to catch bugs early during development - <strong>Handle exceptions</strong> to make your programs robust and user-friendly<br>
- <strong>Implement logging</strong> for better visibility into your program‚Äôs behavior - <strong>Debug systematically</strong> by reading error messages carefully and testing incrementally</p>
<p>The techniques covered in this guide will serve you well throughout your Python programming journey. As you practice and encounter more complex problems, these debugging skills will become second nature.</p>
<p><strong>Ready to level up your Python debugging skills?</strong> Start by implementing these techniques in your current projects, and don‚Äôt forget to keep that debugging journal‚Äîyou‚Äôll be amazed at how much you learn from tracking the problems you solve!</p>
<hr>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<p><strong>Q: Should I use assertions in production code?</strong> A: No, assertions can be disabled with Python‚Äôs <code>-O</code> flag and should only be used during development for internal checks. Use proper exception handling for production error management.</p>
<p><strong>Q: When should I use logging instead of print statements?</strong> A: Use logging when you need different severity levels, want to output to files, need timestamps, or are working on production code. Print statements are fine for quick debugging during development.</p>
<p><strong>Q: What‚Äôs the difference between errors and exceptions in Python?</strong> A: In Python, ‚Äúerrors‚Äù and ‚Äúexceptions‚Äù are often used interchangeably. Technically, exceptions are a type of error that can be caught and handled with try-except blocks.</p>
<p><strong>Q: How do I read Python error messages effectively?</strong> A: Start from the bottom of the traceback and work your way up. The last line contains the error type and message, while preceding lines show the call stack that led to the error.</p>
<p><strong>Q: Is it okay to use bare except clauses?</strong> A: No, avoid using <code>except:</code> without specifying exception types. This can hide unexpected errors and make debugging harder. Always catch specific exceptions when possible.</p>
<hr>
<p><em>Found this guide helpful? Share your debugging experiences in the comments below and let us know which technique you found most useful! Don‚Äôt forget to bookmark this page for future reference.</em> üìö‚ú®</p>
<hr>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p>Real Python Team. (2024). Python‚Äôs assert: Debug and test your code like a pro. <em>Real Python</em>. <a href="https://realpython.com/python-assert-statement/">https://realpython.com/python-assert-statement/</a></p></li>
<li><p>Real Python Team. (2024, December 1). Python exceptions: An introduction. <em>Real Python</em>. <a href="https://realpython.com/python-exceptions/">https://realpython.com/python-exceptions/</a></p></li>
<li><p>Sweigart, A. (n.d.). Chapter 11: Debugging. In <em>Automate the boring stuff with Python</em> (2nd ed.). <a href="https://automatetheboringstuff.com/2e/chapter11/">https://automatetheboringstuff.com/2e/chapter11/</a></p></li>
<li><p>W3Schools. (n.d.). Python assert keyword. <em>W3Schools</em>. <a href="https://www.w3schools.com/python/ref_keyword_assert.asp">https://www.w3schools.com/python/ref_keyword_assert.asp</a></p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<section id="python-debugging" class="level2">
<h2 class="anchored" data-anchor-id="python-debugging"><img src="https://www.spsanderson.com/steveondata/posts/2025-08-06/todays_post.png" class="img-fluid" alt="Python Debugging!"></h2>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-08-06/</guid>
  <pubDate>Wed, 06 Aug 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Retrieve Row Numbers in R: Complete Guide with Base R, dplyr, and data.table Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-08-04/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Key Insight:</strong> Retrieving row numbers in R is a skill that comes in very handy for any R programmer. No matter if you‚Äôre working with base R, dplyr, or data.table, each approach has its strengths, and choosing the right method can significantly impact your code‚Äôs performance and readability.</p>
</blockquote>
<p>Working with row numbers is one of the most common tasks in R programming. Whether you need to identify specific rows, create unique identifiers, or filter data based on position, understanding how to retrieve row numbers efficiently is crucial for effective data manipulation.</p>
<p>In this comprehensive guide, you‚Äôll learn multiple approaches to retrieve row numbers in R using <strong>base R</strong>, <strong>dplyr</strong>, and <strong>data.table</strong> packages. We‚Äôll cover the syntax, provide practical examples, and compare performance to help you choose the best method for your specific use case.</p>
<hr>
<section id="why-row-numbers-matter-in-r-programming" class="level1">
<h1>Why Row Numbers Matter in R Programming</h1>
<p>Row numbers serve several critical purposes in data analysis:</p>
<ul>
<li><strong>Data identification</strong>: Uniquely identify rows for tracking and referencing</li>
<li><strong>Conditional filtering</strong>: Select rows based on their position</li>
<li><strong>Ranking and ordering</strong>: Create rankings within groups or datasets</li>
<li><strong>Data validation</strong>: Check data integrity and identify duplicates</li>
<li><strong>Indexing</strong>: Create custom indices for complex data operations</li>
</ul>
<p>Understanding different approaches to retrieve row numbers gives you flexibility to choose the most appropriate method based on your data size, performance requirements, and coding style preferences.</p>
<hr>
</section>
<section id="base-r-methods-for-row-number-retrieval" class="level1">
<h1>Base R Methods for Row Number Retrieval</h1>
<p>Base R provides several built-in functions for working with row numbers. These methods are reliable, widely supported, and often surprisingly fast for many use cases .</p>
<section id="using-rownames-and-row.names" class="level2">
<h2 class="anchored" data-anchor-id="using-rownames-and-row.names">Using <code>rownames()</code> and <code>row.names()</code></h2>
<p>The most straightforward way to get row identifiers in base R is using <code>rownames()</code> or <code>row.names()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diana"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boston"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chicago"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miami"</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row names (returns character vector)</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] "1" "2" "3" "4"</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative syntax (identical result)</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] "1" "2" "3" "4"</span></span></code></pre></div>
</div>
<p><strong>Simple Explanation</strong>: Both functions return the row names as a character vector. By default, R assigns sequential numbers as row names starting from ‚Äú1‚Äù.</p>
</section>
<section id="creating-sequential-row-numbers-with-seq_len" class="level2">
<h2 class="anchored" data-anchor-id="creating-sequential-row-numbers-with-seq_len">Creating Sequential Row Numbers with <code>seq_len()</code></h2>
<p>To generate actual numeric row numbers, combine <code>seq_len()</code> with <code>nrow()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row numbers as a new column</span></span>
<span id="cb6-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row_num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df))</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age     city row_num
1   Alice  25 New York       1
2     Bob  30   Boston       2
3 Charlie  35  Chicago       3
4   Diana  28    Miami       4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>seq_len(nrow(df))</code> creates a sequence from 1 to the number of rows in the data frame. This is the standard base R idiom for generating row numbers .</p>
</section>
<section id="finding-row-numbers-with-conditions-using-which" class="level2">
<h2 class="anchored" data-anchor-id="finding-row-numbers-with-conditions-using-which">Finding Row Numbers with Conditions using <code>which()</code></h2>
<p>Use <code>which()</code> to find row numbers that meet specific criteria:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find rows where age is greater than 30</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find rows where city is "Boston"</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boston"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiple conditions</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miami"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 3</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>which()</code> returns the positions (row numbers) where a logical condition is <code>TRUE</code>. It‚Äôs perfect for conditional row selection .</p>
</section>
<section id="row-numbers-within-groups-using-ave" class="level2">
<h2 class="anchored" data-anchor-id="row-numbers-within-groups-using-ave">Row Numbers Within Groups using <code>ave()</code></h2>
<p>For grouped operations, use <code>ave()</code> with <code>seq_along()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add group column</span></span>
<span id="cb14-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create row numbers within each group</span></span>
<span id="cb14-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ave</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> seq_along)</span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_row"</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name group group_row
1   Alice     A         1
2     Bob     A         2
3 Charlie     B         1
4   Diana     B         2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>ave()</code> applies a function within groups. <code>seq_along()</code> creates sequential numbers for each group separately.</p>
<hr>
</section>
</section>
<section id="dplyr-methods-for-row-number-retrieval" class="level1">
<h1>dplyr Methods for Row Number Retrieval</h1>
<p>The dplyr package offers intuitive, pipe-friendly functions for row number operations. While generally slower than base R for large datasets, dplyr excels in readability and integration with tidyverse workflows.</p>
<section id="basic-row-numbering-with-row_number" class="level2">
<h2 class="anchored" data-anchor-id="basic-row-numbering-with-row_number">Basic Row Numbering with <code>row_number()</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row numbers using mutate</span></span>
<span id="cb16-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dplyr_row_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>())</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, dplyr_row_num))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name dplyr_row_num
1   Alice             1
2     Bob             2
3 Charlie             3
4   Diana             4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>row_number()</code> creates consecutive integers for each row. Combined with <code>mutate()</code>, it adds a new column with row numbers.</p>
</section>
<section id="conditional-row-selection-with-slice" class="level2">
<h2 class="anchored" data-anchor-id="conditional-row-selection-with-slice">Conditional Row Selection with <code>slice()</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select specific rows by position</span></span>
<span id="cb18-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age     city row_num group group_row dplyr_row_num
1   Alice  25 New York       1     A         1             1
2 Charlie  35  Chicago       3     B         1             3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select first two rows</span></span>
<span id="cb20-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age     city row_num group group_row dplyr_row_num
1 Alice  25 New York       1     A         1             1
2   Bob  30   Boston       2     A         2             2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select last row</span></span>
<span id="cb22-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age  city row_num group group_row dplyr_row_num
1 Diana  28 Miami       4     B         2             4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>slice()</code> selects rows by their position. Use <code>n()</code> to reference the last row.</p>
</section>
<section id="row-numbers-within-groups" class="level2">
<h2 class="anchored" data-anchor-id="row-numbers-within-groups">Row Numbers Within Groups</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row numbers within each group</span></span>
<span id="cb24-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_row_dplyr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, group, group_row_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 √ó 3
# Groups:   group [2]
  name    group group_row_dplyr
  &lt;chr&gt;   &lt;chr&gt;           &lt;int&gt;
1 Alice   A                   1
2 Bob     A                   2
3 Charlie B                   1
4 Diana   B                   2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: Combine <code>group_by()</code> with <code>row_number()</code> to restart numbering within each group.</p>
</section>
<section id="finding-row-numbers-with-filter" class="level2">
<h2 class="anchored" data-anchor-id="finding-row-numbers-with-filter">Finding Row Numbers with Filter</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row numbers for rows meeting criteria</span></span>
<span id="cb26-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">original_row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, age, original_row)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age original_row
1 Charlie  35            3</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: Add row numbers first, then filter to preserve original row positions.</p>
<hr>
</section>
</section>
<section id="data.table-methods-for-row-number-retrieval" class="level1">
<h1>data.table Methods for Row Number Retrieval</h1>
<p>data.table provides the most efficient methods for row operations, especially with large datasets. The syntax is concise but requires understanding data.table‚Äôs unique approach.</p>
<section id="basic-row-indexing-with-.i" class="level2">
<h2 class="anchored" data-anchor-id="basic-row-indexing-with-.i">Basic Row Indexing with <code>.I</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb28-4">DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row numbers using .I</span></span>
<span id="cb28-7">DT[, row_num_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> .I]</span>
<span id="cb28-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(DT[, .(name, row_num_dt)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name row_num_dt
    &lt;char&gt;      &lt;int&gt;
1:   Alice          1
2:     Bob          2
3: Charlie          3
4:   Diana          4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>.I</code> returns row indices. The <code>:=</code> operator adds a new column by reference (very efficient).</p>
</section>
<section id="finding-row-numbers-with-conditions" class="level2">
<h2 class="anchored" data-anchor-id="finding-row-numbers-with-conditions">Finding Row Numbers with Conditions</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row numbers where age &gt; 30</span></span>
<span id="cb30-2">DT[age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, .I]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More complex conditions</span></span>
<span id="cb32-2">DT[age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miami"</span>, .I]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: Place the condition in the first argument (<code>i</code>), and <code>.I</code> in the second argument (<code>j</code>) to get matching row numbers.</p>
</section>
<section id="row-numbers-within-groups-1" class="level2">
<h2 class="anchored" data-anchor-id="row-numbers-within-groups-1">Row Numbers Within Groups</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add group row numbers</span></span>
<span id="cb34-2">DT[, group_row_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(.N), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> group]</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(DT[, .(name, group, group_row_dt)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name  group group_row_dt
    &lt;char&gt; &lt;char&gt;        &lt;int&gt;
1:   Alice      A            1
2:     Bob      A            2
3: Charlie      B            1
4:   Diana      B            2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>.N</code> gives the number of rows in each group. <code>seq_len(.N)</code> creates sequential numbers within each group defined by <code>by = group</code>.</p>
</section>
<section id="using-rowid-for-group-numbering" class="level2">
<h2 class="anchored" data-anchor-id="using-rowid-for-group-numbering">Using <code>rowid()</code> for Group Numbering</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative method for group row numbers</span></span>
<span id="cb36-2">DT[, group_row_alt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowid</span>(group)]</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(DT[, .(name, group, group_row_alt)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name  group group_row_alt
    &lt;char&gt; &lt;char&gt;         &lt;int&gt;
1:   Alice      A             1
2:     Bob      A             2
3: Charlie      B             1
4:   Diana      B             2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>rowid()</code> is a data.table convenience function that automatically generates sequential IDs within groups.</p>
<hr>
</section>
</section>
<section id="performance-benchmarking-with-rbenchmark" class="level1">
<h1>Performance Benchmarking with rbenchmark</h1>
<p>To compare the performance of different row number retrieval methods, we‚Äôll use the <code>rbenchmark</code> package . This package provides reliable timing results with statistical analysis across multiple replications.</p>
<section id="setting-up-the-benchmark" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-benchmark">Setting Up the Benchmark</h2>
<p>Here‚Äôs how to benchmark different approaches for finding rows that meet specific conditions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rbenchmark)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample dataset</span></span>
<span id="cb38-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb38-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,</span>
<span id="cb38-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb38-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb38-9">)</span>
<span id="cb38-10"></span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run benchmark comparison</span></span>
<span id="cb38-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb38-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which(condition)"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-14">    row_nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb38-15">  },</span>
<span id="cb38-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grep(pattern, rownames)"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-17">    matching_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[1-9]"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df))</span>
<span id="cb38-18">  },</span>
<span id="cb38-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subset(df, condition, select=row.names)"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-20">    subset_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(df, value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb38-21">  },</span>
<span id="cb38-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr::filter() %&gt;% row_number()"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-23">    filtered_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(row_num)</span>
<span id="cb38-27">  },</span>
<span id="cb38-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb38-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb38-30">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                                     test replications elapsed relative
1                        which(condition)          500    0.08     1.00
2        dplyr::filter() %&gt;% row_number()          500    2.02    25.25
3                 grep(pattern, rownames)          500    3.12    39.00
4 subset(df, condition, select=row.names)          500    3.22    40.25
  user.self sys.self
1      0.03     0.01
2      1.77     0.02
3      2.54     0.06
4      2.62     0.23</code></pre>
</div>
</div>
</section>
<section id="understanding-rbenchmark-output" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rbenchmark-output">Understanding rbenchmark Output</h2>
<ul>
<li><strong>elapsed</strong>: Total time in seconds for all replications</li>
<li><strong>relative</strong>: Performance relative to the fastest method (1.00 = fastest)</li>
<li><strong>user.self</strong>: CPU time spent in the user process</li>
<li><strong>sys.self</strong>: CPU time spent in system calls</li>
<li><strong>replications</strong>: Number of times each test was run for accuracy</li>
</ul>
</section>
<section id="recommendations-by-use-case" class="level2">
<h2 class="anchored" data-anchor-id="recommendations-by-use-case">Recommendations by Use Case:</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 37%">
<col style="width: 44%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th>Data Size</th>
<th>Best Choice</th>
<th>Why</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&lt; 1K rows</td>
<td>Base R</td>
<td>Simple, readable, adequate performance</td>
</tr>
<tr class="even">
<td>1K - 10K rows</td>
<td>Base R or data.table</td>
<td>Both perform well, choose based on preference</td>
</tr>
<tr class="odd">
<td>10K - 100K rows</td>
<td>data.table</td>
<td>Clear performance advantage</td>
</tr>
<tr class="even">
<td>&gt; 100K rows</td>
<td>data.table</td>
<td>Significant speed improvement, memory efficient</td>
</tr>
<tr class="odd">
<td>Tidyverse workflow</td>
<td>dplyr</td>
<td>Better integration, acceptable for small-medium data</td>
</tr>
</tbody>
</table>
<hr>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let‚Äôs put these concepts into practice with a real-world scenario.</p>
<p><strong>Challenge</strong>: You have a sales dataset and need to:</p>
<ol type="1">
<li>Add row numbers to track each transaction</li>
<li>Find the row numbers of sales over $1000</li>
<li>Create sequential numbers within each salesperson group</li>
<li>Select every 3rd row for quality control sampling</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample sales data</span></span>
<span id="cb40-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb40-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transaction_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>,</span>
<span id="cb40-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">salesperson =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mike"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb40-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">890</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>),</span>
<span id="cb40-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-01"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"day"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb40-7">)</span></code></pre></div>
</div>
<p>Try to solve this using all three methods (base R, dplyr, and data.table), then check the solution below.</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BASE R SOLUTION</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Add row numbers</span></span>
<span id="cb41-3">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row_num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(sales_data))</span>
<span id="cb41-4"></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find rows with sales &gt; $1000</span></span>
<span id="cb41-6">high_sales_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb41-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"High sales in rows:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(high_sales_rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "High sales in rows: 2, 4, 6, 7, 9"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Row numbers within salesperson groups</span></span>
<span id="cb43-2">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ave</span>(sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount, sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>salesperson, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> seq_along)</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Select every 3rd row</span></span>
<span id="cb43-5">every_third <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(sales_data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), ]</span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DPLYR SOLUTION</span></span>
<span id="cb43-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb43-9">sales_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Add row numbers</span></span>
<span id="cb43-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Group row numbers</span></span>
<span id="cb43-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(salesperson) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb43-16"></span>
<span id="cb43-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find high sales rows</span></span>
<span id="cb43-18">high_sales_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dplyr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(row_num)</span>
<span id="cb43-21"></span>
<span id="cb43-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Every 3rd row</span></span>
<span id="cb43-23">every_third_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dplyr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb43-24"></span>
<span id="cb43-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DATA.TABLE SOLUTION</span></span>
<span id="cb43-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb43-27">sales_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(sales_data)</span>
<span id="cb43-28"></span>
<span id="cb43-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Add row numbers</span></span>
<span id="cb43-30">sales_dt[, row_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> .I]</span>
<span id="cb43-31"></span>
<span id="cb43-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find high sales rows</span></span>
<span id="cb43-33">high_sales_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dt[amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, .I]</span>
<span id="cb43-34"></span>
<span id="cb43-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Group row numbers</span></span>
<span id="cb43-36">sales_dt[, group_row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(.N), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> salesperson]</span>
<span id="cb43-37"></span>
<span id="cb43-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Every 3rd row</span></span>
<span id="cb43-39">every_third_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dt[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span></code></pre></div>
</div>
</details>
<hr>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<p>‚Ä¢ <strong>Base R</strong>: Use <code>seq_len(nrow())</code> for row numbers, <code>which()</code> for conditional selection, and <code>ave()</code> for grouped operations</p>
<p>‚Ä¢ <strong>dplyr</strong>: Leverage <code>row_number()</code>, <code>slice()</code>, and <code>group_by()</code> combinations for readable, pipeline-friendly code</p>
<p>‚Ä¢ <strong>data.table</strong>: Utilize <code>.I</code> for row indices, <code>.N</code> for group sizes, and <code>rowid()</code> for efficient group numbering</p>
<p>‚Ä¢ <strong>Performance</strong>: <code>which()</code> is fastest for conditions, data.table excels for large datasets, dplyr prioritizes readability</p>
<p>‚Ä¢ <strong>Benchmarking</strong>: Use <code>rbenchmark</code> package to compare methods with statistical reliability across multiple replications</p>
<p>‚Ä¢ <strong>Memory</strong>: data.table modifies by reference (efficient), while base R and dplyr create copies</p>
<p>‚Ä¢ <strong>Syntax</strong>: data.table is most concise, dplyr is most readable, base R is most familiar</p>
<hr>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<p><strong>Q: What‚Äôs the difference between rownames() and row_number()?</strong> A: <code>rownames()</code> returns character row identifiers (which may not be sequential), while <code>row_number()</code> creates consecutive integers starting from 1.</p>
<p><strong>Q: Why is data.table faster than dplyr for row operations?</strong> A: data.table modifies objects by reference and uses optimized C code, while dplyr creates copies and has more overhead from its abstraction layer.</p>
<p><strong>Q: When should I use which() instead of filter()?</strong> A: Use <code>which()</code> when you need the actual row numbers/positions. Use <code>filter()</code> when you want to subset the data and continue with dplyr operations.</p>
<p><strong>Q: Can I mix different approaches in the same project?</strong> A: Yes, but be consistent within functions or analysis sections. Consider using dtplyr to combine dplyr syntax with data.table performance.</p>
<p><strong>Q: How do I handle row numbers when data has missing values?</strong> A: All methods handle NA values consistently - row numbers are assigned regardless of missing data. Use <code>complete.cases()</code> if you need to exclude rows with missing values.</p>
<hr>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering row number retrieval in R opens up powerful possibilities for data manipulation and analysis. Each approach - base R, dplyr, and data.table - offers unique advantages:</p>
<ul>
<li><strong>Base R</strong> provides reliable, universally available functions that work well for small to medium datasets</li>
<li><strong>dplyr</strong> offers readable, intuitive syntax that integrates seamlessly with tidyverse workflows<br>
</li>
<li><strong>data.table</strong> delivers superior performance and memory efficiency, especially crucial for large datasets</li>
</ul>
<p>The choice between methods depends on your specific needs: data size, performance requirements, team preferences, and existing codebase. For maximum flexibility, consider learning all three approaches and choosing the most appropriate one for each situation.</p>
<p>Start practicing these techniques with your own datasets, and remember that the best method is the one that helps you solve your specific data challenges effectively and efficiently.</p>
<hr>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.geeksforgeeks.org/r-language/how-to-retrieve-row-numbers-in-r-dataframe/">How to Retrieve Row Numbers in R DataFrame - GeeksforGeeks</a></p></li>
<li><p><a href="https://cran.r-project.org/package=rbenchmark">rbenchmark: Benchmarking routine for R - CRAN</a></p></li>
<li><p><a href="https://www.r-bloggers.com/2018/04/benchmarking-the-six-most-used-manipulations-for-data-tables-in-r/">Benchmarking the six most used manipulations for data.tables in R - R-bloggers</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/1269624/how-to-get-row-from-r-data-frame">How to get row from R data.frame - Stack Overflow</a></p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-04/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Row Numbers in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-08-04/</guid>
  <pubDate>Mon, 04 Aug 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Organizing Files in Python: A Beginner‚Äôs Guide to os and shutil Modules</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-30/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>exit</code></pre>
</div>
</div>
<p><strong>Author‚Äôs Note: Hi there! I‚Äôm a beginner Python programmer myself, so while I‚Äôve tested all these examples and done some research, I might still make mistakes along the way. If you spot any errors or have suggestions for improvement, please share them in the comments! üêç</strong></p>
<section id="introduction-why-file-organization-matters" class="level1">
<h1>Introduction: Why File Organization Matters</h1>
<p>Have you ever looked at your computer and felt overwhelmed by scattered files everywhere? Downloads folder bursting with random documents, desktop cluttered with screenshots, and important files buried somewhere you can‚Äôt remember? You‚Äôre not alone!</p>
<p><strong>File organization</strong> is like having a clean workspace, it makes everything easier to find and work with. In Python, we have powerful tools called <strong>os</strong> and <strong>shutil</strong> modules that can help us automate file organization tasks. Think of them as your digital filing assistants that never get tired and work exactly as you tell them to.</p>
<p>In this guide, I hope you‚Äôll learn how to use these modules to copy, move, rename, and organize files automatically. By the end, you‚Äôll be able to write Python scripts that keep your computer neat and tidy without lifting a finger‚Ä¶I hope :)</p>
</section>
<section id="getting-started-import-the-right-modules" class="level1">
<h1><strong>Getting Started: Import the Right Modules</strong></h1>
<p>Before we can organize files, we need to import the right tools. In Python, we use two main modules for file operations :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span></code></pre></div>
<p><strong>What‚Äôs the difference?</strong></p>
<ul>
<li><strong>os module</strong>: Handles basic file system operations like creating folders, listing files, and navigating directories</li>
<li><strong>shutil module</strong>: Handles higher-level operations like copying and moving files</li>
</ul>
<p>Think of <strong>os</strong> as your basic toolbox and <strong>shutil</strong> as your power tools!</p>
</section>
<section id="understanding-the-os-module" class="level1">
<h1><strong>Understanding the os Module</strong></h1>
<p>The <strong>os module</strong> is your gateway to interacting with your computer‚Äôs file system. Let‚Äôs start with the most common operations:</p>
<section id="finding-your-current-location" class="level2">
<h2 class="anchored" data-anchor-id="finding-your-current-location"><strong>Finding Your Current Location</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb3-2"></span>
<span id="cb3-3">current_directory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getcwd()</span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I'm currently in:"</span>, current_directory)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>I'm currently in: C:\Users\ssanders\Documents\GitHub\steveondata\posts\2025-07-30</code></pre>
</div>
</div>
<p>This is like asking ‚ÄúWhere am I?‚Äù when you‚Äôre lost in a building. The <code>getcwd()</code> function tells you your current working directory .</p>
</section>
<section id="listing-files-and-folders" class="level2">
<h2 class="anchored" data-anchor-id="listing-files-and-folders"><strong>Listing Files and Folders</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">files_and_folders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.listdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Here's what I found:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Here's what I found:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files_and_folders:</span>
<span id="cb7-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.Rhistory
documents
index.qmd
index.rmarkdown
my_new_folder
my_project
practice_area
todays_post.png</code></pre>
</div>
</div>
<p>The dot (<code>.</code>) means ‚Äúcurrent folder.‚Äù You can also specify any folder path instead.</p>
</section>
</section>
<section id="basic-directory-operations-with-os" class="level1">
<h1><strong>Basic Directory Operations with os</strong></h1>
<section id="creating-new-folders" class="level2">
<h2 class="anchored" data-anchor-id="creating-new-folders"><strong>Creating New Folders</strong></h2>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a single folder</span></span>
<span id="cb9-2">os.mkdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_new_folder'</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create nested folders (like creating a whole file path at once)</span></span>
<span id="cb9-5">os.makedirs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'documents/projects/python_scripts'</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<p>The <code>exist_ok=True</code> part is like saying ‚ÄúDon‚Äôt worry if this folder already exists.‚Äù Without it, Python would give you an error if the folder is already there .</p>
</section>
<section id="checking-if-something-exists" class="level2">
<h2 class="anchored" data-anchor-id="checking-if-something-exists"><strong>Checking if Something Exists</strong></h2>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is this a file?</span></span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isfile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_document.txt'</span>):</span>
<span id="cb10-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes, it's a file!"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is this a folder?</span></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_folder'</span>):</span>
<span id="cb10-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes, it's a folder!"</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Does this exist at all?</span></span>
<span id="cb10-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.exists(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'something'</span>):</span>
<span id="cb10-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It exists!"</span>)</span></code></pre></div>
</section>
</section>
<section id="understanding-the-shutil-module" class="level1">
<h1><strong>Understanding the shutil Module</strong></h1>
<p>While <strong>os</strong> handles basic operations, <strong>shutil</strong> (shell utilities) is your go to for copying and moving files. Think of it as the heavy-lifting module.</p>
<section id="the-power-of-shutil" class="level2">
<h2 class="anchored" data-anchor-id="the-power-of-shutil"><strong>The Power of shutil</strong></h2>
<p><strong>shutil</strong> operations work like drag-and-drop in your file explorer, but they‚Äôre automated and precise. Here are the main functions:</p>
<ul>
<li><code>shutil.copy()</code> - Copy a file</li>
<li><code>shutil.copytree()</code> - Copy an entire folder</li>
<li><code>shutil.move()</code> - Move or rename files/folders</li>
<li><code>shutil.rmtree()</code> - Delete entire folders</li>
</ul>
</section>
</section>
<section id="copying-files-and-folders" class="level1">
<h1><strong>Copying Files and Folders</strong></h1>
<section id="copying-a-single-file" class="level2">
<h2 class="anchored" data-anchor-id="copying-a-single-file"><strong>Copying a Single File</strong></h2>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy a file from one place to another</span></span>
<span id="cb11-4">shutil.copy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original_file.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'backup_file.txt'</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy to a different folder</span></span>
<span id="cb11-7">shutil.copy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'document.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'backup_folder/document.pdf'</span>)</span></code></pre></div>
</section>
<section id="copying-entire-folders" class="level2">
<h2 class="anchored" data-anchor-id="copying-entire-folders"><strong>Copying Entire Folders</strong></h2>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy everything in a folder to a new location</span></span>
<span id="cb12-2">shutil.copytree(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_photos'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'photo_backup'</span>)</span></code></pre></div>
<p><strong>Important:</strong> The destination folder (<code>photo_backup</code>) must not already exist. If it does, Python will give you an error .</p>
</section>
</section>
<section id="moving-and-renaming-files" class="level1">
<h1><strong>Moving and Renaming Files</strong></h1>
<p>The <code>shutil.move()</code> function is like cut-and-paste. It can both move files to new locations AND rename them :</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rename a file (move it to the same location with a new name)</span></span>
<span id="cb13-2">shutil.move(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'old_name.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'new_name.txt'</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move a file to a different folder</span></span>
<span id="cb13-5">shutil.move(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'document.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'documents/document.pdf'</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move AND rename at the same time</span></span>
<span id="cb13-8">shutil.move(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'messy_filename.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'organized_files/clean_filename.txt'</span>)</span></code></pre></div>
</section>
<section id="deleting-files-and-folders-safely" class="level1">
<h1><strong>Deleting Files and Folders Safely</strong></h1>
<p><strong>Warning:</strong> Deleting files with Python bypasses the Recycle Bin/Trash. They‚Äôre gone for good!</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb14-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete a single file</span></span>
<span id="cb14-5">os.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unwanted_file.txt'</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete an empty folder</span></span>
<span id="cb14-8">os.rmdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'empty_folder'</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete a folder and everything inside it</span></span>
<span id="cb14-11">shutil.rmtree(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'folder_with_stuff'</span>)</span></code></pre></div>
<p><strong>Safety Tip:</strong> Always double-check your file paths before deleting anything!</p>
</section>
<section id="working-with-file-paths" class="level1">
<h1><strong>Working with File Paths</strong></h1>
<p>File paths can be tricky because they‚Äôre different on Windows (<code>C:\Users\Name</code>) and Mac/Linux (<code>/home/name</code>). Python‚Äôs <code>os.path</code> helps solve this :</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join paths the right way for your operating system</span></span>
<span id="cb15-4">safe_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'documents'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'projects'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_file.txt'</span>)</span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(safe_path)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get just the filename from a full path</span></span>
<span id="cb15-8">filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.basename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/full/path/to/my_file.txt'</span>)</span>
<span id="cb15-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(filename)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: my_file.txt</span></span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get just the folder path</span></span>
<span id="cb15-12">folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.dirname(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/full/path/to/my_file.txt'</span>)</span>
<span id="cb15-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(folder_path)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: /full/path/to</span></span></code></pre></div>
</section>
<section id="creating-directory-structures" class="level1">
<h1><strong>Creating Directory Structures</strong></h1>
<p>Let‚Äôs create a organized folder structure for a project:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a project structure</span></span>
<span id="cb16-4">project_folders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb16-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_project'</span>,</span>
<span id="cb16-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_project/code'</span>,</span>
<span id="cb16-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_project/data'</span>,</span>
<span id="cb16-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_project/results'</span>,</span>
<span id="cb16-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_project/docs'</span></span>
<span id="cb16-10">]</span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> project_folders:</span>
<span id="cb16-13">    os.makedirs(folder, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Created: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>folder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
<section id="finding-files-with-os.walk" class="level1">
<h1><strong>Finding Files with os.walk()</strong></h1>
<p><code>os.walk()</code> is like having a robot that walks through every folder and subfolder, reporting back what it finds :</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Walk through all folders starting from current directory</span></span>
<span id="cb17-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> root, dirs, files <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.walk(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>):</span>
<span id="cb17-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Looking in folder: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>root<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files:</span>
<span id="cb17-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.txt'</span>):</span>
<span id="cb17-8">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found text file: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p>This is super useful for finding all files of a certain type across multiple folders.</p>
</section>
<section id="practical-example-organizing-downloads" class="level1">
<h1><strong>Practical Example: Organizing Downloads</strong></h1>
<p>Here‚Äôs a real-world script that organizes your Downloads folder by file type :</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define where files should go based on their extension</span></span>
<span id="cb18-5">file_types <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb18-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.jpeg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.png'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.gif'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.bmp'</span>],</span>
<span id="cb18-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'documents'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.pdf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.doc'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.docx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.rtf'</span>],</span>
<span id="cb18-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'videos'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.mp4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.avi'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.mov'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.wmv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.flv'</span>],</span>
<span id="cb18-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'music'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.mp3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.wav'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.flac'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.aac'</span>]</span>
<span id="cb18-10">}</span>
<span id="cb18-11"></span>
<span id="cb18-12">downloads_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.expanduser(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'~/Downloads'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This finds your Downloads folder</span></span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create organized folders</span></span>
<span id="cb18-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> folder_name <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> file_types.keys():</span>
<span id="cb18-16">    folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(downloads_path, folder_name)</span>
<span id="cb18-17">    os.makedirs(folder_path, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb18-18"></span>
<span id="cb18-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Organize files</span></span>
<span id="cb18-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> filename <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(downloads_path):</span>
<span id="cb18-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isfile(os.path.join(downloads_path, filename)):</span>
<span id="cb18-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get file extension</span></span>
<span id="cb18-23">        file_extension <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.splitext(filename)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].lower()</span>
<span id="cb18-24">        </span>
<span id="cb18-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find which category this file belongs to</span></span>
<span id="cb18-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> category, extensions <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> file_types.items():</span>
<span id="cb18-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_extension <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> extensions:</span>
<span id="cb18-28">                source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(downloads_path, filename)</span>
<span id="cb18-29">                destination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(downloads_path, category, filename)</span>
<span id="cb18-30">                shutil.move(source, destination)</span>
<span id="cb18-31">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Moved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>category<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> folder"</span>)</span>
<span id="cb18-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
</section>
<section id="your-turn-interactive-exercise" class="level1">
<h1><strong>Your Turn! Interactive Exercise</strong></h1>
<p>Let‚Äôs practice! Create a script that does the following:</p>
<ol type="1">
<li>Create a folder called ‚Äúpractice_area‚Äù</li>
<li>Inside it, create three subfolders: ‚Äúinbox‚Äù, ‚Äúprocessed‚Äù, ‚Äúarchive‚Äù</li>
<li>Create a text file called ‚Äútest_file.txt‚Äù in the ‚Äúinbox‚Äù folder</li>
<li>Move the file from ‚Äúinbox‚Äù to ‚Äúprocessed‚Äù</li>
<li>Copy the file from ‚Äúprocessed‚Äù to ‚Äúarchive‚Äù</li>
</ol>
<p>Try writing this script yourself before looking at the solution!</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb19-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shutil</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create main folder</span></span>
<span id="cb19-5">os.makedirs(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Create subfolders</span></span>
<span id="cb19-8">subfolders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inbox'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'processed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'archive'</span>]</span>
<span id="cb19-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> folder <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> subfolders:</span>
<span id="cb19-10">    folder_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, folder)</span>
<span id="cb19-11">    os.makedirs(folder_path, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-12"></span>
<span id="cb19-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Create a test file</span></span>
<span id="cb19-14">test_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inbox'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_file.txt'</span>)</span>
<span id="cb19-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb19-16">    f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a test file!"</span>)</span>
<span id="cb19-17"></span>
<span id="cb19-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Move file from inbox to processed</span></span>
<span id="cb19-19">source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inbox'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_file.txt'</span>)</span>
<span id="cb19-20">destination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'processed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_file.txt'</span>)</span>
<span id="cb19-21">shutil.move(source, destination)</span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 5: Copy file from processed to archive</span></span>
<span id="cb19-24">source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'processed'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_file.txt'</span>)</span>
<span id="cb19-25">destination <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_area'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'archive'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_file.txt'</span>)</span>
<span id="cb19-26">shutil.copy(source, destination)</span>
<span id="cb19-27"></span>
<span id="cb19-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exercise completed successfully!"</span>)</span></code></pre></div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1><strong>Quick Takeaways</strong></h1>
<p>Here are the key points to remember:</p>
<ul>
<li><strong>os module</strong> handles basic file system operations (creating folders, listing files, checking existence)</li>
<li><strong>shutil module</strong> handles copying, moving, and deleting files and folders</li>
<li>Always use <code>os.path.join()</code> to create file paths that work on any operating system</li>
<li>Use <code>exist_ok=True</code> with <code>os.makedirs()</code> to avoid errors if folders already exist</li>
<li><strong>shutil.move()</strong> can both move AND rename files in one operation</li>
<li><strong>os.walk()</strong> is perfect for finding files across multiple folders</li>
<li>Always be careful with delete operations ‚Äì they bypass the Recycle Bin!</li>
</ul>
</section>
<section id="conclusion-and-next-steps" class="level1">
<h1><strong>Conclusion and Next Steps</strong></h1>
<p>Congratulations! You now know how to use Python‚Äôs <strong>os</strong> and <strong>shutil</strong> modules to organize files automatically. These skills will save you hours of manual file management and help keep your computer organized.</p>
<p><strong>What‚Äôs next?</strong> Try automating a real file organization task in your own life. Maybe organize your photos by date, sort your documents by type, or create a backup system for important files.</p>
<p>Remember: start small, test your scripts on copies of files first, and always double-check your file paths before running delete operations.</p>
<p><strong>Ready to become a file organization master?</strong> Start by organizing just one folder using the techniques you learned today!</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1><strong>Frequently Asked Questions</strong></h1>
<p><strong>Q: What‚Äôs the difference between os.remove() and shutil.rmtree()?</strong> A: <code>os.remove()</code> deletes single files only, while <code>shutil.rmtree()</code> deletes entire folders and everything inside them.</p>
<p><strong>Q: Can I undo file operations done with Python?</strong> A: No, Python file operations bypass the Recycle Bin/Trash. Always test your scripts on copies first!</p>
<p><strong>Q: Why do I get ‚ÄúFile exists‚Äù errors sometimes?</strong> A: Some operations like <code>os.mkdir()</code> fail if the folder already exists. Use <code>exist_ok=True</code> parameter or check with <code>os.path.exists()</code> first.</p>
<p><strong>Q: How do I handle files with the same name when moving?</strong> A: Python will overwrite files with the same name. Check if files exist first and rename them if needed.</p>
<p><strong>Q: Is it safe to run file organization scripts on important data?</strong> A: Always test scripts on copies of your data first. Consider adding confirmation prompts for destructive operations.</p>
</section>
<section id="references" class="level1">
<h1><strong>References</strong></h1>
<p>This article references the following authoritative sources for Python file operations:</p>
<ol type="1">
<li><a href="https://docs.python.org/3/library/os.html">Python os Module Documentation</a> - Official Python documentation for the os module</li>
<li><a href="https://automatetheboringstuff.com/2e/chapter10/">Automate the Boring Stuff with Python - Chapter 10</a> - Comprehensive guide to organizing files with Python</li>
<li><a href="https://docs.python.org/3/library/os.html">Python os Module Documentation</a> - Complete reference for os module functions</li>
<li><a href="https://docs.python.org/3/library/shutil.html">Python shutil Module Documentation</a> - Official documentation for high-level file operations</li>
<li><a href="https://realpython.com/working-with-files-in-python/">Real Python - Working with Files in Python</a> - In-depth tutorial on file handling</li>
<li><a href="https://python-forum.io/thread-28174.html">Python Forum - File Organization Examples</a> - Community examples and best practices</li>
</ol>
<p><em>Found this helpful? Share your file organization wins in the comments below! And don‚Äôt forget to share this guide with fellow Python beginners who might be drowning in digital clutter. Together, we can make everyone‚Äôs computer life a little more organized! üêçüìÅ</em></p>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-30/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Organize with Python!</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-30/</guid>
  <pubDate>Wed, 30 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Add a Total Row to a Data Frame in R: Complete Guide for R Programmers</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-28/</link>
  <description><![CDATA[ 





<p>Adding a <strong>total row in R</strong> is one of those everyday tasks that an analyst encounters when creating reports or analyzing data. Whether you‚Äôre summarizing sales figures, calculating budget totals, or creating financial statements, knowing how to efficiently add total rows to your data frames can be helpful.</p>
<p>In this comprehensive guide, we‚Äôll explore three different approaches to adding total rows: using Base R, the popular dplyr package, and the lightning-fast data.table package. We‚Äôll break down the syntax in simple terms, provide practical examples, and even compare their performance to help you choose the best method for your needs.</p>
<blockquote class="blockquote">
<p><strong>Key Insight:</strong> While adding total rows might seem simple, choosing the right method can significantly impact your code‚Äôs readability and performance, especially with large datasets.</p>
</blockquote>
<hr>
<section id="why-add-total-rows-to-data-frames" class="level1">
<h1>Why Add Total Rows to Data Frames?</h1>
<p>Before jumping into the code, let‚Äôs understand when and why you might need to add total rows:</p>
<section id="common-use-cases" class="level2">
<h2 class="anchored" data-anchor-id="common-use-cases">Common Use Cases</h2>
<ol type="1">
<li><strong>Financial Reports</strong>
<ul>
<li>Income statements showing total revenue</li>
<li>Expense reports with grand totals</li>
<li>Budget summaries with category totals</li>
</ul></li>
<li><strong>Data Validation</strong>
<ul>
<li>Verifying calculations are correct</li>
<li>Cross-checking subtotals</li>
<li>Quality control in data entry</li>
</ul></li>
<li><strong>Business Analytics</strong>
<ul>
<li>Sales reports by region or product</li>
<li>Inventory summaries</li>
<li>Performance metrics dashboards</li>
</ul></li>
<li><strong>Academic Research</strong>
<ul>
<li>Survey response summaries</li>
<li>Experimental data totals</li>
<li>Statistical report tables</li>
</ul></li>
</ol>
</section>
</section>
<section id="method-1-adding-total-rows-using-base-r" class="level1">
<h1>Method 1: Adding Total Rows Using Base R</h1>
<p>Base R provides the most straightforward approach using built-in functions. This method requires no additional packages and works well for simple cases.</p>
<section id="the-basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="the-basic-syntax">The Basic Syntax</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Calculate column sums</span></span>
<span id="cb1-2">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(df[, numeric_columns], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Create the total row</span></span>
<span id="cb1-5">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Add the total row</span></span>
<span id="cb1-8">df_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, total_row)</span></code></pre></div>
</section>
<section id="complete-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-example">Complete Example</h2>
<p>Let‚Äôs create a simple sales data frame and add a total row:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>)</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display original data</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales Q2_Sales Q3_Sales
1   Laptop    15000    18000    20000
2    Mouse     2500     3000     2800
3 Keyboard     3500     4000     3800</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate totals for numeric columns</span></span>
<span id="cb4-2">numeric_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q3_Sales"</span>)</span>
<span id="cb4-3">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(sales_data[, numeric_cols])</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create total row</span></span>
<span id="cb4-6">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals)</span>
<span id="cb4-9">)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total row</span></span>
<span id="cb4-12">sales_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(sales_data, total_row)</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales Q2_Sales Q3_Sales
1   Laptop    15000    18000    20000
2    Mouse     2500     3000     2800
3 Keyboard     3500     4000     3800
4    Total    21000    25000    26600</code></pre>
</div>
</div>
</section>
<section id="handling-mixed-data-types" class="level2">
<h2 class="anchored" data-anchor-id="handling-mixed-data-types">Handling Mixed Data Types</h2>
<p>When your data frame has both numeric and non-numeric columns, you need to be more careful:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More complex example with mixed types</span></span>
<span id="cb6-2">company_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marketing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IT"</span>),</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Manager =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sarah"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mike"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Employees =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Budget =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>),</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb6-8">)</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify numeric columns automatically</span></span>
<span id="cb6-11">numeric_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(company_data, is.numeric)</span>
<span id="cb6-12">numeric_col_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(company_data)[numeric_columns]</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate totals only for numeric columns</span></span>
<span id="cb6-15">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(company_data[, numeric_col_names])</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create total row with proper structure</span></span>
<span id="cb6-18">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> company_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy structure</span></span>
<span id="cb6-19">total_row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear all values</span></span>
<span id="cb6-20">total_row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Department <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span></span>
<span id="cb6-21">total_row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Manager <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span></span>
<span id="cb6-22">total_row[, numeric_col_names] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> totals</span>
<span id="cb6-23"></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine original data with total row</span></span>
<span id="cb6-25">company_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(company_data, total_row)</span>
<span id="cb6-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(company_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Department Manager Employees  Budget
1      Sales    John        25  500000
2  Marketing   Sarah        15  300000
3         IT    Mike        10  400000
4      Total       -        50 1200000</code></pre>
</div>
</div>
</section>
</section>
<section id="method-2-adding-total-rows-using-dplyr" class="level1">
<h1>Method 2: Adding Total Rows Using dplyr</h1>
<p>The <strong>total row using dplyr</strong> approach offers a more modern, pipeline-friendly syntax that many R programmers prefer .</p>
<section id="the-dplyr-syntax" class="level2">
<h2 class="anchored" data-anchor-id="the-dplyr-syntax">The dplyr Syntax</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb8-2"></span>
<span id="cb8-3">df_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(., </span>
<span id="cb8-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum),</span>
<span id="cb8-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.character), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>)</span>
<span id="cb8-8">    )</span>
<span id="cb8-9">  )</span></code></pre></div>
</section>
<section id="complete-dplyr-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-dplyr-example">Complete dplyr Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using the same sales data</span></span>
<span id="cb9-4">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>),</span>
<span id="cb9-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>),</span>
<span id="cb9-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>),</span>
<span id="cb9-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>)</span>
<span id="cb9-9">)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total row using dplyr</span></span>
<span id="cb9-12">sales_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb9-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb9-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb9-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb9-17">    )</span>
<span id="cb9-18">  )</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales Q2_Sales Q3_Sales
1   Laptop    15000    18000    20000
2    Mouse     2500     3000     2800
3 Keyboard     3500     4000     3800
4    Total    21000    25000    26600</code></pre>
</div>
</div>
</section>
<section id="advanced-dplyr-techniques" class="level2">
<h2 class="anchored" data-anchor-id="advanced-dplyr-techniques">Advanced dplyr Techniques</h2>
<section id="adding-subtotals-and-grand-total" class="level3">
<h3 class="anchored" data-anchor-id="adding-subtotals-and-grand-total">Adding Subtotals and Grand Total</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data with categories</span></span>
<span id="cb11-2">detailed_sales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electronics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electronics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Office"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Office"</span>),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desk"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chair"</span>),</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6000</span>),</span>
<span id="cb11-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7000</span>)</span>
<span id="cb11-7">)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add category subtotals and grand total</span></span>
<span id="cb11-10">sales_with_all_totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> detailed_sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add category subtotals</span></span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Category) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb11-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subtotal"</span>,</span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb11-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine with original data</span></span>
<span id="cb11-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(detailed_sales, .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add grand total</span></span>
<span id="cb11-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb11-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(detailed_sales,</span>
<span id="cb11-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grand Total"</span>,</span>
<span id="cb11-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>,</span>
<span id="cb11-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb11-25">    )</span>
<span id="cb11-26">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(Category, Product)</span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_all_totals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Category  Product Q1_Sales Q2_Sales
1 Electronics   Laptop    15000    18000
2 Electronics    Mouse     2500     3000
3 Electronics Subtotal    17500    21000
4 Grand Total        -    31500    37000
5      Office    Chair     6000     7000
6      Office     Desk     8000     9000
7      Office Subtotal    14000    16000</code></pre>
</div>
</div>
</section>
<section id="using-custom-summary-functions" class="level3">
<h3 class="anchored" data-anchor-id="using-custom-summary-functions">Using Custom Summary Functions</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add multiple summary rows (total, mean, max)</span></span>
<span id="cb13-2">sales_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb13-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total row</span></span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb13-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb13-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb13-8">    ),</span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average row</span></span>
<span id="cb13-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb13-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average"</span>,</span>
<span id="cb13-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), mean)</span>
<span id="cb13-13">    ),</span>
<span id="cb13-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximum row</span></span>
<span id="cb13-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb13-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum"</span>,</span>
<span id="cb13-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), max)</span>
<span id="cb13-18">    )</span>
<span id="cb13-19">  )</span>
<span id="cb13-20"></span>
<span id="cb13-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales  Q2_Sales  Q3_Sales
1   Laptop    15000 18000.000 20000.000
2    Mouse     2500  3000.000  2800.000
3 Keyboard     3500  4000.000  3800.000
4    Total    21000 25000.000 26600.000
5  Average     7000  8333.333  8866.667
6  Maximum    15000 18000.000 20000.000</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="method-3-adding-total-rows-using-data.table" class="level1">
<h1>Method 3: Adding Total Rows Using data.table</h1>
<p>The <strong>total row using data.table</strong> method provides the best performance for large datasets .</p>
<section id="the-data.table-syntax" class="level2">
<h2 class="anchored" data-anchor-id="the-data.table-syntax">The data.table Syntax</h2>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb15-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total row</span></span>
<span id="cb15-7">dt_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-8">  dt,</span>
<span id="cb15-9">  dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.SDcols =</span> numeric_cols][, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category :=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb15-10">))</span></code></pre></div>
</section>
<section id="complete-data.table-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-data.table-example">Complete data.table Example</h2>
<div class="cell" data-messge="false">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'data.table'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:dplyr':

    between, first, last</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data.table</span></span>
<span id="cb19-2">sales_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>),</span>
<span id="cb19-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>),</span>
<span id="cb19-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>),</span>
<span id="cb19-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>)</span>
<span id="cb19-7">)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify numeric columns</span></span>
<span id="cb19-10">num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sales_dt)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(sales_dt, is.numeric)]</span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create total row</span></span>
<span id="cb19-13">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols]</span>
<span id="cb19-14">total_row[, Product <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb19-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setcolorder</span>(total_row, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sales_dt))</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine with original data</span></span>
<span id="cb19-18">sales_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(sales_dt, total_row))</span>
<span id="cb19-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    Product Q1_Sales Q2_Sales Q3_Sales
     &lt;char&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;
1:   Laptop    15000    18000    20000
2:    Mouse     2500     3000     2800
3: Keyboard     3500     4000     3800
4:    Total    21000    25000    26600</code></pre>
</div>
</div>
</section>
<section id="advanced-data.table-techniques" class="level2">
<h2 class="anchored" data-anchor-id="advanced-data.table-techniques">Advanced data.table Techniques</h2>
<section id="group-wise-totals" class="level3">
<h3 class="anchored" data-anchor-id="group-wise-totals">Group-wise Totals</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data with groups</span></span>
<span id="cb21-2">grouped_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb21-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Region =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"East"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"East"</span>),</span>
<span id="cb21-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>),</span>
<span id="cb21-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>),</span>
<span id="cb21-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Units =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span>
<span id="cb21-7">)</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add regional totals</span></span>
<span id="cb21-10">regional_totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grouped_dt[, </span>
<span id="cb21-11">  .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Regional Total"</span>, </span>
<span id="cb21-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Sales), </span>
<span id="cb21-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Units =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Units)), </span>
<span id="cb21-14">  by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Region</span>
<span id="cb21-15">]</span>
<span id="cb21-16"></span>
<span id="cb21-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add grand total</span></span>
<span id="cb21-18">grand_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grouped_dt[, </span>
<span id="cb21-19">  .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grand Total"</span>,</span>
<span id="cb21-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, </span>
<span id="cb21-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Sales), </span>
<span id="cb21-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Units =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Units))</span>
<span id="cb21-23">]</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine all</span></span>
<span id="cb21-26">complete_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(grouped_dt, regional_totals, grand_total))</span>
<span id="cb21-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setorder</span>(complete_dt, Region, Product)</span>
<span id="cb21-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(complete_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Region        Product Sales Units
         &lt;char&gt;         &lt;char&gt; &lt;num&gt; &lt;num&gt;
 1:        East              A   120    12
 2:        East              B   180    18
 3:        East Regional Total   300    30
 4: Grand Total              -  1000   100
 5:       North              A   100    10
 6:       North              B   200    20
 7:       North Regional Total   300    30
 8:       South              A   150    15
 9:       South              B   250    25
10:       South Regional Total   400    40</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="performance-comparison-using-the-rbenchmark-package" class="level1">
<h1>Performance Comparison Using the <code>rbenchmark</code> Package</h1>
<p>To objectively compare the speed of adding a total row using <strong>Base R</strong>, <strong>dplyr</strong>, and <strong>data.table</strong>, we can use the <a href="https://cran.r-project.org/web/packages/rbenchmark/index.html"><code>rbenchmark</code></a> package. This package allows you to run each method multiple times and provides a summary of their execution times, making it easy to see which approach is fastest on your system.</p>
<p>Below is a reproducible example using a data frame with 10,000 rows and three numeric columns. We‚Äôll benchmark each method for adding a total row.</p>
<div class="cell" data-messge="false">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and load required packages</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages(c("dplyr", "data.table", "rbenchmark"))</span></span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb23-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb23-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rbenchmark)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb23-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb23-9">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb23-10">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb23-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>), n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb23-16">)</span>
<span id="cb23-17"></span>
<span id="cb23-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base R method</span></span>
<span id="cb23-19">base_r_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb23-20">  numeric_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q3_Sales"</span>)</span>
<span id="cb23-21">  totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(df[, numeric_cols])</span>
<span id="cb23-22">  total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals))</span>
<span id="cb23-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, total_row)</span>
<span id="cb23-24">}</span>
<span id="cb23-25"></span>
<span id="cb23-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dplyr method</span></span>
<span id="cb23-27">dplyr_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb23-28">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb23-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb23-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb23-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb23-33">      )</span>
<span id="cb23-34">    )</span>
<span id="cb23-35">}</span>
<span id="cb23-36"></span>
<span id="cb23-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data.table method</span></span>
<span id="cb23-38">data_table_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb23-39">  dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb23-40">  num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dt)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(dt, is.numeric)]</span>
<span id="cb23-41">  total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols]</span>
<span id="cb23-42">  total_row[, Product <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb23-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setcolorder</span>(total_row, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dt))</span>
<span id="cb23-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dt, total_row))</span>
<span id="cb23-45">}</span>
<span id="cb23-46"></span>
<span id="cb23-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Benchmark all three methods</span></span>
<span id="cb23-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb23-49">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">baseR =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_r_total</span>(),</span>
<span id="cb23-50">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dplyr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr_total</span>(),</span>
<span id="cb23-51">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data_table =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_table_total</span>(),</span>
<span id="cb23-52">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb23-53">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb23-54">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        test replications elapsed relative user.self sys.self
1      baseR          500    0.57    1.000      0.53     0.03
3 data_table          500    0.77    1.351      0.71     0.06
2      dplyr          500    1.51    2.649      1.46     0.02</code></pre>
</div>
</div>
<ul>
<li><strong>elapsed</strong>: Total time taken (in seconds) for all replications.</li>
<li><strong>relative</strong>: Time relative to the fastest method (lower is better).</li>
</ul>
<p><strong>Tip:</strong> The <code>rbenchmark</code> package is a simple and effective way to compare the performance of different R code snippets, especially when you want to see clear timing differences between approaches.</p>
<p><strong>Summary:</strong></p>
<ul>
<li>Use <code>rbenchmark</code> to compare methods for adding total rows.</li>
<li>For large data, <strong>dplyr</strong> and <strong>data.table</strong> are generally faster than Base R.</li>
</ul>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it‚Äôs time to practice what you‚Äôve learned. Try solving this problem:</p>
<p><strong>Challenge:</strong> You have monthly expense data for different departments. Add a total row showing the sum of all expenses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Given data</span></span>
<span id="cb25-2">expenses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HR"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marketing"</span>),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Jan =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6000</span>),</span>
<span id="cb25-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Feb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6500</span>),</span>
<span id="cb25-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7000</span>)</span>
<span id="cb25-7">)</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your task: Add a total row using any method</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution using dplyr (recommended)</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb26-3"></span>
<span id="cb26-4">expenses_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> expenses <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb26-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb26-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb26-9">    )</span>
<span id="cb26-10">  )</span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(expenses_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Department   Jan   Feb   Mar
1         HR  5000  5200  4800
2         IT  8000  7500  8200
3      Sales 12000 13000 11500
4  Marketing  6000  6500  7000
5      Total 31000 32200 31500</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative: Base R solution</span></span>
<span id="cb28-2">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(expenses[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb28-3">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals))</span>
<span id="cb28-4">expenses_with_total_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(expenses, total_row)</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative: data.table solution</span></span>
<span id="cb28-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb28-8">expenses_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(expenses)</span>
<span id="cb28-9">num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(expenses_dt)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb28-10">total_row_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> expenses_dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols]</span>
<span id="cb28-11">total_row_dt[, Department <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb28-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setcolorder</span>(total_row_dt, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(expenses_dt))</span>
<span id="cb28-13">expenses_with_total_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(expenses_dt, total_row_dt))</span></code></pre></div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>Base R</strong> is best for simple cases and when avoiding dependencies</li>
<li><strong>dplyr</strong> offers the cleanest syntax and best performance for most use cases<br>
</li>
<li><strong>data.table</strong> provides the best memory efficiency for very large datasets</li>
<li>Always identify numeric columns before calculating totals</li>
<li>Use <code>na.rm = TRUE</code> in sum functions to handle missing values</li>
<li>Consider adding multiple summary rows (totals, averages, etc.) for comprehensive reports</li>
</ul>
</section>
<section id="best-practices-and-tips" class="level1">
<h1>Best Practices and Tips</h1>
<section id="handle-missing-values-properly" class="level2">
<h2 class="anchored" data-anchor-id="handle-missing-values-properly">1. Handle Missing Values Properly</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Always use na.rm = TRUE when calculating totals</span></span>
<span id="cb29-2">df_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>),</span>
<span id="cb29-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>),</span>
<span id="cb29-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb29-6">)</span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct approach</span></span>
<span id="cb29-9">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(df_with_na[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb29-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(totals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Value1 Value2 
   400    125 </code></pre>
</div>
</div>
</section>
<section id="preserve-data-types" class="level2">
<h2 class="anchored" data-anchor-id="preserve-data-types">2. Preserve Data Types</h2>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure numeric columns stay numeric</span></span>
<span id="cb31-2">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy structure</span></span>
<span id="cb31-3">total_row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear values</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then fill in your totals</span></span></code></pre></div>
</section>
<section id="format-numbers-for-display" class="level2">
<h2 class="anchored" data-anchor-id="format-numbers-for-display">3. Format Numbers for Display</h2>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format large numbers for readability</span></span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb32-3">df_formatted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comma</span>(.)))</span></code></pre></div>
</section>
<section id="consider-tidy-data-principles" class="level2">
<h2 class="anchored" data-anchor-id="consider-tidy-data-principles">4. Consider Tidy Data Principles</h2>
<p>Remember that adding total rows technically violates ‚Äútidy data‚Äù principles where each row should represent one observation. Consider whether you need the total row in your data or just in your final output/report.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Adding a <strong>total row in R</strong> is a skill that every R programmer can master. We‚Äôve explored three powerful methods:</p>
<ol type="1">
<li><strong>Base R</strong> - Simple and dependency-free</li>
<li><strong>dplyr</strong> - Modern, readable, and performant</li>
<li><strong>data.table</strong> - Fast and memory-efficient</li>
</ol>
<p>For most R programmers, <strong>dplyr provides the best balance</strong> of readability, performance, and ease of use. However, don‚Äôt overlook Base R for simple scripts or data.table when working with massive datasets.</p>
<p><strong>Ready to level up your R skills?</strong> Start practicing with your own datasets and experiment with combining these methods to create more complex summaries and reports!</p>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: Can I add multiple total rows at once?</strong> Yes! You can add multiple summary rows (like totals, averages, and counts) by combining multiple <code>summarise()</code> calls in dplyr or creating multiple summary rows and using <code>rbind()</code> in Base R.</p>
<p><strong>Q2: How do I add total rows to grouped data?</strong> Use <code>group_by()</code> before <code>summarise()</code> in dplyr, or use the <code>by</code> parameter in data.table to create group-wise totals before adding a grand total.</p>
<p><strong>Q3: What if my data has factor columns?</strong> Convert factors to characters first using <code>as.character()</code>, or handle them separately when creating your total row to avoid factor level conflicts.</p>
<p><strong>Q4: Is it better to add totals in R or in my reporting tool?</strong> It depends on your workflow. Adding totals in R ensures consistency across all outputs, while adding them in reporting tools (like Excel) keeps your data ‚Äútidy.‚Äù</p>
<p><strong>Q5: How can I add row totals (sum across columns) instead of column totals?</strong> Use <code>rowSums()</code> in Base R or <code>rowwise()</code> with <code>mutate()</code> in dplyr to calculate sums across columns for each row.</p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did this guide help you master adding total rows in R? We‚Äôd love to hear about your use cases and any creative solutions you‚Äôve developed!</p>
<p>Share your thoughts in the comments below, or connect with us on social media. Don‚Äôt forget to bookmark this guide for future reference and share it with fellow R programmers who might find it helpful!</p>
<p><strong>Happy coding, and may your totals always add up! üìä</strong></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://dplyr.tidyverse.org/">dplyr: A Grammar of Data Manipulation (official documentation)</a></li>
<li><a href="https://cran.r-project.org/package=data.table/vignettes/datatable-intro.html">Introduction to data.table (official CRAN vignette)</a></li>
<li><a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.html">R Introduction Manual - Data manipulation (CRAN)</a></li>
<li><a href="https://adv-r.hadley.nz/perf-measure.html">Profiling and benchmarking - Advanced R by Hadley Wickham</a></li>
</ul>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-28/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Totals Rows in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-28/</guid>
  <pubDate>Mon, 28 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Reading and Writing Files in Python: A Beginner‚Äôs Journey with pathlib</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-23/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>üöÄ <strong>Hey there!</strong> I‚Äôm learning Python possibly just like you, and I‚Äôve started to learn about file handling. Today, I‚Äôm excited to share what I‚Äôve learned so far about reading and writing files using Python‚Äôs <code>pathlib</code> and <code>os</code> modules. Let‚Äôs go!</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When I first started learning Python, working with files seemed intimidating and sometimes it still does. Where do I find files? How do I create paths that work on different computers? What‚Äôs the difference between all these modules?</p>
<p>After lots of experimenting (and making mistakes!), I‚Äôve discovered that Python offers two main approaches: the traditional <code>os</code> module and the modern <code>pathlib</code> module. Today, we‚Äôll cover both, and you can decide which approach you like best.</p>
<hr>
</section>
<section id="understanding-file-paths-the-foundation" class="level1">
<h1>Understanding File Paths: The Foundation</h1>
<p>Before we get into code, let‚Äôs understand what a file path actually is. Think of it like a street address for your files:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Windows path example</span></span>
<span id="cb1-2">C:\Users\YourName\Documents\my_file.txt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mac/Linux path example</span></span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>YourName<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Documents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>my_file.txt</span></code></pre></div>
<p>Notice the difference? Windows uses backslashes (<code>\</code>) while Mac and Linux use forward slashes (<code>/</code>). This used to give me headaches (even in my R code) until I discovered <code>pathlib</code>!</p>
<hr>
</section>
<section id="the-magic-of-pathlib-object-oriented-file-handling" class="level1">
<h1>The Magic of pathlib: Object-Oriented File Handling</h1>
<section id="getting-started-with-path-objects" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-path-objects">Getting Started with Path Objects</h2>
<p>The <code>pathlib</code> module treats paths as objects, not just strings. Here‚Äôs how we create a path:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>exit</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Path object</span></span>
<span id="cb3-4">my_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'folder/subfolder/file.txt'</span>)</span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(my_path)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Works on all operating systems!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>folder\subfolder\file.txt</code></pre>
</div>
</div>
</section>
<section id="the-operator-your-new-best-friend" class="level2">
<h2 class="anchored" data-anchor-id="the-operator-your-new-best-friend">The ‚Äú/‚Äù Operator: Your New Best Friend</h2>
<p>One of the coolest features I discovered is the <code>/</code> operator. Instead of worrying about path separators, we can join paths like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb5-2"></span>
<span id="cb5-3">base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'documents'</span>)</span>
<span id="cb5-4">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'projects'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'readme.txt'</span></span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_path)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># documents/projects/readme.txt</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>documents\projects\readme.txt</code></pre>
</div>
</div>
<p>This works on <strong>all operating systems</strong> - Windows, Mac, and Linux! No more worrying about backslashes or forward slashes.</p>
<hr>
</section>
</section>
<section id="important-path-attributes" class="level1">
<h1>Important Path Attributes</h1>
<p>When working with files, I often need to extract different parts of a path. Here‚Äôs a handy table I created while learning:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Attribute</th>
<th>What It Does</th>
<th>Example Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.name</code></td>
<td>Gets the full filename</td>
<td><code>'document.txt'</code></td>
</tr>
<tr class="even">
<td><code>.stem</code></td>
<td>Gets filename without extension</td>
<td><code>'document'</code></td>
</tr>
<tr class="odd">
<td><code>.suffix</code></td>
<td>Gets the file extension</td>
<td><code>'.txt'</code></td>
</tr>
<tr class="even">
<td><code>.parent</code></td>
<td>Gets the parent directory</td>
<td><code>Path('folder/subfolder')</code></td>
</tr>
<tr class="odd">
<td><code>.drive</code></td>
<td>Gets the drive letter (Windows)</td>
<td><code>'C:'</code></td>
</tr>
</tbody>
</table>
<p>Let me show you these in action:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb7-2"></span>
<span id="cb7-3">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C:/Users/Documents/report.pdf'</span>)</span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_path.name)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># report.pdf</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>report.pdf</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_path.stem)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># report</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>report</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_path.suffix)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .pdf</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.pdf</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_path.parent)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># C:/Users/Documents</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C:\Users\Documents</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(file_path.drive)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># C: (on Windows)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C:</code></pre>
</div>
</div>
<hr>
</section>
<section id="finding-your-way-cwd-and-home" class="level1">
<h1>Finding Your Way: cwd() and home()</h1>
<p>Two methods I use constantly are <code>cwd()</code> (current working directory) and <code>home()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Where am I right now?</span></span>
<span id="cb17-4">current_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path.cwd()</span>
<span id="cb17-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"I'm currently in: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>current_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>I'm currently in: C:\Users\ssanders\Documents\GitHub\steveondata\posts\2025-07-23</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Where's my home directory?</span></span>
<span id="cb19-2">home_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path.home()</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"My home directory is: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>home_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>My home directory is: C:\Users\ssanders</code></pre>
</div>
</div>
<hr>
</section>
<section id="reading-and-writing-files-the-easy-way" class="level1">
<h1>Reading and Writing Files: The Easy Way</h1>
<section id="writing-text-files" class="level2">
<h2 class="anchored" data-anchor-id="writing-text-files">Writing Text Files</h2>
<p>Here‚Äôs the simplest way I‚Äôve found to write text to a file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a path</span></span>
<span id="cb21-2">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_notes.txt'</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write text (creates the file if it doesn't exist)</span></span>
<span id="cb21-5">file_path.write_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hello, Python!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">This is my first file.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>37</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File created successfully!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>File created successfully!</code></pre>
</div>
</div>
</section>
<section id="reading-text-files" class="level2">
<h2 class="anchored" data-anchor-id="reading-text-files">Reading Text Files</h2>
<p>Reading is just as easy:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the file we just created</span></span>
<span id="cb25-2">content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_path.read_text()</span>
<span id="cb25-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Hello, Python!
This is my first file.</code></pre>
</div>
</div>
</section>
<section id="the-traditional-way-with-open" class="level2">
<h2 class="anchored" data-anchor-id="the-traditional-way-with-open">The Traditional Way with open()</h2>
<p>Sometimes you need more control. Here‚Äôs how to use <code>open()</code> with pathlib:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb27-2"></span>
<span id="cb27-3">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'example.txt'</span>)</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Writing</span></span>
<span id="cb27-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb27-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Line 1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb27-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Line 2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>7
7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reading</span></span>
<span id="cb29-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb29-3">    content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb29-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Line 1
Line 2</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="checking-files-and-directories" class="level1">
<h1>Checking Files and Directories</h1>
<p>Before working with files, I always check if they exist:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb31-2"></span>
<span id="cb31-3">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'important_file.txt'</span>)</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_path.exists():</span>
<span id="cb31-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> file_path.is_file():</span>
<span id="cb31-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a file!"</span>)</span>
<span id="cb31-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> file_path.is_dir():</span>
<span id="cb31-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a directory!"</span>)</span>
<span id="cb31-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb31-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File doesn't exist yet"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>File doesn't exist yet</code></pre>
</div>
</div>
<hr>
</section>
<section id="pathlib-vs-os-a-comparison" class="level1">
<h1>pathlib vs os: A Comparison</h1>
<p>When I started learning, I was confused about when to use <code>pathlib</code> vs <code>os</code>. Here‚Äôs a comparison table I made:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 23%">
<col style="width: 34%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th>Task</th>
<th>pathlib</th>
<th>os module</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Join paths</td>
<td><code>Path('folder') / 'file.txt'</code></td>
<td><code>os.path.join('folder', 'file.txt')</code></td>
</tr>
<tr class="even">
<td>Current directory</td>
<td><code>Path.cwd()</code></td>
<td><code>os.getcwd()</code></td>
</tr>
<tr class="odd">
<td>File exists?</td>
<td><code>path.exists()</code></td>
<td><code>os.path.exists(path)</code></td>
</tr>
<tr class="even">
<td>Is it a file?</td>
<td><code>path.is_file()</code></td>
<td><code>os.path.isfile(path)</code></td>
</tr>
<tr class="odd">
<td>Get filename</td>
<td><code>path.name</code></td>
<td><code>os.path.basename(path)</code></td>
</tr>
<tr class="even">
<td>Get parent</td>
<td><code>path.parent</code></td>
<td><code>os.path.dirname(path)</code></td>
</tr>
</tbody>
</table>
<p>As you can see, <code>pathlib</code> is often cleaner and more intuitive!</p>
<hr>
</section>
<section id="error-handling-learning-from-mistakes" class="level1">
<h1>Error Handling: Learning from Mistakes</h1>
<p>I‚Äôve learned (the hard way!) that files don‚Äôt always exist when we expect them to. Here‚Äôs how to handle errors gracefully:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb33-2">    file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'missing_file.txt'</span>)</span>
<span id="cb33-3">    content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> file_path.read_text()</span>
<span id="cb33-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">FileNotFoundError</span>:</span>
<span id="cb33-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oops! File not found. Let me create it..."</span>)</span>
<span id="cb33-6">    file_path.write_text(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New file created!"</span>)</span>
<span id="cb33-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">PermissionError</span>:</span>
<span id="cb33-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I don't have permission to access this file"</span>)</span></code></pre></div>
</div>
<hr>
</section>
<section id="practical-examples-putting-it-all-together" class="level1">
<h1>Practical Examples: Putting It All Together</h1>
<section id="example-1-creating-a-simple-note-taking-app" class="level2">
<h2 class="anchored" data-anchor-id="example-1-creating-a-simple-note-taking-app">Example 1: Creating a Simple Note-Taking App</h2>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up our notes directory</span></span>
<span id="cb34-2">notes_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path.home() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MyNotes'</span></span>
<span id="cb34-3">notes_dir.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create if doesn't exist</span></span>
<span id="cb34-4"></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new note</span></span>
<span id="cb34-6">note_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter note name: "</span>)</span>
<span id="cb34-7">note_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> notes_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>note_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.txt"</span></span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write content</span></span>
<span id="cb34-10">content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your note: "</span>)</span>
<span id="cb34-11">note_path.write_text(content)</span>
<span id="cb34-12"></span>
<span id="cb34-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Note saved to: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>note_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
</section>
<section id="example-2-finding-all-text-files" class="level2">
<h2 class="anchored" data-anchor-id="example-2-finding-all-text-files">Example 2: Finding All Text Files</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all .txt files in current directory</span></span>
<span id="cb35-4">current_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path.cwd()</span>
<span id="cb35-5">txt_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(current_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.txt'</span>))</span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Text files found:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Text files found:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> txt_files:</span>
<span id="cb37-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  - example.txt
  - missing_file.txt
  - my_notes.txt</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="working-with-different-file-modes" class="level1">
<h1>Working with Different File Modes</h1>
<p>Here‚Äôs a reference table for file modes I keep handy:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Mode</th>
<th>What It Does</th>
<th>Creates New?</th>
<th>Overwrites?</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>'r'</code></td>
<td>Read only</td>
<td>No</td>
<td>No</td>
</tr>
<tr class="even">
<td><code>'w'</code></td>
<td>Write only</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr class="odd">
<td><code>'a'</code></td>
<td>Append to end</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr class="even">
<td><code>'x'</code></td>
<td>Write, fail if exists</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn! üéØ</h1>
<p>Let‚Äôs practice what we‚Äôve learned. Create a Python script that:</p>
<ol type="1">
<li>Creates a directory called ‚Äúpractice_files‚Äù</li>
<li>Creates three text files with different content</li>
<li>Lists all files in the directory</li>
<li>Reads and prints the content of each file</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Create directory</span></span>
<span id="cb39-4">practice_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'practice_files'</span>)</span>
<span id="cb39-5">practice_dir.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Create three files</span></span>
<span id="cb39-8">files_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb39-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file1.txt'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is the first file'</span>,</span>
<span id="cb39-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file2.txt'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is the second file'</span>,</span>
<span id="cb39-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file3.txt'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is the third file'</span></span>
<span id="cb39-12">}</span>
<span id="cb39-13"></span>
<span id="cb39-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> filename, content <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> files_data.items():</span>
<span id="cb39-15">    file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> practice_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> filename</span>
<span id="cb39-16">    file_path.write_text(content)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>22
23
22</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. List all files</span></span>
<span id="cb41-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Files in practice_files:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Files in practice_files:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> practice_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>):</span>
<span id="cb43-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  - file1.txt
  - file2.txt
  - file3.txt</code></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Read and print content</span></span>
<span id="cb45-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">File contents:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
File contents:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> practice_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.txt'</span>):</span>
<span id="cb47-2">    content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read_text()</span>
<span id="cb47-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>content<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>file1.txt: This is the first file
file2.txt: This is the second file
file3.txt: This is the third file</code></pre>
</div>
</div>
</details>
<hr>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways üìå</h1>
<ul>
<li><strong>Use <code>pathlib</code></strong> for modern, cross-platform file handling</li>
<li>The <strong><code>/</code> operator</strong> makes joining paths super easy</li>
<li><strong><code>Path.cwd()</code></strong> tells you where you are</li>
<li><strong><code>.name</code>, <code>.stem</code>, <code>.suffix</code></strong> extract parts of filenames</li>
<li><strong>Always handle errors</strong> when working with files</li>
<li><strong><code>with open()</code></strong> ensures files are properly closed</li>
</ul>
<hr>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Working with files in Python has become so much easier since I discovered <code>pathlib</code>. While the <code>os</code> module is still useful (and you‚Äôll see it in older code), <code>pathlib</code> offers a cleaner, more intuitive approach that works seamlessly across different operating systems.</p>
<p>Remember, we‚Äôre all learning together! Start with simple file operations, practice regularly, and don‚Äôt be afraid to experiment. The more you work with files, the more natural it becomes.</p>
<p><strong>What‚Äôs Next?</strong> Try creating your own file management scripts! Start simple - maybe a script to organize your downloads folder or create daily journal entries. The possibilities are endless!</p>
<hr>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q: Should I always use pathlib instead of os?</strong> A: For new code, yes! pathlib is more modern and easier to use. However, you might need os for some system operations that pathlib doesn‚Äôt cover.</p>
<p><strong>Q: What‚Äôs the difference between Path.cwd() and os.getcwd()?</strong> A: They do the same thing, but Path.cwd() returns a Path object while os.getcwd() returns a string.</p>
<p><strong>Q: Can I use pathlib with older Python versions?</strong> A: pathlib was introduced in Python 3.4. For older versions, you‚Äôll need to use os.path.</p>
<p><strong>Q: How do I create nested directories?</strong> A: Use <code>path.mkdir(parents=True, exist_ok=True)</code> to create parent directories if they don‚Äôt exist.</p>
<p><strong>Q: What‚Äôs the best way to handle large files?</strong> A: For large files, read them in chunks using a loop rather than loading everything into memory at once.</p>
<hr>
</section>
<section id="share-your-journey" class="level1">
<h1>Share Your Journey! üí¨</h1>
<p>I‚Äôd love to hear about your experiences with file handling in Python! What challenges have you faced? What creative solutions have you discovered? Share your thoughts in the comments below or connect with me on social media. Let‚Äôs learn from each other!</p>
<p>Remember, every expert was once a beginner. Keep coding, keep learning, and most importantly, have fun with Python! üêç‚ú®</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.pythonmorsels.com/pathlib-module/">https://www.pythonmorsels.com/pathlib-module/</a></p></li>
<li><p><a href="https://automatetheboringstuff.com/2e/chapter9/">https://automatetheboringstuff.com/2e/chapter9/</a></p></li>
<li><p><a href="https://python.plainenglish.io/python-path-mastery-essential-path-manipulation-techniques-e2c0956b0e63">https://python.plainenglish.io/python-path-mastery-essential-path-manipulation-techniques-e2c0956b0e63</a></p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-23/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Reading Files in Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-23/</guid>
  <pubDate>Wed, 23 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Calculate Odds Ratios in R With Examples Using epitools</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-21/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you‚Äôre an R programmer working with categorical data, you‚Äôll often need to measure the association between two binary variables. That‚Äôs where <strong>odds ratios</strong> come in handy! The <code>epitools</code> package in R makes calculating odds ratios simple with its <code>oddsratio()</code> function .</p>
<p>In this guide, we‚Äôll walk through everything you need to know about calculating odds ratios in R. You‚Äôll learn the function syntax, see practical examples, and understand how to interpret the results. Whether you‚Äôre analyzing medical data, conducting epidemiological research, or exploring any binary relationships, this tutorial has you covered.</p>
</section>
<section id="what-are-odds-ratios" class="level1">
<h1>What Are Odds Ratios?</h1>
<p>An <strong>odds ratio (OR)</strong> compares the odds of an event happening in one group versus another group. It‚Äôs especially useful when you have two binary variables (yes/no, exposed/unexposed, success/failure) .</p>
<p>Here‚Äôs what the values mean:</p>
<ul>
<li><strong>OR = 1</strong>: No association between the variables</li>
<li><strong>OR &gt; 1</strong>: Positive association (higher odds in the first group)</li>
<li><strong>OR &lt; 1</strong>: Negative association (lower odds in the first group)</li>
</ul>
<p>For example, if the odds ratio is 3.0, the odds of the outcome are 3 times higher in the exposed group compared to the unexposed group.</p>
</section>
<section id="installing-and-loading-epitools" class="level1">
<h1>Installing and Loading epitools</h1>
<p>Before we dive into calculations, let‚Äôs get the <code>epitools</code> package ready:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the package (only need to do this once)</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("epitools")</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the package</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(epitools)</span></code></pre></div>
</div>
</section>
<section id="understanding-oddsratio-syntax" class="level1">
<h1>Understanding oddsratio() Syntax</h1>
<p>The <code>oddsratio()</code> function has a straightforward syntax with several customizable options :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, </span>
<span id="cb2-2">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"midp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fisher"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>), </span>
<span id="cb2-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conf.level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, </span>
<span id="cb2-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rev =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neither"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rows"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>), </span>
<span id="cb2-5">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">correction =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb2-6">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>Let‚Äôs break down each parameter:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>x</strong></td>
<td>A 2x2 matrix or table of counts</td>
<td>Required</td>
</tr>
<tr class="even">
<td><strong>y</strong></td>
<td>Optional second vector (rarely used)</td>
<td>NULL</td>
</tr>
<tr class="odd">
<td><strong>method</strong></td>
<td>Estimation method</td>
<td>‚Äúmidp‚Äù</td>
</tr>
<tr class="even">
<td><strong>conf.level</strong></td>
<td>Confidence level (e.g., 0.95 for 95%)</td>
<td>0.95</td>
</tr>
<tr class="odd">
<td><strong>rev</strong></td>
<td>Reverse table orientation</td>
<td>‚Äúneither‚Äù</td>
</tr>
<tr class="even">
<td><strong>correction</strong></td>
<td>Apply continuity correction</td>
<td>FALSE</td>
</tr>
<tr class="odd">
<td><strong>verbose</strong></td>
<td>Print detailed output</td>
<td>FALSE</td>
</tr>
</tbody>
</table>
</section>
<section id="creating-2x2-tables-in-r" class="level1">
<h1>Creating 2x2 Tables in R</h1>
<p>Odds ratios work with 2x2 contingency tables. Here‚Äôs how to create them :</p>
<section id="method-1-using-matrix" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-matrix">Method 1: Using matrix()</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 2x2 table</span></span>
<span id="cb3-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row and column names for clarity</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>)</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disease"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Disease"</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the table</span></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Disease No Disease
Exposed        30         70
Unexposed      10         90</code></pre>
</div>
</div>
</section>
<section id="method-2-using-a-data-frame" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-a-data-frame">Method 2: Using a Data Frame</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame</span></span>
<span id="cb5-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exposure =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disease =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>), </span>
<span id="cb5-5">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>))</span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to table</span></span>
<span id="cb5-9">my_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>exposure, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>disease)</span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           
            No Yes
  Exposed   70  30
  Unexposed 90  10</code></pre>
</div>
</div>
</section>
</section>
<section id="basic-examples-with-oddsratio" class="level1">
<h1>Basic Examples with oddsratio()</h1>
<p>Let‚Äôs calculate odds ratios with real examples :</p>
<section id="example-1-simple-calculation" class="level2">
<h2 class="anchored" data-anchor-id="example-1-simple-calculation">Example 1: Simple Calculation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the data</span></span>
<span id="cb7-2">data1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(data1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>)</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(data1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disease"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Disease"</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate odds ratio</span></span>
<span id="cb7-7">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>)</span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower   upper
               Exposed   1.000000       NA      NA
               Unexposed 3.857143 1.766603 8.42156

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "Unconditional MLE &amp; normal approximation (Wald) CI"</code></pre>
</div>
</div>
<p>Based on our computation results, this would give us:</p>
<ul>
<li><strong>Odds Ratio</strong>: 3.857</li>
<li><strong>95% CI</strong>: 1.767 to 8.422</li>
<li><strong>p-value</strong>: 0.0007</li>
</ul>
</section>
<section id="example-2-different-method-options" class="level2">
<h2 class="anchored" data-anchor-id="example-2-different-method-options">Example 2: Different Method Options</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using Fisher's exact method</span></span>
<span id="cb9-2">result_fisher <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fisher"</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fisher's Exact Method Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fisher's Exact Method Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_fisher)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower    upper
               Exposed   1.000000       NA       NA
               Unexposed 3.831525 1.684537 9.405984

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "Conditional MLE &amp; exact CI from 'fisher.test'"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using mid-p method (default)</span></span>
<span id="cb13-2">result_midp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"midp"</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mid-P Method Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mid-P Method Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_midp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower    upper
               Exposed   1.000000       NA       NA
               Unexposed 3.796852 1.783145 8.728312

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "median-unbiased estimate &amp; mid-p exact CI"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using small sample adjustment</span></span>
<span id="cb17-2">result_small <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in any(or, na.rm = TRUE): coercing argument of type 'double' to logical</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Small Sample Adjustment Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Small Sample Adjustment Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_small)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower    upper
               Exposed   1.000000       NA       NA
               Unexposed 3.457106 1.731167 8.031582

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "small sample-adjusted UMLE &amp; normal approx (Wald) CI"</code></pre>
</div>
</div>
</section>
</section>
<section id="interpreting-the-results" class="level1">
<h1>Interpreting the Results</h1>
<p>When you run <code>oddsratio()</code>, you get several key outputs :</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Output</th>
<th>What It Means</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Odds Ratio</strong></td>
<td>The strength of association</td>
</tr>
<tr class="even">
<td><strong>95% CI Lower</strong></td>
<td>Lower bound of confidence interval</td>
</tr>
<tr class="odd">
<td><strong>95% CI Upper</strong></td>
<td>Upper bound of confidence interval</td>
</tr>
<tr class="even">
<td><strong>p-value</strong></td>
<td>Statistical significance test</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Key Takeaway</strong>: If the confidence interval includes 1, the association is not statistically significant at your chosen confidence level.</p>
</blockquote>
</section>
<section id="real-world-examples" class="level1">
<h1>Real-World Examples</h1>
<p>Let‚Äôs look at some practical scenarios:</p>
<section id="medical-study-example" class="level2">
<h2 class="anchored" data-anchor-id="medical-study-example">Medical Study Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Smoking and lung cancer data</span></span>
<span id="cb23-2">smoking_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(smoking_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smokers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-smokers"</span>)</span>
<span id="cb23-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(smoking_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cancer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Cancer"</span>)</span>
<span id="cb23-5"></span>
<span id="cb23-6">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(smoking_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>)</span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smoking and Lung Cancer Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Smoking and Lung Cancer Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
            Cancer No Cancer Total
Smokers         15        25    40
Non-smokers      5        35    40
Total           20        60    80

$measure
                        NA
odds ratio with 95% C.I. estimate    lower   upper
             Smokers          1.0       NA      NA
             Non-smokers      4.2 1.350224 13.0645

$p.value
             NA
two-sided     midp.exact fisher.exact  chi.square
  Smokers             NA           NA          NA
  Non-smokers 0.01128547   0.01877238 0.009823275

$correction
[1] FALSE

attr(,"method")
[1] "Unconditional MLE &amp; normal approximation (Wald) CI"</code></pre>
</div>
</div>
<p>From our calculations, this gives:</p>
<ul>
<li><strong>Odds Ratio</strong>: 4.200</li>
<li><strong>95% CI</strong>: 1.350 to 13.065</li>
<li><strong>p-value</strong>: 0.011</li>
</ul>
<p>This means smokers have 4.2 times higher odds of cancer compared to non-smokers.</p>
</section>
<section id="small-sample-example" class="level2">
<h2 class="anchored" data-anchor-id="small-sample-example">Small Sample Example</h2>
<p>When dealing with small samples, use appropriate methods:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sparse data</span></span>
<span id="cb27-2">sparse_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb27-3">result_sparse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(sparse_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fisher"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in chisq.test(xx, correct = correction): Chi-squared approximation may
be incorrect</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sparse Data Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sparse Data Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_sparse)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Outcome
Predictor  Disease1 Disease2 Total
  Exposed1        2        8    10
  Exposed2        1       19    20
  Total           3       27    30

$measure
          odds ratio with 95% C.I.
Predictor  estimate     lower    upper
  Exposed1 1.000000        NA       NA
  Exposed2 4.480431 0.2060739 293.9622

$p.value
          two-sided
Predictor  midp.exact fisher.exact chi.square
  Exposed1         NA           NA         NA
  Exposed2  0.2807882    0.2512315  0.1967056

$correction
[1] FALSE

attr(,"method")
[1] "Conditional MLE &amp; exact CI from 'fisher.test'"</code></pre>
</div>
</div>
<p>Results:</p>
<ul>
<li><strong>Odds Ratio</strong>: 4.48</li>
<li><strong>95% CI</strong>: 0.206 to 293.962</li>
<li><strong>p-value</strong>: 0.251</li>
</ul>
<p>Note the wide confidence interval due to small sample size!</p>
</section>
</section>
<section id="visualizing-odds-ratios" class="level1">
<h1>Visualizing Odds Ratios</h1>
<p>Visual representations help communicate your findings. Here are the odds ratios from our examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame for plotting</span></span>
<span id="cb37-2">odds_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb37-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smokers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-smokers"</span>),</span>
<span id="cb37-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Odds_Ratio =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.857</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb37-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lower_CI =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.767</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.350</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb37-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Upper_CI =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.422</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.065</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb37-7">)</span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the odds ratios with confidence intervals</span></span>
<span id="cb37-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(odds_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Odds_Ratio)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> Lower_CI, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> Upper_CI), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Odds Ratios with 95% Confidence Intervals"</span>,</span>
<span id="cb37-14">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Odds Ratio"</span>,</span>
<span id="cb37-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-21/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The plot shows odds ratios with 95% confidence intervals. The dashed line at OR=1 represents no association.</p>
<p>Here‚Äôs how the data looks in a contingency table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a contingency table for visualization</span></span>
<span id="cb38-2">contingency_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(contingency_table) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>)</span>
<span id="cb38-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(contingency_table) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disease"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Disease"</span>)</span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the contingency table</span></span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(contingency_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Disease No Disease
Exposed        30         70
Unexposed      10         90</code></pre>
</div>
</div>
</section>
<section id="common-use-cases" class="level1">
<h1>Common Use Cases</h1>
<p>Odds ratios are widely used in:</p>
<ol type="1">
<li><strong>Case-Control Studies</strong>: Comparing disease cases with healthy controls</li>
<li><strong>Clinical Trials</strong>: Evaluating treatment effectiveness</li>
<li><strong>Epidemiology</strong>: Identifying risk factors for diseases</li>
<li><strong>Cross-Sectional Studies</strong>: Analyzing prevalence relationships</li>
<li><strong>Public Health</strong>: Informing policy decisions</li>
</ol>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try calculating an odds ratio yourself! Given this vaccination data:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th></th>
<th>Got Flu</th>
<th>No Flu</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Vaccinated</td>
<td>10</td>
<td>90</td>
</tr>
<tr class="even">
<td>Unvaccinated</td>
<td>30</td>
<td>70</td>
</tr>
</tbody>
</table>
<p><strong>Challenge</strong>: Calculate the odds ratio using the <code>oddsratio()</code> function. What does it tell you about vaccine effectiveness?</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the table</span></span>
<span id="cb40-2">vaccine_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(vaccine_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vaccinated"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unvaccinated"</span>)</span>
<span id="cb40-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(vaccine_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Got Flu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Flu"</span>)</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate odds ratio</span></span>
<span id="cb40-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(epitools)</span>
<span id="cb40-8">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(vaccine_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>)</span>
<span id="cb40-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
             Got Flu No Flu Total
Vaccinated        10     90   100
Unvaccinated      30     70   100
Total             40    160   200

$measure
                        NA
odds ratio with 95% C.I.  estimate     lower     upper
            Vaccinated   1.0000000        NA        NA
            Unvaccinated 0.2592593 0.1187428 0.5660582

$p.value
              NA
two-sided        midp.exact fisher.exact  chi.square
  Vaccinated             NA           NA          NA
  Unvaccinated 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "Unconditional MLE &amp; normal approximation (Wald) CI"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The odds ratio should be approximately 0.259</span></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This means vaccinated people have about 74% lower odds of getting flu</span></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1 - 0.259 = 0.741 or 74.1% reduction)</span></span></code></pre></div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>Odds ratios</strong> measure association between two binary variables</li>
<li>Use <code>epitools::oddsratio()</code> for easy calculation in R</li>
<li>The function requires a 2x2 contingency table</li>
<li>Choose the right method based on sample size:
<ul>
<li>Large samples: ‚Äúwald‚Äù</li>
<li>Small samples: ‚Äúfisher‚Äù or ‚Äúmidp‚Äù</li>
</ul></li>
<li>Always check confidence intervals for statistical significance</li>
<li>OR &gt; 1 means positive association, OR &lt; 1 means negative association</li>
<li>Wide confidence intervals indicate uncertainty (often due to small samples)</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Calculating <strong>odds ratios in R</strong> using the <code>epitools</code> package is straightforward once you understand the basics. The <code>oddsratio()</code> function provides a powerful tool for analyzing binary relationships in your data.</p>
<p>Remember to:</p>
<ul>
<li>Structure your data as a 2x2 table</li>
<li>Choose the appropriate estimation method</li>
<li>Interpret both the odds ratio and its confidence interval</li>
<li>Consider sample size when drawing conclusions</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: What‚Äôs the difference between odds ratio and risk ratio?</strong> A: Odds ratios compare odds (probability of event/probability of no event), while risk ratios compare probabilities directly. Odds ratios are preferred in case-control studies where risk cannot be directly calculated.</p>
<p><strong>Q2: When should I use Fisher‚Äôs method instead of Wald?</strong> A: Use Fisher‚Äôs method when you have small sample sizes (any cell count &lt; 5) or sparse data. It provides exact p-values rather than approximations.</p>
<p><strong>Q3: How do I handle tables larger than 2x2?</strong> A: The <code>oddsratio()</code> function only works with 2x2 tables. For larger tables, you‚Äôll need to subset your data or use other functions like <code>epitab()</code> for more complex analyses.</p>
<p><strong>Q4: What does it mean if my confidence interval is very wide?</strong> A: A wide confidence interval indicates high uncertainty in your estimate, usually due to small sample sizes. Consider collecting more data or using methods designed for small samples.</p>
<p><strong>Q5: Can I use odds ratios for non-binary variables?</strong> A: No, odds ratios are specifically for binary (two-category) variables. For variables with more categories, consider other measures like relative risk ratios or multinomial logistic regression.</p>
<p><em>Found this guide helpful? Share it with fellow R programmers and let us know what topics you‚Äôd like us to cover next! Follow us for more R programming tutorials and statistical analysis guides.</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://cran.r-project.org/web/packages/epitools/index.html">https://cran.r-project.org/web/packages/epitools/index.html</a></p></li>
<li><p><a href="https://www.statology.org/odds-ratio-in-r/">https://www.statology.org/odds-ratio-in-r/</a></p></li>
<li><p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6532386/">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6532386/</a></p></li>
<li><p><a href="https://stats.oarc.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/">https://stats.oarc.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/</a></p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-21/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>odds Ratio in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-21/</guid>
  <pubDate>Mon, 21 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Master Python Input Validation: A Beginner‚Äôs Guide to Safe User Input</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-16/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>exit</code></pre>
</div>
</div>
<p><em>Authors Note: I am learning as I write this series so you might find mistakes. If you find them please comment, or if you know a better way, then please share it!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever written a Python program that crashed because a user typed ‚Äútwenty‚Äù instead of ‚Äú20‚Äù? Or maybe your code broke when someone entered their email as ‚Äúnot-an-email‚Äù? <strong>Input validation</strong> is your shield against these common problems, and today you‚Äôre going to learn them!</p>
<p>Think of input validation as a security guard for your program. Just like a guard checks IDs at the door, input validation checks that user data is correct, safe, and in the expected format before your program processes it. For anyone building input forms, this is a necessary skill in order to write robust, user-friendly applications that won‚Äôt crash at the first sign of unexpected input.</p>
<p>In this comprehensive guide, we‚Äôll explore powerful input validation functions that make your life easier, from basic string validation to complex date/time checking. You‚Äôll discover how the <strong>PyInputPlus</strong> library transforms tedious validation code into simple, one-line solutions .</p>
</section>
<section id="why-input-validation-matters-for-python-beginners" class="level1">
<h1>Why Input Validation Matters for Python Beginners</h1>
<section id="the-hidden-dangers-of-user-input" class="level2">
<h2 class="anchored" data-anchor-id="the-hidden-dangers-of-user-input">The Hidden Dangers of User Input</h2>
<p>Every time your program accepts user input, you‚Äôre opening a door to potential problems:</p>
<ul>
<li><strong>Type Errors:</strong> Users might enter text when you expect numbers</li>
<li><strong>Logic Errors:</strong> Invalid values can break your program‚Äôs logic</li>
<li><strong>Security Vulnerabilities:</strong> Unvalidated input can lead to serious security issues</li>
<li><strong>Poor User Experience:</strong> Crashes frustrate users and make your program look unprofessional</li>
</ul>
</section>
<section id="the-traditional-approach-vs.-modern-solutions" class="level2">
<h2 class="anchored" data-anchor-id="the-traditional-approach-vs.-modern-solutions">The Traditional Approach vs.&nbsp;Modern Solutions</h2>
<p>Let‚Äôs compare how input validation looks with and without proper tools:</p>
<p><strong>Traditional Approach (Tedious and Error-Prone):</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb2-2">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span>)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-4">        age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(age)</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-6">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter a positive number."</span>)</span>
<span id="cb2-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please use numeric digits."</span>)</span></code></pre></div>
<p><strong>Modern Approach with PyInputPlus (Clean and Simple):</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyinputplus <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyip</span>
<span id="cb3-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>The difference is striking! The modern approach handles all validation, error messages, and reprompting automatically .</p>
</section>
</section>
<section id="getting-started-with-pyinputplus" class="level1">
<h1>Getting Started with PyInputPlus</h1>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Before we get into the functions, let‚Äôs install PyInputPlus:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyinputplus</span></code></pre></div>
</section>
<section id="basic-import" class="level2">
<h2 class="anchored" data-anchor-id="basic-import">Basic Import</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyinputplus <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyip</span></code></pre></div>
<p>Now you‚Äôre ready!</p>
</section>
</section>
<section id="complete-guide-to-input-validation-functions" class="level1">
<h1>Complete Guide to Input Validation Functions</h1>
<p>Let‚Äôs explore each input validation function with some practical examples.</p>
<section id="inputstr---smart-string-input" class="level2">
<h2 class="anchored" data-anchor-id="inputstr---smart-string-input">1. inputStr() - Smart String Input</h2>
<p>The <code>inputStr()</code> function is like Python‚Äôs built-in <code>input()</code>, but with validation superpowers.</p>
<p><strong>Basic Usage:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your name: "</span>)</span></code></pre></div>
<p><strong>Advanced Features:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Minimum and maximum length</span></span>
<span id="cb7-2">username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb7-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create username (3-15 characters): "</span>,</span>
<span id="cb7-4">    minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb7-5">    maxLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb7-6">)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom validation with regex</span></span>
<span id="cb7-9">phone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb7-10">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter phone (digits only): "</span>,</span>
<span id="cb7-11">    allowRegexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^\d+$'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only digits allowed</span></span>
<span id="cb7-12">)</span></code></pre></div>
</section>
<section id="inputint---integer-input-with-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputint---integer-input-with-validation">2. inputInt() - Integer Input with Validation</h2>
<p>Never worry about type conversion errors again!</p>
<p><strong>Basic Usage:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span>)</span></code></pre></div>
<p><strong>With Range Validation:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Age between 1 and 120</span></span>
<span id="cb9-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(</span>
<span id="cb9-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age (1-120): "</span>,</span>
<span id="cb9-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb9-6">)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Score with specific range</span></span>
<span id="cb9-9">score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(</span>
<span id="cb9-10">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter test score (0-100): "</span>,</span>
<span id="cb9-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb9-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb9-13">)</span></code></pre></div>
</section>
<section id="inputfloat---decimal-number-input" class="level2">
<h2 class="anchored" data-anchor-id="inputfloat---decimal-number-input">3. inputFloat() - Decimal Number Input</h2>
<p>Perfect for prices, measurements, and scientific data.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Product price</span></span>
<span id="cb10-2">price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFloat(</span>
<span id="cb10-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter price: $"</span>,</span>
<span id="cb10-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Minimum 1 cent</span></span>
<span id="cb10-5">)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temperature reading</span></span>
<span id="cb10-8">temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFloat(</span>
<span id="cb10-9">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter temperature (¬∞C): "</span>,</span>
<span id="cb10-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">273.15</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Absolute zero</span></span>
<span id="cb10-11">)</span></code></pre></div>
</section>
<section id="inputchoice---restricted-choice-input" class="level2">
<h2 class="anchored" data-anchor-id="inputchoice---restricted-choice-input">4. inputChoice() - Restricted Choice Input</h2>
<p>Ensure users only select from predefined options.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple choice</span></span>
<span id="cb11-2">size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputChoice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'small'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'medium'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'large'</span>])</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With custom prompt</span></span>
<span id="cb11-5">color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputChoice(</span>
<span id="cb11-6">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>],</span>
<span id="cb11-7">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose a color (red/green/blue): "</span></span>
<span id="cb11-8">)</span></code></pre></div>
</section>
<section id="inputmenu---interactive-menu-selection" class="level2">
<h2 class="anchored" data-anchor-id="inputmenu---interactive-menu-selection">5. inputMenu() - Interactive Menu Selection</h2>
<p>Create user-friendly menus with automatic numbering.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic menu</span></span>
<span id="cb12-2">options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Game'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Load Game'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Settings'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Quit'</span>]</span>
<span id="cb12-3">choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputMenu(options)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The menu displays as:</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. New Game</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Load Game</span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Settings</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Quit</span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User enters a number, function returns the selected option</span></span></code></pre></div>
</section>
<section id="inputdatetime---date-and-time-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputdatetime---date-and-time-validation">6. inputDatetime() - Date and Time Validation</h2>
<p>Handle date/time input without complex parsing.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic date input</span></span>
<span id="cb13-2">birthday <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputDatetime(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your birthday: "</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With specific format</span></span>
<span id="cb13-5">appointment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputDatetime(</span>
<span id="cb13-6">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter date (MM/DD/YYYY): "</span>,</span>
<span id="cb13-7">    formats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y'</span>]</span>
<span id="cb13-8">)</span></code></pre></div>
</section>
<section id="inputyesno---boolean-questions-made-easy" class="level2">
<h2 class="anchored" data-anchor-id="inputyesno---boolean-questions-made-easy">7. inputYesNo() - Boolean Questions Made Easy</h2>
<p>Perfect for confirmation prompts.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns True for yes, False for no</span></span>
<span id="cb14-2">confirm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputYesNo(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you want to continue? "</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accepts: yes, y, no, n (case-insensitive)</span></span>
<span id="cb14-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> confirm:</span>
<span id="cb14-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Continuing..."</span>)</span>
<span id="cb14-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb14-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operation cancelled."</span>)</span></code></pre></div>
</section>
<section id="inputbool---truefalse-input" class="level2">
<h2 class="anchored" data-anchor-id="inputbool---truefalse-input">8. inputBool() - True/False Input</h2>
<p>For when you need explicit Boolean values.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accepts "True" or "False"</span></span>
<span id="cb15-2">debug_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputBool(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enable debug mode? "</span>)</span></code></pre></div>
</section>
<section id="inputemail---email-address-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputemail---email-address-validation">9. inputEmail() - Email Address Validation</h2>
<p>Ensure valid email formats without regex headaches.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputEmail(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your email address: "</span>)</span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatically validates format like user@example.com</span></span></code></pre></div>
</section>
<section id="inputfilepath---file-path-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputfilepath---file-path-validation">10. inputFilepath() - File Path Validation</h2>
<p>Check file paths and optionally verify existence.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Just validate path format</span></span>
<span id="cb17-2">config_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFilepath(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter config file path: "</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure file exists</span></span>
<span id="cb17-5">data_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFilepath(</span>
<span id="cb17-6">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter data file: "</span>,</span>
<span id="cb17-7">    mustExist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb17-8">)</span></code></pre></div>
</section>
<section id="inputpassword---secure-password-input" class="level2">
<h2 class="anchored" data-anchor-id="inputpassword---secure-password-input">11. inputPassword() - Secure Password Input</h2>
<p>Hide password characters as users type.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputPassword(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter password: "</span>)</span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Characters are masked with * as user types</span></span></code></pre></div>
</section>
</section>
<section id="comprehensive-comparison-table" class="level1">
<h1>Comprehensive Comparison Table</h1>
<p>Here‚Äôs a detailed comparison of all input validation functions:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 12%">
<col style="width: 11%">
<col style="width: 16%">
<col style="width: 19%">
<col style="width: 20%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Purpose</th>
<th>Return Type</th>
<th>Example Input</th>
<th>Example Output</th>
<th>Key Features</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>inputStr()</strong></td>
<td>Validated string input</td>
<td><code>str</code></td>
<td>‚ÄúHello‚Äù</td>
<td>‚ÄúHello‚Äù</td>
<td>Length limits, regex patterns</td>
</tr>
<tr class="even">
<td><strong>inputInt()</strong></td>
<td>Integer validation</td>
<td><code>int</code></td>
<td>‚Äú42‚Äù</td>
<td>42</td>
<td>Min/max values, greater/less than</td>
</tr>
<tr class="odd">
<td><strong>inputFloat()</strong></td>
<td>Decimal validation</td>
<td><code>float</code></td>
<td>‚Äú3.14‚Äù</td>
<td>3.14</td>
<td>Range checking, precision</td>
</tr>
<tr class="even">
<td><strong>inputChoice()</strong></td>
<td>Limited options</td>
<td><code>str</code></td>
<td>‚Äúblue‚Äù</td>
<td>‚Äúblue‚Äù</td>
<td>Must match list items</td>
</tr>
<tr class="odd">
<td><strong>inputMenu()</strong></td>
<td>Numbered menu</td>
<td><code>str</code></td>
<td>‚Äú2‚Äù</td>
<td>‚ÄúOption 2‚Äù</td>
<td>Auto-numbered display</td>
</tr>
<tr class="even">
<td><strong>inputDatetime()</strong></td>
<td>Date/time input</td>
<td><code>datetime</code></td>
<td>‚Äú2024-01-01‚Äù</td>
<td>datetime object</td>
<td>Format flexibility</td>
</tr>
<tr class="odd">
<td><strong>inputYesNo()</strong></td>
<td>Yes/no questions</td>
<td><code>bool</code></td>
<td>‚Äúyes‚Äù</td>
<td>True</td>
<td>Accepts y/n variations</td>
</tr>
<tr class="even">
<td><strong>inputBool()</strong></td>
<td>Boolean input</td>
<td><code>bool</code></td>
<td>‚ÄúTrue‚Äù</td>
<td>True</td>
<td>Explicit True/False</td>
</tr>
<tr class="odd">
<td><strong>inputEmail()</strong></td>
<td>Email validation</td>
<td><code>str</code></td>
<td>‚Äúuser@example.com‚Äù</td>
<td>‚Äúuser@example.com‚Äù</td>
<td>Format checking</td>
</tr>
<tr class="even">
<td><strong>inputFilepath()</strong></td>
<td>Path validation</td>
<td><code>str</code></td>
<td>‚Äú/home/file.txt‚Äù</td>
<td>‚Äú/home/file.txt‚Äù</td>
<td>Existence checking</td>
</tr>
<tr class="odd">
<td><strong>inputPassword()</strong></td>
<td>Hidden input</td>
<td><code>str</code></td>
<td>‚Äúsecret123‚Äù</td>
<td>‚Äúsecret123‚Äù</td>
<td>Character masking</td>
</tr>
</tbody>
</table>
</section>
<section id="advanced-features-and-best-practices" class="level1">
<h1>Advanced Features and Best Practices</h1>
<section id="setting-timeouts-and-retry-limits" class="level2">
<h2 class="anchored" data-anchor-id="setting-timeouts-and-retry-limits">1. Setting Timeouts and Retry Limits</h2>
<p>Prevent infinite loops with smart limits:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Timeout after 10 seconds</span></span>
<span id="cb19-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quick! Enter your name: "</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Limit to 3 attempts</span></span>
<span id="cb19-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the answer: "</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine both</span></span>
<span id="cb19-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter code: "</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</section>
<section id="default-values" class="level2">
<h2 class="anchored" data-anchor-id="default-values">2. Default Values</h2>
<p>Provide fallbacks for better user experience:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default if user presses Enter</span></span>
<span id="cb20-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb20-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter name (or press Enter for 'Guest'): "</span>,</span>
<span id="cb20-4">    default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guest"</span>,</span>
<span id="cb20-5">    blank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb20-6">)</span></code></pre></div>
</section>
<section id="custom-validation-functions" class="level2">
<h2 class="anchored" data-anchor-id="custom-validation-functions">3. Custom Validation Functions</h2>
<p>Create your own validation logic:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validatePhone(text):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> text.isdigit():</span>
<span id="cb21-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Phone must be 10 digits'</span>)</span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> text</span>
<span id="cb21-5"></span>
<span id="cb21-6">phone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputCustom(validatePhone)</span></code></pre></div>
</section>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">4. Error Handling</h2>
<p>Gracefully handle validation failures:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb22-2">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: "</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> pyip.RetryLimitException:</span>
<span id="cb22-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Too many invalid attempts!"</span>)</span>
<span id="cb22-5">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default value</span></span></code></pre></div>
</section>
</section>
<section id="security-best-practices" class="level1">
<h1>Security Best Practices</h1>
<blockquote class="blockquote">
<p><strong>üîí Security First:</strong> Input validation is your first line of defense against security vulnerabilities .</p>
</blockquote>
<section id="important-security-guidelines" class="level2">
<h2 class="anchored" data-anchor-id="important-security-guidelines">Important Security Guidelines</h2>
<ol type="1">
<li><p><strong>Never Trust User Input</strong></p>
<ul>
<li>Always validate, even from ‚Äútrusted‚Äù sources</li>
<li>Assume all input is potentially malicious</li>
</ul></li>
<li><p><strong>Use Whitelisting Over Blacklisting</strong></p>
<ul>
<li>Define what‚Äôs allowed, not what‚Äôs forbidden</li>
<li>More secure and maintainable</li>
</ul></li>
<li><p><strong>Validate Early and Often</strong></p>
<ul>
<li>Check input immediately upon receipt</li>
<li>Re-validate before critical operations</li>
</ul></li>
<li><p><strong>Avoid Dangerous Functions</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NEVER DO THIS:</span></span>
<span id="cb23-2">user_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter code: "</span>)</span>
<span id="cb23-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>(user_code)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extremely dangerous!</span></span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DO THIS INSTEAD:</span></span>
<span id="cb23-6">choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputChoice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option2'</span>])</span></code></pre></div></li>
<li><p><strong>Sanitize for Context</strong></p>
<ul>
<li>Different contexts require different validation</li>
<li>File paths need different checks than usernames</li>
</ul></li>
</ol>
</section>
</section>
<section id="your-turn-practical-exercise" class="level1">
<h1>Your Turn! Practical Exercise</h1>
<p>Let‚Äôs put your new knowledge to the test with a real-world scenario!</p>
<p><strong>Challenge:</strong> Create a user registration system that validates:</p>
<ol type="1">
<li>Username (3-20 characters, alphanumeric only)</li>
<li>Age (must be 13 or older)</li>
<li>Email address</li>
<li>Password (at least 8 characters)</li>
<li>Terms acceptance (yes/no)</li>
</ol>
<p>Try writing the code yourself before checking the solution!</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyinputplus <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyip</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"=== User Registration ===</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Username validation</span></span>
<span id="cb24-6">username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb24-7">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Username (3-20 chars, letters/numbers only): "</span>,</span>
<span id="cb24-8">    minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb24-9">    maxLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb24-10">    allowRegexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^[a-zA-Z0-9]+$'</span>],</span>
<span id="cb24-11">    blockRegexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'[^a-zA-Z0-9]'</span>]</span>
<span id="cb24-12">)</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Age validation</span></span>
<span id="cb24-15">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(</span>
<span id="cb24-16">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: "</span>,</span>
<span id="cb24-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,</span>
<span id="cb24-18">    lessThan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb24-19">)</span>
<span id="cb24-20"></span>
<span id="cb24-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Email validation</span></span>
<span id="cb24-22">email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputEmail(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Email address: "</span>)</span>
<span id="cb24-23"></span>
<span id="cb24-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Password validation</span></span>
<span id="cb24-25">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputPassword(</span>
<span id="cb24-26">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password (min 8 characters): "</span>,</span>
<span id="cb24-27">    minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb24-28">)</span>
<span id="cb24-29"></span>
<span id="cb24-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Terms acceptance</span></span>
<span id="cb24-31">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputYesNo(</span>
<span id="cb24-32">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you accept the terms and conditions? "</span></span>
<span id="cb24-33">)</span>
<span id="cb24-34"></span>
<span id="cb24-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> accepted:</span>
<span id="cb24-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">‚úÖ Registration successful!"</span>)</span>
<span id="cb24-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Welcome, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>username<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span>)</span>
<span id="cb24-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb24-39">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">‚ùå Registration cancelled - terms not accepted."</span>)</span></code></pre></div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>‚úÖ <strong>Input validation prevents crashes</strong> and security vulnerabilities in your Python programs</li>
<li>‚úÖ <strong>PyInputPlus</strong> transforms complex validation into simple one-liners</li>
<li>‚úÖ <strong>Always validate user input</strong> - never trust data from external sources</li>
<li>‚úÖ <strong>Use the right function</strong> for each data type (inputInt for numbers, inputEmail for emails, etc.)</li>
<li>‚úÖ <strong>Set appropriate limits</strong> with timeouts, retry limits, and value ranges</li>
<li>‚úÖ <strong>Handle errors gracefully</strong> to improve user experience</li>
<li>‚úÖ <strong>Whitelisting is more secure</strong> than blacklisting for input validation</li>
<li>‚úÖ <strong>Custom validators</strong> let you implement complex business logic easily</li>
</ul>
</section>
<section id="common-pitfalls-to-avoid" class="level1">
<h1>Common Pitfalls to Avoid</h1>
<section id="forgetting-edge-cases" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-edge-cases">1. Forgetting Edge Cases</h2>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad: Doesn't handle negative numbers</span></span>
<span id="cb25-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age: "</span>)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Ensures positive age</span></span>
<span id="cb25-5">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="over-permissive-validation" class="level2">
<h2 class="anchored" data-anchor-id="over-permissive-validation">2. Over-Permissive Validation</h2>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad: Too permissive</span></span>
<span id="cb26-2">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password: "</span>)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Enforces minimum security</span></span>
<span id="cb26-5">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputPassword(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password: "</span>, minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
</section>
<section id="poor-error-messages" class="level2">
<h2 class="anchored" data-anchor-id="poor-error-messages">3. Poor Error Messages</h2>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad: Generic error</span></span>
<span id="cb27-2">pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number: "</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Helpful guidance</span></span>
<span id="cb27-5">pyip.inputInt(</span>
<span id="cb27-6">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a number between 1-10: "</span>,</span>
<span id="cb27-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb27-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb27-9">)</span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Congratulations! You‚Äôve just mastered Python input validation, transforming yourself from a beginner who writes fragile code to a developer who creates robust applications. By using PyInputPlus and following the best practices we‚Äôve covered, you‚Äôll write programs that gracefully handle any input users throw at them .</p>
<p>Remember, <strong>input validation isn‚Äôt just about preventing errors</strong>; it‚Äôs about creating a professional user experience and protecting your application from security vulnerabilities. Every time you use <code>inputInt()</code> instead of plain <code>input()</code>, you‚Äôre making your code more reliable and your users happier.</p>
<p><strong>Your Next Steps:</strong></p>
<ol type="1">
<li>Install PyInputPlus and try each function</li>
<li>Refactor an existing project to use proper input validation</li>
<li>Create a small project using at least 5 different validation functions</li>
<li>Share your experience with other Python beginners!</li>
</ol>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: Do I always need to use PyInputPlus for input validation?</strong> <strong>A:</strong> While PyInputPlus makes validation much easier, you can write custom validation logic using loops and try-except blocks. However, for beginners and rapid development, PyInputPlus saves time and reduces errors.</p>
<p><strong>Q2: Can I use PyInputPlus in web applications?</strong> <strong>A:</strong> PyInputPlus is designed for command-line applications. For web apps, use form validation libraries specific to your web framework (like Flask-WTF or Django forms).</p>
<p><strong>Q3: What‚Äôs the difference between inputNum(), inputInt(), and inputFloat()?</strong> <strong>A:</strong> <code>inputInt()</code> only accepts whole numbers (integers), <code>inputFloat()</code> accepts decimal numbers, and <code>inputNum()</code> accepts both integers and floats, returning the appropriate type.</p>
<p><strong>Q4: How do I validate multiple conditions at once?</strong> <strong>A:</strong> You can combine PyInputPlus parameters or create custom validation functions. For complex logic, use <code>inputCustom()</code> with your own validator.</p>
<p><strong>Q5: Is input validation enough for security?</strong> <strong>A:</strong> Input validation is the first line of defense, but comprehensive security requires multiple layers including output encoding, secure communication, and proper authentication .</p>
</section>
<section id="join-the-conversation" class="level1">
<h1>Join the Conversation!</h1>
<p>Did this guide help you write better Python code? We‚Äôd love to hear about your experience with input validation! Share your favorite validation function or a creative way you‚Äôve used PyInputPlus in the comments below.</p>
<p><strong>Help others discover this guide:</strong></p>
<ul>
<li>üê¶ Tweet your favorite tip with #PythonInputValidation #steveondata</li>
<li>üíº Share on LinkedIn to help fellow developers</li>
<li>‚≠ê Star the PyInputPlus repository on GitHub</li>
</ul>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>Here are four working, relevant resources to deepen your understanding of Python input validation:</p>
<ol type="1">
<li><p><strong><a href="https://pyinputplus.readthedocs.io/en/latest/">PyInputPlus Official Documentation</a></strong><br>
The comprehensive official documentation for PyInputPlus, featuring detailed explanations of all functions, parameters, and advanced usage examples. This is your go-to reference for mastering every feature discussed in this article.</p></li>
<li><p><strong><a href="https://automatetheboringstuff.com/2e/chapter8/">Automate the Boring Stuff with Python: Input Validation Chapter</a></strong><br>
A beginner-friendly chapter from Al Sweigart‚Äôs popular book (who also created PyInputPlus). This resource provides practical examples and explains input validation concepts in simple terms, perfect for Python beginners.</p></li>
<li><p><strong><a href="https://realpython.com/python-keyboard-input/">Real Python: Python User Input Tutorial</a></strong><br>
An in-depth tutorial covering user input handling, validation techniques, and best practices. This resource goes beyond PyInputPlus to explore various approaches to input validation in Python applications.</p></li>
<li><p><strong><a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html">OWASP Input Validation Cheat Sheet</a></strong><br>
Essential security guidelines for input validation from the Open Web Application Security Project. While not Python-specific, these principles are crucial for writing secure code and understanding why proper validation matters.</p></li>
</ol>
<hr>
<p><em>Happy coding, and remember: validated input is happy input! üêç‚ú®</em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-16/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Input Validation with Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-16/</guid>
  <pubDate>Wed, 16 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Use with() and within() Functions in R: A Complete Guide for Cleaner Code</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-14/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever find yourself typing <code>df$column</code> over and over again in your R code? Or struggling with repetitive data frame references that make your scripts look cluttered? You‚Äôre not alone! R‚Äôs <strong>with()</strong> and <strong>within()</strong> functions are here to save the day, making your data manipulation code cleaner and more readable.</p>
<p>These two base R functions might seem similar at first glance, but they serve different purposes in your data analysis workflow. The <strong>with()</strong> function lets you evaluate expressions using data frame columns directly, while <strong>within()</strong> helps you modify data frames without all the repetitive typing. In this guide, we‚Äôll explore how to use both functions effectively, complete with practical examples and tips to avoid common pitfalls.</p>
<p>Let‚Äôs dive in!</p>
</section>
<section id="understanding-the-with-function" class="level1">
<h1>Understanding the with() Function</h1>
<section id="what-does-with-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-with-do">What Does with() Do?</h2>
<p>The <strong>with()</strong> function creates a temporary environment where you can reference data frame columns directly by name. Think of it as telling R: ‚ÄúHey, work with this data frame for a moment, and let me use the column names without the <code>$</code> symbol.‚Äù</p>
</section>
<section id="basic-syntax-of-with" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-of-with">Basic Syntax of with()</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(data, expression)</span></code></pre></div>
<p>Where:</p>
<ul>
<li><code>data</code>: Your data frame or list</li>
<li><code>expression</code>: The R code you want to run using the columns</li>
</ul>
</section>
<section id="simple-examples-of-with" class="level2">
<h2 class="anchored" data-anchor-id="simple-examples-of-with">Simple Examples of with()</h2>
<p>Let‚Äôs start with a basic data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-5">)</span></code></pre></div>
</div>
<p><strong>Example 1: Calculate the mean</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without with()</span></span>
<span id="cb3-2">mean_x_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With with()</span></span>
<span id="cb3-5">mean_x_with <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result: 2.5</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean of x:"</span>, mean_x_base, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean of x: 2.5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean of x:"</span>, mean_x_with, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean of x: 2.5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the results are identical</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are results identical: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(mean_x_with, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Are results identical:  TRUE</code></pre>
</div>
</div>
<p><strong>Example 2: Perform calculations using multiple columns</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without with()</span></span>
<span id="cb9-2">result_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With with()</span></span>
<span id="cb9-5">result_with <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)</span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result: c(11, 22, 33, 44)</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print results</span></span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Result without with():"</span>, result_base, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Result without with(): 11 22 33 44 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Result with with():"</span>, result_with, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Result with with(): 11 22 33 44 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the results are identical</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are results identical: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(result_with, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Are results identical:  TRUE</code></pre>
</div>
</div>
<p><strong>Example 3: Statistical tests made easy</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a t-test between two columns</span></span>
<span id="cb15-2">test_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t.test</span>(x, y))</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(test_result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Welch Two Sample t-test

data:  x and y
t = -3.4684, df = 3.06, p-value = 0.03917
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -42.917954  -2.082046
sample estimates:
mean of x mean of y 
      2.5      25.0 </code></pre>
</div>
</div>
</section>
</section>
<section id="understanding-the-within-function" class="level1">
<h1>Understanding the within() Function</h1>
<section id="what-does-within-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-within-do">What Does within() Do?</h2>
<p>While <strong>with()</strong> evaluates expressions, <strong>within()</strong> goes a step further‚Äîit modifies your data frame and returns a new version with your changes . It‚Äôs perfect for creating new columns or updating existing ones.</p>
</section>
<section id="basic-syntax-of-within" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-of-within">Basic Syntax of within()</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(data, {</span>
<span id="cb17-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your modification expressions</span></span>
<span id="cb17-3">})</span></code></pre></div>
<p>The curly braces <code>{}</code> let you write multiple modifications in a clean, organized way.</p>
</section>
<section id="practical-examples-of-within" class="level2">
<h2 class="anchored" data-anchor-id="practical-examples-of-within">Practical Examples of within()</h2>
<p><strong>Example 1: Create a new column</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb18-2">  z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb18-3">})</span>
<span id="cb18-4"></span>
<span id="cb18-5">df2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x  y   z
1 1 10  10
2 2 20  40
3 3 30  90
4 4 40 160</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df2 now has columns x, y, and z</span></span></code></pre></div>
</div>
<p><strong>Example 2: Modify existing columns</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb21-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb21-3">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb21-4">})</span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x values increased by 10, y values halved</span></span>
<span id="cb21-6">df3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1 11  5
2 12 10
3 13 15
4 14 20</code></pre>
</div>
</div>
<p><strong>Example 3: Remove a column</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">df4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb23-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb23-3">})</span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df4 only has the y column</span></span>
<span id="cb23-5">df4</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   y
1 10
2 20
3 30
4 40</code></pre>
</div>
</div>
</section>
</section>
<section id="key-differences-between-with-and-within" class="level1">
<h1>Key Differences Between with() and within()</h1>
<p>Understanding when to use each function is crucial for effective R programming:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 32%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Feature</th>
<th>with()</th>
<th>within()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Purpose</strong></td>
<td>Evaluate expressions</td>
<td>Modify data frames</td>
</tr>
<tr class="even">
<td><strong>Returns</strong></td>
<td>Result of expression</td>
<td>Modified data frame</td>
</tr>
<tr class="odd">
<td><strong>Modifies original?</strong></td>
<td>No</td>
<td>No (returns copy)</td>
</tr>
<tr class="even">
<td><strong>Best for</strong></td>
<td>Calculations, summaries</td>
<td>Adding/updating columns</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Key Takeaway:</strong> Use <strong>with()</strong> when you want to calculate something FROM your data. Use <strong>within()</strong> when you want to change something IN your data.</p>
</blockquote>
</section>
<section id="common-mistakes-to-avoid" class="level1">
<h1>Common Mistakes to Avoid</h1>
<section id="expecting-with-to-modify-data" class="level2">
<h2 class="anchored" data-anchor-id="expecting-with-to-modify-data">1. Expecting with() to Modify Data</h2>
<p><strong>Wrong:</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, new_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This doesn't add a column!</span></span></code></pre></div>
<p><strong>Right:</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, new_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This adds the column</span></span></code></pre></div>
</section>
<section id="forgetting-to-assign-within-results" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-to-assign-within-results">2. Forgetting to Assign within() Results</h2>
<p><strong>Wrong:</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Changes are lost!</span></span></code></pre></div>
<p><strong>Right:</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Changes are saved</span></span></code></pre></div>
</section>
<section id="variable-name-conflicts" class="level2">
<h2 class="anchored" data-anchor-id="variable-name-conflicts">3. Variable Name Conflicts</h2>
<p>If you have variables in your global environment with the same names as your data frame columns, <strong>with()</strong> and <strong>within()</strong> will use the data frame columns first. This can lead to unexpected results!</p>
</section>
</section>
<section id="best-practices-for-clean-code" class="level1">
<h1>Best Practices for Clean Code</h1>
<section id="choose-the-right-function" class="level2">
<h2 class="anchored" data-anchor-id="choose-the-right-function">1. Choose the Right Function</h2>
<ul>
<li>Use <strong>with()</strong> for:
<ul>
<li>Statistical calculations</li>
<li>Temporary computations</li>
<li>When you don‚Äôt need to modify the data</li>
</ul></li>
<li>Use <strong>within()</strong> for:
<ul>
<li>Creating new columns</li>
<li>Updating existing columns</li>
<li>Data transformation tasks</li>
</ul></li>
</ul>
</section>
<section id="keep-it-readable" class="level2">
<h2 class="anchored" data-anchor-id="keep-it-readable">2. Keep It Readable</h2>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Clear and organized</span></span>
<span id="cb29-2">df_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb29-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate age groups</span></span>
<span id="cb29-4">  age_group <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Young"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult"</span>)</span>
<span id="cb29-5">  </span>
<span id="cb29-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardize income</span></span>
<span id="cb29-7">  income_scaled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(income)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(income)</span>
<span id="cb29-8">  </span>
<span id="cb29-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove temporary column</span></span>
<span id="cb29-10">  temp_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb29-11">})</span></code></pre></div>
</section>
<section id="document-your-intent" class="level2">
<h2 class="anchored" data-anchor-id="document-your-intent">3. Document Your Intent</h2>
<p>Always add comments explaining why you‚Äôre using <strong>with()</strong> or <strong>within()</strong>, especially in complex scripts.</p>
</section>
</section>
<section id="comparing-with-alternative-approaches" class="level1">
<h1>Comparing with Alternative Approaches</h1>
<p>While <strong>with()</strong> and <strong>within()</strong> are useful, R offers other approaches too:</p>
<section id="traditional-operator" class="level2">
<h2 class="anchored" data-anchor-id="traditional-operator">Traditional $ Operator</h2>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple but repetitive</span></span>
<span id="cb30-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>new_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb30-3">mean_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)</span></code></pre></div>
</section>
<section id="modern-dplyr-approach" class="level2">
<h2 class="anchored" data-anchor-id="modern-dplyr-approach">Modern dplyr Approach</h2>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More readable for complex operations</span></span>
<span id="cb31-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_col =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)</span></code></pre></div>
</section>
<section id="when-to-use-what" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-what">When to Use What?</h2>
<ul>
<li><strong>with()/within()</strong>: Great for base R scripts, simple operations</li>
<li><strong>$ operator</strong>: Quick one-off operations</li>
<li><strong>dplyr</strong>: Complex data pipelines, modern R workflows</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let‚Äôs practice using both functions. Try solving this problem:</p>
<p><strong>Challenge:</strong> You have a data frame with student scores:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">math =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>),</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">english =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb32-5">)</span></code></pre></div>
</div>
<p>Tasks:</p>
<ol type="1">
<li>Use <strong>with()</strong> to calculate the average math score</li>
<li>Use <strong>within()</strong> to add a ‚Äútotal‚Äù column (math + english)</li>
<li>Use <strong>within()</strong> to add a ‚Äúgrade‚Äù column: ‚ÄúA‚Äù if total &gt;= 170, ‚ÄúB‚Äù otherwise</li>
</ol>
<p>Try it yourself before checking the solution!</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 1: Average math score with with()</span></span>
<span id="cb33-2">avg_math <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(students, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(math))</span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result: 84.33333</span></span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 2: Add total column with within()</span></span>
<span id="cb33-6">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(students, {</span>
<span id="cb33-7">  total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> math <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> english</span>
<span id="cb33-8">})</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 3: Add grade column with within()</span></span>
<span id="cb33-11">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(students, {</span>
<span id="cb33-12">  grade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb33-13">})</span>
<span id="cb33-14"></span>
<span id="cb33-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Final result:</span></span>
<span id="cb33-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#      name math english total grade</span></span>
<span id="cb33-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1   Alice   85      92   177     A</span></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2     Bob   90      88   178     A</span></span>
<span id="cb33-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 Charlie   78      85   163     B</span></span>
<span id="cb33-20"></span>
<span id="cb33-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(students)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name math english total grade
1   Alice   85      92   177     A
2     Bob   90      88   178     A
3 Charlie   78      85   163     B</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>with()</strong> evaluates expressions using data frame columns without modifying the data</li>
<li><strong>within()</strong> modifies data frames and returns a new copy with changes</li>
<li>Always assign <strong>within()</strong> results back to save changes</li>
<li>Use <strong>with()</strong> for calculations, <strong>within()</strong> for modifications<br>
</li>
<li>Both functions help reduce repetitive <code>df$column</code> typing</li>
<li>They work with data frames and lists, not other object types</li>
<li>Consider modern alternatives like dplyr for complex workflows</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <strong>with()</strong> and <strong>within()</strong> functions are powerful tools in your R programming toolkit. They make your code cleaner, more readable, and less error-prone by eliminating repetitive data frame references. While <strong>with()</strong> excels at calculations and temporary operations, <strong>within()</strong> shines when you need to transform your data.</p>
<p>Remember the golden rule: <strong>with()</strong> for reading, <strong>within()</strong> for writing. Master these functions, and you‚Äôll write more elegant R code that‚Äôs easier to maintain and understand.</p>
<p>Ready to clean up your R scripts? Start by identifying places where you use <code>df$column</code> repeatedly, and try replacing them with <strong>with()</strong> or <strong>within()</strong>. Your future self (and your colleagues) will thank you!</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: Can I use with() and within() with lists?</strong> A: Yes! Both functions work with lists as well as data frames. They create environments from the list elements, allowing you to reference them directly.</p>
<p><strong>Q2: Do these functions work with tibbles from the tidyverse?</strong> A: Yes, tibbles are enhanced data frames, so <strong>with()</strong> and <strong>within()</strong> work perfectly with them.</p>
<p><strong>Q3: Is there a performance difference between using with() and the $ operator?</strong> A: For single operations, the performance difference is negligible. However, <strong>with()</strong> can be slightly more efficient when performing multiple operations on the same data frame.</p>
<p><strong>Q4: Can I nest with() and within() functions?</strong> A: While technically possible, nesting these functions can make code hard to read. It‚Äôs better to use them separately or consider alternative approaches for complex operations.</p>
<p><strong>Q5: How do I access documentation for these functions in R?</strong> A: Simply type <code>?with</code> or <code>?within</code> in your R console to access the official documentation , .</p>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience!</h1>
<p>Found this guide helpful? We‚Äôd love to hear how you‚Äôre using <strong>with()</strong> and <strong>within()</strong> in your R projects! Share your favorite use cases or clever applications in the comments below.</p>
<p>Don‚Äôt forget to share this article with your fellow R programmers who might benefit from cleaner, more efficient code. Follow us on social media for more R programming tips and tricks!</p>
<p><em>What‚Äôs your favorite way to simplify R code? Let us know! üëá</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/with">R Documentation - with() Function</a>. RDocumentation. Base R Package Version 3.6.2.</p></li>
<li><p><a href="https://sparkbyexamples.com/r-programming/r-base-functions/">R Base Functions Guide</a>. Spark By Examples. R Programming Tutorials.</p></li>
<li><p><a href="https://www.datacamp.com/doc/r/withby">DataCamp Documentation - with() and by() Functions</a>. DataCamp. R Documentation.</p></li>
<li><p><a href="https://www.r-bloggers.com/2023/07/simplify-your-code-with-rs-powerful-functions-with-and-within/">Simplify Your Code with R‚Äôs Powerful Functions: with() and within()</a>. R-bloggers. July 2023.</p></li>
<li><p><a href="https://www.statology.org/r-with-within-function/">R with() and within() Functions: A Complete Guide</a>. Statology. R Programming Tutorials.</p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-14/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>with() and within() in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-14/</guid>
  <pubDate>Mon, 14 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Pattern Matching with Regular Expressions in Python: A Beginner‚Äôs Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-09/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Author‚Äôs Note:</strong> I‚Äôm learning about regular expressions alongside you as I write this series. While I‚Äôve done my research and tested the examples, there might be mistakes or oversights. If you spot any errors or have suggestions for improvement, please let me know! We‚Äôre all learning together. üå±</p>
</blockquote>
<section id="introduction" class="level1">
<h1><strong>Introduction</strong></h1>
<p>Ever wished you could find all phone numbers in a document with just one line of code? Or validate email addresses without writing dozens of if statements? That‚Äôs where <strong>regular expressions</strong> (regex) come in handy!</p>
<p>Think of regex as a super-powered search tool. Instead of looking for exact text like ‚Äúcat‚Äù, you can search for patterns like ‚Äúany three letter word ending in ‚Äòat‚Äô‚Äù. In Python, the <code>re</code> module gives you access to this powerful pattern-matching capability .</p>
<p>In this guide, we‚Äôll explore how to use <strong>Python regex</strong> to solve real world text processing problems. You‚Äôll learn the basics, see practical examples, and even try your hand at writing your own patterns.</p>
</section>
<section id="what-are-regular-expressions" class="level1">
<h1><strong>What Are Regular Expressions?</strong></h1>
<p>Regular expressions are special text patterns that describe how to search for text. They‚Äôre like wildcards on steroids. While a simple search finds exact matches, regex can find patterns like:</p>
<ul>
<li>All words starting with ‚ÄúPython‚Äù</li>
<li>Phone numbers in any format</li>
<li>Email addresses</li>
<li>Dates in MM/DD/YYYY format</li>
</ul>
<p>Here‚Äôs a simple example:</p>
<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>exit</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb2-2"></span>
<span id="cb2-3">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My phone number is 415-555-1234"</span></span>
<span id="cb2-4">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">-\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">-\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb2-5">match <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(pattern, text)</span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> match:</span>
<span id="cb2-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>match<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>group()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Found: 415-555-1234</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found: 415-555-1234</code></pre>
</div>
</div>
<p>The pattern <code>\d{3}-\d{3}-\d{4}</code> means ‚Äúthree digits, dash, three digits, dash, four digits‚Äù .</p>
</section>
<section id="setting-up-the-re-module" class="level1">
<h1><strong>Setting Up: The re Module</strong></h1>
<p>Before using regex in Python, you need to import the <code>re</code> module:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span></code></pre></div>
<p>Python‚Äôs <code>re</code> module provides several functions for pattern matching :</p>
<table class="caption-top table">
<colgroup>
<col style="width: 41%">
<col style="width: 58%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>What It Does</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>re.search()</code></td>
<td>Finds the first match anywhere in the string</td>
</tr>
<tr class="even">
<td><code>re.match()</code></td>
<td>Checks if the pattern matches at the start of the string</td>
</tr>
<tr class="odd">
<td><code>re.findall()</code></td>
<td>Returns all matches as a list</td>
</tr>
<tr class="even">
<td><code>re.sub()</code></td>
<td>Replaces matches with new text</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-pattern-elements" class="level1">
<h1><strong>Basic Pattern Elements</strong></h1>
<p>Let‚Äôs start with the building blocks of regex patterns:</p>
<section id="character-classes" class="level2">
<h2 class="anchored" data-anchor-id="character-classes"><strong>Character Classes</strong></h2>
<p>These are shortcuts for common character types:</p>
<ul>
<li><code>\d</code> - Any digit (0-9)</li>
<li><code>\w</code> - Any word character (letters, digits, underscore)</li>
<li><code>\s</code> - Any whitespace (space, tab, newline)</li>
<li><code>.</code> - Any character except newline</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finding all digits in a string</span></span>
<span id="cb5-2">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I have 2 cats and 3 dogs"</span></span>
<span id="cb5-3">digits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\d'</span>, text)</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(digits)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: ['2', '3']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['2', '3']</code></pre>
</div>
</div>
</section>
<section id="quantifiers" class="level2">
<h2 class="anchored" data-anchor-id="quantifiers"><strong>Quantifiers</strong></h2>
<p>These specify how many times a pattern should repeat:</p>
<ul>
<li><code>*</code> - Zero or more times</li>
<li><code>+</code> - One or more times</li>
<li><code>?</code> - Zero or one time</li>
<li><code>{n}</code> - Exactly n times</li>
<li><code>{n,m}</code> - Between n and m times</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finding words with 3 or more letters</span></span>
<span id="cb7-2">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am learning Python"</span></span>
<span id="cb7-3">long_words <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\w{3,}'</span>, text)</span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(long_words)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: ['learning', 'Python']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['learning', 'Python']</code></pre>
</div>
</div>
</section>
</section>
<section id="common-regex-patterns-for-beginners" class="level1">
<h1><strong>Common Regex Patterns for Beginners</strong></h1>
<section id="email-validation" class="level2">
<h2 class="anchored" data-anchor-id="email-validation"><strong>1. Email Validation</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_valid_email(email):</span>
<span id="cb9-2">    pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> re.match(pattern, email) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test it</span></span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_valid_email(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user@example.com"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(is_valid_email(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"invalid.email"</span>))     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># False</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False</code></pre>
</div>
</div>
</section>
<section id="phone-number-extraction" class="level2">
<h2 class="anchored" data-anchor-id="phone-number-extraction"><strong>2. Phone Number Extraction</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Call me at 415-555-1234 or (555) 987-6543"</span></span>
<span id="cb13-2">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'(\(?\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\)?[-.\s]?\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">[-.\s]?\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span></span>
<span id="cb13-3">phones <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text)</span>
<span id="cb13-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(phones)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['415-555-1234', '(555) 987-6543']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['415-555-1234', '(555) 987-6543']</code></pre>
</div>
</div>
</section>
<section id="password-strength-check" class="level2">
<h2 class="anchored" data-anchor-id="password-strength-check"><strong>3. Password Strength Check</strong></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_password(password):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># At least 8 chars, one uppercase, one lowercase, one digit</span></span>
<span id="cb15-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(password) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>:</span>
<span id="cb15-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'[A-Z]'</span>, password):</span>
<span id="cb15-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'[a-z]'</span>, password):</span>
<span id="cb15-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> re.search(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\d'</span>, password):</span>
<span id="cb15-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb15-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-12"></span>
<span id="cb15-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(check_password(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pass123!"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(check_password(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weak"</span>))      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># False</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>False</code></pre>
</div>
</div>
</section>
</section>
<section id="groups-extracting-parts-of-matches" class="level1">
<h1><strong>Groups: Extracting Parts of Matches</strong></h1>
<p>Groups let you extract specific parts of a match using parentheses:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract area code and number separately</span></span>
<span id="cb19-2">phone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"415-555-1234"</span></span>
<span id="cb19-3">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'(\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)-(\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">-\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span></span>
<span id="cb19-4">match <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(pattern, phone)</span>
<span id="cb19-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> match:</span>
<span id="cb19-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Area code: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>match<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 415</span></span>
<span id="cb19-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>match<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 555-1234</span></span>
<span id="cb19-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Full match: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>match<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>group(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 415-555-1234</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Area code: 415
Number: 555-1234
Full match: 415-555-1234</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Remember:</strong> <code>group(0)</code> is the entire match, <code>group(1)</code> is the first set of parentheses, and so on .</p>
</blockquote>
</section>
<section id="special-characters-and-escaping" class="level1">
<h1><strong>Special Characters and Escaping</strong></h1>
<p>Some characters have special meanings in regex. To match them literally, you need to escape them with a backslash:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Character</th>
<th>Special Meaning</th>
<th>To Match Literally</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.</code></td>
<td>Any character</td>
<td><code>\.</code></td>
</tr>
<tr class="even">
<td><code>*</code></td>
<td>Zero or more</td>
<td><code>\*</code></td>
</tr>
<tr class="odd">
<td><code>+</code></td>
<td>One or more</td>
<td><code>\+</code></td>
</tr>
<tr class="even">
<td><code>?</code></td>
<td>Zero or one</td>
<td><code>\?</code></td>
</tr>
<tr class="odd">
<td><code>^</code></td>
<td>Start of string</td>
<td><code>\^</code></td>
</tr>
<tr class="even">
<td><code>$</code></td>
<td>End of string</td>
<td><code>\$</code></td>
</tr>
</tbody>
</table>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matching a literal period</span></span>
<span id="cb21-2">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The price is $19.99"</span></span>
<span id="cb21-3">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\$\d+\.\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{2}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb21-4">match <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(pattern, text)</span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(match.group())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># $19.99</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$19.99</code></pre>
</div>
</div>
</section>
<section id="using-raw-strings-important" class="level1">
<h1><strong>Using Raw Strings (Important!)</strong></h1>
<p>Always use raw strings (prefix with <code>r</code>) for regex patterns :</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good - raw string</span></span>
<span id="cb23-2">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\d+'</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad - regular string (backslash might be interpreted)</span></span>
<span id="cb23-5">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'\d+'</span></span></code></pre></div>
<p>Raw strings prevent Python from interpreting backslashes as escape characters.</p>
</section>
<section id="common-mistakes-to-avoid" class="level1">
<h1><strong>Common Mistakes to Avoid</strong></h1>
<section id="greedy-vs.-non-greedy-matching" class="level2">
<h2 class="anchored" data-anchor-id="greedy-vs.-non-greedy-matching"><strong>1. Greedy vs.&nbsp;Non-Greedy Matching</strong></h2>
<p>By default, quantifiers are ‚Äúgreedy‚Äù - they match as much as possible:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;b&gt;Bold&lt;/b&gt; and &lt;i&gt;Italic&lt;/i&gt;'</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Greedy - matches too much!</span></span>
<span id="cb24-3">greedy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'&lt;.*&gt;'</span>, text)</span>
<span id="cb24-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(greedy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['&lt;b&gt;Bold&lt;/b&gt; and &lt;i&gt;Italic&lt;/i&gt;']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['&lt;b&gt;Bold&lt;/b&gt; and &lt;i&gt;Italic&lt;/i&gt;']</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-greedy - add ? after quantifier</span></span>
<span id="cb26-2">non_greedy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'&lt;.*?&gt;'</span>, text)</span>
<span id="cb26-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(non_greedy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['&lt;b&gt;', '&lt;/b&gt;', '&lt;i&gt;', '&lt;/i&gt;']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['&lt;b&gt;', '&lt;/b&gt;', '&lt;i&gt;', '&lt;/i&gt;']</code></pre>
</div>
</div>
</section>
<section id="forgetting-anchors" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-anchors"><strong>2. Forgetting Anchors</strong></h2>
<p>Use <code>^</code> and <code>$</code> to match the entire string:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without anchors - matches partial string</span></span>
<span id="cb28-2">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb28-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(re.search(pattern, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc123def"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matches!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;re.Match object; span=(3, 6), match='123'&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With anchors - must be entire string</span></span>
<span id="cb30-2">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span></span>
<span id="cb30-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(re.search(pattern, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc123def"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No match</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>None</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(re.search(pattern, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>))        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matches!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;re.Match object; span=(0, 3), match='123'&gt;</code></pre>
</div>
</div>
</section>
<section id="case-sensitivity" class="level2">
<h2 class="anchored" data-anchor-id="case-sensitivity"><strong>3. Case Sensitivity</strong></h2>
<p>Regex is case-sensitive by default. Use the <code>re.IGNORECASE</code> flag for case-insensitive matching :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python PYTHON python"</span></span>
<span id="cb34-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case-sensitive</span></span>
<span id="cb34-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'python'</span>, text))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['python']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['python']</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case-insensitive</span></span>
<span id="cb36-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(re.findall(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'python'</span>, text, re.IGNORECASE))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['Python', 'PYTHON', 'python']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Python', 'PYTHON', 'python']</code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1><strong>Your Turn!</strong></h1>
<p>Here‚Äôs a practical exercise to test your new regex skills:</p>
<p><strong>Challenge:</strong> Write a regex pattern to find all dates in the format MM/DD/YYYY in the following text:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Important dates:</span></span>
<span id="cb38-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Project starts on 01/15/2025</span></span>
<span id="cb38-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- First deadline: 02/28/2025</span></span>
<span id="cb38-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Final submission: 12/31/2025</span></span>
<span id="cb38-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Invalid date: 13/45/2025</span></span>
<span id="cb38-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-8"></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write your pattern here</span></span>
<span id="cb38-10">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'___'</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill in the blank!</span></span>
<span id="cb38-11"></span>
<span id="cb38-12">dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text)</span>
<span id="cb38-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dates)</span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Important dates:</span></span>
<span id="cb39-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Project starts on 01/15/2025</span></span>
<span id="cb39-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- First deadline: 02/28/2025</span></span>
<span id="cb39-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Final submission: 12/31/2025</span></span>
<span id="cb39-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">- Invalid date: 13/45/2025</span></span>
<span id="cb39-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution</span></span>
<span id="cb39-10">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\b(0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\b'</span></span>
<span id="cb39-11"></span>
<span id="cb39-12">dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text)</span>
<span id="cb39-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dates)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [('01', '15'), ('02', '28'), ('12', '31')]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[('01', '15'), ('02', '28'), ('12', '31')]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To get full dates as strings:</span></span>
<span id="cb41-2">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\b(?:0[1-9]|1[0-2])/(?:0[1-9]|[12][0-9]|3[01])/\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\b'</span></span>
<span id="cb41-3">dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text)</span>
<span id="cb41-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dates)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ['01/15/2025', '02/28/2025', '12/31/2025']</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['01/15/2025', '02/28/2025', '12/31/2025']</code></pre>
</div>
</div>
<p>The pattern breaks down as: - <code>\b</code> - Word boundary - <code>(?:0[1-9]|1[0-2])</code> - Month: 01-09 or 10-12 - <code>/</code> - Literal forward slash - <code>(?:0[1-9]|[12][0-9]|3[01])</code> - Day: 01-09, 10-29, or 30-31 - <code>/</code> - Another forward slash - <code>\d{4}</code> - Four-digit year - <code>\b</code> - Word boundary</p>
<p>Note: This pattern doesn‚Äôt validate if dates are real (like February 30th).</p>
</details>
</section>
<section id="quick-reference-guide" class="level1">
<h1><strong>Quick Reference Guide</strong></h1>
<section id="common-patterns" class="level2">
<h2 class="anchored" data-anchor-id="common-patterns"><strong>Common Patterns</strong></h2>
<div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Email</span></span>
<span id="cb43-2">email_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'</span></span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Phone (US format)</span></span>
<span id="cb43-5">phone_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'(\(?\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\)?[-.\s]?\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">[-.\s]?\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">)'</span></span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># URL</span></span>
<span id="cb43-8">url_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'https?://(?:www\.)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&amp;\'\(\)\*\+,;=.]+'</span></span>
<span id="cb43-9"></span>
<span id="cb43-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Date (MM/DD/YYYY)</span></span>
<span id="cb43-11">date_pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'\b(?:0[1-9]|1[0-2])/(?:0[1-9]|[12][0-9]|3[01])/\d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\b'</span></span></code></pre></div>
</section>
<section id="most-used-functions" class="level2">
<h2 class="anchored" data-anchor-id="most-used-functions"><strong>Most Used Functions</strong></h2>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Search for first match</span></span>
<span id="cb44-2">match <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.search(pattern, text)</span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> match:</span>
<span id="cb44-4">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> match.group()</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all matches</span></span>
<span id="cb44-7">matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, text)</span>
<span id="cb44-8"></span>
<span id="cb44-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace matches</span></span>
<span id="cb44-10">new_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.sub(pattern, replacement, text)</span>
<span id="cb44-11"></span>
<span id="cb44-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split by pattern</span></span>
<span id="cb44-13">parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.split(pattern, text)</span></code></pre></div>
</section>
</section>
<section id="key-takeaways" class="level1">
<h1><strong>Key Takeaways</strong></h1>
<ul>
<li><strong>Always use raw strings</strong> (r‚Äôpattern‚Äô) for regex patterns</li>
<li><strong>Start simple</strong> - build complex patterns step by step</li>
<li><strong>Test your patterns</strong> with online tools like regex101.com</li>
<li><strong>Remember the difference</strong> between search(), match(), and findall()</li>
<li><strong>Escape special characters</strong> when you want to match them literally</li>
<li><strong>Use groups</strong> to extract parts of your matches</li>
<li><strong>Be careful with greedy matching</strong> - add ? to make quantifiers non-greedy</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1><strong>Conclusion</strong></h1>
<p>Regular expressions might seem intimidating at first, but they‚Äôre just patterns made up of simple building blocks. Start with basic patterns like <code>\d+</code> for numbers or <code>\w+</code> for words, then gradually combine them to solve more complex problems.</p>
<p>The key is practice! Try modifying the examples in this guide, experiment with your own patterns, and don‚Äôt be afraid to make mistakes. Every Python programmer started exactly where myself and possibly you are now.</p>
<p><strong>Ready to level up your text processing skills?</strong> Pick a real problem you‚Äôre facing, maybe cleaning up messy data or validating user input, and try solving it with regex. You‚Äôll be surprised how much time it can save!</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1><strong>Frequently Asked Questions</strong></h1>
<p><strong>Q: When should I use regex instead of regular string methods?</strong> A: Use regex when you need pattern matching, not exact matching. For simple tasks like checking if a string starts with something, use <code>str.startswith()</code>. For complex patterns like ‚Äúfind all email addresses,‚Äù use regex.</p>
<p><strong>Q: Why do my patterns sometimes not work?</strong> A: Common issues include forgetting to use raw strings, not escaping special characters, or using greedy matching when you need non-greedy. Test your patterns piece by piece to find the problem.</p>
<p><strong>Q: Are Python regex patterns the same as in other languages?</strong> A: The basics are similar, but there are differences. Python uses Perl-compatible syntax with some variations. Always check Python-specific documentation .</p>
<p><strong>Q: How can I make my regex patterns more readable?</strong> A: Use the <code>re.VERBOSE</code> flag to write patterns across multiple lines with comments :</p>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'''</span></span>
<span id="cb45-2"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    \d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{3}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">  # Area code</span></span>
<span id="cb45-3"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    -      # Separator</span></span>
<span id="cb45-4"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    \d</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{4}</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">  # Number</span></span>
<span id="cb45-5"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>, re.VERBOSE)</span></code></pre></div>
<p><strong>Q: Is there a performance impact with complex regex?</strong> A: Yes, poorly written patterns can be slow. The <code>re</code> module caches the last 512 compiled patterns for efficiency. For frequently used patterns, compile them once and reuse.</p>
</section>
<section id="share-your-experience" class="level1">
<h1><strong>Share Your Experience!</strong></h1>
<p>Found this guide helpful? Have questions or suggestions? I‚Äôd love to hear from you! Drop a comment below or share this article with fellow Python learners. Remember, we‚Äôre all learning together, and your feedback helps make these guides better for everyone.</p>
<p>Follow me for more beginner-friendly Python tutorials, and don‚Äôt forget to bookmark this page for quick reference!</p>
</section>
<section id="references" class="level1">
<h1><strong>References</strong></h1>
<ol type="1">
<li><p><a href="https://docs.python.org/3/library/re.html">Python Software Foundation. ‚Äúre ‚Äî Regular expression operations.‚Äù Python Documentation.</a></p></li>
<li><p><a href="https://docs.python.org/3/howto/regex.html">Python Software Foundation. ‚ÄúRegular Expression HOWTO.‚Äù Python Documentation.</a></p></li>
<li><p><a href="https://realpython.com/regex-python/">Real Python. ‚ÄúRegular Expressions: Regexes in Python.‚Äù</a></p></li>
<li><p><a href="https://automatetheboringstuff.com/2e/chapter7/">Sweigart, Al. ‚ÄúAutomate the Boring Stuff with Python.‚Äù Chapter 7: Pattern Matching with Regular Expressions.</a></p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-09/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Regex in Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-09/</guid>
  <pubDate>Wed, 09 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Calculate Difference Between Rows in R Using diff()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-07/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>This tutorial explains how to use R‚Äôs diff() function to calculate differences between consecutive values in your data. You‚Äôll learn the basic syntax, see practical examples with vectors and data frames, and understand common applications and pitfalls. All visualizations use base R graphics with code samples.</p>
</blockquote>
<section id="what-is-diff-and-what-does-it-do" class="level1">
<h1>What is diff() and What Does It Do?</h1>
<p>The <code>diff()</code> function in R calculates the differences between consecutive elements in a vector, data frame, or time series. It subtracts each element from the next one, giving you a result that shows how values change from one position to the next.</p>
</section>
<section id="basic-syntax-and-parameters" class="level1">
<h1>Basic Syntax and Parameters</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">differences =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ...)</span></code></pre></div>
<p>Here‚Äôs what each parameter means:</p>
<ul>
<li><strong>x</strong>: The input data (vector, data frame, time series)</li>
<li><strong>lag</strong>: How many positions to look back when calculating differences (default is 1)</li>
<li><strong>differences</strong>: How many times to apply the differencing operation (default is 1)</li>
<li><strong>‚Ä¶</strong>: Additional arguments for specific methods</li>
</ul>
</section>
<section id="simple-vector-examples" class="level1">
<h1>Simple Vector Examples</h1>
<p>Let‚Äôs start with a basic example using a numeric vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector</span></span>
<span id="cb2-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences</span></span>
<span id="cb2-5">dx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dx)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5  5 -2  7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5 5 -2 7</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the differences using base R</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb4-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb4-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Vector"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(dx, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb4-10">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Difference"</span>,</span>
<span id="cb4-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plot of First Differences using diff()"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The function calculates: - 15 - 10 = 5 - 20 - 15 = 5 - 18 - 20 = -2 - 25 - 18 = 7</p>
</section>
<section id="working-with-data-frames" class="level1">
<h1>Working with Data Frames</h1>
<p>When you apply <code>diff()</code> to a data frame, it calculates differences for each column separately:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame</span></span>
<span id="cb6-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences</span></span>
<span id="cb6-5">diff_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>()</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a  b
1 2 -2
2 3  5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot differences for each column</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up 2 plots stacked vertically</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot column 'a' differences</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diff of a"</span>,</span>
<span id="cb8-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Column 'a' Differences"</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot column 'b' differences</span></span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkred"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diff of b"</span>,</span>
<span id="cb8-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Column 'b' Differences"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset the plotting layout</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>This code would produce two plots showing: - Column a: (4 - 2 = 2, 7 - 4 = 3) - Column b: (3 - 5 = -2, 8 - 3 = 5)</p>
</section>
<section id="time-series-applications" class="level1">
<h1>Time Series Applications</h1>
<p>The <code>diff()</code> function is very useful for time series analysis to:</p>
<ol type="1">
<li><strong>Remove trends</strong>: Taking the first difference can make a trending series more stationary</li>
<li><strong>Calculate returns</strong>: In finance, to compute price changes or returns</li>
<li><strong>Identify patterns</strong>: See how values change over time</li>
</ol>
<p>Example with a trending time series:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time series</span></span>
<span id="cb10-2">ts_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences</span></span>
<span id="cb10-5">diff_ts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(ts_data)</span>
<span id="cb10-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff_ts)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time Series:
Start = 2001 
End = 2004 
Frequency = 1 
[1]  5  5 10 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5 5 10 10</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the time series and its differences</span></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original time series</span></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(ts_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgreen"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb12-8">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb12-9">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Time Series"</span>)</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Differenced time series</span></span>
<span id="cb12-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgreen"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb12-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Difference"</span>,</span>
<span id="cb12-14">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Differences of Time Series"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
</section>
<section id="using-the-lag-parameter" class="level1">
<h1>Using the lag Parameter</h1>
<p>The <code>lag</code> parameter controls how many positions apart the values should be when calculating differences. This is useful for seasonal data or when you want to compare values at specific intervals.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create seasonal data</span></span>
<span id="cb14-2">seasonal_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences with lag=1 and lag=2</span></span>
<span id="cb14-5">diff1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(seasonal_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-6">diff2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(seasonal_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot differences with different lags</span></span>
<span id="cb14-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lag 1 differences</span></span>
<span id="cb14-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Difference"</span>,</span>
<span id="cb14-14">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Differences with lag = 1"</span>)</span>
<span id="cb14-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a reference line at y=0</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lag 2 differences</span></span>
<span id="cb14-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-19">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Difference"</span>,</span>
<span id="cb14-20">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Differences with lag = 2"</span>)</span>
<span id="cb14-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a reference line at y=0</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>With <code>lag = 2</code>, each value is compared to the value from two positions earlier: - For lag=1: 20-10, 15-20, 25-15, 20-25, 30-20 - For lag=2: 15-10, 25-20, 20-15, 30-25</p>
</section>
<section id="multiple-differences" class="level1">
<h1>Multiple Differences</h1>
<p>You can apply differencing multiple times by setting the <code>differences</code> parameter. This is useful for achieving stationarity in time series with strong trends.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector with quadratic growth</span></span>
<span id="cb16-2">vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate first and second differences</span></span>
<span id="cb16-5">diff1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">differences =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First difference</span></span>
<span id="cb16-6">diff2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">differences =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second difference</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 4 5 8 13</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  4  5  8 13</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 1 3 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot original data and differences</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original data</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb20-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb20-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First difference</span></span>
<span id="cb20-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb20-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Diff"</span>,</span>
<span id="cb20-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Differences"</span>)</span>
<span id="cb20-13"></span>
<span id="cb20-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second difference</span></span>
<span id="cb20-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb20-16">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Second Diff"</span>,</span>
<span id="cb20-17">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Second Differences"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The second difference calculates the differences of the differences: - First differences: 4, 5, 8, 13 - Second differences (differences of differences): 1, 3, 5</p>
</section>
<section id="financial-applications" class="level1">
<h1>Financial Applications</h1>
<p>In finance, <code>diff()</code> is commonly used to calculate returns from price data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create price data</span></span>
<span id="cb22-2">prices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>)</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate price changes</span></span>
<span id="cb22-5">returns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(prices)</span>
<span id="cb22-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(returns)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 2 -1 4 5 -2 4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2 -1  4  5 -2  4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot prices and returns</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot prices</span></span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(prices, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb24-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Day"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Price"</span>,</span>
<span id="cb24-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stock Price"</span>)</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot returns</span></span>
<span id="cb24-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(returns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkred"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb24-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Day"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Price Change"</span>,</span>
<span id="cb24-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Daily Price Changes"</span>)</span>
<span id="cb24-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reference line at y=0</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
</section>
<section id="common-pitfalls-and-edge-cases" class="level1">
<h1>Common Pitfalls and Edge Cases</h1>
<section id="output-length-is-shorter" class="level2">
<h2 class="anchored" data-anchor-id="output-length-is-shorter">1. Output Length Is Shorter</h2>
<p>The <code>diff()</code> function always returns a vector that is shorter than the input. For a vector of length n, applying <code>diff()</code> once gives a result of length n-1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original vector length:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original vector length: 5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Differenced vector length:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Differenced vector length: 4 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output:</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original vector length: 5</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Differenced vector length: 4</span></span></code></pre></div>
</div>
</section>
<section id="handling-missing-values-na" class="level2">
<h2 class="anchored" data-anchor-id="handling-missing-values-na">2. Handling Missing Values (NA)</h2>
<p>The <code>diff()</code> function propagates <code>NA</code> values. If any element in a pair contains <code>NA</code>, the result for that position will be <code>NA</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create vector with NA values</span></span>
<span id="cb31-2">x_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb31-3">diff_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x_na)</span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff_na)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: NA NA 4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA  4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot to visualize NA handling</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_na, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, </span>
<span id="cb33-3">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Difference"</span>,</span>
<span id="cb33-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diff() with NA Values"</span>)</span>
<span id="cb33-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add grid lines for better readability</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here‚Äôs how NA values affect the results: - diff(c(1, NA)) = NA - diff(c(NA, 3)) = NA - diff(c(3, 7)) = 4</p>
</section>
<section id="empty-results" class="level2">
<h2 class="anchored" data-anchor-id="empty-results">3. Empty Results</h2>
<p>If your input is too short compared to the <code>lag</code> parameter, you might get an empty result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">short_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb34-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(short_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns an empty vector</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numeric(0)</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<ol type="1">
<li><strong>Check output length</strong>: Remember that the output will be shorter than input</li>
<li><strong>Handle NA values</strong>: Clean your data before using <code>diff()</code> or handle NAs in the results</li>
<li><strong>Align with original data</strong>: If you need to plot or compare with original data, you might need to add NA values to maintain alignment</li>
<li><strong>Verify lag value</strong>: Make sure your lag parameter makes sense for your data‚Äôs pattern</li>
</ol>
</section>
<section id="quick-summary" class="level1">
<h1>Quick Summary</h1>
<ul>
<li><code>diff()</code> calculates the differences between consecutive elements</li>
<li>Basic syntax: <code>diff(x, lag = 1, differences = 1)</code></li>
<li>Works with vectors, data frames, and time series</li>
<li>Output is always shorter than input by <code>lag √ó differences</code></li>
<li>Useful for trend removal, calculating returns, and finding patterns in data</li>
<li>Base R plotting functions like <code>plot()</code> with appropriate parameters provide clear visualization of differences</li>
</ul>
<p>With the <code>diff()</code> function and base R plotting, you can easily track and visualize changes in your data, remove trends, and prepare data for further analysis.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>The following references provide additional information about using the diff() function in R and time series analysis:</p>
<ol type="1">
<li><p>R Cookbook, 2nd Edition. (n.d.). <a href="https://rc2e.com/timeseriesanalysis">Time Series Analysis</a>. RC2E.</p></li>
<li><p>R-Bloggers. (2023, June). <a href="https://www.r-bloggers.com/2023/06/mastering-the-power-of-rs-diff-function-a-programmers-guide/">Mastering the Power of R‚Äôs diff() Function: A Programmer‚Äôs Guide</a>. R-Bloggers.</p></li>
<li><p>Coghlan, A. (n.d.). <a href="https://a-little-book-of-r-for-time-series.readthedocs.io/en/latest/src/timeseries.html">A Little Book of R for Time Series</a>. ReadTheDocs.</p></li>
</ol>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>See the diff()Rence with R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-07/</guid>
  <pubDate>Mon, 07 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Use xtabs() in R to Calculate Frequencies: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-06-30/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Working with frequency tables is a common task in data analysis, and R provides several ways to create them. The <strong>xtabs()</strong> function stands out as a powerful tool that uses a formula interface to create contingency tables from your data. Whether you‚Äôre counting occurrences of categories or creating complex cross-tabulations, <strong>xtabs()</strong> makes the process straightforward and flexible.</p>
<p>In this guide, we‚Äôll explore how to use <strong>xtabs()</strong> effectively, starting with basic syntax and moving through practical examples. You‚Äôll learn how to create simple frequency tables, handle multiple variables, work with weighted data, and solve common problems that R programmers encounter.</p>
</section>
<section id="what-is-xtabs" class="level1">
<h1>What is xtabs()?</h1>
<p>The <strong>xtabs()</strong> function creates contingency tables (also called cross-tabulation tables or crosstabs) by counting combinations of factor levels in your data . Think of it as a way to summarize how often different combinations of categories appear together.</p>
<p>What makes <strong>xtabs()</strong> special is its formula interface. Instead of passing individual vectors like you would with <code>table()</code>, you can work directly with data frames using a simple formula notation .</p>
</section>
<section id="basic-syntax" class="level1">
<h1>Basic Syntax</h1>
<p>Here‚Äôs the basic syntax for <strong>xtabs()</strong>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(formula, data, subset, na.action, exclude, drop.unused.levels, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sparse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>Let‚Äôs break down the main parameters:</p>
<ul>
<li><strong>formula</strong>: A formula like <code>~ var1 + var2</code> that describes which variables to cross-tabulate</li>
<li><strong>data</strong>: Your data frame containing the variables</li>
<li><strong>subset</strong>: Optional - select specific rows to include</li>
<li><strong>na.action</strong>: How to handle missing values (NA)</li>
<li><strong>exclude</strong>: Values to exclude from the table</li>
<li><strong>drop.unused.levels</strong>: Whether to remove unused factor levels</li>
<li><strong>sparse</strong>: Return a sparse matrix (useful for large tables)</li>
</ul>
</section>
<section id="simple-examples" class="level1">
<h1>Simple Examples</h1>
<section id="single-variable-frequency-table" class="level2">
<h2 class="anchored" data-anchor-id="single-variable-frequency-table">Single Variable Frequency Table</h2>
<p>Let‚Äôs start with the simplest case - counting frequencies for one variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">survey_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>)</span>
<span id="cb2-4">)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create frequency table</span></span>
<span id="cb2-7">product_freq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> survey_data)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(product_freq)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Product
A B C 
5 3 2 </code></pre>
</div>
</div>
</section>
<section id="two-variable-cross-tabulation" class="level2">
<h2 class="anchored" data-anchor-id="two-variable-cross-tabulation">Two-Variable Cross-Tabulation</h2>
<p>Now let‚Äôs look at relationships between two variables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data with two variables</span></span>
<span id="cb4-2">survey_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gender =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, </span>
<span id="cb4-4">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cross-tabulation</span></span>
<span id="cb4-9">gender_product <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> survey_data)</span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(gender_product)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Product
Gender   A B C
  Female 1 3 1
  Male   3 1 1</code></pre>
</div>
</div>
</section>
</section>
<section id="working-with-data-frames" class="level1">
<h1>Working with Data Frames</h1>
<p>One of the biggest advantages of <strong>xtabs()</strong> over <code>table()</code> is how well it works with data frames . You don‚Äôt need to extract individual columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More complex data frame</span></span>
<span id="cb6-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Region =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, </span>
<span id="cb6-4">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Device =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>,</span>
<span id="cb6-6">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>),</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>)</span>
<span id="cb6-8">)</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count by Region and Device</span></span>
<span id="cb6-11">device_region <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(device_region)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Region
Device    North South
  Desktop     2     2
  Mobile      3     3</code></pre>
</div>
</div>
</section>
<section id="weighted-frequency-tables" class="level1">
<h1>Weighted Frequency Tables</h1>
<p>Sometimes you need to sum values instead of just counting rows. <strong>xtabs()</strong> handles this by putting a variable on the left side of the formula:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum sales by device type</span></span>
<span id="cb8-2">sales_by_device <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_by_device)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Device
Desktop  Mobile 
    710     760 </code></pre>
</div>
</div>
<p>This sums the <code>Sales</code> values for each device type instead of just counting occurrences.</p>
<p>For a two-way weighted table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum sales by device and region</span></span>
<span id="cb10-2">sales_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Region
Device    North South
  Desktop   400   310
  Mobile    440   320</code></pre>
</div>
</div>
</section>
<section id="three-way-tables" class="level1">
<h1>Three-Way Tables</h1>
<p><strong>xtabs()</strong> can handle multiple dimensions easily:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a time period variable</span></span>
<span id="cb12-2">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Period <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, </span>
<span id="cb12-3">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Three-way table</span></span>
<span id="cb12-6">three_way <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Period, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(three_way)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , Period = Q1

         Region
Device    North South
  Desktop     2     0
  Mobile      3     0

, , Period = Q2

         Region
Device    North South
  Desktop     0     2
  Mobile      0     3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use ftable() for better display</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftable</span>(three_way))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               Period Q1 Q2
Device  Region             
Desktop North          2  0
        South          0  2
Mobile  North          3  0
        South          0  3</code></pre>
</div>
</div>
<p>The <code>ftable()</code> function creates a ‚Äúflat‚Äù table that‚Äôs easier to read when you have three or more variables .</p>
</section>
<section id="including-na-values" class="level1">
<h1>Including NA Values</h1>
<p>By default, <strong>xtabs()</strong> might exclude rows with missing values. To include them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data with NA values</span></span>
<span id="cb16-2">data_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>),</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>)</span>
<span id="cb16-5">)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Include NA as a category</span></span>
<span id="cb16-8">with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Category <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_with_na, </span>
<span id="cb16-9">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.action =</span> na.pass)</span>
<span id="cb16-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(with_na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Group
Category X Y
       A 1 2
       B 1 1
       C 0 1</code></pre>
</div>
</div>
<p>Setting <code>na.action = na.pass</code> ensures that NA values appear in your table .</p>
</section>
<section id="dynamic-column-selection" class="level1">
<h1>Dynamic Column Selection</h1>
<p>When you need to select columns programmatically, use <code>as.formula()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to create frequency table for any column</span></span>
<span id="cb18-2">create_freq_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, col_name) {</span>
<span id="cb18-3">  formula_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~"</span>, col_name)</span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.formula</span>(formula_str), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data)</span>
<span id="cb18-5">}</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the function</span></span>
<span id="cb18-8">my_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product"</span></span>
<span id="cb18-9">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_freq_table</span>(survey_data, my_col)</span>
<span id="cb18-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Product
A B C 
4 4 2 </code></pre>
</div>
</div>
<p>This technique is useful when building interactive applications or processing multiple columns.</p>
</section>
<section id="converting-output-to-data-frame" class="level1">
<h1>Converting Output to Data Frame</h1>
<p>The output of <strong>xtabs()</strong> is a special table object. To convert it for further analysis:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a frequency table</span></span>
<span id="cb20-2">freq_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> survey_data)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data frame</span></span>
<span id="cb20-5">freq_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(freq_table)</span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(freq_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Gender Product Freq
1 Female       A    1
2   Male       A    3
3 Female       B    3
4   Male       B    1
5 Female       C    1
6   Male       C    1</code></pre>
</div>
</div>
</section>
<section id="common-problems-and-solutions" class="level1">
<h1>Common Problems and Solutions</h1>
<section id="calculating-means-instead-of-sums" class="level2">
<h2 class="anchored" data-anchor-id="calculating-means-instead-of-sums">1. <strong>Calculating Means Instead of Sums</strong></h2>
<p><strong>xtabs()</strong> only sums values, not averages them . To get means:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get sums and counts</span></span>
<span id="cb22-2">sum_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb22-3">count_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate means</span></span>
<span id="cb22-6">mean_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sum_table <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count_table</span>
<span id="cb22-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(mean_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Device
 Desktop   Mobile 
177.5000 126.6667 </code></pre>
</div>
</div>
</section>
<section id="removing-unused-factor-levels" class="level2">
<h2 class="anchored" data-anchor-id="removing-unused-factor-levels">2. <strong>Removing Unused Factor Levels</strong></h2>
<p>If your factors have levels with no data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove unused levels before creating table</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sales_data$Device &lt;- droplevels(sales_data$Device)</span></span>
<span id="cb24-3">clean_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb24-4">clean_table</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Device
Desktop  Mobile 
      4       6 </code></pre>
</div>
</div>
</section>
<section id="group-wise-tables" class="level2">
<h2 class="anchored" data-anchor-id="group-wise-tables">3. <strong>Group-wise Tables</strong></h2>
<p>To create separate tables for each group:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split by region and create tables</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">by</span>(sales_data, sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Region, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(subset) {</span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> subset)</span>
<span id="cb26-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sales_data$Region: North
Device
Desktop  Mobile 
      2       3 
------------------------------------------------------------ 
sales_data$Region: South
Device
Desktop  Mobile 
      2       3 </code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Here‚Äôs a practice problem to test your understanding:</p>
<p><strong>Problem:</strong> Given the following data frame, create a weighted frequency table showing total scores by student grade and subject. Then, calculate the average score for each grade-subject combination.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">student_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb28-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>),</span>
<span id="cb28-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Subject =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, </span>
<span id="cb28-4">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>),</span>
<span id="cb28-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb28-6">)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create weighted frequency table (sum of scores)</span></span>
<span id="cb29-2">score_sums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Grade <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Subject, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> student_data)</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum of scores:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sum of scores:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(score_sums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Subject
Grade Math Science
    A  173     187
    B  160     173
    C   75      79</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Create count table</span></span>
<span id="cb33-2">count_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Grade <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Subject, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> student_data)</span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Count of students:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nCount of students:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(count_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Subject
Grade Math Science
    A    2       2
    B    2       2
    C    1       1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Calculate averages</span></span>
<span id="cb37-2">avg_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> score_sums <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count_table</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Average scores:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nAverage scores:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(avg_scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Subject
Grade Math Science
    A 86.5    93.5
    B 80.0    86.5
    C 75.0    79.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bonus: Convert to data frame for easier viewing</span></span>
<span id="cb41-2">avg_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(avg_scores)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(avg_df)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AvgScore"</span></span>
<span id="cb41-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">As data frame:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nAs data frame:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(avg_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Grade Subject AvgScore
1     A    Math     86.5
2     B    Math     80.0
3     C    Math     75.0
4     A Science     93.5
5     B Science     86.5
6     C Science     79.0</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<blockquote class="blockquote">
<p><strong>Key Points to Remember:</strong></p>
</blockquote>
<ul>
<li><strong>xtabs()</strong> uses formula notation (<code>~</code>) to specify variables</li>
<li>Put variables on the right side of <code>~</code> to count frequencies</li>
<li>Put a numeric variable on the left side to sum values</li>
<li>Use <code>data =</code> parameter to work directly with data frames</li>
<li>Add <code>na.action = na.pass</code> to include NA values in tables</li>
<li>Use <code>as.formula()</code> for dynamic column selection</li>
<li>Convert to data frame with <code>as.data.frame()</code> for further processing</li>
<li>For means, divide sum tables by count tables</li>
<li>Use <code>ftable()</code> to display multi-dimensional tables clearly</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <strong>xtabs()</strong> function provides a flexible and powerful way to create frequency tables in R. Its formula interface makes it particularly convenient when working with data frames, and its ability to handle weighted frequencies and multiple dimensions makes it suitable for a wide range of data analysis tasks.</p>
<p>Remember that while <strong>xtabs()</strong> excels at creating frequency and sum tables, you‚Äôll need to combine it with other functions for more complex aggregations like means or medians. By mastering <strong>xtabs()</strong> alongside complementary functions like <code>ftable()</code> and data frame conversions, you‚Äôll be well-equipped to handle any frequency analysis task in R.</p>
<p><strong>Ready to put xtabs() to work?</strong> Start by applying it to your own datasets, experiment with different formula combinations, and don‚Äôt forget to explore how it integrates with your broader data analysis workflow!</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: What‚Äôs the difference between xtabs() and table()?</strong><br>
A: The main difference is that <strong>xtabs()</strong> uses a formula interface and works directly with data frames using the <code>data =</code> parameter, while <code>table()</code> requires you to pass individual vectors. <strong>xtabs()</strong> is generally more convenient for data frame operations.</p>
<p><strong>Q2: Can xtabs() calculate percentages directly?</strong><br>
A: No, <strong>xtabs()</strong> creates count or sum tables. To get percentages, use <code>prop.table()</code> on the result: <code>prop.table(xtabs(~ var1 + var2, data = mydata))</code>.</p>
<p><strong>Q3: How do I handle very large tables with xtabs()?</strong><br>
A: For large tables, set <code>sparse = TRUE</code> to return a sparse matrix, which uses less memory. This is especially useful when many combinations have zero counts.</p>
<p><strong>Q4: Can I use xtabs() with continuous variables?</strong><br>
A: Yes, but you should first convert continuous variables to categories using <code>cut()</code> or similar functions. Otherwise, you‚Äôll get a separate count for each unique value.</p>
<p><strong>Q5: How do I save xtabs() output to a CSV file?</strong><br>
A: First convert to a data frame, then use <code>write.csv()</code>: <code>write.csv(as.data.frame(my_xtabs), "output.csv")</code>.</p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did this guide help you understand <strong>xtabs()</strong> better? We‚Äôd love to hear about your experiences using it in your R projects! Share your favorite use cases or any creative applications you‚Äôve discovered in the comments below, or connect with us on social media to join the conversation with other R programmers.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><p><a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/xtabs.html">https://stat.ethz.ch/R-manual/R-devel/library/stats/html/xtabs.html</a></p></li>
<li><p><a href="https://www.statology.org/xtabs-in-r/">https://www.statology.org/xtabs-in-r/</a></p></li>
<li><p><a href="https://www.r-bloggers.com/2023/06/mastering-data-aggregation-with-xtabs-in-r/">https://www.r-bloggers.com/2023/06/mastering-data-aggregation-with-xtabs-in-r/</a></p></li>
</ul>
<hr>
<p>Happy Coding! üöÄ</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-30/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>xtabs() in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-06-30/</guid>
  <pubDate>Mon, 30 Jun 2025 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
