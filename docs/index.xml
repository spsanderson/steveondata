<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.553</generator>
<lastBuildDate>Wed, 08 May 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>How to Select Columns by Index in R (Using Base R)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-08/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with data frames in R, it’s common to need to select specific columns based on their index positions. This task is straightforward in R, especially with base functions. In this article, we’ll explore how to select columns by their index using simple and effective techniques in base R.</p>
</section>
<section id="understanding-column-indexing" class="level1">
<h1>Understanding Column Indexing</h1>
<p>In R, data frames are structured with rows and columns. Columns can be referred to by their names or their numerical indices. The index of a column in a data frame represents its position from left to right, starting with 1.</p>
</section>
<section id="selecting-columns-by-index" class="level1">
<h1>Selecting Columns by Index</h1>
<p>To select columns by their indices, we can use the square bracket <code>[ ]</code> notation. This notation allows us to specify which columns we want to extract from a data frame based on their index positions.</p>
<p>Let’s dive into some examples.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-selecting-single-column-by-index" class="level2">
<h2 class="anchored" data-anchor-id="example-1-selecting-single-column-by-index">Example 1: Selecting Single Column by Index</h2>
<p>Suppose we have a data frame <code>df</code> with several columns, and we want to select the second column. Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the second column by index (Age)</span></span>
<span id="cb1-9">selected_column <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_column)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 25 30 28</code></pre>
</div>
</div>
<p>In this code snippet:</p>
<ul>
<li><code>df[, 2]</code> specifies that we want to select all rows (<code>[,]</code>) from the second column (<code>2</code>) of the data frame <code>df</code>.</li>
<li>The result (<code>selected_column</code>) will be a vector containing the values from the “Age” column.</li>
</ul>
</section>
<section id="example-2-selecting-multiple-columns-by-indices" class="level2">
<h2 class="anchored" data-anchor-id="example-2-selecting-multiple-columns-by-indices">Example 2: Selecting Multiple Columns by Indices</h2>
<p>To select multiple columns simultaneously, you can provide a vector of column indices within the square brackets. For instance, if we want to select the first and third columns from <code>df</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the first and third columns by indices (Name and Score)</span></span>
<span id="cb3-2">selected_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_columns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Score
1   Alice    88
2     Bob    92
3 Charlie    75</code></pre>
</div>
</div>
<p>In this example:</p>
<ul>
<li><code>df[, c(1, 3)]</code> selects all rows (<code>[,]</code>) from the first and third columns (<code>c(1, 3)</code>) of the data frame <code>df</code>.</li>
<li>The result (<code>selected_columns</code>) will be a subset of <code>df</code> containing only the “Name” and “Score” columns.</li>
</ul>
</section>
<section id="example-3-selecting-all-columns-except-one" class="level2">
<h2 class="anchored" data-anchor-id="example-3-selecting-all-columns-except-one">Example 3: Selecting All Columns Except One</h2>
<p>If you want to exclude specific columns while selecting all others, you can use negative indexing. For instance, to select all columns except the second one:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select all columns except the second one (Age)</span></span>
<span id="cb5-2">selected_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(selected_columns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Score
1   Alice    88
2     Bob    92
3 Charlie    75</code></pre>
</div>
</div>
<p>Here:</p>
<ul>
<li><code>df[, -2]</code> selects all rows (<code>[,]</code>) from <code>df</code>, excluding the second column (<code>-2</code>).</li>
<li>The result (<code>selected_columns</code>) will be a data frame containing columns “Name” and “Score”, excluding “Age”.</li>
</ul>
</section>
</section>
<section id="conclusion-and-challenge" class="level1">
<h1>Conclusion and Challenge</h1>
<p>Selecting columns by index is a fundamental operation in data manipulation with R. By understanding how to use basic indexing techniques, you can efficiently extract and work with specific subsets of your data frames.</p>
<p>I encourage you to experiment with these examples using your own data frames. Try selecting different combinations of columns or excluding specific ones to see how it affects your data subset. This hands-on approach will deepen your understanding and confidence in working with R’s data structures.</p>
<p>Keep exploring, and happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-08/</guid>
  <pubDate>Wed, 08 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Counting NA Values in Each Column: Comparing Methods in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-07/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome back, R enthusiasts! Today, we’re going to explore a fundamental task in data analysis: counting the number of missing (NA) values in each column of a dataset. This might seem straightforward, but there are different ways to achieve this using different packages and methods in R.</p>
<p>Let’s dive right in and compare how to accomplish this task using base R, dplyr, and data.table. Each method has its own strengths and can cater to different preferences and data handling scenarios.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>First up, let’s tackle this using base R functions. We’ll leverage the <code>colSums()</code> function along with <code>is.na()</code> to count NA values in each column of a dataframe.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dataframe</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using base R</span></span>
<span id="cb1-9">na_counts_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df))</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>A B C 
1 2 2 </code></pre>
</div>
</div>
<p>In this code snippet, <code>is.na(df)</code> creates a logical matrix indicating NA positions in <code>df</code>. <code>colSums()</code> then sums up the TRUE values (which represent NA) across each column, giving us the count of NAs per column. Simple and effective!</p>
</section>
<section id="using-base-r-with-lapply" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r-with-lapply">Using Base R (with lapply)</h2>
<p>To adapt this method for base R, we can directly apply <code>lapply()</code> to the dataframe (<code>df</code>) to achieve the same result.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using base R and lapply</span></span>
<span id="cb3-2">na_counts_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(df, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$A
[1] 1

$B
[1] 2

$C
[1] 2</code></pre>
</div>
</div>
<p>In this snippet, <code>lapply(df, function(x) sum(is.na(x)))</code> applies the function <code>function(x) sum(is.na(x))</code> to each column of the dataframe (<code>df</code>), resulting in a list of NA counts per column.</p>
</section>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>Now, let’s switch gears and utilize the popular <code>dplyr</code> package to achieve the same task in a more streamlined manner.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using dplyr</span></span>
<span id="cb5-4">na_counts_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_all</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.)))</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A B C
1 1 2 2</code></pre>
</div>
</div>
<p>Here, <code>summarise_all()</code> from <code>dplyr</code> applies the <code>sum(is.na(.))</code> function to each column (<code>.</code> represents each column in this context), providing us with the count of NA values in each. This approach is clean and fits well into a tidyverse workflow.</p>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using data.table</h2>
<p>Last but not least, let’s see how to accomplish this using <code>data.table</code>, a powerful package known for its efficiency with large datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert dataframe to data.table</span></span>
<span id="cb7-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count NA values in each column using data.table</span></span>
<span id="cb7-7">na_counts_data_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x)))]</span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(na_counts_data_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       A     B     C
   &lt;int&gt; &lt;int&gt; &lt;int&gt;
1:     1     2     2</code></pre>
</div>
</div>
<p>In this snippet, <code>lapply(.SD, function(x) sum(is.na(x)))</code> within <code>data.table</code> allows us to apply the <code>sum(is.na())</code> function to each column (<code>.SD</code> represents the Subset of Data for each group, which in this case is each column).</p>
</section>
</section>
<section id="which-method-to-choose" class="level1">
<h1>Which Method to Choose?</h1>
<p>Now that we’ve explored three different methods to count NA values in each column, you might be wondering which one to use. The answer depends on your preference, the complexity of your dataset, and the packages you’re comfortable working with.</p>
<ul>
<li><strong>Base R</strong> is straightforward and doesn’t require additional packages.</li>
<li><strong>dplyr</strong> is excellent for working within the tidyverse, especially if you’re already using other tidy tools.</li>
<li><strong>data.table</strong> shines with large datasets due to its efficiency and syntax.</li>
</ul>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>I encourage you to try out these methods with your own datasets. Experimenting with different approaches will not only deepen your understanding of R but also empower you to handle data more efficiently.</p>
<p>That’s it for today! I hope you found this comparison helpful. Remember, the best method is the one that suits your specific needs and workflow. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-07/</guid>
  <pubDate>Tue, 07 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Model Selection with TidyDensity: Understanding AIC for Statistical Distributions</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-06/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data analysis and statistics, one of the key challenges is selecting the best model to describe and analyze your data. This decision is crucial because it impacts the accuracy and reliability of your results. Among the many tools available, the Akaike Information Criterion (AIC) stands out as a powerful method for comparing different models and choosing the most suitable one.</p>
<p>Today we will go through an example of model selection using the AIC, specifically focusing on its application to various statistical distributions available in the TidyDensity package. TidyDensity, a part of the healthyverse ecosystem, offers a comprehensive suite of tools for data analysis in R, including functions to compute AIC scores for different probability distributions.</p>
</section>
<section id="what-is-aic" class="level1">
<h1>What is AIC?</h1>
<p>The Akaike Information Criterion (AIC) is a mathematical tool used for model selection. It balances the goodness of fit of a model with its complexity, penalizing overly complex models to prevent overfitting. In simpler terms, AIC helps us choose the most effective model that explains our data without being too complex.</p>
</section>
<section id="exploring-tidydensitys-distribution-functions" class="level1">
<h1>Exploring TidyDensity’s Distribution Functions</h1>
<p>TidyDensity provides a range of utility functions prefixed with <code>util_</code> that calculate the AIC for specific probability distributions. Let’s take a closer look at some of these functions:</p>
<ul>
<li><p><strong>Beta Distribution (<code>util_beta_aic()</code>):</strong> Computes the AIC for a beta distribution, which is often used to model random variables constrained to the interval [0, 1].</p></li>
<li><p><strong>Binomial Distribution (<code>util_binomial_aic()</code>):</strong> Calculates the AIC for a binomial distribution, commonly used to model the number of successes in a fixed number of independent trials.</p></li>
<li><p><strong>Cauchy Distribution (<code>util_cauchy_aic()</code>):</strong> Computes the AIC for a Cauchy distribution, known for its symmetric bell-shaped curve.</p></li>
<li><p><strong>Exponential Distribution (<code>util_exponential_aic()</code>):</strong> Determines the AIC for an exponential distribution, frequently used to model the time between events in a Poisson process.</p></li>
<li><p><strong>Normal Distribution (<code>util_normal_aic()</code>):</strong> Computes the AIC for a normal distribution, which is ubiquitous in statistics due to the central limit theorem.</p></li>
</ul>
<p>These are just a few examples of the distribution-specific AIC functions available in TidyDensity. Each function evaluates the goodness of fit of a particular distribution to your data and provides an AIC score, aiding in the selection of the most appropriate model.</p>
</section>
<section id="how-to-use-aic-for-model-selection" class="level1">
<h1>How to Use AIC for Model Selection</h1>
<p>Using these functions in TidyDensity is straightforward. Simply pass your data to the desired distribution function, and it will return the AIC score. Lower AIC values indicate a better fit, so the distribution with the lowest AIC is typically chosen as the optimal model.</p>
<p>Here’s a simplified example of how you might use these functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load TidyDensity library</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate some sample data</span></span>
<span id="cb1-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute AIC for normal distribution</span></span>
<span id="cb1-8">normal_aic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_aic</span>(data)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute AIC for exponential distribution</span></span>
<span id="cb1-11">cauchy_aic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_cauchy_aic</span>(data)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare AIC scores</span></span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (normal_aic <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> cauchy_aic) {</span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal distribution is a better fit."</span>)</span>
<span id="cb1-16">} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cauchy distribution is a better fit."</span>)</span>
<span id="cb1-18">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Normal distribution is a better fit."</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal AIC: "</span>, normal_aic, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Normal AIC:  285.9777 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cauchy AIC: "</span>, cauchy_aic)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Cauchy AIC:  317.1025</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In conclusion, the Akaike Information Criterion (AIC) plays a crucial role in statistical modeling and model selection. The TidyDensity package enhances this capability by providing specialized functions to compute AIC scores for various probability distributions. By leveraging these functions, data analysts and researchers can make informed decisions about which distribution best describes their data, leading to more robust and accurate statistical analyses.</p>
<p>If you’re interested in harnessing the power of AIC and exploring different probability distributions in R, be sure to check out TidyDensity and incorporate these tools into your data analysis toolkit. Happy modeling!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-06/</guid>
  <pubDate>Mon, 06 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Data with TidyDensity’s tidy_mcmc_sampling()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-03/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the area of statistical modeling and Bayesian inference, Markov Chain Monte Carlo (MCMC) methods are indispensable tools for tackling complex problems. The new <code>tidy_mcmc_sampling()</code> function in the TidyDensity R package simplifies MCMC sampling and visualization, making it accessible to a broader audience of data enthusiasts and analysts.</p>
</section>
<section id="understanding-mcmc" class="level1">
<h1>Understanding MCMC</h1>
<p>Before we dive into the practical use of <code>tidy_mcmc_sampling()</code>, let’s briefly discuss why MCMC is valuable. MCMC methods are particularly useful when dealing with Bayesian statistics, where exact analytical solutions are challenging or impossible due to the complexity of the models involved.</p>
<p>MCMC allows us to draw samples from a probability distribution, especially in cases where direct sampling is impractical. This is achieved by constructing a Markov chain that converges to the desired distribution after a sufficient number of iterations. Once converged, these samples can provide insights into the posterior distribution of parameters, allowing us to make probabilistic inferences.</p>
</section>
<section id="introducing-tidy_mcmc_sampling" class="level1">
<h1>Introducing <code>tidy_mcmc_sampling()</code></h1>
<p>The <code>tidy_mcmc_sampling()</code> function in TidyDensity harnesses the power of MCMC sampling and presents the results in a tidy format, facilitating further analysis and visualization. Let’s explore its usage and capabilities.</p>
</section>
<section id="usage-example" class="level1">
<h1>Usage Example</h1>
<p>Suppose we have a dataset <code>data</code> that we want to analyze using MCMC sampling:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate MCMC samples</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-6">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mcmc_sampling</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"median"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cum_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmedian"</span>)</span>
<span id="cb1-7">result</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$mcmc_data
# A tibble: 4,000 × 3
   sim_number name                 value
   &lt;fct&gt;      &lt;fct&gt;                &lt;dbl&gt;
 1 1          .sample_median    -0.0285 
 2 1          .cum_stat_cmedian -0.0285 
 3 2          .sample_median     0.239  
 4 2          .cum_stat_cmedian  0.105  
 5 3          .sample_median     0.00576
 6 3          .cum_stat_cmedian  0.00576
 7 4          .sample_median    -0.0357 
 8 4          .cum_stat_cmedian -0.0114 
 9 5          .sample_median    -0.111  
10 5          .cum_stat_cmedian -0.0285 
# ℹ 3,990 more rows

$plt</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-05-03/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>In this example: - We generate 100 random normal values using <code>rnorm(100)</code>. - The <code>tidy_mcmc_sampling()</code> function is then applied to this data, specifying that we want to compute the median (<code>"median"</code>) of each MCMC sample and the cumulative median (<code>"cmedian"</code>) across all samples, here the default sample size is 2000.</p>
</section>
<section id="key-arguments" class="level1">
<h1>Key Arguments</h1>
<ul>
<li><strong><code>.x</code>:</strong> The input data vector for MCMC sampling.</li>
<li><strong><code>.fns</code>:</strong> A character vector specifying the function(s) to apply to each MCMC sample. By default, it computes the mean (<code>"mean"</code>), but you can customize this to any function that makes sense for your analysis.</li>
<li><strong><code>.cum_fns</code>:</strong> A character vector specifying the function(s) to apply to the cumulative MCMC samples. The default is to compute the cumulative mean (<code>"cmean"</code>), but you can change this based on your requirements.</li>
<li><strong><code>.num_sims</code>:</strong> The number of MCMC simulations to run. More simulations generally lead to more accurate results but can be computationally expensive. The default is 2000.</li>
</ul>
</section>
<section id="visualizing-results" class="level1">
<h1>Visualizing Results</h1>
<p>The <code>tidy_mcmc_sampling()</code> function not only returns tidy data but also generates a plot to visualize the MCMC samples and cumulative statistics. This visualization is essential for understanding the distribution of samples and how they evolve over iterations.</p>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>If you’re intrigued by the capabilities of MCMC and want to explore it in your data analysis workflow, I encourage you to try out <code>tidy_mcmc_sampling()</code> with your own datasets and custom functions. Experiment with different parameters and visualize the results to gain deeper insights into your data.</p>
<p>In conclusion, <code>tidy_mcmc_sampling()</code> extends the functionality of TidyDensity by offering a user-friendly interface for conducting MCMC sampling and analysis. Whether you’re new to Bayesian statistics or a seasoned practitioner, this function can streamline your workflow and enhance your understanding of complex datasets. Give it a spin and unlock new possibilities in your data exploration journey!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-03/</guid>
  <pubDate>Fri, 03 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Estimating Chisquare Parameters with TidyDensity</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-02/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello R users! Today, let’s explore the latest addition to the TidyDensity package: <code>util_chisquare_param_estimate()</code>. This function is designed to estimate parameters for a Chi-square distribution from your data, providing valuable insights into the underlying distribution characteristics.</p>
</section>
<section id="understanding-the-purpose" class="level1">
<h1>Understanding the Purpose</h1>
<p>The <code>util_chisquare_param_estimate()</code> function is a powerful tool for analyzing data that conforms to a Chi-square distribution. It utilizes maximum likelihood estimation (MLE) to infer the degrees of freedom (dof) and non-centrality parameter (ncp) of the Chi-square distribution based on your input vector.</p>
</section>
<section id="getting-started" class="level1">
<h1>Getting Started</h1>
<p>To begin, let’s generate a dataset that conforms to a Chi-square distribution:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate Chi-square distributed data</span></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rchisq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Call util_chisquare_param_estimate()</span></span>
<span id="cb1-8">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_chisquare_param_estimate</span>(data)</span></code></pre></div>
</div>
<p>By default, the function will automatically generate empirical distribution data if <code>.auto_gen_empirical</code> is set to <code>TRUE</code>. This means you’ll not only get the Chi-square parameters but also a combined table of empirical and Chi-square distribution data.</p>
</section>
<section id="exploring-the-output" class="level1">
<h1>Exploring the Output</h1>
<p>Let’s unpack what the function returns:</p>
<ul>
<li><code>dist_type</code>: Identifies the type of distribution, which will be “Chisquare” for this analysis.</li>
<li><code>samp_size</code>: Indicates the sample size, i.e., the number of data points in your vector <code>.x</code>.</li>
<li><code>min</code>, <code>max</code>, <code>mean</code>: Basic statistics summarizing your data.</li>
<li><code>dof</code>: The estimated degrees of freedom for the Chi-square distribution.</li>
<li><code>ncp</code>: The estimated non-centrality parameter for the Chi-square distribution.</li>
</ul>
<p>This comprehensive output allows you to gain deeper insights into your data’s distribution characteristics, particularly when the Chi-square distribution is a potential model.</p>
<p>Let’s now take a look at the output itself.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-2"></span>
<span id="cb2-3">result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>combined_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 5
Columns: 8
$ sim_number &lt;fct&gt; 1, 1, 1, 1, 1
$ x          &lt;int&gt; 1, 2, 3, 4, 5
$ y          &lt;dbl&gt; 12.716908, 17.334453, 11.913559, 15.252845, 7.208524
$ dx         &lt;dbl&gt; -2.100590, -1.952295, -1.803999, -1.655704, -1.507408
$ dy         &lt;dbl&gt; 2.741444e-05, 3.676673e-05, 4.930757e-05, 6.515313e-05, 8.6…
$ p          &lt;dbl&gt; 0.640, 0.848, 0.576, 0.744, 0.204
$ q          &lt;dbl&gt; 2.765968, 3.205658, 3.297085, 3.567437, 3.869764
$ dist_type  &lt;fct&gt; "Empirical", "Empirical", "Empirical", "Empirical", "Empiri…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>combined_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_distribution_summary_tbl</span>(dist_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2
Columns: 13
$ dist_type  &lt;fct&gt; "Empirical", "Chisquare c(9.961, 1.979)"
$ mean_val   &lt;dbl&gt; 11.95263, 12.04686
$ median_val &lt;dbl&gt; 10.79615, 11.48777
$ std_val    &lt;dbl&gt; 5.438087, 5.349567
$ min_val    &lt;dbl&gt; 2.765968, 1.922223
$ max_val    &lt;dbl&gt; 29.95844, 30.43480
$ skewness   &lt;dbl&gt; 0.9344797, 0.6903444
$ kurtosis   &lt;dbl&gt; 3.790972, 3.243122
$ range      &lt;dbl&gt; 27.19248, 28.51258
$ iqr        &lt;dbl&gt; 7.469292, 7.282262
$ variance   &lt;dbl&gt; 29.57279, 28.61787
$ ci_low     &lt;dbl&gt; 4.010739, 3.997601
$ ci_high    &lt;dbl&gt; 26.33689, 23.60014</code></pre>
</div>
</div>
</section>
<section id="behind-the-scenes-mle-optimization" class="level1">
<h1>Behind the Scenes: MLE Optimization</h1>
<p>Under the hood, the function leverages MLE through the <code>optim()</code> function to estimate the Chi-square parameters. It minimizes the negative log-likelihood function to obtain the best-fitting degrees of freedom (<code>dof</code>) and non-centrality parameter (<code>ncp</code>) for your data.</p>
<p>Initial values for the optimization are intelligently set based on your data’s sample variance and mean, ensuring a robust estimation process.</p>
</section>
<section id="visualizing-the-results" class="level1">
<h1>Visualizing the Results</h1>
<p>One of the strengths of TidyDensity is its seamless integration with visualization tools like <code>ggplot2</code>. With the combined output from <code>util_chisquare_param_estimate()</code>, you can easily create insightful plots that compare the empirical distribution with the estimated Chi-square distribution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">result<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>combined_data_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_combined_autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-05-02/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This example demonstrates how you can visualize the empirical data overlaid with the fitted Chi-square distribution, providing a clear representation of your dataset’s fit to the model.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In summary, <code>util_chisquare_param_estimate()</code> from TidyDensity is a versatile tool for estimating Chi-square distribution parameters from your data. Whether you’re exploring the underlying distribution of your dataset or conducting statistical inference, this function equips you with the necessary tools to gain valuable insights.</p>
<p>If you haven’t already, give it a try and let us know how you’re using TidyDensity to enhance your data analysis workflows! Stay tuned for more updates and insights from the world of R programming. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-02/</guid>
  <pubDate>Thu, 02 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing check_duplicate_rows() from TidyDensity</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-05-01/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today, we’re diving into a useful new function from the TidyDensity R package: <code>check_duplicate_rows()</code>. This function is designed to efficiently identify duplicate rows within a data frame, providing a logical vector that flags each row as either a duplicate or unique. Let’s explore how this function works and see it in action with some illustrative examples.</p>
</section>
<section id="understanding-check_duplicate_rows" class="level1">
<h1>Understanding <code>check_duplicate_rows()</code></h1>
<p>The <code>check_duplicate_rows()</code> function takes a single argument, <code>.data</code>, which should be a data frame. It then compares each row of the data frame to every other row to identify duplicates based on complete row matches.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_duplicate_rows</span>(.data)</span></code></pre></div>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>Let’s start by demonstrating how this function operates with two scenarios: one where there are no duplicate rows, and another where there are duplicate rows with identical values in specific columns.</p>
<section id="example-1-no-duplicates" class="level2">
<h2 class="anchored" data-anchor-id="example-1-no-duplicates">Example 1: No Duplicates</h2>
<p>First, let’s create a data frame where all rows are unique. We’ll use the <code>iris</code> dataset for this example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load required libraries</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame (iris dataset)</span></span>
<span id="cb2-5">data_no_duplicates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for duplicate rows</span></span>
<span id="cb2-8">duplicates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_duplicate_rows</span>(data_no_duplicates)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(duplicates)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>In this case, the <code>duplicates</code> vector will contain only <code>FALSE</code> values, indicating that no rows in <code>iris</code> are exact duplicates of each other.</p>
</section>
<section id="example-2-duplicate-rows" class="level2">
<h2 class="anchored" data-anchor-id="example-2-duplicate-rows">Example 2: Duplicate Rows</h2>
<p>Next, let’s create a scenario where some rows contain identical values in specific columns. We’ll manually construct a data frame for this purpose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame with duplicate rows</span></span>
<span id="cb4-2">data_with_duplicates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for duplicate rows</span></span>
<span id="cb4-9">duplicates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_duplicate_rows</span>(data_with_duplicates)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb4-12">duplicates</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE FALSE FALSE FALSE FALSE  TRUE</code></pre>
</div>
</div>
<p>In this example, the <code>duplicates</code> vector will indicate which rows are duplicates (<code>TRUE</code> for duplicates, <code>FALSE</code> for unique rows). You’ll notice that the last row is flagged as a duplicate because there is the same value for the <code>Age</code> and <code>Score</code> columns.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>check_duplicate_rows()</code> function in the TidyDensity package is a handy tool for identifying duplicate rows within a data frame. It can be particularly useful for data cleaning and quality assurance tasks, ensuring that datasets are free from unintended duplicates that could skew analysis results.</p>
<p>If you work with data frames and want a straightforward way to detect duplicate rows efficiently, consider incorporating <code>check_duplicate_rows()</code> into your R workflow with TidyDensity. This function exemplifies the package’s commitment to providing practical, user-friendly tools for data manipulation and analysis.</p>
<p>That wraps up our overview of <code>check_duplicate_rows()</code>. We hope you find this function useful in your data analysis endeavors! If you have any questions or feedback, feel free to reach out in the comments below. Until next time, happy coding with R!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-05-01/</guid>
  <pubDate>Wed, 01 May 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Quantile Normalization in R with the {TidyDensity} Package</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-30/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data analysis, especially when dealing with multiple samples or distributions, ensuring comparability and removing biases is crucial. One powerful technique for achieving this is quantile normalization. This method aligns the distributions of values across different samples, making them more similar in terms of their statistical properties.</p>
</section>
<section id="what-is-quantile-normalization" class="level1">
<h1>What is Quantile Normalization?</h1>
<p>Quantile normalization is a statistical method used to adjust the distributions of values in different datasets so that they have similar quantiles. This technique is particularly valuable when working with high-dimensional data, such as gene expression data or other omics datasets, where ensuring comparability across samples is essential.</p>
</section>
<section id="introducing-quantile_normalize-in-tidydensity" class="level1">
<h1>Introducing <code>quantile_normalize()</code> in TidyDensity</h1>
<p>The <code>quantile_normalize()</code> function is a new addition to the TidyDensity package, designed to simplify the process of quantile normalization within R. Let’s delve into how this function works and how you can integrate it into your data analysis pipeline.</p>
</section>
<section id="function-usage" class="level1">
<h1>Function Usage</h1>
<p>The <code>quantile_normalize()</code> function takes a numeric matrix as input, where each column represents a sample. Here’s a breakdown of its usage:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile_normalize</span>(.data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><code>.data</code>: A numeric matrix where each column corresponds to a sample that requires quantile normalization.</li>
<li><code>.return_tibble</code>: A logical value (default: <code>FALSE</code>) indicating whether the output should be returned as a tibble.</li>
</ul>
</section>
<section id="understanding-the-output" class="level1">
<h1>Understanding the Output</h1>
<p>When you apply <code>quantile_normalize()</code> to your data, you receive a list object containing the following components:</p>
<ol type="1">
<li><strong>Quantile-Normalized Matrix</strong>: A numeric matrix where each column has been quantile-normalized.</li>
<li><strong>Row Means</strong>: The means of each row across the quantile-normalized matrix.</li>
<li><strong>Sorted Data</strong>: The sorted values used during the quantile normalization process.</li>
<li><strong>Ranked Indices</strong>: The indices of the sorted values.</li>
</ol>
</section>
<section id="how-quantile-normalization-works" class="level1">
<h1>How Quantile Normalization Works</h1>
<p>The <code>quantile_normalize()</code> function performs quantile normalization through the following steps:</p>
<ol type="1">
<li><strong>Sorting</strong>: Each column of the input matrix is sorted.</li>
<li><strong>Row Mean Calculation</strong>: The mean of each row across the sorted columns is computed.</li>
<li><strong>Normalization</strong>: Each column’s sorted values are replaced with the corresponding row means.</li>
<li><strong>Unsorting</strong>: The columns are restored to their original order, ensuring that the quantile-normalized matrix maintains the same structure as the input.</li>
</ol>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>Let’s demonstrate the usage of <code>quantile_normalize()</code> with a simple example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load TidyDensity</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample matrix</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb2-6">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]       [,3]       [,4]
[1,] -0.56047565  0.1106827  0.8377870 -0.3804710
[2,] -0.23017749 -0.5558411  0.1533731 -0.6947070
[3,]  1.55870831  1.7869131 -1.1381369 -0.2079173
[4,]  0.07050839  0.4978505  1.2538149 -1.2653964
[5,]  0.12928774 -1.9666172  0.4264642  2.1689560</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply quantile normalization</span></span>
<span id="cb4-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile_normalize</span>(data)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Access the quantile-normalized matrix</span></span>
<span id="cb4-5">normalized_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> result[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"normalized_data"</span>]]</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the normalized matrix</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(normalized_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]        [,3]       [,4]
[1,] -0.65451945 -0.3180877  0.84500772 -0.6545195
[2,] -0.06327669  0.8450077  1.09078797 -0.9506544
[3,] -1.40880292 -0.5235134  0.33150422  0.0863713
[4,]  0.84500772  1.0907880  0.08637130  0.1991151
[5,] -0.31808774 -0.6545195 -0.06327669  0.3315042</code></pre>
</div>
</div>
<p>Let’s now look at the rest of the output components:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(result[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row_means"</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -1.4088029 -0.9506544 -0.6545195 -0.5235134 -0.3180877</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(result[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duplicated_ranks"</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4]
[1,]    9   13   13    7
[2,]   10   10   12   12
[3,]    2   11    2    9
[4,]   13    9    9    3
[5,]    7    1    1   11</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(result[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duplicated_rank_row_indicies"</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(result[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"duplicated_rank_data"</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]      [,3]       [,4]
[1,] -0.23017749 -0.5558411 0.1533731 -0.6947070
[2,]  0.07050839  0.4978505 1.2538149 -1.2653964
[3,]  0.12928774 -1.9666172 0.4264642  2.1689560
[4,] -0.68685285 -0.2179749 0.8215811 -0.4666554
[5,] -0.44566197 -1.0260044 0.6886403  0.7799651</code></pre>
</div>
</div>
<p>Now, lets take a look at the before and after quantile normalization summary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             V1         V2          V3          V4
0%   -1.2650612 -1.9666172 -1.13813694 -1.26539635
25%  -0.4456620 -1.0260044 -0.06191171 -0.56047565
50%   0.1292877 -0.5558411  0.55391765 -0.38047100
75%   0.4609162  0.1106827  0.83778704 -0.08336907
100%  1.7150650  1.7869131  1.25381492  2.16895597</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(normalized_matrix) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              V1          V2          V3          V4
0%   -1.40880292 -1.40880292 -1.40880292 -1.40880292
25%  -0.52351344 -0.52351344 -0.52351344 -0.52351344
50%  -0.06327669 -0.06327669 -0.06327669 -0.06327669
75%   0.33150422  0.33150422  0.33150422  0.33150422
100%  1.73118725  1.73118725  1.73118725  1.73118725</code></pre>
</div>
</div>
<p>Now let’s use the <code>.return_tibble</code> argument to return the output as a tibble:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile_normalize</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$normalized_data
# A tibble: 13 × 4
        V1      V2      V3      V4
     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;
 1 -0.655  -0.318   0.845  -0.655 
 2 -0.0633  0.845   1.09   -0.951 
 3 -1.41   -0.524   0.332   0.0864
 4  0.845   1.09    0.0864  0.199 
 5 -0.318  -0.655  -0.0633  0.332 
 6  1.73   -0.0633 -0.133  -0.133 
 7 -0.524  -0.133  -0.524  -0.524 
 8 -0.133   1.73    1.73    1.73  
 9  0.332   0.0864  0.199   1.09  
10  1.09   -0.951  -0.655  -0.318 
11 -0.951  -1.41   -0.318  -1.41  
12  0.199   0.199  -1.41    0.845 
13  0.0864  0.332  -0.951  -0.0633

$row_means
# A tibble: 13 × 1
     value
     &lt;dbl&gt;
 1 -1.41  
 2 -0.951 
 3 -0.655 
 4 -0.524 
 5 -0.318 
 6 -0.133 
 7 -0.0633
 8  0.0864
 9  0.199 
10  0.332 
11  0.845 
12  1.09  
13  1.73  

$duplicated_ranks
# A tibble: 6 × 4
     V1    V2    V3    V4
  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;
1     9    13    13     7
2    10    10    12    12
3     2    11     2     9
4    13     9     9     3
5     7     1     1    11
6     3     6     7     6

$duplicated_rank_row_indices
# A tibble: 6 × 1
  row_index
      &lt;int&gt;
1         2
2         4
3         5
4         9
5        10
6        12

$duplicated_rank_data
# A tibble: 6 × 4
       V1     V2      V3     V4
    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;
1 -0.230  -0.556  0.153  -0.695
2  0.0705  0.498  1.25   -1.27 
3  0.129  -1.97   0.426   2.17 
4 -0.687  -0.218  0.822  -0.467
5 -0.446  -1.03   0.689   0.780
6  0.360  -0.625 -0.0619 -0.560</code></pre>
</div>
</div>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>In summary, the <code>quantile_normalize()</code> function from the TidyDensity package offers a convenient and efficient way to perform quantile normalization on numeric matrices in R. By leveraging this function, you can enhance the comparability and statistical integrity of your data across multiple samples or distributions. Incorporate <code>quantile_normalize()</code> into your data preprocessing workflow to unlock deeper insights and more robust analyses.</p>
<p>To explore more functionalities of TidyDensity and leverage its capabilities for advanced data analysis tasks, check out the package documentation and experiment with different parameters and options provided by the <code>quantile_normalize()</code> function.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-30/</guid>
  <pubDate>Tue, 30 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Introducing TidyDensity Version 1.4.0: Enhancing Data Analysis in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-29/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m thrilled to announce the release of TidyDensity version 1.4.0, packed with exciting features and improvements to elevate your data analysis experience in R. Let’s dive into what this latest update has to offer.</p>
</section>
<section id="new-features" class="level1">
<h1>New Features</h1>
<section id="quantile-normalization" class="level2">
<h2 class="anchored" data-anchor-id="quantile-normalization">Quantile Normalization</h2>
<p>Say goodbye to skewed data distributions! With the new <code>quantile_normalize()</code> function, you can now easily normalize your data using quantiles, ensuring more accurate and reliable analysis results.</p>
</section>
<section id="duplicate-row-detection" class="level2">
<h2 class="anchored" data-anchor-id="duplicate-row-detection">Duplicate Row Detection</h2>
<p>Data integrity matters, which is why we’ve introduced the <code>check_duplicate_rows()</code> function. Quickly identify and eliminate duplicate rows in your data frame, streamlining your workflow and improving data quality.</p>
</section>
<section id="chi-square-distribution-parameter-estimation" class="level2">
<h2 class="anchored" data-anchor-id="chi-square-distribution-parameter-estimation">Chi-Square Distribution Parameter Estimation</h2>
<p>Estimating parameters for the chi-square distribution is now a breeze with the <code>util_chisquare_param_estimate()</code> function. Empower your statistical analysis with precise parameter estimation capabilities.</p>
</section>
<section id="markov-chain-monte-carlo-mcmc-sampling" class="level2">
<h2 class="anchored" data-anchor-id="markov-chain-monte-carlo-mcmc-sampling">Markov Chain Monte Carlo (MCMC) Sampling</h2>
<p>Unlock the power of Markov Chain Monte Carlo sampling with the new <code>tidy_mcmc_sampling()</code> function. Seamlessly sample from distributions using MCMC, and visualize the results with diagnostic plots for deeper insights into your data.</p>
</section>
<section id="aic-calculation-for-distributions" class="level2">
<h2 class="anchored" data-anchor-id="aic-calculation-for-distributions">AIC Calculation for Distributions</h2>
<p>Making informed model selection decisions just got easier! TidyDensity now includes <code>util_dist_aic()</code> functions to calculate the Akaike Information Criterion (AIC) for various distributions, providing valuable metrics for model evaluation.</p>
</section>
</section>
<section id="minor-fixes-and-improvements" class="level1">
<h1>Minor Fixes and Improvements</h1>
<p>In addition to these exciting new features, we’ve also made several minor fixes and enhancements to further refine your user experience:</p>
<ul>
<li>Enhanced <code>tidy_multi_single_dist()</code> function to respect the <code>.return_tibble</code> parameter.</li>
<li>Improved documentation, including updates related to MCMC usage.</li>
<li>Updated <code>tidy_distribution_comparison()</code> to incorporate AIC calculations from dedicated <code>util_dist_aic()</code> functions.</li>
</ul>
</section>
<section id="upgrade-now" class="level1">
<h1>Upgrade Now!</h1>
<p>Ready to supercharge your data analysis workflow? Upgrade to TidyDensity version 1.4.0 today and take advantage of these powerful new features and enhancements. Whether you’re a seasoned data analyst or just getting started with R, TidyDensity is your go-to toolkit for streamlined and robust data analysis.</p>
<p>As always, we welcome your feedback and suggestions for future improvements. Stay tuned for more updates as we continue to evolve and enhance the TidyDensity package to meet your data analysis needs.</p>
<p>Happy analyzing!</p>
<p><em>Steve, Manager of Applications at Stony Brook Medicine</em></p>
<p><em>Creator and Maintainer of TidyDensity</em></p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-29/</guid>
  <pubDate>Mon, 29 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring strsplit() with Multiple Delimiters in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-26/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data preprocessing and text manipulation tasks, the <code>strsplit()</code> function in R is incredibly useful for splitting strings based on specific delimiters. However, what if you need to split a string using multiple delimiters? This is where <code>strsplit()</code> can really shine by allowing you to specify a regular expression that defines these delimiters. In this blog post, we’ll dive into how you can use <code>strsplit()</code> effectively with multiple delimiters to parse strings in your data.</p>
</section>
<section id="understanding-strsplit" class="level1">
<h1>Understanding <code>strsplit()</code></h1>
<p>The <code>strsplit()</code> function in R is used to split a character vector (or a string) into substrings based on a specified pattern. The general syntax of <code>strsplit()</code> is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(x, split, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fixed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">perl =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">useBytes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<ul>
<li><code>x</code>: The character vector or string to be split.</li>
<li><code>split</code>: The delimiter or regular expression to use for splitting.</li>
<li><code>fixed</code>: If <code>TRUE</code>, <code>split</code> is treated as a fixed string rather than a regular expression.</li>
<li><code>perl</code>: If <code>TRUE</code>, <code>split</code> is treated as a Perl-style regular expression.</li>
<li><code>useBytes</code>: If <code>TRUE</code>, the matching is byte-based rather than character-based.</li>
</ul>
</section>
<section id="splitting-with-multiple-delimiters" class="level1">
<h1>Splitting with Multiple Delimiters</h1>
<p>To split a string using multiple delimiters, we can leverage the power of regular expressions within <code>strsplit()</code>. Regular expressions allow us to define complex patterns that can match various types of strings.</p>
<p>Let’s say we have the following string that contains different types of delimiters: space, comma, and hyphen:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple,orange banana -grape pineapple"</span></span></code></pre></div>
</div>
<p>We want to split this string into individual words based on the delimiters <code>,</code>, <code></code>, and <code>-</code>. Here’s how we can achieve this using <code>strsplit()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[,</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s-]+"</span>)</span>
<span id="cb3-2">result</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "apple"           "orange banana "  "grape pineapple"</code></pre>
</div>
</div>
<p>In this example: - <code>[</code> and <code>]</code> define a character class. - <code>,</code>, <code>\\s</code>, and <code>-</code> inside the character class specify the delimiters we want to use for splitting. - <code>+</code> after the character class means “one or more occurrences”.</p>
</section>
<section id="examples-with-different-delimiters" class="level1">
<h1>Examples with Different Delimiters</h1>
<p>Let’s explore a few more examples to understand how <code>strsplit()</code> handles different scenarios:</p>
<section id="example-1-splitting-with-numbers-as-delimiters" class="level2">
<h2 class="anchored" data-anchor-id="example-1-splitting-with-numbers-as-delimiters">Example 1: Splitting with Numbers as Delimiters</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello123world456R789users"</span></span>
<span id="cb5-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[0-9]+"</span>)</span></code></pre></div>
</div>
<p>In this case, we use <code>[0-9]+</code> to split the string wherever there are one or more consecutive digits. The result will be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">result</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "Hello" "world" "R"     "users"</code></pre>
</div>
</div>
</section>
<section id="example-2-splitting-urls" class="level2">
<h2 class="anchored" data-anchor-id="example-2-splitting-urls">Example 2: Splitting URLs</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.example.com/path/to/page.html"</span></span>
<span id="cb8-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strsplit</span>(url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[:/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.]"</span>)</span></code></pre></div>
</div>
<p>Here, we split the URL based on <code>:</code>, <code>/</code>, and <code>.</code> characters. The result will be:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">result</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
 [1] "https"   ""        ""        "www"     "example" "com"     "path"   
 [8] "to"      "page"    "html"   </code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn-to-experiment" class="level1">
<h1>Your Turn to Experiment</h1>
<p>The best way to truly understand and harness the power of <code>strsplit()</code> with multiple delimiters is to experiment with different strings and patterns. Try splitting strings using various combinations of characters and observe how <code>strsplit()</code> behaves.</p>
<p>By mastering <code>strsplit()</code> and regular expressions, you can efficiently preprocess and manipulate textual data in R, making your data analysis tasks more effective and enjoyable.</p>
<p>So, why not give it a try? Experiment with <code>strsplit()</code> and multiple delimiters on your own datasets to see how this versatile function can streamline your data cleaning workflows. If you want a really good cheat sheet of regular expressions then check out this <a href="https://github.com/rstudio/cheatsheets/blob/main/strings.pdf">one from the stringr package</a> from Posit.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-26/</guid>
  <pubDate>Fri, 26 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplifying Data Manipulation: How to Drop Columns from Data Frames in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-25/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As an R programmer, one of the fundamental tasks you’ll encounter is manipulating data frames. Whether you’re cleaning messy data or preparing it for analysis, knowing how to drop unnecessary columns is a valuable skill. In this guide, we’ll walk through the process of dropping columns from data frames in R, using simple examples to demystify the process.</p>
</section>
<section id="why-drop-columns" class="level1">
<h1>Why Drop Columns?</h1>
<p>Before we dive into the how, let’s briefly touch on the why. Data frames often contain more information than we need for a particular analysis. By dropping irrelevant columns, we can streamline our data and focus only on what’s essential. This not only makes our code cleaner but also improves performance when working with large datasets.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="method-1-using-the-operator" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-the-operator">Method 1: Using the <code>$</code> Operator</h2>
<p>One straightforward way to drop columns from a data frame is by using the <code>$</code> operator. This method is ideal when you know the exact name of the column you want to remove.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop column B</span></span>
<span id="cb1-9">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)]</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the updated data frame</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A C
1 1 7
2 2 8
3 3 9</code></pre>
</div>
</div>
<p>In this example, we create a data frame <code>data</code> with columns A, B, and C. To drop column B, we use the <code>which()</code> function to find the index of column B in the <code>names(data)</code> vector and then remove it using negative indexing.</p>
</section>
<section id="method-2-using-the-subset-function" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-the-subset-function">Method 2: Using the <code>subset()</code> Function</h2>
<p>Another approach to dropping columns is by using the <code>subset()</code> function. This method allows for more flexibility, as you can specify multiple columns to drop at once.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb3-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-6">)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop columns B and C</span></span>
<span id="cb3-9">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">select =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(B, C))</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the updated data frame</span></span>
<span id="cb3-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A
1 1
2 2
3 3</code></pre>
</div>
</div>
<p>In this example, we use the <code>select</code> argument of the <code>subset()</code> function to specify the columns we want to keep. By prepending a minus sign to the column names we want to drop, we effectively remove them from the data frame.</p>
</section>
<section id="method-3-using-the-dplyr-package" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-the-dplyr-package">Method 3: Using the <code>dplyr</code> Package</h2>
<p>For more complex data manipulation tasks, the <code>dplyr</code> package provides a convenient set of functions. One such function is <code>select()</code>, which allows for intuitive column selection and dropping.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dplyr package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb5-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">A =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb5-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">B =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb5-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb5-9">)</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop column B</span></span>
<span id="cb5-12">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(data, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>B)</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the updated data frame</span></span>
<span id="cb5-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  A C
1 1 7
2 2 8
3 3 9</code></pre>
</div>
</div>
<p>In this example, we use the <code>select()</code> function from the <code>dplyr</code> package to drop column B from the data frame. The <code>-B</code> argument specifies that we want to exclude column B from the result.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Dropping columns from data frames in R doesn’t have to be a daunting task. By familiarizing yourself with these simple techniques, you can efficiently clean and manipulate your data with ease. I encourage you to try these examples on your own datasets and experiment with different variations. Remember, the best way to learn is by doing!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-25/</guid>
  <pubDate>Thu, 25 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Practical Guide to Selecting Top N Values by Group in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-24/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data analysis, there often arises a need to extract the top N values within each group of a dataset. Whether you’re dealing with sales data, survey responses, or any other type of grouped data, identifying the top performers or outliers within each group can provide valuable insights. In this tutorial, we’ll explore how to accomplish this task using three popular R packages: dplyr, data.table, and base R. By the end of this guide, you’ll have a solid understanding of various approaches to selecting top N values by group in R.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>dplyr is a powerful package for data manipulation, providing intuitive functions for common data manipulation tasks. To select the top N values by group using dplyr, we’ll use the <code>group_by()</code> and <code>top_n()</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dplyr package</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example dataset</span></span>
<span id="cb1-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top 2 values by group</span></span>
<span id="cb1-11">top_n_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, value)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_n_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
# Groups:   group [2]
  group value
  &lt;chr&gt; &lt;dbl&gt;
1 A        15
2 A        20
3 B        25
4 B        30</code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<ul>
<li>We begin by loading the dplyr package.</li>
<li>We create a sample dataset with two columns: ‘group’ and ‘value’.</li>
<li>Using the <code>%&gt;%</code> (pipe) operator, we first group the data by the ‘group’ column using <code>group_by()</code>.</li>
<li>Then, we use the <code>top_n()</code> function to select the top 2 values within each group based on the ‘value’ column.</li>
<li>Finally, we print the resulting dataset containing the top N values by group.</li>
</ul>
</section>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using data.table</h2>
<p>data.table is another popular package for efficient data manipulation, particularly with large datasets. To achieve the same task using data.table, we’ll use the <code>by</code> argument along with the <code>.SD</code> special symbol.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data.table package</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to data.table</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setDT</span>(data)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top 2 values by group</span></span>
<span id="cb3-8">top_n_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[, .SD[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>value)][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> group]</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_n_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    group value
   &lt;char&gt; &lt;num&gt;
1:      A    20
2:      A    15
3:      B    30
4:      B    25</code></pre>
</div>
</div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation</h3>
<ul>
<li>After loading the data.table package, we convert our data frame to a data.table using <code>setDT()</code>.</li>
<li>We then select the top 2 values within each group by ordering the data in descending order of ‘value’ and selecting the first 2 rows using <code>[1:2]</code>.</li>
<li>The <code>by</code> argument is used to specify grouping by the ‘group’ column.</li>
<li>Finally, we print the resulting dataset containing the top N values by group.</li>
</ul>
</section>
</section>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using base R</h2>
<p>While dplyr and data.table are powerful packages for data manipulation, base R also provides functionality to achieve this task using functions like <code>split()</code> and <code>lapply()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example dataset</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top 2 values by group using base R</span></span>
<span id="cb5-8">top_n_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(data, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group), <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value), ], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert row names to a column</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(top_n_values) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb5-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_n_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  group value
1     A    20
2     A    15
3     B    30
4     B    25</code></pre>
</div>
</div>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation</h3>
<ul>
<li>We start with our sample dataset.</li>
<li>Using <code>split()</code>, we split the dataset into subsets based on the ‘group’ column.</li>
<li>Then, we apply a function using <code>lapply()</code> to each subset, which sorts the values in descending order and selects the top 2 rows using <code>head()</code>.</li>
<li>The resulting subsets are combined into a single data frame using <code>do.call(rbind, ...)</code>.</li>
</ul>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this tutorial, we’ve covered three different methods to select the top N values by group in R using dplyr, data.table, and base R. Each approach has its advantages depending on the complexity of your dataset and your familiarity with the packages. I encourage you to try out these examples with your own data and explore further functionalities offered by these packages for efficient data manipulation. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-24/</guid>
  <pubDate>Wed, 24 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking Row Existence Across Data Frames in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-19/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R users! Today, we’re going to explore a common scenario you might encounter when working with data frames: checking if a row from one data frame exists in another. This is a handy skill that can help you compare datasets and verify data integrity.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-using-merge-function" class="level2">
<h2 class="anchored" data-anchor-id="example-1-using-merge-function">Example 1: Using <code>merge()</code> Function</h2>
<p>Let’s start with our first example. We have two data frames, <code>df1</code> and <code>df2</code>. We want to check if the rows in <code>df1</code> are also present in <code>df2</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frames</span></span>
<span id="cb1-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>))</span>
<span id="cb1-3">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>))</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use merge() to find common rows</span></span>
<span id="cb1-6">common_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(common_rows)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Value
1  2     B
2  3     C</code></pre>
</div>
</div>
</section>
<section id="step-by-step-explanation" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-explanation"><strong>Step-by-Step Explanation:</strong></h2>
<ol type="1">
<li>We create two data frames, <code>df1</code> and <code>df2</code>, each with an ‘ID’ column and a ‘Value’ column.</li>
<li>We use the <code>merge()</code> function to find the common rows between <code>df1</code> and <code>df2</code>.</li>
<li>The result, <code>common_rows</code>, will display rows that exist in both data frames.</li>
</ol>
</section>
<section id="example-2-using-in-operator" class="level2">
<h2 class="anchored" data-anchor-id="example-2-using-in-operator">Example 2: Using <code>%in%</code> Operator</h2>
<p>For our second example, we’ll use the <code>%in%</code> operator to check for the existence of specific values from one data frame in another.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if 'ID' from df1 exists in df2</span></span>
<span id="cb3-2">df1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ExistsInDF2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> df2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ID</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the updated df1 with the existence check</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Value ExistsInDF2
1  1     A       FALSE
2  2     B        TRUE
3  3     C        TRUE</code></pre>
</div>
</div>
</section>
<section id="step-by-step-explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-explanation-1"><strong>Step-by-Step Explanation:</strong></h2>
<ol type="1">
<li>We add a new column to <code>df1</code> named ‘ExistsInDF2’.</li>
<li>The <code>%in%</code> operator checks each ‘ID’ in <code>df1</code> against the ’ID’s in <code>df2</code>.</li>
<li>The new column in <code>df1</code> will show <code>TRUE</code> if the ‘ID’ exists in <code>df2</code> and <code>FALSE</code> otherwise.</li>
</ol>
</section>
</section>
<section id="encouragement-to-try-it-out" class="level1">
<h1>Encouragement to Try It Out</h1>
<p>Now that you’ve seen how it’s done, why not give it a try with your own data frames? It’s a straightforward process that can yield valuable insights into your data. Remember, the best way to learn is by doing, so grab some data and start experimenting!</p>
<p><strong>Tip:</strong> Always double-check your data frames’ structures to ensure the columns you’re comparing are compatible.</p>
<p>Happy coding, and stay curious about your data!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-19/</guid>
  <pubDate>Fri, 19 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Extracting the Last N’th Row in R Data Frames</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-18/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wrangled with a data frame and needed just the final row? Fear not, R warriors! Today’s quest unveils three mighty tools to conquer this task: base R, the dplyr package, and the data.table package.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="method-1-using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-base-r">Method 1: Using Base R</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">my_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last row using nrow() and indexing</span></span>
<span id="cb1-8">last_row_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(my_df), ]</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(last_row_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age
3 Charlie  22</code></pre>
</div>
</div>
<p>Explanation: - We use <code>nrow(my_df)</code> to get the total number of rows in the data frame. - Then, we use indexing (<code>[nrow(my_df), ]</code>) to extract the last row.</p>
</section>
<section id="method-2-using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-dplyr">Method 2: Using dplyr</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last row using tail()</span></span>
<span id="cb3-4">last_row_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(last_row_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age
3 Charlie  22</code></pre>
</div>
</div>
<p>Explanation: - The <code>tail()</code> function from <code>dplyr</code> returns the last <code>n</code> rows of a data frame (default is 6). - We use <code>tail(my_df, 1)</code> to get only the last row.</p>
</section>
<section id="method-3-using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-data.table">Method 3: Using data.table</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to data.table</span></span>
<span id="cb5-4">my_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(my_df)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last row using .N</span></span>
<span id="cb5-7">last_row_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_dt[.N]</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(last_row_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Name   Age
    &lt;char&gt; &lt;num&gt;
1: Charlie    22</code></pre>
</div>
</div>
<p>Explanation: - We convert the data frame to a data.table using <code>as.data.table(my_df)</code>. - The <code>.N</code> special variable in data.table represents the total number of rows. - We use <code>my_dt[.N]</code> to get the last row.</p>
</section>
</section>
<section id="bonus-tip-getting-the-second-to-last-row" class="level1">
<h1>Bonus Tip: Getting the second to last row!</h1>
<p>If you want to get the second to last row, then this is quite easy to do, and in fact is easy to do for any last <code>n</code> rows. Here’s how you can get the second to last row using each method:</p>
<p>Certainly! Let’s explore how to extract the second-to-last row from a data frame using different methods in R. Here’s how you can do it:</p>
<section id="method-1-using-base-r-1" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-base-r-1">Method 1: Using Base R</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb7-2">my_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eva"</span>),</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb7-5">)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the second-to-last row using nrow() and indexing</span></span>
<span id="cb7-8">second_to_last_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(my_df) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(second_to_last_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Age
4 David  28</code></pre>
</div>
</div>
<p>Explanation: - We use <code>nrow(my_df)</code> to get the total number of rows in the data frame. - To extract the second-to-last row, we subtract 1 from the total number of rows.</p>
</section>
<section id="method-2-using-dplyr-1" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-dplyr-1">Method 2: Using dplyr</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the second-to-last row using slice()</span></span>
<span id="cb9-2">second_to_last_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(second_to_last_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Age
1 David  28</code></pre>
</div>
</div>
<p>Explanation: - The <code>slice()</code> function from <code>dplyr</code> allows us to select specific rows. - We use <code>slice(my_df, n() - 1)</code> to get the second-to-last row.</p>
</section>
<section id="method-3-using-data.table-1" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-data.table-1">Method 3: Using data.table</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to data.table</span></span>
<span id="cb11-2">my_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(my_df)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the second-to-last row using .N</span></span>
<span id="cb11-5">second_to_last_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_dt[.N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(second_to_last_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name   Age
   &lt;char&gt; &lt;num&gt;
1:  David    28</code></pre>
</div>
</div>
<p>Explanation: - Similar to the previous method, we convert the data frame to a data.table. - The <code>.N</code> special variable in data.table represents the total number of rows. - We use <code>my_dt[.N - 1]</code> to get the second-to-last row.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Now you know three different ways to extract the last row or last <code>nth</code> row from a data frame in R. Feel free to experiment with your own data frames and explore these methods further! 🚀</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-18/</guid>
  <pubDate>Thu, 18 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Guide to Selecting Rows with NA Values in R Using Base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-17/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Dealing with missing data is a common challenge in data analysis and machine learning projects. In R, missing values are represented by NA. Being able to identify and handle these missing values is crucial for accurate analysis and model building. In this guide, we’ll explore how to select rows with NA values in R using base R functions.</p>
</section>
<section id="understanding-na-values" class="level1">
<h1>Understanding NA Values</h1>
<p>NA stands for “Not Available” and is used in R to represent missing or undefined data. When working with datasets, it’s essential to identify and handle NA values appropriately to avoid biased analysis or incorrect results.</p>
</section>
<section id="creating-a-sample-dataset" class="level1">
<h1>Creating a Sample Dataset</h1>
<p>Let’s start by creating a simple dataset with NA values to demonstrate the selection process. We’ll use the data.frame function to create a dataframe named “sample_data” with three columns: “ID”, “Age”, and “Income”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating sample dataset</span></span>
<span id="cb1-2">sample_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80000</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8">sample_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Age Income
1  1  25  50000
2  2  NA  60000
3  3  30     NA
4  4  35  70000
5  5  40  80000</code></pre>
</div>
</div>
<p>Now, “sample_data” contains five rows and three columns, with some NA values in the “Age” and “Income” columns.</p>
</section>
<section id="selecting-rows-with-na-values" class="level1">
<h1>Selecting Rows with NA Values</h1>
<p>To select rows with NA values in R, we can use logical indexing combined with the is.na function. The is.na function returns a logical vector indicating which elements are NA.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Selecting rows with NA values in any column</span></span>
<span id="cb3-2">rows_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb3-3">  sample_data, </span>
<span id="cb3-4">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb3-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb3-6">  ), ]</span></code></pre></div>
</div>
<p>In this code snippet, we use the apply function to apply the any and is.na functions row-wise. This returns a logical vector indicating whether each row contains any NA values. Finally, we use this logical vector to index the rows containing NA values in any column.</p>
</section>
<section id="visualizing-selected-rows" class="level1">
<h1>Visualizing Selected Rows:</h1>
<p>Let’s print the selected rows to see which rows contain NA values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Printing selected rows</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(rows_with_na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Age Income
2  2  NA  60000
3  3  30     NA</code></pre>
</div>
</div>
<p>As shown in the output, rows 2 and 3 contain NA values either in the “Age” or “Income” column.</p>
</section>
<section id="alternative-method" class="level1">
<h1>Alternative Method</h1>
<p>Another approach to select rows with NA values is by using the complete.cases function. This function returns a logical vector indicating which rows are complete (i.e., have no missing values).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Selecting rows with NA values using complete.cases</span></span>
<span id="cb6-2">rows_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_data[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete.cases</span>(sample_data), ]</span>
<span id="cb6-3">rows_with_na</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Age Income
2  2  NA  60000
3  3  30     NA</code></pre>
</div>
</div>
<p>In this code snippet, we use the complete.cases function to identify rows with missing values and then negate (!) the result to select rows with NA values.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this guide, we’ve demonstrated how to select rows with NA values in R using base R functions. By using logical indexing and the is.na or complete.cases functions, you can efficiently identify rows containing missing data in your datasets. Handling missing values appropriately is crucial for ensuring the integrity and accuracy of your data analysis and modeling efforts. Experiment with different datasets and scenarios to deepen your understanding of handling missing values in R. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-17/</guid>
  <pubDate>Wed, 17 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Selecting Rows with Specific Values: Exploring Options in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-16/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In R, we often need to filter data frames based on whether a specific value appears within any of the columns. Both base R and the dplyr package offer efficient ways to achieve this. Let’s delve into both approaches and see how they work!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1---use-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="example-1---use-dplyr">Example 1 - Use dplyr</h2>
<p>The dplyr package provides a concise and readable syntax for data manipulation. We can achieve our goal using the <code>filter()</code> function in conjunction with <code>if_any()</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"></span>
<span id="cb1-3">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_value"</span>))</span></code></pre></div>
<p>Let’s break down the code:</p>
<ul>
<li><code>data</code>: This represents your data frame.</li>
<li><code>filter()</code>: This function keeps rows that meet a specified condition.</li>
<li><code>if_any()</code>: This checks if the condition is true for any of the columns.</li>
<li><code>everything()</code>: This indicates we want to consider all columns.</li>
<li><code>.x</code>: This represents each individual column within the <code>everything()</code> selection.</li>
<li><code>== "your_value"</code>: This is the condition to check. Here, we are looking for rows where the value in any column is equal to “your_value”.</li>
</ul>
<p>Example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-2"></span>
<span id="cb2-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fruit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  fruit color price
1 apple   red   0.5</code></pre>
</div>
</div>
<p>This code will return the row where “apple” appears in the “fruit” column.</p>
</section>
<section id="example-2---base-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="example-2---base-r-approach">Example 2 - Base R Approach</h2>
<p>Base R offers its own set of functions for data manipulation. We can achieve the same row filtering using apply() and logical operations.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify rows with the value</span></span>
<span id="cb4-2">row_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_value"</span>))</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset the data</span></span>
<span id="cb4-5">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[row_indices, ]</span></code></pre></div>
<p>Explanation:</p>
<ul>
<li><code>apply(data, 1, ...)</code>: This applies a function to each row of the data frame. The <code>1</code> indicates row-wise application.</li>
<li><code>function(row) any(row == "your_value")</code>: This anonymous function checks if “your_value” is present in any element of the row using the <code>any()</code> function and returns <code>TRUE</code> or <code>FALSE</code>.</li>
<li><code>row_indices</code>: This stores the logical vector indicating which rows meet the condition.</li>
<li><code>data[row_indices, ]</code>: We subset the data frame using the logical vector, keeping only the rows where the condition is <code>TRUE</code>.</li>
</ul>
<p>Example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fruit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7">row_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>))</span>
<span id="cb5-8">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[row_indices, ]</span>
<span id="cb5-9">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  fruit color price
1 apple   red   0.5</code></pre>
</div>
</div>
<p>This code will also return the row where “apple” appears.</p>
</section>
<section id="example-3---base-r-approach-2" class="level2">
<h2 class="anchored" data-anchor-id="example-3---base-r-approach-2">Example 3 - Base R Approach 2</h2>
<p>Another base R approach involves using the <code>rowSums()</code> function to identify rows with the specified value.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify rows with the value</span></span>
<span id="cb7-2">filtered_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.ind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3">df_filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[filtered_rows, ]</span></code></pre></div>
<p>While dplyr offers a concise approach, base R also provides solutions using loops. Here’s one way to achieve the same result:</p>
<ul>
<li><code>which(rowSums(df == value) &gt; 0, arr.ind = TRUE)</code>: This part finds the row indices where the sum of elements in each row being equal to the value is greater than zero (indicating at least one match).</li>
<li><code>rowSums(df == value)</code>: Calculates the sum across rows, checking if any value in the row matches the target value.</li>
<li><code>&gt; 0</code>: Filters rows where the sum is greater than zero (i.e., at least one match).</li>
<li><code>arr.ind = TRUE</code>: Ensures the output includes both row and column indices (useful for debugging but not required here).</li>
<li><code>df[filtered_rows, ]</code>: Subsets the original data frame (df) based on the identified row indices (filtered_rows), creating the filtered data frame (df_filtered).</li>
</ul>
<p>Example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">filtered_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.ind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-2">df_filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[filtered_rows, ]</span>
<span id="cb8-3">df_filtered</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  fruit color price
1 apple   red   0.5</code></pre>
</div>
</div>
<p>This code will return the row where “apple” appears in any column.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>All methods effectively select rows with specific values in any column. Experiment with them and different approaches on your own data and with different conditions!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-16/</guid>
  <pubDate>Tue, 16 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Estimating Chi-Square Distribution Parameters Using R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-15/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of statistics and data analysis, understanding and accurately estimating the parameters of probability distributions is crucial. One such distribution is the chi-square distribution, often encountered in various statistical analyses. In this blog post, we’ll dive into how we can estimate the degrees of freedom (“df”) and the non-centrality parameter (“ncp”) of a chi-square distribution using R programming language.</p>
</section>
<section id="the-chi-square-distribution" class="level1">
<h1>The Chi-Square Distribution</h1>
<p>The chi-square distribution is a continuous probability distribution that arises in the context of hypothesis testing and confidence interval estimation. It is commonly used in goodness-of-fit tests, tests of independence, and tests of homogeneity.</p>
<p>The distribution has two main parameters: - <strong>Degrees of Freedom (df)</strong>: This parameter determines the shape of the chi-square distribution. It represents the number of independent variables in a statistical test. - <strong>Non-Centrality Parameter (ncp)</strong>: This parameter determines the deviation of the distribution from a null hypothesis. It’s particularly relevant in non-central chi-square distributions.</p>
</section>
<section id="the-goal-estimating-parameters" class="level1">
<h1>The Goal: Estimating Parameters</h1>
<p>Our goal is to create a function within the TidyDensity package that can estimate the df and ncp parameters of a chi-square distribution based on a vector of observed data. Let’s walk through the steps involved in achieving this.</p>
</section>
<section id="working-example" class="level1">
<h1>Working Example</h1>
<section id="setting-the-stage-libraries-and-data" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-stage-libraries-and-data">Setting the Stage: Libraries and Data</h2>
<p>First, we load the necessary libraries: <code>tidyverse</code> for data manipulation and <code>bbmle</code> for maximum likelihood estimation. We then generate a grid of parameters (degrees of freedom and non-centrality parameter) and sample sizes to create a diverse set of chi-square distributed data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bbmle)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data ----</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make parameters and grid</span></span>
<span id="cb1-7">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-8">ncp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-9">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>()</span>
<span id="cb1-10">param_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> ncp)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(param_grid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
      n    df   ncp
  &lt;dbl&gt; &lt;int&gt; &lt;int&gt;
1   284     1     1
2   284     1     2
3   284     1     3
4   284     1     4
5   284     1     5
6   284     1     6</code></pre>
</div>
</div>
</section>
<section id="function-exploration-unveiling-the-estimation-process" class="level2">
<h2 class="anchored" data-anchor-id="function-exploration-unveiling-the-estimation-process">Function Exploration: Unveiling the Estimation Process</h2>
<p>The core of our exploration lies in several functions designed to estimate the chi-square parameters:</p>
<p><code>dof</code>/<code>k</code> Functions: These functions focus on estimating the degrees of freedom (df) using different approaches:</p>
<ul>
<li><code>mean_x</code>: Calculates the mean of the data.</li>
<li><code>mean_minus_1</code>: Subtracts 1 from the mean.</li>
<li><code>var_div_2</code>: Divides the variance of the data by 2.</li>
<li><code>length_minus_1</code>: Subtracts 1 from the length of the data.</li>
</ul>
<p><code>ncp</code> Functions: These functions aim to estimate the non-centrality parameter (ncp) using various methods:</p>
<ul>
<li><code>mean_minus_mean_minus_1</code>: A seemingly trivial calculation that serves as a baseline.</li>
<li><code>ie_mean_minus_var_div_2</code>: Subtracts half the variance from the mean, ensuring the result is non-negative.</li>
<li><code>ie_optim</code>: Utilizes optimization techniques to find the ncp that maximizes the likelihood of observing the data.</li>
<li><code>estimate_chisq_params</code>: This is the main function that employs maximum likelihood estimation (MLE) via the bbmle package to estimate both df and ncp simultaneously. It defines a negative log-likelihood function based on the chi-square distribution and uses mle2 to find the parameter values that minimize this function.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions ----</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># functions to estimate the parameters of a chisq distribution</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dof</span></span>
<span id="cb3-4">mean_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)</span>
<span id="cb3-5">mean_minus_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-6">var_div_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-7">length_minus_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ncp</span></span>
<span id="cb3-9">mean_minus_mean_minus_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10">ie_mean_minus_var_div_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-11">ie_optim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-12">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ncp) {</span>
<span id="cb3-13">                               <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dchisq</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb3-14">                             },</span>
<span id="cb3-15">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brent"</span>,</span>
<span id="cb3-16">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-17">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par</span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># both</span></span>
<span id="cb3-19">estimate_chisq_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data) {</span>
<span id="cb3-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Negative log-likelihood function</span></span>
<span id="cb3-21">  negLogLik <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, ncp) {</span>
<span id="cb3-22">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dchisq</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb3-23">  }</span>
<span id="cb3-24">  </span>
<span id="cb3-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial values (adjust based on your data if necessary)</span></span>
<span id="cb3-26">  start_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(data)))</span>
<span id="cb3-27">  </span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLE using bbmle</span></span>
<span id="cb3-29">  mle_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bbmle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mle2</span>(negLogLik, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> start_vals)</span>
<span id="cb3-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return estimated parameters as a named vector</span></span>
<span id="cb3-31">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">est_df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(mle_fit)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">est_ncp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(mle_fit)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-34">  )</span>
<span id="cb3-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb3-36">}</span>
<span id="cb3-37"></span>
<span id="cb3-38">safe_estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> {</span>
<span id="cb3-39">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">possibly</span>(</span>
<span id="cb3-40">    estimate_chisq_params,</span>
<span id="cb3-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">otherwise =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>,</span>
<span id="cb3-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-43">  )</span>
<span id="cb3-44">}</span></code></pre></div>
</div>
</section>
<section id="simulating-and-evaluating-putting-the-functions-to-the-test" class="level2">
<h2 class="anchored" data-anchor-id="simulating-and-evaluating-putting-the-functions-to-the-test">Simulating and Evaluating: Putting the Functions to the Test</h2>
<p>To assess the performance of our functions, we simulate chi-square data using the parameter grid and apply each function to estimate the parameters. We then compare these estimates to the true values and visualize the results using boxplots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate data ----</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb4-3">dff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> param_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.fun</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rchisq"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">safe_est_parms =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, safe_estimates),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, mean_minus_1),</span>
<span id="cb4-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, var_div_2),</span>
<span id="cb4-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfc =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, length_minus_1),</span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, mean_minus_mean_minus_1),</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, ie_mean_minus_var_div_2),</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpc =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, ie_optim)</span>
<span id="cb4-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(safe_est_parms, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.x))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> safe_est_parms) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfa_resid =</span> dfa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfb_resid =</span> dfb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfc_resid =</span> dfc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfd_resid =</span> est_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpa_resid =</span> ncpa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp,</span>
<span id="cb4-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpb_resid =</span> ncpb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp,</span>
<span id="cb4-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpc_resid =</span> ncpc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp,</span>
<span id="cb4-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpd_resid =</span> est_ncp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp</span>
<span id="cb4-26">  )</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(dff)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 987
Columns: 19
$ n          &lt;dbl&gt; 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,…
$ df         &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…
$ ncp        &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1…
$ est_df     &lt;dbl&gt; 1.1770904, 0.9905994, 0.9792179, 0.7781877, 1.5161669, 0.82…
$ est_ncp    &lt;dbl&gt; 0.7231638, 1.9462325, 3.0371756, 4.2347494, 3.7611119, 6.26…
$ dfa        &lt;dbl&gt; 0.9050589, 1.9826153, 3.0579375, 4.0515312, 4.2022289, 6.15…
$ dfb        &lt;dbl&gt; 2.626501, 5.428382, 7.297746, 9.265272, 8.465838, 14.597976…
$ dfc        &lt;dbl&gt; 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283,…
$ ncpa       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ ncpb       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ ncpc       &lt;dbl&gt; 5.382789e-09, 8.170550e-09, 6.017177e-09, 8.618892e-09, 7.7…
$ dfa_resid  &lt;dbl&gt; -0.09494109, 0.98261533, 2.05793748, 3.05153121, 3.20222890…
$ dfb_resid  &lt;dbl&gt; 1.626501, 4.428382, 6.297746, 8.265272, 7.465838, 13.597976…
$ dfc_resid  &lt;dbl&gt; 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 281, 281,…
$ dfd_resid  &lt;dbl&gt; 0.177090434, -0.009400632, -0.020782073, -0.221812344, 0.51…
$ ncpa_resid &lt;dbl&gt; 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, 0, -1, -2, -3, -4, -…
$ ncpb_resid &lt;dbl&gt; -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1, -2, -3, -4, -5…
$ ncpc_resid &lt;dbl&gt; -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1, -2, -3, -4, -5…
$ ncpd_resid &lt;dbl&gt; -0.27683618, -0.05376753, 0.03717560, 0.23474943, -1.238888…</code></pre>
</div>
</div>
</section>
<section id="visual-insights-assessing-estimation-accuracy" class="level2">
<h2 class="anchored" data-anchor-id="visual-insights-assessing-estimation-accuracy">Visual Insights: Assessing Estimation Accuracy</h2>
<p>The boxplots reveal interesting insights:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) -1 ~ df"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfa_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) -1 ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var(x) / 2 ~ df"</span>)</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfb_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var(x) / 2 ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length(x) - 1 ~ df"</span>)</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfc_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length(x) - 1 ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>est_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ df - Looks Good"</span>)</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfd_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-4.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - (mean(x) - 1) ~ ncp"</span>)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpa_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - (mean(x) - 1) ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-5.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - var(x)/2 ~ nc"</span>)</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpb_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - var(x)/2 ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-6.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"optim ~ ncp"</span>)</span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpc_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"optim ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-7.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>est_ncp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ ncp - Looks Good"</span>)</span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpd_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-8.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p><em><code>df</code></em> Estimation:</p>
<ul>
<li><code>mean_x - 1 and var(x) / 2</code> show potential as df estimators but exhibit bias depending on the true df value.</li>
<li><code>length(x) - 1</code> performs poorly, consistently underestimating df.</li>
<li>The MLE approach from <code>estimate_chisq_params</code> demonstrates the most accurate and unbiased estimates across different df values.</li>
</ul>
<p><em><code>ncp</code></em> Estimation:</p>
<ul>
<li>The simple methods (<code>mean(x) - mean(x) - 1</code> and <code>mean(x) - var(x) / 2</code>) show substantial bias and variability.</li>
<li>The optimization-based method (<code>optim</code>) performs better but still exhibits some bias.</li>
<li>The MLE approach again emerges as the most reliable option, providing accurate and unbiased estimates across various ncp values.</li>
</ul>
</section>
</section>
<section id="conclusion-the-power-of-maximum-likelihood" class="level1">
<h1>Conclusion: The Power of Maximum Likelihood</h1>
<p>Our exploration highlights the effectiveness of MLE in estimating the parameters of a chi-square distribution. The estimate_chisq_params function, utilizing the bbmle package, provides a robust and accurate solution for this task. This function will be a valuable addition to the TidyDensity package, empowering users to delve deeper into the analysis of chi-square distributed data.</p>
<p>Stay tuned for further developments and exciting additions to the TidyDensity package!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <category>distribution</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-15/</guid>
  <pubDate>Mon, 15 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Taking the data out of the glue with regex in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-12/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Regular expressions, or regex, are incredibly powerful tools for pattern matching and extracting specific information from text data. Today, we’ll explore how to harness the might of regex in R with a practical example.</p>
<p>Let’s dive into a scenario where we have data that needs cleaning and extracting numerical values from strings. Our data, stored in a dataframe named <code>df</code>, consists of four columns (<code>x1</code>, <code>x2</code>, <code>x3</code>, <code>x4</code>) with strings containing numerical values along with percentage values enclosed in parentheses. Our goal is to extract these numerical values and compute a total for each row.</p>
</section>
<section id="loading-libraries" class="level1">
<h1>Loading Libraries</h1>
<p>Before we begin, we need to load the necessary libraries. We’ll be using the <code>tidyverse</code> package for data manipulation, along with <code>glue</code> and <code>unglue</code> for string manipulation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Library Loading</span></span>
<span id="cb1-2">pacman<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p_load</span>(tidyverse, glue, unglue)</span></code></pre></div>
</div>
</section>
<section id="exploring-the-data" class="level1">
<h1>Exploring the Data</h1>
<p>Let’s take a sneak peek at our data using the <code>head()</code> function to understand its structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unit A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{11:20} ({1:10}%)"</span>),  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{251} ({13}%)"</span>)),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{21:30} ({11:20}%)"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{252} ({14}%)"</span>)),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x4 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{31:40} ({21:30}%)"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{253} ({15}%)"</span>))</span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 4
  x1     x2      x3       x4      
  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;   
1 Unit A 11 (1%) 21 (11%) 31 (21%)
2 Unit A 12 (2%) 22 (12%) 32 (22%)
3 Unit A 13 (3%) 23 (13%) 33 (23%)</code></pre>
</div>
</div>
<p>This command displays the first three rows of our dataframe <code>df</code>, giving us an idea of how our data looks like.</p>
</section>
<section id="creating-a-regex-function" class="level1">
<h1>Creating a Regex Function</h1>
<p>Now, we’ll define a custom function named <code>reg_val_fns</code> to extract numerical values from strings using regular expressions. This function takes two parameters: <code>.col_data</code> (column data) and <code>.pattern</code> (regex pattern). If no pattern is provided, it defaults to extracting any sequence of digits followed by non-word characters or the end of the string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make regex function</span></span>
<span id="cb4-2">reg_val_fns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.col_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pattern =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>){</span>
<span id="cb4-3">  ptrn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .pattern</span>
<span id="cb4-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(ptrn)){</span>
<span id="cb4-5">    ptrn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W|$)"</span></span>
<span id="cb4-6">  }</span>
<span id="cb4-7">  </span>
<span id="cb4-8">  reged_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .col_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(ptrn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(reged_val)</span>
<span id="cb4-13">}</span></code></pre></div>
</div>
</section>
<section id="applying-the-regex-function" class="level1">
<h1>Applying the Regex Function</h1>
<p>With our regex function defined, we apply it across desired columns using the <code>mutate(across())</code> function from the <code>dplyr</code> package. This extracts numerical values from strings in each column, converting them into numeric format. Additionally, we compute the total value for each row using <code>rowSums()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the function across the desired columns</span></span>
<span id="cb5-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1, reg_val_fns)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 5
   x1        x2    x3    x4 total_val
   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;
 1 Unit A    11    21    31        63
 2 Unit A    12    22    32        66
 3 Unit A    13    23    33        69
 4 Unit A    14    24    34        72
 5 Unit A    15    25    35        75
 6 Unit A    16    26    36        78
 7 Unit A    17    27    37        81
 8 Unit A    18    28    38        84
 9 Unit A    19    29    39        87
10 Unit A    20    30    40        90
11 Unit A   251   252   253       756</code></pre>
</div>
</div>
</section>
<section id="alternative-approach-using-unglue" class="level1">
<h1>Alternative Approach: Using unglue</h1>
<p>An alternative method to extract values from strings is using the <code>unglue</code> package. Here, we apply the <code>unglue_data()</code> function across columns (excluding <code>x1</code>) to extract values and percentages separately, then unnest the resulting dataframe and compute the total value for each row.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use unglue</span></span>
<span id="cb7-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unglue_data</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{val} ({pct}%)"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val"</span>), \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 8
   x1     x2_val x2_pct x3_val x3_pct x4_val x4_pct total_val
   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;
 1 Unit A     11 1          21 11         31 21            63
 2 Unit A     12 2          22 12         32 22            66
 3 Unit A     13 3          23 13         33 23            69
 4 Unit A     14 4          24 14         34 24            72
 5 Unit A     15 5          25 15         35 25            75
 6 Unit A     16 6          26 16         36 26            78
 7 Unit A     17 7          27 17         37 27            81
 8 Unit A     18 8          28 18         38 28            84
 9 Unit A     19 9          29 19         39 29            87
10 Unit A     20 10         30 20         40 30            90
11 Unit A    251 13        252 14        253 15           756</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this tutorial, we’ve explored how to leverage the power of regular expressions in R to extract numerical values from strings within a dataframe. By defining custom regex functions and using packages like <code>dplyr</code> and <code>unglue</code>, we can efficiently clean and manipulate text data for further analysis.</p>
<p>I encourage you to try out these techniques on your own datasets and explore the endless possibilities of regex in R. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>glue</category>
  <category>unglue</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-12/</guid>
  <pubDate>Fri, 12 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Rows: Selecting by Index in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-11/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Let’s jump into data manipulation with R! Selecting specific rows from our datasets is an important skill. Today, we’ll focus on subsetting rows by index, using the trusty square brackets (<code>[]</code>).</p>
<p>First, we’ll load a dataset containing car characteristics:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">mtcars.data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars</span></code></pre></div>
</div>
<p>This code loads the <code>mtcars</code> dataset (containing car data) into a new variable, <code>mtcars.data</code>. Now, we’ll explore how to target specific rows.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-selecting-a-single-row-by-index" class="level2">
<h2 class="anchored" data-anchor-id="example-1-selecting-a-single-row-by-index">Example 1: Selecting a Single Row by Index</h2>
<p>Imagine you want to analyze the fuel efficiency (miles per gallon) of a particular car. Here’s how to grab a single row by its index (row number):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the 5th row (remember indexing starts from 1!)</span></span>
<span id="cb2-2">specific.car <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,]</span>
<span id="cb2-3">specific.car</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl disp  hp drat   wt  qsec vs am gear carb
Hornet Sportabout 18.7   8  360 175 3.15 3.44 17.02  0  0    3    2</code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation:</h3>
<ul>
<li><code>mtcars.data</code>: This is our data frame, containing all the car information.</li>
<li><code>[]</code>: These are the square brackets, used for subsetting.</li>
<li><code>5</code>: This is the index of the row we want. Since indexing starts from 1, the 5th row will be selected.</li>
<li><code>,</code>: The comma tells R to select all columns (everything) from that row.</li>
</ul>
<p><strong>Try it yourself!</strong> Select the 10th row and see what car it represents.</p>
</section>
</section>
<section id="example-2-selecting-multiple-rows-by-index" class="level2">
<h2 class="anchored" data-anchor-id="example-2-selecting-multiple-rows-by-index">Example 2: Selecting Multiple Rows by Index</h2>
<p>Let’s say you’re interested in comparing fuel efficiency (miles per gallon) of a few specific cars. We can use a vector of indices to grab multiple rows at once:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the 3rd, 7th, and 12th rows</span></span>
<span id="cb4-2">few.cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars.data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),]</span>
<span id="cb4-3">few.cars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            mpg cyl  disp  hp drat   wt  qsec vs am gear carb
Datsun 710 22.8   4 108.0  93 3.85 2.32 18.61  1  1    4    1
Duster 360 14.3   8 360.0 245 3.21 3.57 15.84  0  0    3    4
Merc 450SE 16.4   8 275.8 180 3.07 4.07 17.40  0  0    3    3</code></pre>
</div>
</div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation:</h3>
<ul>
<li>We use <code>c()</code> to create a vector containing the desired row indices: 3, 7, and 12.</li>
<li>Everything else remains the same as the previous example.</li>
</ul>
<p><strong>Challenge yourself!</strong> Create a vector to select the last 5 rows and analyze their horsepower.</p>
</section>
</section>
<section id="example-3-selecting-rows-using-a-range-of-indices" class="level2">
<h2 class="anchored" data-anchor-id="example-3-selecting-rows-using-a-range-of-indices">Example 3: Selecting Rows Using a Range of Indices</h2>
<p>Sometimes, you want to analyze a group of consecutive cars. Here’s how to select a range using the colon (<code>:</code>) operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select rows from 8 to 15 (inclusive)</span></span>
<span id="cb6-2">car.slice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,]</span>
<span id="cb6-3">car.slice</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    mpg cyl  disp  hp drat   wt  qsec vs am gear carb
Merc 240D          24.4   4 146.7  62 3.69 3.19 20.00  1  0    4    2
Merc 230           22.8   4 140.8  95 3.92 3.15 22.90  1  0    4    2
Merc 280           19.2   6 167.6 123 3.92 3.44 18.30  1  0    4    4
Merc 280C          17.8   6 167.6 123 3.92 3.44 18.90  1  0    4    4
Merc 450SE         16.4   8 275.8 180 3.07 4.07 17.40  0  0    3    3
Merc 450SL         17.3   8 275.8 180 3.07 3.73 17.60  0  0    3    3
Merc 450SLC        15.2   8 275.8 180 3.07 3.78 18.00  0  0    3    3
Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.25 17.98  0  0    3    4</code></pre>
</div>
</div>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation:</h3>
<ul>
<li><code>8:15</code>: This specifies the range of rows we want. Here, we select from row 8 (inclusive) to row 15 (inclusive).</li>
</ul>
<p><strong>Now it’s your turn!</strong> Select rows 1 to 10 and explore the distribution of the number of cylinders.</p>
<p>Remember, practice is key! Experiment with different indices and ranges to become comfortable with subsetting rows in R. As you work with more datasets, you’ll master these techniques and become a data wrangling pro.</p>
<p>Happy coding!</p>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-11/</guid>
  <pubDate>Thu, 11 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Guide to Removing Multiple Rows in R Using Base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-10/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As data analysts and scientists, we often find ourselves working with large datasets where data cleaning becomes a crucial step in our analysis pipeline. One common task is removing unwanted rows from our data. In this guide, we’ll explore how to efficiently remove multiple rows in R using the base R package.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="understanding-the-subset-function" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-subset-function">Understanding the <code>subset()</code> Function</h2>
<p>One handy function for removing rows based on certain conditions is <code>subset()</code>. This function allows us to filter rows based on logical conditions. Here’s how it works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example DataFrame</span></span>
<span id="cb1-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frank"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
2  2     Bob    82
3  3 Charlie    90
4  4   David    68
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows where score is less than 80</span></span>
<span id="cb3-2">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(data, score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb3-3">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
2  2     Bob    82
3  3 Charlie    90
5  5     Eve    95</code></pre>
</div>
</div>
<p>In this example, we have a DataFrame <code>data</code> with columns for <code>id</code>, <code>name</code>, and <code>score</code>. We use the <code>subset()</code> function to filter rows where the <code>score</code> column is greater than or equal to 80, effectively removing rows where the score is less than 80.</p>
</section>
<section id="using-logical-indexing" class="level2">
<h2 class="anchored" data-anchor-id="using-logical-indexing">Using Logical Indexing</h2>
<p>Another approach to remove multiple rows is by using logical indexing. We create a logical vector indicating which rows to keep or remove based on certain conditions. Here’s how it’s done:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example DataFrame</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frank"</span>),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb5-6">)</span>
<span id="cb5-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
2  2     Bob    82
3  3 Charlie    90
4  4   David    68
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a logical vector</span></span>
<span id="cb7-2">keep_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb7-3">keep_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE  TRUE FALSE  TRUE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset the DataFrame based on the logical vector</span></span>
<span id="cb9-2">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[keep_rows, ]</span>
<span id="cb9-3">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
2  2     Bob    82
3  3 Charlie    90
5  5     Eve    95</code></pre>
</div>
</div>
<p>In this example, we create a logical vector <code>keep_rows</code> indicating which rows have a score greater than or equal to 80. We then subset the DataFrame <code>data</code> using this logical vector to keep only the rows that meet our condition.</p>
</section>
<section id="removing-rows-by-index" class="level2">
<h2 class="anchored" data-anchor-id="removing-rows-by-index">Removing Rows by Index</h2>
<p>Sometimes, we may want to remove rows by their index position rather than based on a condition. This can be achieved using negative indexing. Here’s how it’s done:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example DataFrame</span></span>
<span id="cb11-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frank"</span>),</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb11-6">)</span>
<span id="cb11-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
2  2     Bob    82
3  3 Charlie    90
4  4   David    68
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows by index</span></span>
<span id="cb13-2">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), ]</span>
<span id="cb13-3">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
3  3 Charlie    90
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
</div>
<p>In this example, we use negative indexing to remove the second and fourth rows from the DataFrame <code>data</code>, effectively eliminating rows with indices 2 and 4.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this guide, we’ve explored multiple methods for removing multiple rows in R using base R functions. Whether you prefer using the <code>subset()</code> function, logical indexing, or negative indexing, it’s essential to choose the method that best fits your specific use case.</p>
<p>I encourage you to try these examples with your own datasets and experiment with different conditions and approaches. Data manipulation is a fundamental skill in R programming, and mastering these techniques will empower you to efficiently clean and preprocess your data for further analysis.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-10/</guid>
  <pubDate>Wed, 10 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Remove Rows with Some or All NAs in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-09/</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>Handling missing values is a crucial aspect of data preprocessing in R. Often, datasets contain missing values, which can adversely affect the analysis or modeling process. One common task is to remove rows containing missing values entirely. In this tutorial, we’ll explore different methods to accomplish this task in R, catering to scenarios where we want to remove rows with either some or all missing values.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1---using-complete.cases-function" class="level2">
<h2 class="anchored" data-anchor-id="example-1---using-complete.cases-function">Example 1 - Using complete.cases() Function:</h2>
<p>The <code>complete.cases()</code> function is a handy tool in R for removing rows with any missing values. It returns a logical vector indicating which rows in a data frame are complete (i.e., have no missing values).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2  2  2
3 NA  3
4  4 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any missing values</span></span>
<span id="cb3-2">complete_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete.cases</span>(df), ]</span>
<span id="cb3-3">complete_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y
2 2 2</code></pre>
</div>
</div>
</section>
<section id="explanation" class="level2">
<h2 class="anchored" data-anchor-id="explanation">Explanation:</h2>
<ul>
<li>We create a sample data frame <code>df</code> with some missing values.</li>
<li>The <code>complete.cases(df)</code> function returns a logical vector indicating complete cases (rows with no missing values).</li>
<li>We subset the data frame <code>df</code> using this logical vector to retain only the complete rows.</li>
</ul>
</section>
<section id="example-2---using-na.omit-function" class="level2">
<h2 class="anchored" data-anchor-id="example-2---using-na.omit-function">Example 2 - Using na.omit() Function:</h2>
<p>Similar to <code>complete.cases()</code>, the <code>na.omit()</code> function also removes rows with any missing values from a data frame. However, it directly returns the data frame without the incomplete rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb5-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2  2  2
3 NA  3
4  4 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any missing values</span></span>
<span id="cb7-2">complete_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(df)</span>
<span id="cb7-3">complete_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y
2 2 2</code></pre>
</div>
</div>
<p>##Explanation:</p>
<ul>
<li>We define a sample data frame <code>df</code> with missing values.</li>
<li>The <code>na.omit(df)</code> function directly removes rows with any missing values and returns the cleaned data frame.</li>
</ul>
</section>
<section id="example-3---removing-rows-with-all-nas" class="level2">
<h2 class="anchored" data-anchor-id="example-3---removing-rows-with-all-nas">Example 3 - Removing Rows with All NAs:</h2>
<p>In some cases, we may want to remove rows where all values are missing. We can achieve this by using the <code>complete.cases()</code> function along with the <code>rowSums()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb9-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb9-5">)</span>
<span id="cb9-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2 NA NA
3 NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with all missing values</span></span>
<span id="cb11-2">non_na_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df), ]</span>
<span id="cb11-3">non_na_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x  y
1 1 NA</code></pre>
</div>
</div>
</section>
<section id="explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="explanation-1">Explanation:</h2>
<ul>
<li>We create a data frame <code>df</code> with all missing values.</li>
<li><code>is.na(df)</code> generates a logical matrix indicating NA values.</li>
<li><code>rowSums(is.na(df))</code> calculates the total number of NA values in each row.</li>
<li>We compare this sum to the total number of columns <code>ncol(df)</code> to identify rows with all missing values.</li>
<li>Finally, we subset the data frame to retain rows with at least one non-missing value.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Handling missing data is an essential skill in data analysis, and removing rows with missing values is a common preprocessing step. In this tutorial, we discussed various methods to achieve this task in R, catering to scenarios where we want to remove rows with some or all missing values. I encourage you to try out these methods on your own datasets to gain a deeper understanding of data manipulation in R.</p>
<p>By mastering these techniques, you’ll be better equipped to preprocess your data effectively and pave the way for more robust analyses and models. Happy coding!</p>
<p><strong>Note:</strong> Remember to always carefully consider the implications of removing data, as it may affect the integrity and representativeness of your dataset.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-09/</guid>
  <pubDate>Tue, 09 Apr 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
