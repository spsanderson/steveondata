<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Fri, 09 Feb 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Demystifying Dates: Finding the Day of the Week in R with lubridate</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever stared at a date in R and wondered, “What day of the week was this?!” Fear not, fellow data wranglers! Today, we embark on a journey to conquer this seemingly simple, yet surprisingly tricky, task. Buckle up, because we’re about to become date whisperers with the help of the <code>lubridate</code> package.</p>
</section>
<section id="the-power-of-lubridate" class="level1">
<h1>The Power of <code>lubridate</code></h1>
<p>R’s built-in date functions are decent, but <code>lubridate</code> takes things to a whole new level. Think of it as a Swiss Army knife for everything date-related. It offers a wider range of functions, clear syntax, and handles different date formats like a champ.</p>
</section>
<section id="unveiling-the-mystery-extracting-the-day-of-the-week" class="level1">
<h1>Unveiling the Mystery: Extracting the Day of the Week</h1>
<p>There are two main approaches to finding the day of the week in <code>lubridate</code>:</p>
<section id="example-1-using-wday" class="level2">
<h2 class="anchored" data-anchor-id="example-1-using-wday">Example 1: Using <code>wday()</code></h2>
<p>This function is your go-to for both numeric and character representations of the day. Let’s break it down:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample date</span></span>
<span id="cb1-4">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-02-09"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numeric day (Monday = 1, Sunday = 7)</span></span>
<span id="cb1-7">numeric_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 6 (Friday)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(numeric_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Character day (full name)</span></span>
<span id="cb5-2">full_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(full_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Friday</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Fri
Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(full_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ordered" "factor" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Character day (abbreviated)</span></span>
<span id="cb9-2">abbrev_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">abbr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(abbrev_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Fri</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Fri
Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(abbrev_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ordered" "factor" </code></pre>
</div>
</div>
</section>
<section id="example-2.-using-strftime" class="level2">
<h2 class="anchored" data-anchor-id="example-2.-using-strftime">Example 2. Using <code>strftime()</code></h2>
<p>This function offers more flexibility in formatting dates, including extracting the day of the week.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same date as before</span></span>
<span id="cb13-2">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-02-09"</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Day of the week (full name)</span></span>
<span id="cb15-2">full_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%A"</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(full_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Friday</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Friday"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(full_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Day of the week (abbreviated)</span></span>
<span id="cb19-2">abbrev_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%a"</span>)</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(abbrev_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Fri</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Fri"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(abbrev_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<section id="beyond-the-basics-customizing-your-output" class="level3">
<h3 class="anchored" data-anchor-id="beyond-the-basics-customizing-your-output">Beyond the Basics: Customizing Your Output</h3>
<p>Both <code>wday()</code> and <code>strftime()</code> offer options to personalize your results. For example, you can change the starting day of the week (default is Monday) or use different formatting codes for the day name.</p>
<p><strong>Bonus Tip:</strong> Check out the <code>lubridate</code> documentation for more advanced options and functionalities!</p>
</section>
</section>
</section>
<section id="time-to-play" class="level1">
<h1>Time to Play!</h1>
<p>Now it’s your turn to experiment! Here are some ideas:</p>
<ul>
<li>Find the day of your birthday in R.</li>
<li>Analyze historical data and see how weekdays affect specific variables.</li>
<li>Create a calendar visualization with the day of the week displayed.</li>
</ul>
<p>Remember, the more you practice, the more comfortable you’ll become with manipulating dates in R. So, dive in, explore, and have fun!</p>
<p><strong>P.S.</strong> Don’t forget to share your creations and questions in the comments below. The R community is always happy to help!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-09/index.html</guid>
  <pubDate>Fri, 09 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if a Column is a Date in R: A Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As an R programmer, you may often encounter datasets where you need to determine whether a column contains date values. This task is crucial for data cleaning, manipulation, and analysis. In this blog post, we’ll explore various methods to check if a column is a date in R, with a focus on using the <code>lubridate</code> package and the <code>ts_is_date_class()</code> function from the <code>healthyR.ts</code> package.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate">Using lubridate</h2>
<p><code>lubridate</code> is a powerful package in R for handling date and time data. It provides intuitive functions to parse, manipulate, and work with date-time objects. Let’s see how we can use <code>lubridate</code> to check if a column is a date.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame</span></span>
<span id="cb1-6">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Date_Column =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not a date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-03-30"</span>)</span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if Date_Column is a date</span></span>
<span id="cb1-11">is_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Date_Column)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(is_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>In this example, we created a sample data frame <code>df</code> with a column named <code>Date_Column</code>. We used the <code>is.Date()</code> function from <code>lubridate</code> to check if the values in <code>Date_Column</code> are dates. The result is a logical with either a value of (<code>TRUE</code>) or (<code>FALSE</code>). In this instance the result is <code>FALSE</code> because the entire vector is not a date. This can change to <code>TRUE</code> if the entire vector is a date. See below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Date_Column =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(Date_Column)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(Date_Column) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR</span></span>
<span id="cb5-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Date_Column =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(Date_Column) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Date_Column
1        TRUE
2        TRUE
3        TRUE
4        TRUE</code></pre>
</div>
</div>
</section>
<section id="using-ts_is_date_class-from-healthyr.ts" class="level2">
<h2 class="anchored" data-anchor-id="using-ts_is_date_class-from-healthyr.ts">Using ts_is_date_class() from healthyR.ts</h2>
<p>Now, let’s explore how to achieve the same task using the <code>ts_is_date_class()</code> function from the <code>healthyR.ts</code> package. This function is specifically designed to check if a column is a date class, providing an alternative method for date validation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and load the healthyR.ts package</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("healthyR.ts")</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(healthyR.ts)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if Date_Column is a date using ts_is_date_class()</span></span>
<span id="cb7-6">is_date_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_is_date_class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Date_Column))</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(is_date_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_is_date_class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(Date_Column)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Date_Column is_date
1  2022-01-01    TRUE
2  2022-02-15    TRUE
3  not a date    TRUE
4  2022-03-30    TRUE</code></pre>
</div>
</div>
<p>In this example, we installed and loaded the <code>healthyR.ts</code> package, which contains the <code>ts_is_date_class()</code> function. We then applied this function to <code>df$Date_Column</code> to check if the values are of date class.</p>
<p>You will notice both methods incorrectly identify the row “not a date” as a date because the <code>as.Date()</code> function coerces the string “not a date” to an <code>NA</code> inside of the <code>mutate</code> function. If you use <code>rowwise()</code> before the <code>mutate</code> it will fail out completely, this can be a pitfall and is something to watch out for.</p>
</section>
</section>
<section id="encouragement" class="level1">
<h1>Encouragement</h1>
<p>Now that you’ve seen two different methods to check if a column is a date in R, I encourage you to try them out with your own datasets. Whether you prefer using <code>lubridate</code> or the functions from the <code>healthyR.ts</code> package, understanding how to validate date columns is essential for efficient data analysis and manipulation. See what you come up with!</p>
<p>Experiment with different datasets and column types to gain a deeper understanding of these techniques. By mastering these skills, you’ll become more proficient in handling date and time data in R, empowering you to tackle a wide range of data analysis tasks effectively.</p>
<p>In conclusion, checking if a column is a date in R is a fundamental skill for data professionals. With the right tools and techniques, such as those provided by <code>lubridate</code> and <code>healthyR.ts</code>, you can confidently validate date columns in your datasets and streamline your data analysis workflows.</p>
<p>Happy coding, and may your data always be accurate and insightful!</p>
<p>That wraps up our exploration of how to check if a column is a date in R. I hope you found this post helpful and informative. Stay tuned for more R programming tips and tutorials!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-08/index.html</guid>
  <pubDate>Thu, 08 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if Date is Between Two Dates in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-07/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello fellow R enthusiasts! Today, we’re diving into a common task in data analysis and manipulation: checking if a date falls between two given dates. Whether you’re working with time-series data, financial data, or any other type of data that includes dates, being able to filter or flag data based on date ranges is an essential skill.</p>
<p>In this blog post, we’ll explore two approaches to accomplish this task using base R syntax. We’ll use simple examples and explain the code in easy-to-understand terms. So, let’s get started!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="method-1-using-ifelse-to-create-a-new-column" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-ifelse-to-create-a-new-column">Method 1: Using ifelse() to Create a New Column</h2>
<p>One straightforward way to check if a date is between two dates is by using the <code>ifelse()</code> function to create a new column with an indicator variable.</p>
<p>Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame with dates</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-03-15"</span>, </span>
<span id="cb1-3">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-07-10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-11-30"</span>)),</span>
<span id="cb1-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define start and end dates</span></span>
<span id="cb1-7">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-01"</span>)</span>
<span id="cb1-8">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-10-01"</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new column indicating if date falls between start_date and end_date</span></span>
<span id="cb1-11">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>between <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end_date, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the updated data frame</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date value between
1 2022-01-01    10       0
2 2022-03-15    20       1
3 2022-07-10    30       1
4 2022-11-30    40       0</code></pre>
</div>
</div>
<p>In this code snippet, we first define a sample data frame <code>df</code> containing a column of dates. Then, we specify the <code>start_date</code> and <code>end_date</code> between which we want to check if each date falls. We use the <code>ifelse()</code> function to create a new column <code>between</code>, where a value of 1 indicates that the date falls between the specified range, and 0 otherwise.</p>
</section>
<section id="method-2-using-subsetting-to-filter-data" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-subsetting-to-filter-data">Method 2: Using Subsetting to Filter Data</h2>
<p>Another approach is to directly subset the data frame based on the date range. This method can be useful when you want to retrieve or manipulate the subset of data that falls within the specified range.</p>
<p>Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame with dates</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-03-15"</span>, </span>
<span id="cb3-3">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-07-10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-11-30"</span>)),</span>
<span id="cb3-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define start and end dates</span></span>
<span id="cb3-7">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-01"</span>)</span>
<span id="cb3-8">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-10-01"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset data where date falls between start_date and end_date</span></span>
<span id="cb3-11">subset_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end_date, ]</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the subsetted data frame</span></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(subset_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date value
2 2022-03-15    20
3 2022-07-10    30</code></pre>
</div>
</div>
<p>In this code snippet, we use subsetting to filter the <code>df</code> data frame, retaining only the rows where the date falls between <code>start_date</code> and <code>end_date</code>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it! You’ve learned two methods to check if a date is between two dates in R using base R syntax. Whether you prefer creating a new column with an indicator variable or directly subsetting the data, both approaches are powerful tools in your R programming toolkit.</p>
<p>I encourage you to try these examples with your own data and explore further. Understanding how to manipulate date-based data is a valuable skill that will serve you well in various data analysis tasks.</p>
<p>Happy coding! 📊✨</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-07/index.html</guid>
  <pubDate>Wed, 07 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplifying Date Manipulation: How to Get Week Numbers in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-06/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with dates in R, you may need to extract the week number for any given date. This can be useful for doing time series analysis or visualizations by week.</p>
<p>In this post, I’ll demonstrate how to get the week number from dates in R using both base R and the lubridate package. I’ll provide simple examples so you can try it yourself.</p>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>In base R, the <code>strftime()</code> function is used to format dates and extract different date components like day, month, year etc.</p>
<p>The syntax for <code>strftime()</code> is:</p>
<pre><code>strftime(x, format, tz = "")</code></pre>
<p>Where:</p>
<ul>
<li><code>x</code>: is the date object<br>
</li>
<li><code>format</code>: is the format string specifying which date components to extract</li>
<li><code>tz</code>: is an optional time zone string</li>
</ul>
<p>To get the week number, we need to use <code>"%V"</code> in the format string. This tells <code>strftime()</code> to return the ISO 8601 standard week number.</p>
<p>Let’s see an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%V"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "02"</code></pre>
</div>
</div>
<p>This returns the week number as a string. In this case, it’s the second week of the year.</p>
<p>We passed the date object to <code>strftime()</code> along with the format string containing <code>"%V"</code>.</p>
<p>Let’s try another example on a vector of dates:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-28"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>))</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(dates, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%V"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "02" "09" "52"</code></pre>
</div>
</div>
<p>This returns the week number for each date. So with base R, we can use <code>strftime()</code> and <code>%V</code> to easily extract week numbers from dates.</p>
</section>
<section id="using-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate">Using lubridate</h2>
<p>The lubridate package provides a wrapper function called <code>week()</code> to get the week number from a date.</p>
<p>The syntax for <code>week()</code> is simple:</p>
<pre><code>week(x)</code></pre>
<p>Where x is the date object.</p>
<p>Let’s see an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb7-2"></span>
<span id="cb7-3">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">week</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<p>This returns a numeric value representing the week number. In this case, it’s the third week of the year.</p>
<p>For a vector of dates:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-28"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>))</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">week</span>(dates) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  3  9 53</code></pre>
</div>
</div>
<p>So <code>week()</code> makes it easy to extract the week number from dates in lubridate. You will also notice that <code>strftime()</code> returns “52” for the last date of the year, while <code>week()</code> returns “53”. This is because <code>week()</code> follows the ISO 8601 standard for week numbers.</p>
</section>
<section id="wrap-up" class="level2">
<h2 class="anchored" data-anchor-id="wrap-up">Wrap Up</h2>
<p>To quickly recap the key points:</p>
<ul>
<li>Base R: <code>strftime(date, format = "%V")</code><br>
</li>
<li>lubridate: <code>week(date)</code></li>
</ul>
<p>I encourage you to try these functions out on some sample dates in R. Being able to wrangle dates is an important skill for handling temporal data.</p>
<p>Let me know if you have any other questions!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-06/index.html</guid>
  <pubDate>Tue, 06 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Taming Excel Dates in R: From Numbers to Meaningful Dates!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever battled with Excel’s quirky date formats in your R projects? If so, you’re not alone! Those cryptic numbers can be a real headache, but fear not, fellow R warriors! Today, we’ll conquer this challenge and transform those numbers into beautiful, usable dates.</p>
<p><strong>Our Mission:</strong> We’ll convert two date columns in a tibble named “df”:</p>
<ol type="1">
<li><strong><code>date</code>:</strong> Stored as numbers, representing days since some mysterious date.</li>
<li><strong><code>datetime</code>:</strong> Also in numberland, but with an additional decimal for time.</li>
</ol>
<p><strong>Our Weapons:</strong></p>
<ul>
<li><strong><code>as.Date()</code>:</strong> This built-in R function is our date-conversion hero, but we need to give it a secret weapon: <code>origin = "1899-12-30"</code>. This tells <code>as.Date()</code> where the Excel date system starts counting days from.</li>
<li><strong><code>openxlsx</code> library:</strong> This package helps us deal with Excel files. We’ll use its <code>convertToDateTime()</code> function to handle the <code>datetime</code> column, which includes both date and time information.</li>
</ul>
</section>
<section id="lets-code" class="level1">
<h1>Let’s Code!</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and load the openxlsx library (if needed)</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(openxlsx)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openxlsx"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(openxlsx)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our example data</span></span>
<span id="cb1-6">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44563</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44566</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44635</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44670</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44706</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44716</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44761</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44782</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44864</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44919</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">datetime =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44563.17</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44566.51</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44635.64</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44670.40</span>,</span>
<span id="cb1-9">               <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44706.43</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44716.42</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44761.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44782.09</span>,</span>
<span id="cb1-10">               <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44864.19</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44919.89</span>),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb1-12">)</span>
<span id="cb1-13"></span>
<span id="cb1-14">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    date datetime sales
1  44563 44563.17    14
2  44566 44566.51    19
3  44635 44635.64    22
4  44670 44670.40    29
5  44706 44706.43    24
6  44716 44716.42    25
7  44761 44761.05    25
8  44782 44782.09    30
9  44864 44864.19    35
10 44919 44919.89    28</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert "date" column using as.Date() and the magic origin</span></span>
<span id="cb3-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">origin =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1899-12-30"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert "datetime" column using openxlsx and convertToDateTime()</span></span>
<span id="cb3-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>datetime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convertToDateTime</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>datetime)</span></code></pre></div>
</div>
</section>
<section id="breaking-it-down" class="level1">
<h1>Breaking it Down</h1>
<ol type="1">
<li>The first line checks if <code>openxlsx</code> is installed and loads it if needed.</li>
<li>We create our sample data frame <code>df</code> with the <code>date</code> and <code>datetime</code> columns.</li>
<li>The magic happens! We use <code>as.Date()</code> on <code>df$date</code>, specifying the <code>origin</code> as “1899-12-30”. This tells R to interpret the numbers as days since that date.</li>
<li>For <code>df$datetime</code>, we use <code>convertToDateTime()</code> from the <code>openxlsx</code> package. This function handles both date and time information stored as decimals.</li>
</ol>
<p><strong>Voila!</strong> Our <code>df</code> now has proper date and datetime columns, ready for further analysis and visualization. Let’s see the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date            datetime sales
1 2022-01-02 2022-01-02 04:04:48    14</code></pre>
</div>
</div>
</section>
<section id="youre-turn" class="level1">
<h1>You’re Turn!</h1>
<p>Now it’s your turn! Grab your own Excel data with mysterious date formats and try this code. Play with different <code>origin</code> values if needed (depending on your Excel version). Remember, R is a playground, so have fun exploring and taming those dates!</p>
<p><strong>Bonus Tip:</strong> Want to format your dates for readability? Use the <code>format()</code> function, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%d/%m/%Y"</span>)</span>
<span id="cb6-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         date            datetime sales
1  02/01/2022 2022-01-02 04:04:48    14
2  05/01/2022 2022-01-05 12:14:24    19
3  15/03/2022 2022-03-15 15:21:36    22
4  19/04/2022 2022-04-19 09:36:00    29
5  25/05/2022 2022-05-25 10:19:12    24
6  04/06/2022 2022-06-04 10:04:48    25
7  19/07/2022 2022-07-19 01:12:00    25
8  09/08/2022 2022-08-09 02:09:36    30
9  30/10/2022 2022-10-30 04:33:36    35
10 24/12/2022 2022-12-24 21:21:36    28</code></pre>
</div>
</div>
<p>This will display your dates in the familiar “day/month/year” format.</p>
<p>So there you have it, fellow R enthusiasts! With these tools, you can confidently handle Excel’s date quirks and unleash the power of your data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-05/index.html</guid>
  <pubDate>Mon, 05 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Accounts Recievables Pathways in SQL</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-02/index.html</link>
  <description><![CDATA[ 




<p>Yesterday I was working on a project that required me to create a SQL query to generate a table of accounts receivables pathways. I thought it would be interesting to share the SQL code I wrote for this task. The code is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create the table in the specified schema</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create a new table called 'c_tableau_collector_pathway_tbl' in schema 'dbo'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Drop the table if it already exists</span></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">IF</span> OBJECT_ID(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dbo.c_tableau_collector_pathway_tbl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">IS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DROP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TABLE</span> dbo.c_tableau_collector_pathway_tbl</span>
<span id="cb1-6">GO</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create the table in the specified schema</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TABLE</span> dbo.c_tableau_collector_pathway_tbl</span>
<span id="cb1-9">(</span>
<span id="cb1-10">    c_tableau_collector_pathway_tblId <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span> IDENTITY(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">PRIMARY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">KEY</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- primary key column</span></span>
<span id="cb1-11">    pt_no <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-12">    collector_dept_path <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MAX</span>)</span>
<span id="cb1-13">);</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WITH</span> tmp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> (</span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DISTINCT</span> pt_no</span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> sms.dbo.c_tableau_times_with_worklist_tbl</span>
<span id="cb1-18">    )</span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INTO</span> sms.dbo.c_tableau_collector_pathway_tbl (</span>
<span id="cb1-20">    pt_no,</span>
<span id="cb1-21">    collector_dept_path</span>
<span id="cb1-22">    )</span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rtrim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ltrim</span>(tmp.pt_no)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> [pt_no],</span>
<span id="cb1-24">    stuff((</span>
<span id="cb1-25">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z.collector_dept</span>
<span id="cb1-26">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> sms.dbo.c_tableau_times_with_worklist_tbl <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> z</span>
<span id="cb1-27">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> z.pt_no <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp.pt_no</span>
<span id="cb1-28">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> z.collector_dept</span>
<span id="cb1-29">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(event_number)</span>
<span id="cb1-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">FOR</span> XML path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb1-31">            ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> [collector_dept_path]</span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> tmp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> tmp;</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> pt_no,</span>
<span id="cb1-35">    [collector_dept_path],  </span>
<span id="cb1-36">    [number_of_distinct_collector_dept] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (LEN(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">REPLACE</span>(collector_dept_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**'</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> LEN(collector_dept_path)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> dbo.c_tableau_collector_pathway_tbl</span></code></pre></div>
<p>So what does it do? Let’s break it down step by step:</p>
<ol type="1">
<li><code>IF OBJECT_ID('dbo.c_tableau_collector_pathway_tbl', 'U') IS NOT NULL</code>
<ul>
<li>This part checks if a table named <code>c_tableau_collector_pathway_tbl</code> exists in the <code>dbo</code> schema. If it does, it proceeds to the next step.</li>
</ul></li>
<li><code>DROP TABLE dbo.c_tableau_collector_pathway_tbl</code>
<ul>
<li>If the table exists, it drops (deletes) the table <code>c_tableau_collector_pathway_tbl</code>.</li>
</ul></li>
<li><code>CREATE TABLE dbo.c_tableau_collector_pathway_tbl (...)</code>
<ul>
<li>This part creates a new table named <code>c_tableau_collector_pathway_tbl</code> in the <code>dbo</code> schema with three columns:
<ul>
<li><code>c_tableau_collector_pathway_tblId</code> of type <code>INT</code>, which is the primary key and automatically increments by 1 for each new row.</li>
<li><code>pt_no</code> of type <code>VARCHAR(50)</code>, which stores values up to 50 characters long and cannot be NULL.</li>
<li><code>collector_dept_path</code> of type <code>VARCHAR(MAX)</code>, which can store large amounts of text.</li>
</ul></li>
</ul></li>
<li><code>WITH tmp AS (...)</code>
<ul>
<li>This part defines a temporary table (<code>tmp</code>) that contains distinct values of <code>pt_no</code> from another table named <code>sms.dbo.c_tableau_times_with_worklist_tbl</code>.</li>
</ul></li>
<li><code>INSERT INTO sms.dbo.c_tableau_collector_pathway_tbl (...) SELECT ...</code>
<ul>
<li>This part inserts data into the newly created <code>c_tableau_collector_pathway_tbl</code> table. It selects distinct <code>pt_no</code> values from the temporary table <code>tmp</code> and concatenates corresponding <code>collector_dept</code> values into a single string, separated by commas. The <code>FOR XML path('')</code> part formats the result as XML, and <code>stuff(..., 1, 2, '')</code> removes the leading comma and space.</li>
</ul></li>
<li><code>SELECT pt_no, [collector_dept_path], [number_of_distinct_collector_dept] = (...)</code>
<ul>
<li>Finally, this part selects data from the <code>c_tableau_collector_pathway_tbl</code> table. It selects <code>pt_no</code>, <code>collector_dept_path</code>, and calculates the number of distinct collector departments by counting the commas in the <code>collector_dept_path</code> string.</li>
</ul></li>
</ol>
<p>In summary, this SQL code drops an existing table (if it exists), creates a new table with specific columns, inserts data into the new table by concatenating values from another table, and then selects data from the new table along with a calculated value for the number of distinct collector departments.</p>



 ]]></description>
  <category>code</category>
  <category>sql</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-02/index.html</guid>
  <pubDate>Fri, 02 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>R for the Real World: Counting those Business Days like a Pro!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hi fellow coders, data wranglers, and all-around R enthusiasts! Have you ever been stuck calculating the number of business days between two dates? You know, like figuring out how long that project <em>actually</em> took, excluding weekends (because let’s be honest, who works on those?). Well, fret no more! Today, we’re diving into the wonderful world of <em>business day calculations</em> in R with some easy-to-follow examples. Buckle up, it’s gonna be a productive ride!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="step-1-grabbing-the-toolkit" class="level2">
<h2 class="anchored" data-anchor-id="step-1-grabbing-the-toolkit">Step 1: Grabbing the Toolkit</h2>
<p>First things first, we need the right tools. We’ll be using the mighty <em>bizdays</em> package. Think of it as your personal business day calculator, always ready to lend a hand (or rather, some code). Install it with this magic spell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("bizdays")</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bizdays)</span></code></pre></div>
</div>
</section>
<section id="step-2-the-basic-count" class="level2">
<h2 class="anchored" data-anchor-id="step-2-the-basic-count">Step 2: The Basic Count</h2>
<p>Alright, let’s say you want to know how many business days there were between January 1st and December 31st, 2023. Simple, right? Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-01"</span>)</span>
<span id="cb2-2">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">business_days <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bizdays</span>(start_date, end_date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weekends"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There were "</span>, business_days, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" business days in 2023!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "There were 259 business days in 2023!"</code></pre>
</div>
</div>
<p>What’s happening here? We define the start and end dates, feed them to the <code>bizdays</code> function, and voila! It counts the business days for us, excluding weekends by default. The <code>print</code> function just displays the result with a fun message.</p>
</section>
<section id="step-3-get-creative-and-explore" class="level2">
<h2 class="anchored" data-anchor-id="step-3-get-creative-and-explore">Step 3: Get Creative and Explore!</h2>
<p>Remember, this is just the tip of the <code>bizdays</code> iceberg. You can explore its other features like:</p>
<ul>
<li>Adding or subtracting business days from a date</li>
<li>Handling custom holiday lists</li>
<li>Working with different time zones</li>
</ul>
<p><em>But wait, there’s more!</em> The most important step is to <strong>experiment and try things out yourself</strong>. Play with different dates, holidays, and weekend definitions. See what results you get and how they fit your specific needs. R is all about exploration and making it work for you!</p>
<p>So, fellow coders, go forth and conquer those business day calculations with confidence! And if you get stuck, remember, the R community is always here to help. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-01/index.html</guid>
  <pubDate>Thu, 01 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Time Flies? Time Travels! Adding Days to Dates in R (Like a Pro)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-31/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wished you could skip ahead a few days for that weekend getaway, or rewind to relive a magical moment? While real-life time travel remains a sci-fi dream, in R, adding days to dates is a breeze! Today, we’ll explore both base R and the powerful <code>lubridate</code> and <code>timetk</code> packages to master this handy skill.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-base-r-basics" class="level2">
<h2 class="anchored" data-anchor-id="example-1-base-r-basics">Example 1: Base R Basics</h2>
<p>Let’s start with the classic. Imagine you have a date stored as <code>my_date &lt;- "2024-01-31"</code> (yes, today!). To add, say, 5 days, you can simply use <code>my_date + 5</code>. Voila! You’ve time-jumped to February 5th, 2024. But wait, this doesn’t handle months or leap years like a pro.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a date object</span></span>
<span id="cb1-2">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-31"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add 5 days to the date</span></span>
<span id="cb1-5">new_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-31"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-05"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(new_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
</div>
</section>
<section id="example-2-enter-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="example-2-enter-lubridate">Example 2: Enter <code>lubridate</code></h2>
<p>This superhero package offers functions like <code>as.Date()</code> and <code>days()</code> that understand the nuances of dates. Let’s revisit our example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb9-2"></span>
<span id="cb9-3">my_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-31"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert string to Date object</span></span>
<span id="cb9-4">future_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">days</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add 5 days using days()</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">future_date <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "2024-02-05"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-05"</code></pre>
</div>
</div>
<p>See the magic? <code>days(5)</code> tells R to add 5 days specifically. You can even subtract days (imagine reliving that delicious pizza!):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pizza_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-27"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Date of pizza bliss</span></span>
<span id="cb11-2">relive_pizza <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pizza_day <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">days</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Travel back 2 days</span></span>
<span id="cb11-3"></span>
<span id="cb11-4">relive_pizza <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "2024-01-25"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25"</code></pre>
</div>
</div>
</section>
<section id="example-3-beyond-days-timetk-takes-the-wheel" class="level2">
<h2 class="anchored" data-anchor-id="example-3-beyond-days-timetk-takes-the-wheel">Example 3: Beyond Days: <code>timetk</code> Takes the Wheel</h2>
<p>Want to add weeks, months, or even years? <code>timetk</code> takes things to the next level with functions like <code>years()</code>, <code>wednesdays()</code>, and more. Check this out:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(timetk)</span>
<span id="cb13-2"></span>
<span id="cb13-3">graduation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-06-15"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your graduation date (hopefully!)</span></span>
<span id="cb13-4"></span>
<span id="cb13-5">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 hour 34 seconds"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-06-15 01:00:34 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3 months"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-09-15"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 year 3 months 6 days"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2026-09-21"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward (Minus Time)</span></span>
<span id="cb19-2">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%-time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 hour 34 seconds"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-06-14 22:59:26 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%-time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3 months"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-03-15"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%-time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 year 3 months 6 days"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-03-09"</code></pre>
</div>
</div>
<p><strong>Bonus Tip:</strong> Don’t forget about formatting! Use <code>format()</code> with options like <code>"%Y-%m-%d"</code> to display your dates in your preferred format.</p>
</section>
</section>
<section id="now-its-your-turn" class="level1">
<h1>Now it’s your turn!</h1>
<ul>
<li>Try adding different units (weeks, months) to existing dates.</li>
<li>Use these techniques in your R scripts to analyze time-series data.</li>
<li>Challenge yourself: Can you calculate the difference between two dates in days or weeks?</li>
</ul>
<p>Remember, practice makes perfect. The more you play with dates in R, the more comfortable you’ll become with this essential skill. So go forth, explore, and conquer the realm of time in R!</p>
<p><strong>P.S.</strong> Share your coolest date-manipulation tricks in the comments below. Let’s learn from each other and keep the R community thriving!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-31/index.html</guid>
  <pubDate>Wed, 31 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Time Manipulation in R: Subtracting Hours with Ease</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-30/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wished you could rewind time in R, not just for debugging, but for actual data analysis? Well, you don’t need plutonium and flux capacitors! Let’s dive into the fascinating world of time manipulation in R, specifically <strong>subtracting hours from timestamps</strong>. We’ll explore two approaches: one using base R’s time-bending tricks, and another powered by the <strong>lubridate</strong> package, our time-traveling companion.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r-back-to-the-basics" class="level2">
<h2 class="anchored" data-anchor-id="base-r-back-to-the-basics">Base R: Back to the Basics</h2>
<p>Imagine a timestamp like a ticking clock. Each second is another notch on the gears, and we want to turn those gears backward a few hours. Base R lets us do this by treating time as numbers. Remember, there are 3600 seconds in an hour, so to subtract 2 hours, we simply:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">my_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-30 10:00:00"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time object</span></span>
<span id="cb1-2">new_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours (2 * 3600 seconds)</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_time) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See the original time</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 10:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_time) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Voila! 2 hours back!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 08:00:00 EST"</code></pre>
</div>
</div>
<p>This code tells R to:</p>
<ol type="1">
<li>Create a time object <code>my_time</code> representing “January 30, 2024, 10:00 AM”.</li>
<li>Define <code>new_time</code> by subtracting 2 hours from <code>my_time</code>. We multiply 2 by 3600 because, well, you get the point.</li>
<li>Print both times to see the magic unfold.</li>
</ol>
</section>
<section id="lubridate-time-travel-made-easy" class="level2">
<h2 class="anchored" data-anchor-id="lubridate-time-travel-made-easy">Lubridate: Time Travel Made Easy</h2>
<p>But what if you want a fancier ride? This is where <strong>lubridate</strong> comes in! This package adds superpowers to our time-traveling toolkit. Let’s rewrite the above using its <code>hours()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">my_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-30 10:00:00"</span>)</span>
<span id="cb5-4">new_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hours</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours with the `hours()` function</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 10:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 08:00:00 EST"</code></pre>
</div>
</div>
<p>This code does the same thing, but with less math and more clarity. We simply tell R to subtract 2 hours using the <code>hours(2)</code> function, making the code cleaner and more readable.</p>
</section>
</section>
<section id="bonus-round-negative-time-zones-no-problem" class="level1">
<h1>Bonus Round: Negative Time Zones? No Problem!</h1>
<p>Let’s say you’re working with data from different time zones. Fear not! Both base R and lubridate can handle these complexities. Simply specify the time zone when creating your time object, and the calculations will adjust accordingly.</p>
</section>
<section id="time-to-experiment" class="level1">
<h1>Time to Experiment!</h1>
<p>Now that you have the tools, try these challenges:</p>
<ol type="1">
<li>Write a function to subtract any number of hours from a given time.</li>
<li>Calculate the time difference between two events in different time zones.</li>
<li>Explore other lubridate functions for manipulating dates and times.</li>
</ol>
<p>Remember, practice makes perfect (and less buggy code!). So, fire up R, grab your data, and let’s start time-traveling!</p>
<p><strong>Bonus Tip:</strong> For extra nerdy fun, try plotting your time-shifted data to visualize the journey through time.</p>
<p>Happy R-ing and happy time-traveling!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-30/index.html</guid>
  <pubDate>Tue, 30 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Extract Month from Date in R (With Examples)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-29/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings fellow R enthusiasts! Today, we’re diving into a fundamental task: extracting the month from a date in R. Whether you’re new to R or a seasoned pro, understanding how to manipulate dates is essential. We’ll explore two popular methods: using base R and the powerful lubridate package. So, let’s roll up our sleeves and get started!</p>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>First up, let’s tackle the task with base R. We’ll use the <code>format()</code> function to extract the month from a date.</p>
</section>
<section id="example-1-extracting-month-from-a-vector-of-dates" class="level2">
<h2 class="anchored" data-anchor-id="example-1-extracting-month-from-a-vector-of-dates">Example 1: Extracting Month from a Vector of Dates</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector of dates</span></span>
<span id="cb1-2">dates_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-05-20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-10"</span>))</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month</span></span>
<span id="cb1-5">months <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(dates_vector, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(months)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "01" "05" "09"</code></pre>
</div>
</div>
<p>In this example, we have a vector of dates. We use the <code>format()</code> function to specify that we want to extract the month (<code>%m</code>), and voila! We get the months corresponding to each date.</p>
<section id="example-2-extracting-month-from-a-column-in-a-data-frame" class="level3">
<h3 class="anchored" data-anchor-id="example-2-extracting-month-from-a-column-in-a-data-frame">Example 2: Extracting Month from a Column in a Data Frame</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-05-20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-10"</span>)))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month from the 'date' column</span></span>
<span id="cb3-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the data frame with the new 'month' column</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date month
1 2023-01-15    01
2 2023-05-20    05
3 2023-09-10    09</code></pre>
</div>
</div>
<p>Here, we’re working with a data frame. We use the <code>$</code> operator to access the ‘date’ column and apply the <code>format()</code> function to extract the month. The result is a data frame with an additional ‘month’ column containing the extracted months.</p>
</section>
<section id="example-3-extracting-month-from-a-single-date" class="level3">
<h3 class="anchored" data-anchor-id="example-3-extracting-month-from-a-single-date">Example 3: Extracting Month from a Single Date</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Single date</span></span>
<span id="cb5-2">single_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-07-04"</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month</span></span>
<span id="cb5-5">month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(single_date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(month)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "07"</code></pre>
</div>
</div>
<p>Even if you have just one date, you can still use the <code>format()</code> function to extract the month. Simple and effective!</p>
</section>
</section>
<section id="using-lubridate-package" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate-package">Using lubridate Package</h2>
<p>Now, let’s switch gears and explore how to achieve the same task using the lubridate package, known for its user-friendly date-time functions.</p>
<section id="example-4-extracting-month-using-lubridates-month-function" class="level3">
<h3 class="anchored" data-anchor-id="example-4-extracting-month-using-lubridates-month-function">Example 4: Extracting Month Using lubridate’s month() Function</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample date</span></span>
<span id="cb7-5">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-11-30"</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month using lubridate's month() function</span></span>
<span id="cb7-8">month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date)</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(month)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11</code></pre>
</div>
</div>
<p>With lubridate, we simplify the process using the <code>month()</code> function directly on the date object. It’s clean, concise, and effortlessly extracts the month.</p>
</section>
</section>
</section>
<section id="encouragement-and-conclusion" class="level1">
<h1>Encouragement and Conclusion</h1>
<p>Now that you’ve seen how to extract the month from a date using both base R and the lubridate package, I encourage you to experiment further! Try different date formats, explore other functions within these methods, and integrate them into your data analysis workflows.</p>
<p>Understanding date manipulation in R opens up a world of possibilities for analyzing temporal data. Whether you’re analyzing sales trends, tracking patient appointments, or exploring climate data, mastering date manipulation is a valuable skill.</p>
<p>Keep coding, keep exploring, and stay curious! Happy extracting!</p>
<p>Until next time, Your fellow R enthusiast</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-29/index.html</guid>
  <pubDate>Mon, 29 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Unveiling the Earliest Date: A Journey Through R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-26/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings, fellow data enthusiasts! Today, we embark on a quest to uncover the earliest date lurking within a column of dates using the power of R. Whether you’re a seasoned R programmer or a curious newcomer, fear not, for we shall navigate through this journey step by step, unraveling the mysteries of date manipulation along the way.</p>
<p>Imagine you have a dataset filled with dates, and you’re tasked with finding the earliest one among them. How would you tackle this challenge? Fear not, for R comes to our rescue with its arsenal of functions and packages.</p>
</section>
<section id="setting-the-stage" class="level1">
<h1>Setting the Stage</h1>
<p>Let’s start by loading our dataset into R. For the sake of this adventure, let’s assume our dataset is named <code>my_data</code> and contains a column of dates named <code>date_column</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load your dataset into R (replace "path_to_your_file" with the actual path)</span></span>
<span id="cb1-2">my_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path_to_your_file"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Peek into the structure of your data</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(my_data)</span></code></pre></div>
</section>
<section id="unveiling-the-earliest-date" class="level1">
<h1>Unveiling the Earliest Date</h1>
<p>Now comes the thrilling part – finding the earliest date! Brace yourselves as we unleash the power of R:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finding the earliest date in a column</span></span>
<span id="cb2-2">earliest_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date_column, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<p>In this simple yet powerful line of code, we use the <code>min()</code> function to find the minimum (earliest) date in our <code>date_column</code>. The <code>na.rm = TRUE</code> argument ensures that any missing values are ignored during the calculation.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>Let’s dive into a few examples to solidify our understanding:</p>
<section id="example-1-finding-the-earliest-date-in-a-simple-dataset" class="level2">
<h2 class="anchored" data-anchor-id="example-1-finding-the-earliest-date-in-a-simple-dataset">Example 1: Finding the earliest date in a simple dataset:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dataset</span></span>
<span id="cb3-2">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-12-10"</span>))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finding the earliest date</span></span>
<span id="cb3-5">earliest_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(dates)</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(earliest_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-12-10"</code></pre>
</div>
</div>
</section>
<section id="example-2-handling-missing-values-gracefully" class="level2">
<h2 class="anchored" data-anchor-id="example-2-handling-missing-values-gracefully">Example 2: Handling missing values gracefully:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dataset with missing values</span></span>
<span id="cb5-2">dates_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-12-10"</span>))</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finding the earliest date, ignoring missing values</span></span>
<span id="cb5-5">earliest_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(dates_with_na, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(earliest_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2022-12-10"</code></pre>
</div>
</div>
</section>
</section>
<section id="explaining-the-code" class="level1">
<h1>Explaining the Code</h1>
<p>Now, let’s break down the magic behind our code:</p>
<ul>
<li><code>min()</code>: This function returns the smallest value in a vector or a column of a data frame.</li>
<li><code>na.rm = TRUE</code>: This argument tells R to remove any missing values (NA) before computing the minimum.</li>
</ul>
</section>
<section id="embark-on-your-own-journey" class="level1">
<h1>Embark on Your Own Journey</h1>
<p>I encourage you, dear reader, to embark on your own journey of discovery. Open RStudio, load your dataset, and unleash the power of R to find the earliest date hidden within your data. Experiment with different datasets, handle missing values gracefully, and marvel at the versatility of R.</p>
<p>In conclusion, armed with the knowledge of R, we have conquered the quest to find the earliest date in a column. May your data explorations be fruitful, and may you continue to unravel the mysteries of data with R by your side.</p>
<p>Until next time, happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-26/index.html</guid>
  <pubDate>Fri, 26 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Date Calculations in R: A Guide to Calculating Months with Base R and lubridate</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-25/index.html</link>
  <description><![CDATA[ 




<section id="how-to-subtract-hours-from-time-in-r-with-examples" class="level1">
<h1>How to Subtract Hours from Time in R (With Examples)</h1>
<p>Welcome back, fellow R enthusiasts! Today, we’re diving into a common task in data manipulation: subtracting hours from time objects in R. Whether you’re working with timestamps, time durations, or time series data, knowing how to subtract hours can be incredibly useful. In this post, we’ll explore two popular methods: using base R functions and the <code>lubridate</code> package.</p>
<section id="why-subtract-hours" class="level2">
<h2 class="anchored" data-anchor-id="why-subtract-hours">Why Subtract Hours?</h2>
<p>Before we jump into the code, let’s quickly discuss why you might need to subtract hours from time objects. This operation is handy in various scenarios, such as:</p>
<ul>
<li>Adjusting timestamps for different time zones.</li>
<li>Calculating time differences between events.</li>
<li>Shifting time points in time series analysis.</li>
</ul>
<p>Now, let’s get our hands dirty with some code!</p>
</section>
<section id="using-base-r-functions" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r-functions">Using Base R Functions</h2>
<p>In base R, we can perform basic arithmetic operations on time objects. To subtract hours from a time object, we’ll use the <code>POSIXct</code> class, which represents date and time information. Here’s a simple example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a POSIXct object representing a specific time</span></span>
<span id="cb1-2">my_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-25 10:00:00"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours from the original time</span></span>
<span id="cb1-5">new_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the original and modified times</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25 10:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25 08:00:00 EST"</code></pre>
</div>
</div>
<p>In this code snippet, we first create a <code>POSIXct</code> object <code>my_time</code> representing 10:00 AM on January 25, 2024. Then, we subtract 2 hours and assign the result to <code>new_time</code>. Finally, we print both the original and modified times to see the difference.</p>
</section>
<section id="using-lubridate-package" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate-package">Using lubridate Package</h2>
<p>The <code>lubridate</code> package provides convenient functions for handling date-time data in R. It simplifies common tasks like parsing dates, extracting components, and performing arithmetic operations. Let’s see how we can subtract hours using <code>lubridate</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a POSIXct object representing a specific time</span></span>
<span id="cb5-5">my_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-25 10:00:00"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours from the original time</span></span>
<span id="cb5-8">new_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hours</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the original and modified times</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25 10:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25 08:00:00 UTC"</code></pre>
</div>
</div>
<p>In this example, we start by loading the <code>lubridate</code> package. Then, we use the <code>ymd_hms()</code> function to create a <code>POSIXct</code> object <code>my_time</code>. Next, we subtract 2 hours using the <code>hours()</code> function and assign the result to <code>new_time</code>. Finally, we print both times to compare the changes.</p>
</section>
<section id="additional-examples" class="level2">
<h2 class="anchored" data-anchor-id="additional-examples">Additional Examples</h2>
<p>Let’s explore a few more examples to solidify our understanding:</p>
<section id="example-1-subtracting-hours-from-a-vector-of-times" class="level3">
<h3 class="anchored" data-anchor-id="example-1-subtracting-hours-from-a-vector-of-times">Example 1: Subtracting Hours from a Vector of Times</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector of POSIXct times</span></span>
<span id="cb9-2">times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-25 08:00:00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-25 12:00:00"</span>))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 1 hour from each time</span></span>
<span id="cb9-5">adjusted_times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> times <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hours</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the original and modified times</span></span>
<span id="cb9-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(times)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25 08:00:00 EST" "2024-01-25 12:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(adjusted_times)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25 07:00:00 EST" "2024-01-25 11:00:00 EST"</code></pre>
</div>
</div>
<p>In this example, we have a vector of two times, and we subtract 1 hour from each using the <code>hours()</code> function.</p>
</section>
<section id="example-2-subtracting-hours-from-a-time-interval" class="level3">
<h3 class="anchored" data-anchor-id="example-2-subtracting-hours-from-a-time-interval">Example 2: Subtracting Hours from a Time Interval</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time interval from 9:00 AM to 5:00 PM</span></span>
<span id="cb13-2">time_interval <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-25 09:00:00"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd_hms</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-25 17:00:00"</span>))</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours from the interval</span></span>
<span id="cb13-5">adjusted_interval <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">int_shift</span>(time_interval, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hours</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the original and modified intervals</span></span>
<span id="cb13-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(time_interval)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2024-01-25 09:00:00 UTC--2024-01-25 17:00:00 UTC</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(adjusted_interval)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2024-01-25 07:00:00 UTC--2024-01-25 15:00:00 UTC</code></pre>
</div>
</div>
<p>In this example, we create a time interval representing working hours and subtract 2 hours from it.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Subtracting hours from time objects is a fundamental operation in data manipulation and time series analysis. In this post, we explored two methods: using base R functions and the <code>lubridate</code> package. Whether you prefer the simplicity of base R or the convenience of <code>lubridate</code>, mastering this skill will undoubtedly enhance your R programming repertoire.</p>
<p>Now it’s your turn! Try out these examples with your own time data and experiment with different hour values. Don’t hesitate to reach out if you have any questions or want to share your experiences. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-25/index.html</guid>
  <pubDate>Thu, 25 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Date Calculations in R: A Guide to Calculating Months with Base R and lubridate</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings fellow R enthusiasts! Today, let’s dive into the fascinating world of date calculations. Whether you’re a data scientist, analyst, or just someone who loves coding in R, understanding how to calculate the number of months between dates is a valuable skill. In this blog post, we’ll explore two approaches using both base R and the lubridate package, ensuring you have the tools to tackle any date-related challenge that comes your way.</p>
</section>
<section id="methods" class="level1">
<h1>Methods</h1>
<section id="base-r-method" class="level2">
<h2 class="anchored" data-anchor-id="base-r-method">Base R Method</h2>
<p>Let’s start with the basics – base R. The <code>difftime</code> function will be our trusty companion in this method. The idea is to find the time difference between two dates and then convert it into months.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dates</span></span>
<span id="cb1-2">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-15"</span>)</span>
<span id="cb1-3">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-07-20"</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate time difference in days</span></span>
<span id="cb1-6">time_diff_days <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> end_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_date</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert days to months</span></span>
<span id="cb1-9">months_diff_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(time_diff_days) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.44</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># average days in a month</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of months using base R:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(months_diff_base, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of months using base R: 18.1 </code></pre>
</div>
</div>
</section>
<section id="explanation" class="level2">
<h2 class="anchored" data-anchor-id="explanation">Explanation</h2>
<ul>
<li>We define our start and end dates using the <code>as.Date</code> function.</li>
<li>Calculate the time difference in days using the subtraction operator.</li>
<li>Convert the time difference to months by dividing by the average days in a month (30.44).</li>
</ul>
</section>
<section id="lubridate-package-method" class="level2">
<h2 class="anchored" data-anchor-id="lubridate-package-method">Lubridate Package Method</h2>
<p>Now, let’s add a touch of elegance to our date calculations with the lubridate package. This package simplifies working with dates and times in R, making our code more readable and intuitive.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dates</span></span>
<span id="cb3-5">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-15"</span>)</span>
<span id="cb3-6">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-07-20"</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate months difference using lubridate</span></span>
<span id="cb3-9">months_diff_lubridate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span>(start_date, end_date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%/%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of months using lubridate:"</span>, months_diff_lubridate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of months using lubridate: 18 </code></pre>
</div>
</div>
</section>
<section id="explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="explanation-1">Explanation</h2>
<ul>
<li>We load the lubridate package to leverage its convenient date functions.</li>
<li>Use the <code>ymd</code> function to convert our dates into lubridate date objects.</li>
<li>Create an interval between the start and end dates and use <code>%/%</code> to get the floor division by months.</li>
</ul>
</section>
<section id="handling-partial-months" class="level2">
<h2 class="anchored" data-anchor-id="handling-partial-months">Handling Partial Months</h2>
<p>Life isn’t always about whole months, and our date calculations should reflect that reality. Let’s modify our examples to include partial months.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample dates with partial months</span></span>
<span id="cb5-2">start_date_partial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-15"</span>)</span>
<span id="cb5-3">end_date_partial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-07-20"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subtract 15 days for a partial month</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base R with partial months</span></span>
<span id="cb5-6">time_diff_days_partial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> end_date_partial <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_date_partial</span>
<span id="cb5-7">months_diff_base_partial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(time_diff_days_partial) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30.44</span></span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of months (with partial) using base R:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(months_diff_base_partial, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of months (with partial) using base R: 17.61 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lubridate with partial months</span></span>
<span id="cb7-2">months_diff_lubridate_partial <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span>(start_date_partial, end_date_partial) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of months (with partial) using lubridate:"</span>, months_diff_lubridate_partial, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of months (with partial) using lubridate: 17.66667 </code></pre>
</div>
</div>
</section>
<section id="more-lubridate-with-interval" class="level2">
<h2 class="anchored" data-anchor-id="more-lubridate-with-interval">More lubridate with <code>interval()</code></h2>
<p>The lubridate package makes working with dates in R much easier. It provides the <code>interval</code> function to calculate the time difference between two dates:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">date1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>)</span>
<span id="cb9-2">date2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-04-30"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span>(date1, date2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15.5</code></pre>
</div>
</div>
<p>This returns the number of months including the partial:</p>
<p><code>[1] 15.870968</code></p>
<p>To get just the full months:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span>(date1, date2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%/%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15</code></pre>
</div>
</div>
<p>Which gives:</p>
<p><code>[1] 15</code></p>
<p>The <code>interval</code> function combined with lubridate’s <code>months</code> makes this a very clean way to calculate both full and partial months between dates.</p>
</section>
</section>
<section id="encouragement" class="level1">
<h1>Encouragement</h1>
<p>Congratulations! You’ve now mastered the art of calculating months between dates in R using both base R and the lubridate package. I encourage you to try different date ranges, experiment with partial months, and explore other date-related functions in R. The more you practice, the more confident you’ll become in handling time-related data in your projects. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-24/index.html</guid>
  <pubDate>Wed, 24 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Data Lengths with R’s lengths() Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-23/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey folks! Today, we’re diving into the world of R programming, and our star of the show is the <code>lengths()</code> function. This little gem might not be as famous as some other R functions, but it’s incredibly handy when it comes to exploring the lengths of elements in your data structures.</p>
<section id="what-is-lengths-and-why-should-you-care" class="level2">
<h2 class="anchored" data-anchor-id="what-is-lengths-and-why-should-you-care">What is lengths() and Why Should You Care?</h2>
<p>In a nutshell, <code>lengths()</code> is a function in R that returns a vector of the lengths of the elements in a list, vector, or other data structure. It’s like a measuring tape for your data, allowing you to quickly assess the size of different components.</p>
</section>
<section id="lets-get-started-with-examples" class="level2">
<h2 class="anchored" data-anchor-id="lets-get-started-with-examples">Let’s Get Started with Examples</h2>
<section id="example-1-exploring-a-numeric-vector" class="level3">
<h3 class="anchored" data-anchor-id="example-1-exploring-a-numeric-vector">Example 1: Exploring a Numeric Vector</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a numeric vector</span></span>
<span id="cb1-2">numeric_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use lengths() to get the lengths of elements</span></span>
<span id="cb1-5">element_lengths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(numeric_vector))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(element_lengths)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
</div>
<p>In this example, we create a numeric vector and use <code>lengths()</code> to find out how many elements it contains. The output will be a vector with a single value, representing the length of our numeric vector.</p>
</section>
<section id="example-2-investigating-a-list-with-varying-lengths" class="level3">
<h3 class="anchored" data-anchor-id="example-2-investigating-a-list-with-varying-lengths">Example 2: Investigating a List with Varying Lengths</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a list with elements of different lengths</span></span>
<span id="cb3-2">mixed_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use lengths() to get the lengths of elements</span></span>
<span id="cb3-5">element_lengths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(mixed_list)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(element_lengths)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 1 6</code></pre>
</div>
</div>
<p>Here, we’ve crafted a list with diverse elements – a numeric vector, a character string, and a matrix. <code>lengths()</code> now gives us a vector containing the lengths of each element in the list.</p>
</section>
<section id="example-3-checking-lengths-of-data-frames" class="level3">
<h3 class="anchored" data-anchor-id="example-3-checking-lengths-of-data-frames">Example 3: Checking Lengths of Data Frames</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame</span></span>
<span id="cb5-2">data_frame_example <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb5-3">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>),</span>
<span id="cb5-4">                                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>))</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use lengths() to get the lengths of columns in the data frame</span></span>
<span id="cb5-7">column_lengths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(data_frame_example)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(column_lengths)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Name   Age Score 
    3     3     3 </code></pre>
</div>
</div>
<p>In this example, we’re working with a data frame. <code>lengths()</code> allows us to check the number of elements in each column, providing insights into the structure of our data.</p>
</section>
</section>
<section id="why-should-you-experiment" class="level2">
<h2 class="anchored" data-anchor-id="why-should-you-experiment">Why Should You Experiment?</h2>
<p>Understanding the lengths of elements in your data is crucial for efficient data manipulation. Whether you’re dealing with lists, vectors, or data frames, knowing the sizes of different components can guide your analysis and help you avoid unexpected surprises.</p>
</section>
<section id="your-turn-to-play" class="level2">
<h2 class="anchored" data-anchor-id="your-turn-to-play">Your Turn to Play!</h2>
<p>Now that you’ve seen some examples, I encourage you to grab your own datasets, create different structures, and experiment with <code>lengths()</code>. It’s a fantastic tool for quickly grasping the dimensions of your data.</p>
<p>Remember, the best way to learn is by doing. So fire up your R console, start experimenting, and feel the satisfaction of mastering yet another powerful tool in your R toolkit!</p>
<p>Happy coding! 🚀✨</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-23/index.html</guid>
  <pubDate>Tue, 23 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Demystifying bootstrap_stat_plot(): Your Ticket to Insightful Data Exploration</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever feel like your data is hiding secrets? Like it’s whispering truths but you just can’t quite grasp them? Well, fear not, fellow data sleuths! Today, we’ll crack the code of an R function that’s like a magnifying glass for your statistical investigations: <code>bootstrap_stat_plot()</code> from the <strong>TidyDensity</strong> package.</p>
<p><strong>Imagine this:</strong> You have a dataset, say, car mileage (MPG) from the classic <code>mtcars</code> dataset. You want to understand the <strong>average</strong> MPG, but what if that average is just a mirage? What if it’s skewed by a few outliers or doesn’t capture the full story?</p>
<p>Enter <strong>bootstrapping</strong>, a statistical technique that’s like taking your data on a wild ride. It creates <strong>multiple copies</strong> of your data, each with a slight twist, and then calculates the statistic you’re interested in (e.g., average MPG) for each copy. This gives you a <strong>distribution</strong> of possible averages, revealing the variability and potential biases lurking beneath the surface.</p>
<p><strong><code>bootstrap_stat_plot()</code></strong> takes this magic a step further. It not only calculates the distribution but also <strong>visualizes</strong> it, giving you a clear picture of how the statistic fluctuates across different versions of your data. It’s like a <strong>magnifying glass</strong> for your statistical investigations!</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<section id="syntax" class="level2">
<h2 class="anchored" data-anchor-id="syntax">Syntax</h2>
<p>Let’s take a look at the function:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  .value,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmean"</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb1-8">)</span></code></pre></div>
</section>
<section id="arguments" class="level2">
<h2 class="anchored" data-anchor-id="arguments">Arguments</h2>
<p><strong>1. The Data:</strong></p>
<ul>
<li><code>.data</code>: The data frame containing your data.</li>
</ul>
<p><strong>2. The Value:</strong></p>
<ul>
<li><code>.value</code>: The variable you want to calculate the statistic for.</li>
</ul>
<p><strong>3. The Statistic:</strong></p>
<ul>
<li><p><code>.stat</code>: The statistic you want to calculate. Options include:</p>
<ul>
<li><code>cmean</code>: The mean</li>
<li><code>cmedian</code>: The median</li>
<li><code>cmin</code>: The minimum</li>
<li><code>cmax</code>: The maximum</li>
<li><code>csd</code>: The standard deviation</li>
<li><code>cvar</code>: The variance</li>
<li>and many others!</li>
</ul></li>
</ul>
<p><strong>4. Show Groups:</strong></p>
<ul>
<li><code>.show_groups</code>: Whether to show the groups in the plot. Default is <code>FALSE</code>.</li>
</ul>
<p><strong>5. Show Confidence Interval Labels:</strong></p>
<ul>
<li><code>.show_ci_labels</code>: Whether to show the confidence interval labels in the plot. Default is <code>TRUE</code>.</li>
</ul>
<p><strong>6. Interactive:</strong></p>
<ul>
<li><code>.interactive</code>: Whether to make the plot interactive. Default is <code>FALSE</code>.</li>
</ul>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
</section>
<section id="example-1---show-replications" class="level1">
<h1>Example 1 - Show replications</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(patchwork)</span>
<span id="cb2-3"></span>
<span id="cb2-4">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg</span>
<span id="cb2-5">ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">p1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> ns) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb2-9">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmean"</span>, </span>
<span id="cb2-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-12">  ) </span>
<span id="cb2-13"></span>
<span id="cb2-14">p2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> ns) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb2-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb2-16">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmin"</span>, </span>
<span id="cb2-17">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-18">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-19">  )</span>
<span id="cb2-20"></span>
<span id="cb2-21">p3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> ns) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb2-23">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmax"</span>, </span>
<span id="cb2-24">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-25">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-26">  )</span>
<span id="cb2-27"></span>
<span id="cb2-28">p4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> ns) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb2-30">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csd"</span>, </span>
<span id="cb2-31">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb2-32">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb2-33">  )</span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wrap_plots</span>(</span>
<span id="cb2-36">  p1, p2, p4, p3, </span>
<span id="cb2-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb2-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">widths =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-39">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-22/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Let’s dissect the code to see how it works:</p>
<p><strong>1. The Data:</strong></p>
<ul>
<li><code>.data</code>: This is where your bootstrapped data lives, usually after using <code>tidy_bootstrap()</code> or <code>bootstrap_unnest_tbl()</code> to create it.</li>
</ul>
<p><strong>2. The Statistic:</strong></p>
<ul>
<li><code>.value</code>: This is the column you want to analyze, like <code>mpg</code> in our example.</li>
<li><code>.stat</code>: This is the magic spell! It tells the function what statistic to calculate on your chosen value. By default, it’s <code>"cmean"</code> for the <strong>cumulative mean</strong>, but you can choose others like <code>"cmin"</code> for the minimum, <code>"cmax"</code> for the maximum, or even <code>"csd"</code> for the circular standard deviation.</li>
</ul>
<p><strong>3. Visualization Options:</strong></p>
<ul>
<li><code>.show_groups</code>: Turn this to <code>TRUE</code> if you want to see the distribution for <strong>each bootstrap sample</strong> (think of it as a swarm of data points). By default, it shows just the overall distribution.</li>
<li><code>.show_ci_labels</code>: This one displays the <strong>confidence interval</strong> bounds (think of it as the range where the true statistic likely lies). By default, you get the last values of the upper and lower bounds.</li>
</ul>
<p><strong>4. Interactive Mode:</strong></p>
<ul>
<li><code>.interactive</code>: Set this to <code>TRUE</code> if you want to get a <strong>plotly plot object</strong> back, which you can then customize further. Think of it as a living graph you can play with!</li>
</ul>
</section>
<section id="example-2---hide-replications" class="level1">
<h1>Example 2 - Hide replications</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">p1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb3-3">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmean"</span>, </span>
<span id="cb3-4">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb3-5">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-6">  )</span>
<span id="cb3-7"></span>
<span id="cb3-8">p2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb3-10">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmin"</span>, </span>
<span id="cb3-11">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb3-12">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-13">  )</span>
<span id="cb3-14"></span>
<span id="cb3-15">p3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb3-17">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cmax"</span>, </span>
<span id="cb3-18">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb3-19">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-20">  )</span>
<span id="cb3-21"></span>
<span id="cb3-22">p4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bootstrap</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap_stat_plot</span>(y,</span>
<span id="cb3-24">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"csd"</span>, </span>
<span id="cb3-25">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_groups =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb3-26">                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.show_ci_label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-27">  )</span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wrap_plots</span>(</span>
<span id="cb3-30">  p1, p2, p4, p3, </span>
<span id="cb3-31">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb3-32">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">widths =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">heights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-33">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-22/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this example we did two things different, we hid the replications, the simulations was left to the default of 2000 and the labels were turned off. This is useful when you want to show a summary of the data.</p>
</section>
<section id="your-turn-to-explore" class="level1">
<h1>Your Turn to Explore</h1>
<p>Don’t just take our word for it! Try <code>bootstrap_stat_plot()</code> on your own data. Experiment with different statistics, explore the interactive mode, and see how it unlocks new insights you might have missed before. Remember, the more you play, the more you discover!</p>
<p><strong>So, unleash your inner data detective and let <code>bootstrap_stat_plot()</code> guide you to a deeper understanding of your data.</strong> Happy exploring!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-22/index.html</guid>
  <pubDate>Mon, 22 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The new function on the block with tidyAML extract_regression_residuals()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-19/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I discussed the use of the function <code>internal_make_wflw_predictions()</code> in the <code>tidyAML</code> R package. Today I will discuss the use of the function <code>extract_wflw_pred()</code> and the brand new function <code>extract_regression_residuals()</code> in the <code>tidyAML</code> R package. We breifly saw yesterday the output of the function <code>internal_make_wflw_predictions()</code> which is a list of tibbles that are typically inside of a list column in the final output of <code>fast_regression()</code> and <code>fast_classification()</code>. The function <code>extract_wflw_pred()</code> takes this list of tibbles and extracts them from that output. The function <code>extract_regression_residuals()</code> also extracts those tibbles and has the added feature of also returning the residuals. Let’s see how these functions work.</p>
</section>
<section id="the-new-function" class="level1">
<h1>The new function</h1>
<p>First, we will go over the syntax of the new function <code>extract_regression_residuals()</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(.model_tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pivot_long =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>The function takes two arguments. The first argument is <code>.model_tbl</code> which is the output of <code>fast_regression()</code> or <code>fast_classification()</code>. The second argument is <code>.pivot_long</code> which is a logical argument that defaults to <code>FALSE</code>. If <code>TRUE</code> then the output will be in a long format. If <code>FALSE</code> then the output will be in a wide format. Let’s see how this works.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load packages</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(multilevelmod) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for the gee model</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidymodels_prefer</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># good practice when using tidyAML</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb2-10">frt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb2-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> mtcars, </span>
<span id="cb2-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.rec_obj =</span> rec_obj, </span>
<span id="cb2-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stan"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gee"</span>),</span>
<span id="cb2-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span></span>
<span id="cb2-15">  )</span></code></pre></div>
</div>
<p>Let’s break down the R code step by step:</p>
<ol type="1">
<li><strong>Loading Libraries:</strong></li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(multilevelmod) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for the gee model</span></span></code></pre></div>
<p>Here, the code is loading several R packages. These packages provide functions and tools for data analysis, modeling, and visualization. <code>tidyAML</code> and <code>tidymodels</code> are particularly relevant for modeling, while <code>tidyverse</code> is a collection of packages for data manipulation and visualization. <code>multilevelmod</code> is included for the Generalized Estimating Equations (gee) model.</p>
<ol start="2" type="1">
<li><p><strong>Setting Preferences:</strong></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidymodels_prefer</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># good practice when using tidyAML</span></span></code></pre></div></li>
</ol>
<p>This line of code is setting preferences for the tidy modeling workflow using <code>tidymodels_prefer()</code>. It ensures that when using <code>tidyAML</code>, the tidy modeling conventions are followed. Tidy modeling involves an organized and consistent approach to modeling in R.</p>
<ol start="3" type="1">
<li><p><strong>Creating a Recipe Object:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span></code></pre></div></li>
</ol>
<p>Here, a recipe object (<code>rec_obj</code>) is created using the <code>recipe</code> function from the <code>tidymodels</code> package. The formula <code>mpg ~ .</code> specifies that we want to predict the <code>mpg</code> variable based on all other variables in the dataset (<code>mtcars</code>).</p>
<ol start="4" type="1">
<li><p><strong>Performing Fast Regression:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">frt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.data =</span> mtcars, </span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.rec_obj =</span> rec_obj, </span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stan"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gee"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span></span>
<span id="cb6-6">)</span></code></pre></div></li>
</ol>
<p>This part involves using the <code>fast_regression</code> function. It performs a fast regression analysis using various engines specified by <code>.parsnip_eng</code> and specific functions specified by <code>.parsnip_fns</code>. In this case, it includes linear models (<code>lm</code>), generalized linear models (<code>glm</code>), Stan models (<code>stan</code>), and the Generalized Estimating Equations model (<code>gee</code>). The results are stored in the <code>frt_tbl</code> table.</p>
<p>In summary, the code is setting up a tidy modeling workflow, creating a recipe for predicting <code>mpg</code> based on other variables in the <code>mtcars</code> dataset, and then performing a fast regression using different engines and functions. The choice of engines and functions allows flexibility in exploring different modeling approaches.</p>
<p>Now that we have the output of <code>fast_regression()</code> stored in <code>frt_tbl</code>, we can use the function <code>extract_wflw_pred()</code> to extract the predictions and from the output. Let’s see how this works. First, the syntax:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(.data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.model_id =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>The function takes two arguments. The first argument is <code>.data</code> which is the output of <code>fast_regression()</code> or <code>fast_classification()</code>. The second argument is <code>.model_id</code> which is a numeric vector that defaults to <code>NULL</code>. If <code>NULL</code> then the function will extract none of the predictions from the output. If a numeric vector is provided then the function will extract the predictions for the models specified by the numeric vector. Let’s see how this works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 64 × 4
   .model_type     .data_category .data_type .value
   &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;       &lt;dbl&gt;
 1 lm - linear_reg actual         actual       15.2
 2 lm - linear_reg actual         actual       10.4
 3 lm - linear_reg actual         actual       33.9
 4 lm - linear_reg actual         actual       32.4
 5 lm - linear_reg actual         actual       16.4
 6 lm - linear_reg actual         actual       21.5
 7 lm - linear_reg actual         actual       15.8
 8 lm - linear_reg actual         actual       15  
 9 lm - linear_reg actual         actual       14.7
10 lm - linear_reg actual         actual       10.4
# ℹ 54 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 128 × 4
   .model_type     .data_category .data_type .value
   &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;       &lt;dbl&gt;
 1 lm - linear_reg actual         actual       15.2
 2 lm - linear_reg actual         actual       10.4
 3 lm - linear_reg actual         actual       33.9
 4 lm - linear_reg actual         actual       32.4
 5 lm - linear_reg actual         actual       16.4
 6 lm - linear_reg actual         actual       21.5
 7 lm - linear_reg actual         actual       15.8
 8 lm - linear_reg actual         actual       15  
 9 lm - linear_reg actual         actual       14.7
10 lm - linear_reg actual         actual       10.4
# ℹ 118 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(frt_tbl))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 256 × 4
   .model_type     .data_category .data_type .value
   &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;       &lt;dbl&gt;
 1 lm - linear_reg actual         actual       15.2
 2 lm - linear_reg actual         actual       10.4
 3 lm - linear_reg actual         actual       33.9
 4 lm - linear_reg actual         actual       32.4
 5 lm - linear_reg actual         actual       16.4
 6 lm - linear_reg actual         actual       21.5
 7 lm - linear_reg actual         actual       15.8
 8 lm - linear_reg actual         actual       15  
 9 lm - linear_reg actual         actual       14.7
10 lm - linear_reg actual         actual       10.4
# ℹ 246 more rows</code></pre>
</div>
</div>
<p>The first line of code extracts the predictions for the first model in the output. The second line of code extracts the predictions for the first two models in the output. The third line of code extracts the predictions for all models in the output.</p>
<p>Now, let’s visualize the predictions for the models in the output and the actual values. We will use the <code>ggplot2</code> package for visualization. First, we will extract the predictions for all models in the output and store them in a table called <code>pred_tbl</code>. Then, we will use <code>ggplot2</code> to visualize the predictions and actual values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">pred_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(frt_tbl))</span>
<span id="cb14-2"></span>
<span id="cb14-3">pred_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_split</span>(.model_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(.data_category) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> .data_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> .value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> actual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> .data_category)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> training), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb14-13">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> testing), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>,</span>
<span id="cb14-15">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb14-18">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb14-19">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed/Predicted Value"</span>,</span>
<span id="cb14-20">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed vs. Predicted Values by Model Type"</span>,</span>
<span id="cb14-21">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.model_type[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-22">        )</span>
<span id="cb14-23">      )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[3]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[4]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-3-4.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Or we can facet them by model type:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">pred_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(.model_type, .data_category) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb19-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> .value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(.data_type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"actual"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(.data_type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training"</span>), </span>
<span id="cb19-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(.data_type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"testing"</span>), </span>
<span id="cb19-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .model_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb19-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb19-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed/Predicted Value"</span>,</span>
<span id="cb19-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Observed vs. Predicted Values by Model Type"</span></span>
<span id="cb19-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ok, so what about this new function I talked about above? Well let’s go over it here. We have already discussed it’s syntax so no need to go over it again. Let’s just jump right into an example. This function will return the residuals for all models. We will slice off just the first model for demonstration purposes.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.model_tbl =</span> frt_tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pivot_long =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 4
   .model_type     .actual .predicted .resid
   &lt;chr&gt;             &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;
 1 lm - linear_reg    15.2       17.3 -2.09 
 2 lm - linear_reg    10.4       11.9 -1.46 
 3 lm - linear_reg    33.9       30.8  3.06 
 4 lm - linear_reg    32.4       28.0  4.35 
 5 lm - linear_reg    16.4       15.0  1.40 
 6 lm - linear_reg    21.5       22.3 -0.779
 7 lm - linear_reg    15.8       17.2 -1.40 
 8 lm - linear_reg    15         15.1 -0.100
 9 lm - linear_reg    14.7       10.9  3.85 
10 lm - linear_reg    10.4       10.8 -0.445
# ℹ 22 more rows</code></pre>
</div>
</div>
<p>Now let’s set <code>.pivot_long = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.model_tbl =</span> frt_tbl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pivot_long =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 96 × 3
   .model_type     name       value
   &lt;chr&gt;           &lt;chr&gt;      &lt;dbl&gt;
 1 lm - linear_reg .actual    15.2 
 2 lm - linear_reg .predicted 17.3 
 3 lm - linear_reg .resid     -2.09
 4 lm - linear_reg .actual    10.4 
 5 lm - linear_reg .predicted 11.9 
 6 lm - linear_reg .resid     -1.46
 7 lm - linear_reg .actual    33.9 
 8 lm - linear_reg .predicted 30.8 
 9 lm - linear_reg .resid      3.06
10 lm - linear_reg .actual    32.4 
# ℹ 86 more rows</code></pre>
</div>
</div>
<p>Now let’s visualize the data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">resid_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_regression_residuals</span>(frt_tbl, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb24-2"></span>
<span id="cb24-3">resid_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot_group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".resid"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Residuals"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual and Predictions"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb24-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> name)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> plot_group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb24-14">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,</span>
<span id="cb24-15">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb24-16">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual, Predicted, and Residual Values by Model Type"</span>,</span>
<span id="cb24-17">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.model_type[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb24-18">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data Type"</span></span>
<span id="cb24-19">        )</span>
<span id="cb24-20">      )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-7-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[3]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-7-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[4]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-01-19/index_files/figure-html/unnamed-chunk-7-4.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>And that’s it!</p>
<p>Thank you for reading and I would love to hear your feedback. Please feel free to reach out to me.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-19/index.html</guid>
  <pubDate>Fri, 19 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring the Enhanced Features of tidyAML’s internal_make_wflw_predictions()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-18/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey R enthusiasts! Steve here, and today I’m excited to share some fantastic updates about a key function in the tidyAML package – <code>internal_make_wflw_predictions()</code>. The latest version addresses issue #190, ensuring that all crucial data is now included in the predictions. Let’s dive into the details!</p>
</section>
<section id="whats-new" class="level1">
<h1>What’s New?</h1>
<p>In response to user feedback, we’ve enhanced the <code>internal_make_wflw_predictions()</code> function to provide a comprehensive set of predictions. Now, when you make a call to this function, it includes:</p>
<ol type="1">
<li><p><strong>The Actual Data:</strong> This is the real-world data that your model aims to predict. Having access to this information helps you assess how well your model is performing on unseen instances.</p></li>
<li><p><strong>Training Predictions:</strong> Predictions made on the training dataset. This is essential for understanding how well your model generalizes to the data it was trained on.</p></li>
<li><p><strong>Testing Predictions:</strong> Predictions made on the testing dataset. This is crucial for evaluating the model’s performance on data it hasn’t seen during the training phase.</p></li>
</ol>
</section>
<section id="how-to-use-it" class="level1">
<h1>How to Use It</h1>
<p>To take advantage of these new features, here’s how you can use the updated <code>internal_make_wflw_predictions()</code> function:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">internal_make_wflw_predictions</span>(.model_tbl, .splits_obj)</span></code></pre></div>
<section id="arguments" class="level2">
<h2 class="anchored" data-anchor-id="arguments">Arguments:</h2>
<ol type="1">
<li><p><strong>.model_tbl:</strong> The model table generated from a function like <code>fast_regression_parsnip_spec_tbl()</code>. Ensure that it has a class of “tidyaml_mod_spec_tbl.” This is typically used after running the <code>internal_make_fitted_wflw()</code> function and saving the resulting tibble.</p></li>
<li><p><strong>.splits_obj:</strong> The splits object obtained from the <code>auto_ml</code> function. It is internal to the <code>auto_ml</code> function.</p></li>
</ol>
</section>
</section>
<section id="example-usage" class="level1">
<h1>Example Usage</h1>
<p>Let’s walk through an example using some popular R packages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidymodels_prefer</span>()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a model specification table</span></span>
<span id="cb2-7">mod_spec_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression_parsnip_spec_tbl</span>(</span>
<span id="cb2-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>),</span>
<span id="cb2-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span></span>
<span id="cb2-10">)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a recipe</span></span>
<span id="cb2-13">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create splits</span></span>
<span id="cb2-16">splits_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_splits</span>(mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial_split"</span>)</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the model table</span></span>
<span id="cb2-19">mod_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod_spec_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wflw =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">full_internal_make_wflw</span>(mod_spec_tbl, rec_obj))</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the fitted model table</span></span>
<span id="cb2-23">mod_fitted_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mod_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fitted_wflw =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">internal_make_fitted_wflw</span>(mod_tbl, splits_obj))</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions with the enhanced function</span></span>
<span id="cb2-27">preds_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">internal_make_wflw_predictions</span>(mod_fitted_tbl, splits_obj)</span></code></pre></div>
</div>
<p>This example demonstrates how to integrate the updated function into your workflow seamlessly. Typically though one would not use this function directly, but rather use the <code>fast_regression()</code> or <code>fast_classification()</code> function, which calls this function internally. Let’s now take a look at the output of everything.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">rec_obj</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Recipe ──────────────────────────────────────────────────────────────────────</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>── Inputs </code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Number of variables by role</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>outcome:    1
predictor: 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">splits_obj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$splits
&lt;Training/Testing/Total&gt;
&lt;24/8/32&gt;

$split_type
[1] "initial_split"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mod_spec_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 5
  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec
      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;    
1         1 lm              regression    linear_reg   &lt;spec[+]&gt; 
2         2 glm             regression    linear_reg   &lt;spec[+]&gt; </code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mod_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 6
  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec wflw      
      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;     &lt;list&gt;    
1         1 lm              regression    linear_reg   &lt;spec[+]&gt;  &lt;workflow&gt;
2         2 glm             regression    linear_reg   &lt;spec[+]&gt;  &lt;workflow&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mod_fitted_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 7
  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec wflw      
      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;        &lt;list&gt;     &lt;list&gt;    
1         1 lm              regression    linear_reg   &lt;spec[+]&gt;  &lt;workflow&gt;
2         2 glm             regression    linear_reg   &lt;spec[+]&gt;  &lt;workflow&gt;
# ℹ 1 more variable: fitted_wflw &lt;list&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">preds_list</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 64 × 3
   .data_category .data_type .value
   &lt;chr&gt;          &lt;chr&gt;       &lt;dbl&gt;
 1 actual         actual       15.2
 2 actual         actual       19.7
 3 actual         actual       17.8
 4 actual         actual       15  
 5 actual         actual       10.4
 6 actual         actual       15.8
 7 actual         actual       17.3
 8 actual         actual       30.4
 9 actual         actual       15.2
10 actual         actual       19.2
# ℹ 54 more rows

[[2]]
# A tibble: 64 × 3
   .data_category .data_type .value
   &lt;chr&gt;          &lt;chr&gt;       &lt;dbl&gt;
 1 actual         actual       15.2
 2 actual         actual       19.7
 3 actual         actual       17.8
 4 actual         actual       15  
 5 actual         actual       10.4
 6 actual         actual       15.8
 7 actual         actual       17.3
 8 actual         actual       30.4
 9 actual         actual       15.2
10 actual         actual       19.2
# ℹ 54 more rows</code></pre>
</div>
</div>
<p>You will notice the names of the preds_list output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(preds_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] ".data_category" ".data_type"     ".value"        </code></pre>
</div>
</div>
<p>So we have <code>.data_category</code>, <code>.data_type</code>, and <code>.value</code>. Let’s take a look at the unique values of each column for <code>.data_category</code> and <code>.data_type</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(preds_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.data_category)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "actual"    "predicted"</code></pre>
</div>
</div>
<p>So we have our <code>actual</code> data the the <code>predicted</code> data. The predicted though has both the <code>training</code> and <code>testing</code> data in it. Let’s take a look at the unique values of <code>.data_type</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(preds_list[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.data_type)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "actual"   "training" "testing" </code></pre>
</div>
</div>
<p>This will allow you to visualize the data how you please, something we will go over tomorrow!</p>
<section id="why-it-matters" class="level2">
<h2 class="anchored" data-anchor-id="why-it-matters">Why It Matters</h2>
<p>By including actual data along with training and testing predictions, the <code>internal_make_wflw_predictions()</code> function empowers you to perform a more thorough evaluation of your models. This is a significant step towards ensuring the reliability and generalization capability of your machine learning models.</p>
<p>So, R enthusiasts, update your tidyAML package, explore the enhanced features, and let us know how these improvements elevate your modeling experience. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-18/index.html</guid>
  <pubDate>Thu, 18 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Using .drop_na in Fast Classification and Regression</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-17/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the newest release of tidyAML there has been an addition of a new parameter to the functions <code>fast_classification()</code> and <code>fast_regression()</code>. The parameter is <code>.drop_na</code> and it is a logical value that defaults to <code>TRUE</code>. This parameter is used to determine if the function should drop rows with missing values from the output if a model cannot be built for some reason. Let’s take a look at the function and it’s arguments.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  .rec_obj,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.split_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"initial_split"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.split_args =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb1-9">)</span></code></pre></div>
<section id="arguments" class="level2">
<h2 class="anchored" data-anchor-id="arguments">Arguments</h2>
<p><code>.data</code> - The data being passed to the function for the regression problem <code>.rec_obj</code> - The recipe object being passed. <code>.parsnip_fns</code> - The default is ‘all’ which will create all possible regression model specifications supported. <code>.parsnip_eng</code> - The default is ‘all’ which will create all possible regression model specifications supported. <code>.split_type</code> - The default is ‘initial_split’, you can pass any type of split supported by rsample <code>.split_args</code> - The default is NULL, when NULL then the default parameters of the split type will be executed for the rsample split type. <code>.drop_na</code> - The default is TRUE, which will drop all NA’s from the data.</p>
<p>Now let’s see this in action.</p>
</section>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>We are going to use the <code>mtcars</code> dataset for this example. We will create a regression problem where we are trying to predict <code>mpg</code> using all other variables in the dataset. We will not load in all the libraries that are supported causing the function to return NULL for some models and we will set the parameter <code>.drop_na</code> to <code>FALSE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyAML)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidymodels)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-4"></span>
<span id="cb2-5">tidymodels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidymodels_prefer</span>()</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create regression problem</span></span>
<span id="cb2-8">rec_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb2-9">frt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb2-10">  mtcars,</span>
<span id="cb2-11">  rec_obj,</span>
<span id="cb2-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gee"</span>),</span>
<span id="cb2-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb2-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb2-15">  )</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(frt_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 3
Columns: 8
$ .model_id       &lt;int&gt; 1, 2, 3
$ .parsnip_engine &lt;chr&gt; "lm", "gee", "glm"
$ .parsnip_mode   &lt;chr&gt; "regression", "regression", "regression"
$ .parsnip_fns    &lt;chr&gt; "linear_reg", "linear_reg", "linear_reg"
$ model_spec      &lt;list&gt; [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…
$ wflw            &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ fitted_wflw     &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ pred_wflw       &lt;list&gt; [&lt;tbl_df[64 x 3]&gt;], &lt;NULL&gt;, [&lt;tbl_df[64 x 3]&gt;]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(frt_tbl))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm 


[[2]]
NULL

[[3]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: glm </code></pre>
</div>
</div>
<p>Here we can see that the function returned NULL for the <code>gee</code> model because we did not load in the <code>multilevelmod</code> library. We can also see that the function did not drop that model from the output because <code>.drop_na</code> was set to <code>FALSE</code>. Now let’s set it back to <code>TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">frt_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fast_regression</span>(</span>
<span id="cb6-2">  mtcars,</span>
<span id="cb6-3">  rec_obj,</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"glm"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gee"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.parsnip_fns =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linear_reg"</span>,</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.drop_na =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb6-7">  )</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(frt_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2
Columns: 8
$ .model_id       &lt;int&gt; 1, 3
$ .parsnip_engine &lt;chr&gt; "lm", "glm"
$ .parsnip_mode   &lt;chr&gt; "regression", "regression"
$ .parsnip_fns    &lt;chr&gt; "linear_reg", "linear_reg"
$ model_spec      &lt;list&gt; [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…
$ wflw            &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ fitted_wflw     &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ pred_wflw       &lt;list&gt; [&lt;tbl_df[64 x 3]&gt;], [&lt;tbl_df[64 x 3]&gt;]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_wflw</span>(frt_tbl, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(frt_tbl))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm 


[[2]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: glm </code></pre>
</div>
</div>
<p>Here we can see that the <code>gee</code> model was dropped from the output because the function could not build the model due to the <code>multilevelmod</code> library not being loaded. This is a great way to drop models that cannot be built due to missing libraries or other reasons.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>.drop_na</code> parameter is a great way to drop models that cannot be built due to missing libraries or other reasons. This is a great addition to the <code>fast_classification()</code> and <code>fast_regression()</code> functions.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-17/index.html</guid>
  <pubDate>Wed, 17 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring the Power of tidyAML 0.0.4: Unleashing New Features and Enhancements</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-16/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings, fellow data enthusiasts! Today, we’re diving into the exciting world of tidyAML 0.0.4, where innovation meets efficiency in the realm of R programming. As we unpack the latest release, we’ll explore the new features, enhancements, and the overall impact of this powerful tool on your data science endeavors.</p>
</section>
<section id="whats-new-in-tidyaml-0.0.4" class="level1">
<h1>What’s New in tidyAML 0.0.4?</h1>
<section id="introducing-extract_regression_residuals" class="level2">
<h2 class="anchored" data-anchor-id="introducing-extract_regression_residuals">Introducing extract_regression_residuals()</h2>
<p>One of the standout features in this release is the addition of <code>extract_regression_residuals()</code>. This function empowers users to delve deeper into regression models, providing a valuable tool for analyzing and understanding residuals. Whether you’re fine-tuning your models or gaining insights into data patterns, this enhancement adds a crucial layer to your analytical arsenal.</p>
</section>
<section id="enhanced-classificationregression-build-with-.drop_na" class="level2">
<h2 class="anchored" data-anchor-id="enhanced-classificationregression-build-with-.drop_na">Enhanced Classification/Regression build with .drop_na</h2>
<p>Responding to user feedback and aiming for seamless user experience, tidyAML 0.0.4 brings forth an important addition to <code>fast_classification()</code> and <code>fast_regression()</code>. The introduction of the <code>.drop_na</code> parameter allows users to handle missing data more efficiently, streamlining the classification and regression processes.</p>
</section>
<section id="core-package-expansion" class="level2">
<h2 class="anchored" data-anchor-id="core-package-expansion">Core Package Expansion</h2>
<p>Acknowledging the diverse needs of data scientists, tidyAML now incorporates additional core packages. The inclusion of <code>discrim</code>, <code>mda</code>, <code>sda</code>, <code>sparsediscrim</code>, <code>liquidSVM</code>, <code>kernlab</code>, and <code>klaR</code> extends the scope of possibilities. These additions enhance the versatility of tidyAML, making it an even more comprehensive solution for your modeling requirements.</p>
</section>
<section id="refined-internal-predictions" class="level2">
<h2 class="anchored" data-anchor-id="refined-internal-predictions">Refined Internal Predictions</h2>
<p>The update addresses #190 by refining the <code>internal_make_wflw_predictions()</code> function. Now, it includes all essential data elements: the actual data, training predictions, and testing predictions. This refinement ensures a more holistic view of your model’s performance, facilitating a comprehensive evaluation of its predictive capabilities.</p>
</section>
</section>
<section id="how-does-tidyaml-0.0.4-elevate-your-data-science-workflow" class="level1">
<h1>How Does tidyAML 0.0.4 Elevate Your Data Science Workflow?</h1>
<section id="streamlined-regression-analysis" class="level2">
<h2 class="anchored" data-anchor-id="streamlined-regression-analysis">Streamlined Regression Analysis</h2>
<p>With the introduction of <code>extract_regression_residuals()</code>, tidyAML empowers users to conduct in-depth regression analyses with ease. Uncover hidden patterns, identify outliers, and fine-tune your models for optimal performance.</p>
</section>
<section id="improved-data-handling-in-classification-and-regression" class="level2">
<h2 class="anchored" data-anchor-id="improved-data-handling-in-classification-and-regression">Improved Data Handling in Classification and Regression</h2>
<p>The new <code>.drop_na</code> parameter in <code>fast_classification()</code> and <code>fast_regression()</code> simplifies the management of missing data. Enhance the robustness of your classification models by seamlessly handling missing values, resulting in more reliable and accurate predictions.</p>
</section>
<section id="comprehensive-core-packages" class="level2">
<h2 class="anchored" data-anchor-id="comprehensive-core-packages">Comprehensive Core Packages</h2>
<p>The expansion of core packages broadens the toolkit at your disposal. Whether you’re exploring discriminant analysis, support vector machines, or kernel methods, tidyAML now supports an extended range of algorithms, catering to diverse modeling needs.</p>
</section>
<section id="holistic-model-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="holistic-model-evaluation">Holistic Model Evaluation</h2>
<p>The refined <code>internal_make_wflw_predictions()</code> ensures that you have all the necessary components for a comprehensive model evaluation. Analyze the actual data alongside training and testing predictions, gaining a 360-degree view of your model’s performance.</p>
</section>
</section>
<section id="how-to-upgrade-to-tidyaml-0.0.4" class="level1">
<h1>How to Upgrade to tidyAML 0.0.4?</h1>
<p>Updating to the latest version is a breeze. Simply use the following R command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyAML"</span>)</span></code></pre></div>
<p>or if you prefer the development version:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">devtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spsanderson/tidyAML"</span>)</span></code></pre></div>
<p>Don’t forget to explore the updated documentation for detailed insights into the new features and enhancements.</p>
</section>
<section id="in-conclusion" class="level1">
<h1>In Conclusion</h1>
<p>tidyAML 0.0.4 marks a significant milestone in the evolution of this powerful R package. With enhanced features, refined functions, and an expanded core package repertoire, tidyAML continues to be a go-to tool for data scientists navigating the complexities of machine learning.</p>
<p>Ready to experience the power of tidyAML?</p>
<ul>
<li>Install the package: <code>install.packages("tidyAML")</code></li>
<li>Visit the official website for more details and examples: <a href="https://www.spsanderson.com/tidyAML/">https://www.spsanderson.com/tidyAML/</a></li>
</ul>
<p>Join the tidy revolution and unleash the full potential of your machine learning projects with tidyAML!</p>
<p>Stay tuned for more exciting updates and features coming soon!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-16/index.html</guid>
  <pubDate>Tue, 16 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>TidyDensity Powers Up with Data.table: Speedier Distributions for Your Data Exploration</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-12/index.html</link>
  <description><![CDATA[ 




<section id="calling-all-r-enthusiasts-who-love-tidy-data-and-crave-efficiency" class="level1">
<h1>Calling all R enthusiasts who love tidy data and crave efficiency!</h1>
<p>I’m thrilled to announce a major upgrade to the TidyDensity package that’s sure to accelerate your data analysis workflows. We’ve integrated the lightning-fast <code>data.table</code> package for generating tidy distribution data, resulting in a <strong>jaw-dropping 30% speed boost</strong>.</p>
<p>Here is one of the tests ran during development where v1 was the current and v2 was the version using <code>data.table</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb1-3"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidy_bernoulli_v2"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-4">   <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bernoulli_v2</span>(n, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-5"> },</span>
<span id="cb1-6"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidy_bernoulli_v1"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-7">   TidyDensity<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_bernoulli</span>(n, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-8"> },</span>
<span id="cb1-9"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb1-10"> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb1-11">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-12"> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(relative)</span>
<span id="cb1-13">               test replications elapsed relative user.self sys.self</span>
<span id="cb1-14"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> tidy_bernoulli_v2          <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.50</span>    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.000</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.22</span>     <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.26</span></span>
<span id="cb1-15"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> tidy_bernoulli_v1          <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.67</span>    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.868</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.34</span>     <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.31</span></span></code></pre></div>
</section>
<section id="heres-what-this-means-for-you" class="level1">
<h1>Here’s what this means for you</h1>
<ul>
<li><strong>Faster Generation of Distribution Data:</strong> Whether you’re working with normal, binomial, Poisson, or other distributions, TidyDensity now produces results more swiftly than ever. This means less waiting and more time for exploring insights.</li>
<li><strong>Flexible Output Formats:</strong> Choose the format that best suits your needs:
<ul>
<li><strong>Tibbles for Seamless Integration with Tidyverse:</strong> Set <code>.return_tibble = TRUE</code> to receive the data as a tibble, ready for seamless interaction with your favorite tidyverse tools.</li>
<li><strong>data.table for Enhanced Performance:</strong> Set <code>.return_tibble = FALSE</code> to harness the raw power of data.table objects for memory-efficient and lightning-fast operations.</li>
</ul></li>
<li><strong>Enjoy the Speed Boost, No Matter Your Choice:</strong> The speed enhancement shines through regardless of your preferred output format, as the data generation itself leverages <code>data.table</code> under the hood.</li>
</ul>
</section>
<section id="how-to-experience-this-boost" class="level1">
<h1>How to experience this boost</h1>
<ol type="1">
<li><p><strong>Update TidyDensity:</strong> Ensure you have the latest version installed: <code>install.packages("TidyDensity")</code></p></li>
<li><p><strong>Choose Your Output Format:</strong> Indicate your preference with the <code>.return_tibble</code> parameter:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For a tibble:</span></span>
<span id="cb2-2">tidy_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For a data.table:</span></span>
<span id="cb2-5">tidy_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>No matter which output you choose you will still enjoy the speedup because <code>data.table</code> is used to create the data and the conversion to a tibble is done afterwards if that is the output you want.</p></li>
</ol>
</section>
<section id="lets-see-the-output" class="level1">
<h1>Let’s see the output</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate data</span></span>
<span id="cb3-4">normal_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(normal_tibble)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 7
  sim_number     x       y    dx       dy      p       q
  &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
1 1              1  1.05   -2.97 0.000398 0.854   1.05  
2 1              2  0.0168 -2.84 0.00104  0.507   0.0168
3 1              3  1.77   -2.72 0.00244  0.961   1.77  
4 1              4 -1.81   -2.59 0.00518  0.0353 -1.81  
5 1              5  0.447  -2.46 0.00997  0.673   0.447 
6 1              6  1.05   -2.33 0.0174   0.854   1.05  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(normal_tibble)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "tbl_df"     "tbl"        "data.frame"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">normal_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(normal_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sim_number x           y        dx           dy         p           q
1:          1 1  2.24103518 -3.424949 0.0002787401 0.9874881  2.24103518
2:          1 2 -0.12769603 -3.286892 0.0008586864 0.4491948 -0.12769603
3:          1 3 -0.39666069 -3.148835 0.0022824304 0.3458088 -0.39666069
4:          1 4  0.89626001 -3.010778 0.0052656793 0.8149430  0.89626001
5:          1 5  0.04267757 -2.872721 0.0105661984 0.5170207  0.04267757
6:          1 6  0.53424808 -2.734664 0.0185083421 0.7034150  0.53424808</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(normal_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "data.table" "data.frame"</code></pre>
</div>
</div>
</section>
<section id="ready-to-unleash-the-power-of-tidydensity-and-data.table" class="level1">
<h1>Ready to unleash the power of TidyDensity and data.table?</h1>
<p>Dive into your next data exploration project and experience the efficiency firsthand! Share your discoveries and feedback with the community—we’re eager to hear how this upgrade empowers your analysis.</p>
<p><strong>Happy tidy data exploration!</strong></p>


</section>

 ]]></description>
  <category>code</category>
  <category>benchmark</category>
  <category>datatable</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-12/index.html</guid>
  <pubDate>Fri, 12 Jan 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
