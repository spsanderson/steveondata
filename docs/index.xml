<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 27 Feb 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Demystifying the melt() Function in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The melt() function in the data.table package is an extremely useful tool for reshaping datasets in R. However, for beginners, understanding how to use melt() can be tricky. In this post, I’ll walk through several examples to demonstrate how to use melt() to move from wide to long data formats.</p>
</section>
<section id="what-is-melting-data" class="level1">
<h1>What is melting data?</h1>
<p>Melting data refers to reshaping it from a wide format to a long format. For example, let’s say we have a dataset on student test scores like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb1-2"></span>
<span id="cb1-3">scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">student =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">math =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>), </span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">english =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb1-7">)</span>
<span id="cb1-8"></span>
<span id="cb1-9">scores</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   student  math english
    &lt;char&gt; &lt;num&gt;   &lt;num&gt;
1:   Alice    90      85
2:     Bob    80      90
3: Charlie    85      80</code></pre>
</div>
</div>
<p>Here each subject is in its own column, with each student in a separate row. This is the wide format. To melt it, we convert it to long format, where there is a single value column and an identifier column for the variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">melted_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(scores, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id.vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"student"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">measure.vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"english"</span>))</span>
<span id="cb3-2"></span>
<span id="cb3-3">melted_scores</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   student variable value
    &lt;char&gt;   &lt;fctr&gt; &lt;num&gt;
1:   Alice     math    90
2:     Bob     math    80
3: Charlie     math    85
4:   Alice  english    85
5:     Bob  english    90
6: Charlie  english    80</code></pre>
</div>
</div>
<p>Now there is one row per student-subject combination, with the subject in a new “variable” column. This makes it easier to analyze and plot the data.</p>
</section>
<section id="how-to-melt-data-in-r-with-data.table" class="level1">
<h1>How to melt data in R with data.table</h1>
<p>The melt() function from data.table makes it easy to melt data. The basic syntax is:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(data, id.vars, measure.vars)</span></code></pre></div>
<p>Where:</p>
<ul>
<li><code>data</code>: the data.table to melt</li>
<li><code>id.vars</code>: the column(s) to use as identifier variables</li>
<li><code>measure.vars</code>: the column(s) to unpivot into the value column</li>
</ul>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb6-2"></span>
<span id="cb6-3"> WideTable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Var1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>),</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Var2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)  </span>
<span id="cb6-7">)</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(WideTable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id.vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Id"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">measure.vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Var1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Var2"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Id variable value
   &lt;int&gt;   &lt;fctr&gt; &lt;num&gt;
1:     1     Var1    10
2:     2     Var1    20
3:     3     Var1    30
4:     1     Var2   100
5:     2     Var2   200
6:     3     Var2   300</code></pre>
</div>
</div>
<p>The <code>id.vars</code> define which column(s) to keep fixed, while the <code>measure.vars</code> are melted into key-value pairs.</p>
<section id="casting-data-back-into-wide-format" class="level2">
<h2 class="anchored" data-anchor-id="casting-data-back-into-wide-format">Casting data back into wide format</h2>
<p>Once data is in long format, you can cast it back into wide format using dcast() from data.table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">melted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(WideTable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id.vars=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Id"</span>) </span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(melted, Id <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> variable)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Key: &lt;Id&gt;
      Id  Var1  Var2
   &lt;int&gt; &lt;num&gt; &lt;num&gt;
1:     1    10   100
2:     2    20   200
3:     3    30   300</code></pre>
</div>
</div>
<p>This flexibility allows for easy data manipulation as needed for analysis and visualization.</p>
</section>
</section>
<section id="final-thoughts" class="level1">
<h1>Final thoughts</h1>
<p>The melt() function provides a simple yet powerful way to move between wide and long data formats in R. By combining melt() and dcast(), you can wrangle messy datasets into tidy forms for effective data analysis. So give it a try on your own datasets and see how it unlocks new possibilities! Let me know in the comments if you have any other melt() questions.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-27/index.html</guid>
  <pubDate>Tue, 27 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Unveiling the Magic of dcast Function in R’s data.table Package</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-26/index.html</link>
  <description><![CDATA[ 




<p>Here is a draft blog post on using the dcast function from the data.table package in R:</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <code>dcast</code> function in the data.table package is a handy tool for reshaping data from long to wide format in R. It allows you to easily aggregate values and pivot dataframes. In this post, we’ll explore how to use dcast through several examples.</p>
</section>
<section id="what-is-dcast" class="level1">
<h1>What is dcast?</h1>
<p>The <code>dcast</code> stands for “data cast” and it works similarly to reshape2’s <code>dcast</code> function. The key difference is that <code>dcast</code> from data.table is much faster as it works directly on data.table objects and leverages fast data.table syntax.</p>
<p>To use dcast, you need to have the data.table package installed:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span></code></pre></div>
</div>
<p>The main arguments for dcast are:</p>
<ul>
<li><code>data</code>: the data.table or data.frame to reshape</li>
<li><code>formula</code>: specifies columns to use, in the form <code>value.var ~ key1 + key2</code></li>
<li><code>fun.aggregate</code>: the aggregation function to apply (default is length)</li>
</ul>
<section id="reshaping-from-long-to-wide" class="level2">
<h2 class="anchored" data-anchor-id="reshaping-from-long-to-wide">Reshaping from Long to Wide</h2>
<p>Let’s walk through an example with the mtcars dataset. First we convert mtcars to a data.table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(mtcars)</span></code></pre></div>
</div>
<p>Say we want to reshape the data from long to wide, aggregating the hp values by cyl. We can use dcast:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(dt, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.var=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.aggregate=</span>mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Key: &lt;cyl&gt;
     cyl         .
   &lt;num&gt;     &lt;num&gt;
1:     4  82.63636
2:     6 122.28571
3:     8 209.21429</code></pre>
</div>
</div>
<p>This aggregates the hp by cyl, casting the other columns as identifiers. The result is a table with one row per cyl, and columns for mean hp and all other variables.</p>
</section>
<section id="aggregating-multiple-columns" class="level2">
<h2 class="anchored" data-anchor-id="aggregating-multiple-columns">Aggregating Multiple Columns</h2>
<p>You can also aggregate multiple value columns in one call. Let’s add aggregating disp by the mean:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(dt, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.var=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disp"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.aggregate=</span>mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Key: &lt;cyl&gt;
     cyl        hp     disp
   &lt;num&gt;     &lt;num&gt;    &lt;num&gt;
1:     4  82.63636 105.1364
2:     6 122.28571 183.3143
3:     8 209.21429 353.1000</code></pre>
</div>
</div>
<p>Now we have mean hp and mean disp aggregated by cyl in the wide format.</p>
</section>
<section id="using-multiple-formulas" class="level2">
<h2 class="anchored" data-anchor-id="using-multiple-formulas">Using Multiple Formulas</h2>
<p>Another common operation is aggregating over several formulas separately. For example, aggregating hp by cyl and gear.</p>
<p>We can pass a list of formulas to dcast:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(dt, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.var=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.aggregate=</span>mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dcast</span>(dt, gear <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value.var=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun.aggregate=</span>mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     cyl        .
   &lt;num&gt;    &lt;num&gt;
1:     7 258.7697
2:    10 211.7857
3:    13 404.8143</code></pre>
</div>
</div>
<p>This outputs two sets of aggregations, by cyl and gear, in a single wide table.</p>
</section>
<section id="reshaping-from-wide-to-long" class="level2">
<h2 class="anchored" data-anchor-id="reshaping-from-wide-to-long">Reshaping from Wide to Long</h2>
<p>The <code>melt</code> function from data.table can reshape from wide to long format. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">melt</span>(dt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id.vars =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">measure.vars =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disp"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      cyl variable value
    &lt;num&gt;   &lt;fctr&gt; &lt;num&gt;
 1:     6       hp 110.0
 2:     6       hp 110.0
 3:     4       hp  93.0
 4:     6       hp 110.0
 5:     8       hp 175.0
 6:     6       hp 105.0
 7:     8       hp 245.0
 8:     4       hp  62.0
 9:     4       hp  95.0
10:     6       hp 123.0
11:     6       hp 123.0
12:     8       hp 180.0
13:     8       hp 180.0
14:     8       hp 180.0
15:     8       hp 205.0
16:     8       hp 215.0
17:     8       hp 230.0
18:     4       hp  66.0
19:     4       hp  52.0
20:     4       hp  65.0
21:     4       hp  97.0
22:     8       hp 150.0
23:     8       hp 150.0
24:     8       hp 245.0
25:     8       hp 175.0
26:     4       hp  66.0
27:     4       hp  91.0
28:     4       hp 113.0
29:     8       hp 264.0
30:     6       hp 175.0
31:     8       hp 335.0
32:     4       hp 109.0
33:     6     disp 160.0
34:     6     disp 160.0
35:     4     disp 108.0
36:     6     disp 258.0
37:     8     disp 360.0
38:     6     disp 225.0
39:     8     disp 360.0
40:     4     disp 146.7
41:     4     disp 140.8
42:     6     disp 167.6
43:     6     disp 167.6
44:     8     disp 275.8
45:     8     disp 275.8
46:     8     disp 275.8
47:     8     disp 472.0
48:     8     disp 460.0
49:     8     disp 440.0
50:     4     disp  78.7
51:     4     disp  75.7
52:     4     disp  71.1
53:     4     disp 120.1
54:     8     disp 318.0
55:     8     disp 304.0
56:     8     disp 350.0
57:     8     disp 400.0
58:     4     disp  79.0
59:     4     disp 120.3
60:     4     disp  95.1
61:     8     disp 351.0
62:     6     disp 145.0
63:     8     disp 301.0
64:     4     disp 121.0
      cyl variable value</code></pre>
</div>
</div>
<p>This melts the data to long form based on the id and measure columns.</p>
</section>
<section id="additional-tips" class="level2">
<h2 class="anchored" data-anchor-id="additional-tips">Additional Tips</h2>
<ul>
<li>Use <code>fun.aggregate=length</code> to get counts per group</li>
<li>Set <code>fill=NA</code> to output NA for combinations without data instead of 0</li>
<li>Use <code>variable.name</code> to set custom column names</li>
</ul>
</section>
</section>
<section id="wrapping-up" class="level1">
<h1>Wrapping Up</h1>
<p>The dcast function provides a fast way to reshape data and aggregate values in R. It’s perfect for pivoting dataframes and getting data ready for analysis and visualization. The data.table syntax helps make the reshape very fast and efficient. Give it a try on your datasets! Let me know in the comments if you have any other dcast examples to share.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-26/index.html</guid>
  <pubDate>Mon, 26 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Taming the Data Jungle: Filtering data.tables and data.frames in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-23/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ah, data! The lifeblood of many an analysis, but sometimes it can feel like you’re lost in a tangled jungle. Thankfully, R offers powerful tools to navigate this data wilderness, and filtering is one of the most essential skills in your arsenal. Today, we’ll explore how to filter both <strong>data.tables</strong> and <strong>data.frames</strong>, making your data exploration a breeze!</p>
</section>
<section id="filtering-data.tables-precise-and-powerful" class="level1">
<h1>Filtering data.tables: Precise and Powerful</h1>
<p>data.tables, brought to you by the <code>data.table</code> package, are known for their speed and efficiency. Here’s how to filter them:</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1.-filtering-by-a-single-condition" class="level2">
<h2 class="anchored" data-anchor-id="example-1.-filtering-by-a-single-condition">Example 1. Filtering by a single condition:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data.table</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb1-3">mtcars_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(mtcars)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter cars with MPG greater than 25</span></span>
<span id="cb1-6">filtered_cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_dt[mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>]</span>
<span id="cb1-7">filtered_cars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
1:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1
2:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2
3:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1
4:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1
5:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2
6:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>mtcars_dt[mpg &gt; 25]</code> selects rows where the <code>mpg</code> column is greater than 25.</li>
<li>The result, stored in <code>filtered_cars</code>, is a new data.table containing only those rows.</li>
</ul>
</section>
<section id="example-2.-combining-conditions" class="level2">
<h2 class="anchored" data-anchor-id="example-2.-combining-conditions">Example 2. Combining conditions:**</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter cars with 4 cylinders and horsepower over 150</span></span>
<span id="cb3-2">filtered_cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_dt[(cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (hp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)]</span>
<span id="cb3-3">filtered_cars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Empty data.table (0 rows and 11 cols): mpg,cyl,disp,hp,drat,wt...</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>(cyl == 4) &amp; (hp &gt; 150)</code> combines two conditions using the <code>&amp;</code> operator (AND).</li>
<li>Only rows meeting both conditions are included in the filtered data.table.</li>
</ul>
</section>
<section id="example-3.-filtering-by-values-in-a-list" class="level2">
<h2 class="anchored" data-anchor-id="example-3.-filtering-by-values-in-a-list">Example 3. Filtering by values in a list:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter cars with carb in 1 or 2</span></span>
<span id="cb5-2">filtered_cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars_dt[carb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb5-3">filtered_cars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
    &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt; &lt;num&gt;
 1:  22.8     4 108.0    93  3.85 2.320 18.61     1     1     4     1
 2:  21.4     6 258.0   110  3.08 3.215 19.44     1     0     3     1
 3:  18.7     8 360.0   175  3.15 3.440 17.02     0     0     3     2
 4:  18.1     6 225.0   105  2.76 3.460 20.22     1     0     3     1
 5:  24.4     4 146.7    62  3.69 3.190 20.00     1     0     4     2
 6:  22.8     4 140.8    95  3.92 3.150 22.90     1     0     4     2
 7:  32.4     4  78.7    66  4.08 2.200 19.47     1     1     4     1
 8:  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2
 9:  33.9     4  71.1    65  4.22 1.835 19.90     1     1     4     1
10:  21.5     4 120.1    97  3.70 2.465 20.01     1     0     3     1
11:  15.5     8 318.0   150  2.76 3.520 16.87     0     0     3     2
12:  15.2     8 304.0   150  3.15 3.435 17.30     0     0     3     2
13:  19.2     8 400.0   175  3.08 3.845 17.05     0     0     3     2
14:  27.3     4  79.0    66  4.08 1.935 18.90     1     1     4     1
15:  26.0     4 120.3    91  4.43 2.140 16.70     0     1     5     2
16:  30.4     4  95.1   113  3.77 1.513 16.90     1     1     5     2
17:  21.4     4 121.0   109  4.11 2.780 18.60     1     1     4     2</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><code>%in%</code> checks if a value belongs to a list.</li>
<li>Here, we filter for cars where the <code>carb</code> is either 1 or 2.</li>
</ul>
</section>
</section>
<section id="filtering-data.frames-familiar-and-flexible" class="level1">
<h1>Filtering data.frames: Familiar and Flexible</h1>
<p>data.frames are the workhorses of R. Here’s how to filter them:</p>
<section id="example-1.-filtering-with-logical-operators" class="level2">
<h2 class="anchored" data-anchor-id="example-1.-filtering-with-logical-operators">Example 1. Filtering with logical operators:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter irises with Sepal.Length less than 5 and Petal.Width greater than 2</span></span>
<span id="cb7-2">filtered_iris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris[iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Petal.Width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,]</span>
<span id="cb7-3">filtered_iris</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species     
&lt;0 rows&gt; (or 0-length row.names)</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li>This approach is similar to data.tables, using logical operators (<code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>) to define conditions.</li>
<li>The filtered data.frame is stored in <code>filtered_iris</code>.</li>
</ul>
</section>
<section id="example-2.-subsetting-with-row-indices" class="level2">
<h2 class="anchored" data-anchor-id="example-2.-subsetting-with-row-indices">Example 2. Subsetting with row indices:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the first 3 and last 2 rows</span></span>
<span id="cb9-2">filtered_iris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, ] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First 3 rows</span></span>
<span id="cb9-3">filtered_iris</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">filtered_iris <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(iris) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last 2 rows</span></span>
<span id="cb11-2">filtered_iris</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species
150          5.9         3.0          5.1         1.8 virginica
149          6.2         3.4          5.4         2.3 virginica</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li>You can directly specify row indices within square brackets <code>[]</code>.</li>
<li>This is useful for selecting specific rows based on their position.</li>
</ul>
</section>
</section>
<section id="ready-to-explore" class="level1">
<h1>Ready to Explore?</h1>
<p>Now that you’re equipped with these filtering techniques, dive into your own data! Try practicing on different datasets and experiment with combining conditions. Remember, the more you practice, the more comfortable you’ll become navigating the data jungle.</p>
<p><strong>Bonus Tip:</strong> Don’t forget to explore the <code>dplyr</code> package for even more powerful filtering options!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-23/index.html</guid>
  <pubDate>Fri, 23 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Demystifying Data Types in R: A Beginner’s Guide with Code Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-02-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wondered what kind of information your data holds in R? Knowing the data type is crucial for performing the right analysis and avoiding errors. This post will equip you with the skills to check data types in R, making your coding journey smoother and more efficient.</p>
</section>
<section id="unveiling-the-data-within-common-data-types-in-r" class="level1">
<h1>Unveiling the Data Within: Common Data Types in R</h1>
<p>Imagine your data as a diverse collection of individuals. Some might be numbers (like age or weight), while others might be text (like names or addresses). These different categories are called data types, and R recognizes several key ones:</p>
<ul>
<li><strong>Numeric:</strong> Numbers, including integers (whole numbers) and decimals.</li>
<li><strong>Character:</strong> Text strings, like words or sentences.</li>
<li><strong>Logical:</strong> True or False values.</li>
<li><strong>Factor:</strong> Categorical data with defined levels (e.g., colors: red, green, blue).</li>
</ul>
</section>
<section id="unveiling-the-secrets-checking-data-types-with-ease" class="level1">
<h1>Unveiling the Secrets: Checking Data Types with Ease</h1>
<p>Now, let’s equip ourselves with the tools to identify these data types in our R projects. Here are two powerful functions:</p>
<ul>
<li><strong><code>class()</code>:</strong> This function provides a general overview of the data type, like “numeric” or “character.”</li>
<li><strong><code>typeof()</code>:</strong> This function delves deeper, revealing more specific details within the data type (e.g., “double” for decimals within “numeric”).</li>
</ul>
</section>
<section id="putting-knowledge-into-action-code-examples" class="level1">
<h1>Putting Knowledge into Action: Code Examples</h1>
<p>Ready to see these functions in action? Let’s explore some examples:</p>
<section id="example-1-checking-the-type-of-a-single-variable" class="level2">
<h2 class="anchored" data-anchor-id="example-1-checking-the-type-of-a-single-variable">Example 1: Checking the type of a single variable:</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a variable with different data types</span></span>
<span id="cb1-2">age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span></span>
<span id="cb1-3">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span></span>
<span id="cb1-4">is_employed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the data types using class()</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(age)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "numeric"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(name) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "character"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(is_employed) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "logical"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "logical"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check for even more details using typeof()</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(age)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "double"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "double"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(name) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "character"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(is_employed) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "logical"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "logical"</code></pre>
</div>
</div>
</section>
<section id="example-2-examining-data-types-within-a-data-frame" class="level2">
<h2 class="anchored" data-anchor-id="example-2-examining-data-types-within-a-data-frame">Example 2: Examining data types within a data frame:*</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb13-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Emily"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fiona"</span>),</span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">37</span>)</span>
<span id="cb13-6">)</span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Peek into the data frame's structure using str()</span></span>
<span id="cb13-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   5 obs. of  3 variables:
 $ ID  : int  1 2 3 4 5
 $ Name: chr  "Bob" "Charlie" "David" "Emily" ...
 $ Age : num  28 32 41 25 37</code></pre>
</div>
</div>
<p>The <code>str()</code> function displays a detailed summary of the data frame, including the names and data types of each column.</p>
</section>
</section>
<section id="time-to-practice" class="level1">
<h1>Time to Practice!</h1>
<p>Now it’s your turn to explore! Try creating your own variables and data frames with different data types. Use <code>class()</code> and <code>typeof()</code> to unveil their hidden identities. Remember, practice makes perfect, and the more you experiment, the more comfortable you’ll become with data types in R.</p>
<p><strong>Bonus Challenge:</strong> Can you think of situations where knowing the data type is crucial for your analysis? Share your thoughts in the comments below!</p>
<p>By understanding and effectively checking data types, you’ll be well on your way to mastering data manipulation and analysis in R. So, keep exploring, keep coding, and keep demystifying your data!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-02-22/index.html</guid>
  <pubDate>Thu, 22 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Enhancing Your Plots in R: Adding Superscripts &amp; Subscripts</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-02-21/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey R enthusiasts! Are you looking to take your data visualization skills to the next level? Well, you’re in the right place because today, we’re diving into the world of superscripts and subscripts in R plots. Whether you’re a seasoned R user or just getting started, adding these little details can make your plots more informative and visually appealing.</p>
</section>
<section id="what-are-superscripts-subscripts" class="level1">
<h1>What are Superscripts &amp; Subscripts?</h1>
<p>Before we dive into the code, let’s quickly review what superscripts and subscripts are.</p>
<ul>
<li><strong>Superscripts:</strong> These are smaller-sized characters or numbers that appear above the baseline of the text. They are often used to denote exponents or indices.</li>
<li><strong>Subscripts:</strong> On the other hand, subscripts are smaller-sized characters or numbers that appear below the baseline of the text. They are commonly used in mathematical expressions or chemical formulas.</li>
</ul>
</section>
<section id="adding-superscripts-subscripts-in-base-r" class="level1">
<h1>Adding Superscripts &amp; Subscripts in Base R</h1>
<p>Now, let’s get down to business and see how we can add superscripts and subscripts to our plots using base R.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-adding-superscripts-to-axis-labels" class="level2">
<h2 class="anchored" data-anchor-id="example-1-adding-superscripts-to-axis-labels">Example 1: Adding Superscripts to Axis Labels</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create some sample data</span></span>
<span id="cb1-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-3">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Axis Label with Superscript: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">italic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2023-02-21/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>In this example, we’re using the <code>expression()</code> function to create a plot with a customized x-axis label that includes a superscript (in this case, “x squared”).</p>
</section>
<section id="example-2-adding-subscripts-to-axis-labels" class="level2">
<h2 class="anchored" data-anchor-id="example-2-adding-subscripts-to-axis-labels">Example 2: Adding Subscripts to Axis Labels</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create some sample data</span></span>
<span id="cb2-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-3">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expression</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Axis Label with Subscript: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">italic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)[i])))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2023-02-21/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Here, we’re using the <code>expression()</code> function again to create a plot with a customized y-axis label that includes a subscript (in this case, “y subscript i”).</p>
</section>
</section>
<section id="why-does-this-matter" class="level1">
<h1>Why Does This Matter?</h1>
<p>Adding superscripts and subscripts to your plots can enhance clarity and readability, especially when presenting scientific or technical information. It allows you to include mathematical expressions and formulas directly in your plots, eliminating the need for external annotations or explanations.</p>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try It Yourself!</h1>
<p>Now that you’ve seen how easy it is to add superscripts and subscripts to your plots in R, why not give it a try yourself? Experiment with different expressions, fonts, and formatting options to create visually stunning and informative plots.</p>
<p>In conclusion, mastering the art of adding superscripts and subscripts to your plots opens up a world of possibilities for creating visually appealing and informative visualizations. Whether you’re working on scientific research, data analysis, or presentations, these simple techniques can take your plots to the next level. So go ahead, unleash your creativity, and start incorporating superscripts and subscripts into your R plots today!</p>
<p>Happy coding! 📊✨</p>
<p>That’s it for today’s blog post. I hope you found it helpful and informative. Until next time, happy plotting!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-02-21/index.html</guid>
  <pubDate>Wed, 21 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Level Up Your Data Wrangling: Adding Index Columns in R like a Pro!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-16/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data wrangling in R is like cooking: you have your ingredients (data), and you use tools (functions) to prepare them (clean, transform) for analysis (consumption!). One essential tool is adding an “index column” – a unique identifier for each row. This might seem simple, but there are several ways to do it in base R and tidyverse packages like <code>dplyr</code> and <code>tibble</code>. Let’s explore and spice up your data wrangling skills!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="adding-heat-with-base-r" class="level2">
<h2 class="anchored" data-anchor-id="adding-heat-with-base-r">Adding Heat with Base R</h2>
<section id="ex-1-the-sequencer" class="level3">
<h3 class="anchored" data-anchor-id="ex-1-the-sequencer">Ex 1: <strong>The Sequencer:</strong></h3>
<p>Imagine lining up your rows. <code>cbind(df, 1:nrow(df))</code> adds a new column with numbers 1 to n, where n is the number of rows in your data frame (<code>df</code>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add index using cbind</span></span>
<span id="cb1-5">df_with_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), df)</span>
<span id="cb1-6">df_with_index</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  index    name age
1     1   Alice  25
2     2     Bob  30
3     3 Charlie  28</code></pre>
</div>
</div>
</section>
<section id="ex-2-row-name-shuffle" class="level3">
<h3 class="anchored" data-anchor-id="ex-2-row-name-shuffle">Ex 2: <strong>Row Name Shuffle:</strong></h3>
<p>Prefer names over numbers? <code>rownames(df) &lt;- 1:nrow(df)</code> assigns row numbers as your index, replacing existing row names.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb3-3"></span>
<span id="cb3-4">df_with_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df), df)</span>
<span id="cb3-5">df_with_index</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  index    name age
1     1   Alice  25
2     2     Bob  30
3     3 Charlie  28</code></pre>
</div>
</div>
</section>
<section id="ex-3-the-all-seeing-eye" class="level3">
<h3 class="anchored" data-anchor-id="ex-3-the-all-seeing-eye">Ex 3: <strong>The All-Seeing Eye:</strong></h3>
<p><code>seq_len(nrow(df))</code> generates a sequence of numbers, perfect for adding as a new column named “index”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb5-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb5-3"></span>
<span id="cb5-4">df_with_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)), df)</span>
<span id="cb5-5">df_with_index</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  index    name age
1     1   Alice  25
2     2     Bob  30
3     3 Charlie  28</code></pre>
</div>
</div>
</section>
</section>
<section id="the-tidyverse-twist" class="level2">
<h2 class="anchored" data-anchor-id="the-tidyverse-twist">The Tidyverse Twist:</h2>
<p>The <code>tidyverse</code> offers unique approaches:</p>
<section id="ex-1-tibble-magic" class="level3">
<h3 class="anchored" data-anchor-id="ex-1-tibble-magic">Ex 1: <strong>Tibble Magic:</strong></h3>
<p><code>tibble::rowid_to_column(df)</code> adds a column named “row_id” with unique row identifiers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert df to tibble</span></span>
<span id="cb7-4">df_tib <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row_id</span></span>
<span id="cb7-7">df_tib_indexed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowid_to_column</span>(df_tib)</span>
<span id="cb7-8">df_tib_indexed</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  rowid name      age
  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;
1     1 Alice      25
2     2 Bob        30
3     3 Charlie    28</code></pre>
</div>
</div>
</section>
<section id="ex-2-dplyrs-ranking-system" class="level3">
<h3 class="anchored" data-anchor-id="ex-2-dplyrs-ranking-system">Ex 2: <strong>dplyr’s Ranking System:</strong></h3>
<p><code>dplyr::row_number()</code> assigns ranks (starting from 1) based on the order of your data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row number</span></span>
<span id="cb9-3">df_tib_ranked <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df_tib <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rowid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(rowid, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>())</span>
<span id="cb9-6"></span>
<span id="cb9-7">df_tib_ranked</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  rowid name      age
  &lt;int&gt; &lt;chr&gt;   &lt;dbl&gt;
1     1 Alice      25
2     2 Bob        30
3     3 Charlie    28</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="choose-your-champion" class="level1">
<h1>Choose Your Champion:</h1>
<p>Experiment and see what suits your workflow! Base R offers flexibility, while <code>tidyverse</code> provides concise and consistent syntax.</p>
</section>
<section id="now-you-try" class="level1">
<h1>Now You Try!</h1>
<ol type="1">
<li>Create your own data frame with different data types.</li>
<li>Apply the methods above to add index columns.</li>
<li>Explore customizing column names and data types.</li>
<li>Share your creations and challenges in the R community!</li>
</ol>
<p>Remember, data wrangling is a journey, not a destination. Keep practicing, and you’ll be adding those index columns like a seasoned R pro in no time!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-16/index.html</guid>
  <pubDate>Fri, 16 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Conquering R’s Apply Family: Your Guide to apply(), lapply(), sapply(), and tapply()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-15/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome, fellow R warriors! Today, we delve into the heart of vectorized operations with R’s “apply” family: <code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, and <code>tapply()</code>. These functions are your secret weapons for efficiency and elegance, so buckle up and prepare to be amazed!</p>
<p><strong>But first, the “why”:</strong> Loops are great, but for repetitive tasks on data structures, vectorization reigns supreme. It’s faster, cleaner, and lets you focus on the “what” instead of the “how” of your analysis. Enter the apply family, each member offering a unique twist on applying functions to your data.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1.-the-grandparent-apply" class="level2">
<h2 class="anchored" data-anchor-id="example-1.-the-grandparent-apply">Example 1. The Grandparent: apply()</h2>
<p>Think of <code>apply()</code> as the customizable grandfather. It takes three arguments:</p>
<ul>
<li><code>X:</code> Your data (matrix, array, data frame).</li>
<li><code>MARGIN:</code> Where to apply the function (rows = 1, columns = 2, both = c(1, 2)).</li>
<li><code>FUN:</code> The function to apply (e.g., <code>mean</code>, <code>sum</code>, your custom function).</li>
</ul>
<p>Calculate the mean of each column in the <code>iris</code> dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">column_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(iris[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mean)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(column_means)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
    5.843333     3.057333     3.758000     1.199333 </code></pre>
</div>
</div>
<p><strong>Explanation:</strong> We apply <code>mean</code> (FUN) to each column (MARGIN = 2) of the first four columns (iris[, 1:4]) of the <code>iris</code> data frame, storing the results in <code>column_means</code>.</p>
</section>
<section id="example-2.-the-speedy-sibling-lapply" class="level2">
<h2 class="anchored" data-anchor-id="example-2.-the-speedy-sibling-lapply">Example 2. The Speedy Sibling: lapply()</h2>
<p><code>lapply()</code> is the speed demon, applying a function to each element of a list or vector and returning a list of results.</p>
<p>Calculate the median of each petal length in a list of lists:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">petal_lengths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.6</span>))</span>
<span id="cb3-2">petal_medians <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(petal_lengths, median)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(petal_medians)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1.5

[[2]]
[1] 4.5</code></pre>
</div>
</div>
<p><strong>Explanation:</strong> We apply <code>median</code> to each sub-list in <code>petal_lengths</code>, returning a list (<code>petal_medians</code>) containing the medians.</p>
</section>
<section id="example-3.-the-streamlined-cousin-sapply" class="level2">
<h2 class="anchored" data-anchor-id="example-3.-the-streamlined-cousin-sapply">Example 3. The Streamlined Cousin: sapply()</h2>
<p><code>sapply()</code> is like <code>lapply()</code>, but it tries to simplify the output. If all results are of the same type (e.g., numeric), it returns a vector instead of a list.</p>
<p>Find the minimum value in each row of a matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-2">row_mins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(matrix), <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(matrix[i, ]))</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(row_mins)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3</code></pre>
</div>
</div>
<p><strong>Explanation:</strong> We use an anonymous function to find the minimum in each row (<code>matrix[i, ]</code>) and apply it to each row number (1:nrow(matrix)). <code>sapply()</code> simplifies the output to a vector of minimum values (<code>row_mins</code>).</p>
</section>
<section id="example-4.-the-grouping-guru-tapply" class="level2">
<h2 class="anchored" data-anchor-id="example-4.-the-grouping-guru-tapply">Example 4. The Grouping Guru: tapply()</h2>
<p><code>tapply()</code> groups data based on another variable and applies a function to each group. Perfect for summarizing data by categories!</p>
<p>Calculate the average sepal length for each species in the <code>iris</code> dataset:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">sepal_length_by_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Sepal.Length, iris<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Species, mean)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sepal_length_by_species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    setosa versicolor  virginica 
     5.006      5.936      6.588 </code></pre>
</div>
</div>
<p><strong>Explanation:</strong> We group the <code>Sepal.Length</code> column by the <code>Species</code> column (using <code>iris$Species</code>) and calculate the mean (<code>mean</code>) for each group. The results are stored in <code>sepal_length_by_species</code>.</p>
</section>
</section>
<section id="ready-to-experiment" class="level1">
<h1>Ready to Experiment?</h1>
<p>These are just a taste of the apply family’s power. Now it’s your turn! Explore different functions, data structures, and margins to see how these tools can streamline your R workflow. Remember, practice makes perfect, so dive in, experiment, and conquer the world of vectorized operations!</p>
<p><strong>Bonus Tip:</strong> Check out the <code>purrr</code> package for even more apply-like functions with a functional programming twist!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-15/index.html</guid>
  <pubDate>Thu, 15 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Date Sequences in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-14/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data analysis and manipulation, working with dates is a common and crucial task. Whether you’re analyzing financial data, tracking trends over time, or forecasting future events, understanding how to generate date sequences efficiently is essential. In this blog post, we’ll explore three powerful R packages—lubridate, timetk, and base R—that make working with dates a breeze. By the end of this guide, you’ll be equipped with the knowledge to generate date sequences effortlessly and efficiently in R.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="generating-date-sequences-with-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="generating-date-sequences-with-lubridate">Generating Date Sequences with lubridate:</h2>
<p>Lubridate is a popular R package that simplifies working with dates and times. Let’s start by generating a sequence of dates using lubridate’s <code>seq</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a sequence of dates from January 1, 2022 to January 10, 2022</span></span>
<span id="cb1-4">date_seq_lubridate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-10"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(date_seq_lubridate)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2022-01-01" "2022-01-02" "2022-01-03" "2022-01-04" "2022-01-05"
 [6] "2022-01-06" "2022-01-07" "2022-01-08" "2022-01-09" "2022-01-10"</code></pre>
</div>
</div>
<p>Explanation: - <code>library(lubridate)</code>: Loads the lubridate package into the R session. - <code>seq(ymd("2022-01-01"), ymd("2022-01-10"), by = "days")</code>: Generates a sequence of dates starting from January 1, 2022, to January 10, 2022, with a step size of one day. - <code>print(date_seq_lubridate)</code>: Prints the generated sequence of dates.</p>
</section>
<section id="generating-date-sequences-with-timetk" class="level2">
<h2 class="anchored" data-anchor-id="generating-date-sequences-with-timetk">Generating Date Sequences with timetk</h2>
<p>Timetk is another fantastic R package for working with date-time data. Let’s use timetk’s <code>tk_make_seq</code> function to generate a sequence of dates.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the timetk package</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(timetk)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a sequence of dates from January 1, 2022 to January 10, 2022</span></span>
<span id="cb3-5">date_seq_timetk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tk_make_timeseries</span>(</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start_date =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, </span>
<span id="cb3-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">end_date =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-10"</span>, </span>
<span id="cb3-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span></span>
<span id="cb3-9">  )</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(date_seq_timetk)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2022-01-01" "2022-01-02" "2022-01-03" "2022-01-04" "2022-01-05"
 [6] "2022-01-06" "2022-01-07" "2022-01-08" "2022-01-09" "2022-01-10"</code></pre>
</div>
</div>
<p>Explanation: - <code>library(timetk)</code>: Loads the timetk package into the R session. - <code>tk_make_seq(from = "2022-01-01", to = "2022-01-10", by = "days")</code>: Generates a sequence of dates starting from January 1, 2022, to January 10, 2022, with a step size of one day. - <code>print(date_seq_timetk)</code>: Prints the generated sequence of dates.</p>
</section>
<section id="generating-date-sequences-with-base-r" class="level2">
<h2 class="anchored" data-anchor-id="generating-date-sequences-with-base-r">Generating Date Sequences with base R:</h2>
<p>Finally, let’s explore how to generate a sequence of dates using base R’s <code>seq</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a sequence of dates from January 1, 2022 to January 10, 2022</span></span>
<span id="cb5-2">date_seq_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>), </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-10"</span>), </span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span></span>
<span id="cb5-6">  )</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(date_seq_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2022-01-01" "2022-01-02" "2022-01-03" "2022-01-04" "2022-01-05"
 [6] "2022-01-06" "2022-01-07" "2022-01-08" "2022-01-09" "2022-01-10"</code></pre>
</div>
</div>
<p>Explanation: - <code>seq(as.Date("2022-01-01"), as.Date("2022-01-10"), by = "days")</code>: Generates a sequence of dates starting from January 1, 2022, to January 10, 2022, with a step size of one day. - <code>print(date_seq_base)</code>: Prints the generated sequence of dates.</p>
<p>Here is another example of generating a sequence of dates using base R’s <code>seq</code> function with a different frequency:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-01"</span>)</span>
<span id="cb7-2">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4">day_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(end_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-5">date_seq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> start_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>day_count</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(date_seq)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-01-01"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(date_seq)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-01"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(date_seq)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-01-01" "2023-01-02" "2023-01-03" "2023-01-04" "2023-01-05"
[6] "2023-01-06"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(date_seq)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-12-27" "2023-12-28" "2023-12-29" "2023-12-30" "2023-12-31"
[6] "2024-01-01"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">healthyR.ts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_info_tbl</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.ts</span>(date_seq))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 7
  name            class frequency start end   var        length
  &lt;chr&gt;           &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;int&gt;
1 as.ts(date_seq) ts            1 1 1   366 1 univariate    366</code></pre>
</div>
</div>
</section>
</section>
<section id="bonus-tip-generating-weekly-date-sequence" class="level1">
<h1>Bonus Tip: Generating Weekly Date Sequence</h1>
<p>Let’s now try making a sequence of dates of just Tuesdays from January 1, 2022, to January 10, 2022, using lubridate.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a sequence of dates of just Tuesdays from January 1, 2022 to January 10, 2022</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb17-3"></span>
<span id="cb17-4">days <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(</span>
<span id="cb17-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">from =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>),</span>
<span id="cb17-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">to =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-10"</span>),</span>
<span id="cb17-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"days"</span></span>
<span id="cb17-8">)</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the Tuesdays</span></span>
<span id="cb17-11">tuesdays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> days[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(days) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb17-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(tuesdays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Tue
Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we’ve explored three different methods for generating date sequences in R using lubridate, timetk, and base R. Each package offers its own set of functions and advantages, allowing you to choose the method that best suits your needs and preferences. I encourage you to try out these examples on your own and experiment with generating date sequences for different time periods and frequencies. Mastering date sequences in R will undoubtedly enhance your data analysis capabilities and make working with date-time data a seamless experience. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-14/index.html</guid>
  <pubDate>Wed, 14 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Get First or Last Day of Month in R with lubridate and base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-13/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with dates in R, you’ll often need to find the first or last day of the current month or any given month. There are a couple easy ways to do this using the lubridate package and base R functions. In this post, I’ll show you how.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate">Using lubridate</h2>
<p>The lubridate package makes working with dates in R much easier. It has a number of helper functions for manipulating and extracting info from Date and POSIXct objects.</p>
<p>To get the first day of the current month, you can use <code>floor_date()</code> and pass it the current date:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-2"></span>
<span id="cb1-3">today <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.Date</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or Sys.time() for POSIXct</span></span>
<span id="cb1-4">first_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor_date</span>(today, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unit =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>)</span>
<span id="cb1-5">first_day</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-01"</code></pre>
</div>
</div>
<p>This will return a Date object with the first day of the month.</p>
<p>To get the last day, use <code>ceiling_date()</code> instead:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">last_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling_date</span>(today, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">unit =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">days</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-2">last_day</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-29"</code></pre>
</div>
</div>
<p>You can also pass any Date object to these functions to get the first or last day of that month:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-06-15"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor_date</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2023-06-01</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-06-01"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ceiling_date</span>(date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"month"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">days</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2023-06-30</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-06-30"</code></pre>
</div>
</div>
<p>The lubridate functions make this really easy!</p>
</section>
<section id="base-r-methods" class="level2">
<h2 class="anchored" data-anchor-id="base-r-methods">Base R Methods</h2>
<p>You can also get the first and last day of month using just base R functions.</p>
<p>For the first day, use <code>as.Date()</code> with <code>format()</code> and pass it the year, month, and day 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">first_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(today, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-01"</span>))</span>
<span id="cb9-2">first_day</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-01"</code></pre>
</div>
</div>
<p>For the last day, we can use <code>0</code> as the day which will give the last day of the month:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">last_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(today <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">months</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-01"</span>)))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-2">last_day</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-29"</code></pre>
</div>
</div>
<p>A bit more work than lubridate, but good to know you can do this with just base R.</p>
<p>I hope this helps you easily get the first and last day of the month in your own date analyses in R! Let me know if you have any other questions.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-13/index.html</guid>
  <pubDate>Tue, 13 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>From Chaos to Clarity: Mastering Weekly Data Wrangling in R with strftime()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-12/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Grouping data by week is a common task in data analysis. It allows you to summarize and analyze your data on a weekly basis. In R, there are a few different ways to group data by week, but one easy method is using the <code>strftime()</code> function.</p>
<p>The <code>strftime()</code> function converts a date-time object to a string in a specified format. By using the format <code>%V</code>, we can extract the week number from a date. Let’s walk through an example:</p>
<p>First, let’s create a data frame with some date values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-05"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-17"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-03-01"</span>))</span>
<span id="cb1-2">values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3</span>) </span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(dates, values)</span>
<span id="cb1-5">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       dates values
1 2023-01-01    1.5
2 2023-01-15    3.2
3 2023-02-05    2.7
4 2023-02-17    4.1
5 2023-03-01    2.3</code></pre>
</div>
</div>
<p>Now we can use <code>strftime()</code> to extract the week number as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>week <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dates, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%V"</span>)</span>
<span id="cb3-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       dates values week
1 2023-01-01    1.5   52
2 2023-01-15    3.2   02
3 2023-02-05    2.7   05
4 2023-02-17    4.1   07
5 2023-03-01    2.3   09</code></pre>
</div>
</div>
<p>This adds a new column <code>week</code> to the data frame containing the week number for each date.</p>
<p>We can now easily group the data by week and summarize the <code>values</code> column:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aggregate</span>(values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> week, df, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  week values
1   02    3.2
2   05    2.7
3   07    4.1
4   09    2.3
5   52    1.5</code></pre>
</div>
</div>
<p>And there we have it! The data neatly summarized by week. The <code>%V</code> format in <code>strftime()</code> makes it easy to group by week in R.</p>
<p>I encourage you to try this on your own data. Converting dates to week numbers enables all sorts of weekly time series analyses. Let me know if you have any other questions!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-12/index.html</guid>
  <pubDate>Mon, 12 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Demystifying Dates: Finding the Day of the Week in R with lubridate</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever stared at a date in R and wondered, “What day of the week was this?!” Fear not, fellow data wranglers! Today, we embark on a journey to conquer this seemingly simple, yet surprisingly tricky, task. Buckle up, because we’re about to become date whisperers with the help of the <code>lubridate</code> package.</p>
</section>
<section id="the-power-of-lubridate" class="level1">
<h1>The Power of <code>lubridate</code></h1>
<p>R’s built-in date functions are decent, but <code>lubridate</code> takes things to a whole new level. Think of it as a Swiss Army knife for everything date-related. It offers a wider range of functions, clear syntax, and handles different date formats like a champ.</p>
</section>
<section id="unveiling-the-mystery-extracting-the-day-of-the-week" class="level1">
<h1>Unveiling the Mystery: Extracting the Day of the Week</h1>
<p>There are two main approaches to finding the day of the week in <code>lubridate</code>:</p>
<section id="example-1-using-wday" class="level2">
<h2 class="anchored" data-anchor-id="example-1-using-wday">Example 1: Using <code>wday()</code></h2>
<p>This function is your go-to for both numeric and character representations of the day. Let’s break it down:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample date</span></span>
<span id="cb1-4">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-02-09"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Numeric day (Monday = 1, Sunday = 7)</span></span>
<span id="cb1-7">numeric_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(numeric_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 6 (Friday)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(numeric_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Character day (full name)</span></span>
<span id="cb5-2">full_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(full_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Friday</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Fri
Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(full_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ordered" "factor" </code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Character day (abbreviated)</span></span>
<span id="cb9-2">abbrev_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">abbr =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(abbrev_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Fri</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] Fri
Levels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(abbrev_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ordered" "factor" </code></pre>
</div>
</div>
</section>
<section id="example-2.-using-strftime" class="level2">
<h2 class="anchored" data-anchor-id="example-2.-using-strftime">Example 2. Using <code>strftime()</code></h2>
<p>This function offers more flexibility in formatting dates, including extracting the day of the week.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Same date as before</span></span>
<span id="cb13-2">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-02-09"</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Day of the week (full name)</span></span>
<span id="cb15-2">full_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%A"</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(full_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Friday</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Friday"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(full_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Day of the week (abbreviated)</span></span>
<span id="cb19-2">abbrev_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%a"</span>)</span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(abbrev_day)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: Fri</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Fri"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(abbrev_day)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "character"</code></pre>
</div>
</div>
<section id="beyond-the-basics-customizing-your-output" class="level3">
<h3 class="anchored" data-anchor-id="beyond-the-basics-customizing-your-output">Beyond the Basics: Customizing Your Output</h3>
<p>Both <code>wday()</code> and <code>strftime()</code> offer options to personalize your results. For example, you can change the starting day of the week (default is Monday) or use different formatting codes for the day name.</p>
<p><strong>Bonus Tip:</strong> Check out the <code>lubridate</code> documentation for more advanced options and functionalities!</p>
</section>
</section>
</section>
<section id="time-to-play" class="level1">
<h1>Time to Play!</h1>
<p>Now it’s your turn to experiment! Here are some ideas:</p>
<ul>
<li>Find the day of your birthday in R.</li>
<li>Analyze historical data and see how weekdays affect specific variables.</li>
<li>Create a calendar visualization with the day of the week displayed.</li>
</ul>
<p>Remember, the more you practice, the more comfortable you’ll become with manipulating dates in R. So, dive in, explore, and have fun!</p>
<p><strong>P.S.</strong> Don’t forget to share your creations and questions in the comments below. The R community is always happy to help!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-09/index.html</guid>
  <pubDate>Fri, 09 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if a Column is a Date in R: A Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As an R programmer, you may often encounter datasets where you need to determine whether a column contains date values. This task is crucial for data cleaning, manipulation, and analysis. In this blog post, we’ll explore various methods to check if a column is a date in R, with a focus on using the <code>lubridate</code> package and the <code>ts_is_date_class()</code> function from the <code>healthyR.ts</code> package.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate">Using lubridate</h2>
<p><code>lubridate</code> is a powerful package in R for handling date and time data. It provides intuitive functions to parse, manipulate, and work with date-time objects. Let’s see how we can use <code>lubridate</code> to check if a column is a date.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame</span></span>
<span id="cb1-6">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Date_Column =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not a date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-03-30"</span>)</span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if Date_Column is a date</span></span>
<span id="cb1-11">is_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Date_Column)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(is_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<p>In this example, we created a sample data frame <code>df</code> with a column named <code>Date_Column</code>. We used the <code>is.Date()</code> function from <code>lubridate</code> to check if the values in <code>Date_Column</code> are dates. The result is a logical with either a value of (<code>TRUE</code>) or (<code>FALSE</code>). In this instance the result is <code>FALSE</code> because the entire vector is not a date. This can change to <code>TRUE</code> if the entire vector is a date. See below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Date_Column =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(Date_Column)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(Date_Column) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR</span></span>
<span id="cb5-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Date_Column =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(Date_Column) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.Date</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Date_Column
1        TRUE
2        TRUE
3        TRUE
4        TRUE</code></pre>
</div>
</div>
</section>
<section id="using-ts_is_date_class-from-healthyr.ts" class="level2">
<h2 class="anchored" data-anchor-id="using-ts_is_date_class-from-healthyr.ts">Using ts_is_date_class() from healthyR.ts</h2>
<p>Now, let’s explore how to achieve the same task using the <code>ts_is_date_class()</code> function from the <code>healthyR.ts</code> package. This function is specifically designed to check if a column is a date class, providing an alternative method for date validation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and load the healthyR.ts package</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("healthyR.ts")</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(healthyR.ts)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if Date_Column is a date using ts_is_date_class()</span></span>
<span id="cb7-6">is_date_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_is_date_class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Date_Column))</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(is_date_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OR</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">is_date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts_is_date_class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(Date_Column)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Date_Column is_date
1  2022-01-01    TRUE
2  2022-02-15    TRUE
3  not a date    TRUE
4  2022-03-30    TRUE</code></pre>
</div>
</div>
<p>In this example, we installed and loaded the <code>healthyR.ts</code> package, which contains the <code>ts_is_date_class()</code> function. We then applied this function to <code>df$Date_Column</code> to check if the values are of date class.</p>
<p>You will notice both methods incorrectly identify the row “not a date” as a date because the <code>as.Date()</code> function coerces the string “not a date” to an <code>NA</code> inside of the <code>mutate</code> function. If you use <code>rowwise()</code> before the <code>mutate</code> it will fail out completely, this can be a pitfall and is something to watch out for.</p>
</section>
</section>
<section id="encouragement" class="level1">
<h1>Encouragement</h1>
<p>Now that you’ve seen two different methods to check if a column is a date in R, I encourage you to try them out with your own datasets. Whether you prefer using <code>lubridate</code> or the functions from the <code>healthyR.ts</code> package, understanding how to validate date columns is essential for efficient data analysis and manipulation. See what you come up with!</p>
<p>Experiment with different datasets and column types to gain a deeper understanding of these techniques. By mastering these skills, you’ll become more proficient in handling date and time data in R, empowering you to tackle a wide range of data analysis tasks effectively.</p>
<p>In conclusion, checking if a column is a date in R is a fundamental skill for data professionals. With the right tools and techniques, such as those provided by <code>lubridate</code> and <code>healthyR.ts</code>, you can confidently validate date columns in your datasets and streamline your data analysis workflows.</p>
<p>Happy coding, and may your data always be accurate and insightful!</p>
<p>That wraps up our exploration of how to check if a column is a date in R. I hope you found this post helpful and informative. Stay tuned for more R programming tips and tutorials!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-08/index.html</guid>
  <pubDate>Thu, 08 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Check if Date is Between Two Dates in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-07/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello fellow R enthusiasts! Today, we’re diving into a common task in data analysis and manipulation: checking if a date falls between two given dates. Whether you’re working with time-series data, financial data, or any other type of data that includes dates, being able to filter or flag data based on date ranges is an essential skill.</p>
<p>In this blog post, we’ll explore two approaches to accomplish this task using base R syntax. We’ll use simple examples and explain the code in easy-to-understand terms. So, let’s get started!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="method-1-using-ifelse-to-create-a-new-column" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-ifelse-to-create-a-new-column">Method 1: Using ifelse() to Create a New Column</h2>
<p>One straightforward way to check if a date is between two dates is by using the <code>ifelse()</code> function to create a new column with an indicator variable.</p>
<p>Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame with dates</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-03-15"</span>, </span>
<span id="cb1-3">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-07-10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-11-30"</span>)),</span>
<span id="cb1-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define start and end dates</span></span>
<span id="cb1-7">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-01"</span>)</span>
<span id="cb1-8">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-10-01"</span>)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new column indicating if date falls between start_date and end_date</span></span>
<span id="cb1-11">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>between <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end_date, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the updated data frame</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date value between
1 2022-01-01    10       0
2 2022-03-15    20       1
3 2022-07-10    30       1
4 2022-11-30    40       0</code></pre>
</div>
</div>
<p>In this code snippet, we first define a sample data frame <code>df</code> containing a column of dates. Then, we specify the <code>start_date</code> and <code>end_date</code> between which we want to check if each date falls. We use the <code>ifelse()</code> function to create a new column <code>between</code>, where a value of 1 indicates that the date falls between the specified range, and 0 otherwise.</p>
</section>
<section id="method-2-using-subsetting-to-filter-data" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-subsetting-to-filter-data">Method 2: Using Subsetting to Filter Data</h2>
<p>Another approach is to directly subset the data frame based on the date range. This method can be useful when you want to retrieve or manipulate the subset of data that falls within the specified range.</p>
<p>Here’s how you can do it:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frame with dates</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-03-15"</span>, </span>
<span id="cb3-3">                                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-07-10"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-11-30"</span>)),</span>
<span id="cb3-4">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define start and end dates</span></span>
<span id="cb3-7">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-02-01"</span>)</span>
<span id="cb3-8">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-10-01"</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset data where date falls between start_date and end_date</span></span>
<span id="cb3-11">subset_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> start_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end_date, ]</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the subsetted data frame</span></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(subset_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date value
2 2022-03-15    20
3 2022-07-10    30</code></pre>
</div>
</div>
<p>In this code snippet, we use subsetting to filter the <code>df</code> data frame, retaining only the rows where the date falls between <code>start_date</code> and <code>end_date</code>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>That’s it! You’ve learned two methods to check if a date is between two dates in R using base R syntax. Whether you prefer creating a new column with an indicator variable or directly subsetting the data, both approaches are powerful tools in your R programming toolkit.</p>
<p>I encourage you to try these examples with your own data and explore further. Understanding how to manipulate date-based data is a valuable skill that will serve you well in various data analysis tasks.</p>
<p>Happy coding! 📊✨</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-07/index.html</guid>
  <pubDate>Wed, 07 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplifying Date Manipulation: How to Get Week Numbers in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-06/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with dates in R, you may need to extract the week number for any given date. This can be useful for doing time series analysis or visualizations by week.</p>
<p>In this post, I’ll demonstrate how to get the week number from dates in R using both base R and the lubridate package. I’ll provide simple examples so you can try it yourself.</p>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>In base R, the <code>strftime()</code> function is used to format dates and extract different date components like day, month, year etc.</p>
<p>The syntax for <code>strftime()</code> is:</p>
<pre><code>strftime(x, format, tz = "")</code></pre>
<p>Where:</p>
<ul>
<li><code>x</code>: is the date object<br>
</li>
<li><code>format</code>: is the format string specifying which date components to extract</li>
<li><code>tz</code>: is an optional time zone string</li>
</ul>
<p>To get the week number, we need to use <code>"%V"</code> in the format string. This tells <code>strftime()</code> to return the ISO 8601 standard week number.</p>
<p>Let’s see an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%V"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "02"</code></pre>
</div>
</div>
<p>This returns the week number as a string. In this case, it’s the second week of the year.</p>
<p>We passed the date object to <code>strftime()</code> along with the format string containing <code>"%V"</code>.</p>
<p>Let’s try another example on a vector of dates:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-28"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>))</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">strftime</span>(dates, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">format =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%V"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "02" "09" "52"</code></pre>
</div>
</div>
<p>This returns the week number for each date. So with base R, we can use <code>strftime()</code> and <code>%V</code> to easily extract week numbers from dates.</p>
</section>
<section id="using-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate">Using lubridate</h2>
<p>The lubridate package provides a wrapper function called <code>week()</code> to get the week number from a date.</p>
<p>The syntax for <code>week()</code> is simple:</p>
<pre><code>week(x)</code></pre>
<p>Where x is the date object.</p>
<p>Let’s see an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb7-2"></span>
<span id="cb7-3">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">week</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
</div>
<p>This returns a numeric value representing the week number. In this case, it’s the third week of the year.</p>
<p>For a vector of dates:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">dates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-02-28"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>))</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">week</span>(dates) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  3  9 53</code></pre>
</div>
</div>
<p>So <code>week()</code> makes it easy to extract the week number from dates in lubridate. You will also notice that <code>strftime()</code> returns “52” for the last date of the year, while <code>week()</code> returns “53”. This is because <code>week()</code> follows the ISO 8601 standard for week numbers.</p>
</section>
<section id="wrap-up" class="level2">
<h2 class="anchored" data-anchor-id="wrap-up">Wrap Up</h2>
<p>To quickly recap the key points:</p>
<ul>
<li>Base R: <code>strftime(date, format = "%V")</code><br>
</li>
<li>lubridate: <code>week(date)</code></li>
</ul>
<p>I encourage you to try these functions out on some sample dates in R. Being able to wrangle dates is an important skill for handling temporal data.</p>
<p>Let me know if you have any other questions!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-06/index.html</guid>
  <pubDate>Tue, 06 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Taming Excel Dates in R: From Numbers to Meaningful Dates!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever battled with Excel’s quirky date formats in your R projects? If so, you’re not alone! Those cryptic numbers can be a real headache, but fear not, fellow R warriors! Today, we’ll conquer this challenge and transform those numbers into beautiful, usable dates.</p>
<p><strong>Our Mission:</strong> We’ll convert two date columns in a tibble named “df”:</p>
<ol type="1">
<li><strong><code>date</code>:</strong> Stored as numbers, representing days since some mysterious date.</li>
<li><strong><code>datetime</code>:</strong> Also in numberland, but with an additional decimal for time.</li>
</ol>
<p><strong>Our Weapons:</strong></p>
<ul>
<li><strong><code>as.Date()</code>:</strong> This built-in R function is our date-conversion hero, but we need to give it a secret weapon: <code>origin = "1899-12-30"</code>. This tells <code>as.Date()</code> where the Excel date system starts counting days from.</li>
<li><strong><code>openxlsx</code> library:</strong> This package helps us deal with Excel files. We’ll use its <code>convertToDateTime()</code> function to handle the <code>datetime</code> column, which includes both date and time information.</li>
</ul>
</section>
<section id="lets-code" class="level1">
<h1>Let’s Code!</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and load the openxlsx library (if needed)</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>(openxlsx)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"openxlsx"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(openxlsx)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our example data</span></span>
<span id="cb1-6">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44563</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44566</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44635</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44670</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44706</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44716</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44761</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44782</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44864</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">44919</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">datetime =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44563.17</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44566.51</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44635.64</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44670.40</span>,</span>
<span id="cb1-9">               <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44706.43</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44716.42</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44761.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44782.09</span>,</span>
<span id="cb1-10">               <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44864.19</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">44919.89</span>),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb1-12">)</span>
<span id="cb1-13"></span>
<span id="cb1-14">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    date datetime sales
1  44563 44563.17    14
2  44566 44566.51    19
3  44635 44635.64    22
4  44670 44670.40    29
5  44706 44706.43    24
6  44716 44716.42    25
7  44761 44761.05    25
8  44782 44782.09    30
9  44864 44864.19    35
10 44919 44919.89    28</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert "date" column using as.Date() and the magic origin</span></span>
<span id="cb3-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">origin =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1899-12-30"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert "datetime" column using openxlsx and convertToDateTime()</span></span>
<span id="cb3-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>datetime <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">convertToDateTime</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>datetime)</span></code></pre></div>
</div>
</section>
<section id="breaking-it-down" class="level1">
<h1>Breaking it Down</h1>
<ol type="1">
<li>The first line checks if <code>openxlsx</code> is installed and loads it if needed.</li>
<li>We create our sample data frame <code>df</code> with the <code>date</code> and <code>datetime</code> columns.</li>
<li>The magic happens! We use <code>as.Date()</code> on <code>df$date</code>, specifying the <code>origin</code> as “1899-12-30”. This tells R to interpret the numbers as days since that date.</li>
<li>For <code>df$datetime</code>, we use <code>convertToDateTime()</code> from the <code>openxlsx</code> package. This function handles both date and time information stored as decimals.</li>
</ol>
<p><strong>Voila!</strong> Our <code>df</code> now has proper date and datetime columns, ready for further analysis and visualization. Let’s see the results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date            datetime sales
1 2022-01-02 2022-01-02 04:04:48    14</code></pre>
</div>
</div>
</section>
<section id="youre-turn" class="level1">
<h1>You’re Turn!</h1>
<p>Now it’s your turn! Grab your own Excel data with mysterious date formats and try this code. Play with different <code>origin</code> values if needed (depending on your Excel version). Remember, R is a playground, so have fun exploring and taming those dates!</p>
<p><strong>Bonus Tip:</strong> Want to format your dates for readability? Use the <code>format()</code> function, like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%d/%m/%Y"</span>)</span>
<span id="cb6-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         date            datetime sales
1  02/01/2022 2022-01-02 04:04:48    14
2  05/01/2022 2022-01-05 12:14:24    19
3  15/03/2022 2022-03-15 15:21:36    22
4  19/04/2022 2022-04-19 09:36:00    29
5  25/05/2022 2022-05-25 10:19:12    24
6  04/06/2022 2022-06-04 10:04:48    25
7  19/07/2022 2022-07-19 01:12:00    25
8  09/08/2022 2022-08-09 02:09:36    30
9  30/10/2022 2022-10-30 04:33:36    35
10 24/12/2022 2022-12-24 21:21:36    28</code></pre>
</div>
</div>
<p>This will display your dates in the familiar “day/month/year” format.</p>
<p>So there you have it, fellow R enthusiasts! With these tools, you can confidently handle Excel’s date quirks and unleash the power of your data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-05/index.html</guid>
  <pubDate>Mon, 05 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Accounts Recievables Pathways in SQL</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-02/index.html</link>
  <description><![CDATA[ 




<p>Yesterday I was working on a project that required me to create a SQL query to generate a table of accounts receivables pathways. I thought it would be interesting to share the SQL code I wrote for this task. The code is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create the table in the specified schema</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create a new table called 'c_tableau_collector_pathway_tbl' in schema 'dbo'</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Drop the table if it already exists</span></span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">IF</span> OBJECT_ID(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dbo.c_tableau_collector_pathway_tbl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">IS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DROP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TABLE</span> dbo.c_tableau_collector_pathway_tbl</span>
<span id="cb1-6">GO</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- Create the table in the specified schema</span></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TABLE</span> dbo.c_tableau_collector_pathway_tbl</span>
<span id="cb1-9">(</span>
<span id="cb1-10">    c_tableau_collector_pathway_tblId <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">INT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span> IDENTITY(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">PRIMARY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">KEY</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- primary key column</span></span>
<span id="cb1-11">    pt_no <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NOT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb1-12">    collector_dept_path <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">VARCHAR</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MAX</span>)</span>
<span id="cb1-13">);</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WITH</span> tmp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> (</span>
<span id="cb1-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DISTINCT</span> pt_no</span>
<span id="cb1-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> sms.dbo.c_tableau_times_with_worklist_tbl</span>
<span id="cb1-18">    )</span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INTO</span> sms.dbo.c_tableau_collector_pathway_tbl (</span>
<span id="cb1-20">    pt_no,</span>
<span id="cb1-21">    collector_dept_path</span>
<span id="cb1-22">    )</span>
<span id="cb1-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rtrim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ltrim</span>(tmp.pt_no)) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> [pt_no],</span>
<span id="cb1-24">    stuff((</span>
<span id="cb1-25">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z.collector_dept</span>
<span id="cb1-26">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> sms.dbo.c_tableau_times_with_worklist_tbl <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> z</span>
<span id="cb1-27">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WHERE</span> z.pt_no <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp.pt_no</span>
<span id="cb1-28">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> z.collector_dept</span>
<span id="cb1-29">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(event_number)</span>
<span id="cb1-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">FOR</span> XML path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb1-31">            ), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> [collector_dept_path]</span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> tmp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">AS</span> tmp;</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">select</span> pt_no,</span>
<span id="cb1-35">    [collector_dept_path],  </span>
<span id="cb1-36">    [number_of_distinct_collector_dept] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (LEN(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">REPLACE</span>(collector_dept_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'**'</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> LEN(collector_dept_path)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">from</span> dbo.c_tableau_collector_pathway_tbl</span></code></pre></div>
<p>So what does it do? Let’s break it down step by step:</p>
<ol type="1">
<li><code>IF OBJECT_ID('dbo.c_tableau_collector_pathway_tbl', 'U') IS NOT NULL</code>
<ul>
<li>This part checks if a table named <code>c_tableau_collector_pathway_tbl</code> exists in the <code>dbo</code> schema. If it does, it proceeds to the next step.</li>
</ul></li>
<li><code>DROP TABLE dbo.c_tableau_collector_pathway_tbl</code>
<ul>
<li>If the table exists, it drops (deletes) the table <code>c_tableau_collector_pathway_tbl</code>.</li>
</ul></li>
<li><code>CREATE TABLE dbo.c_tableau_collector_pathway_tbl (...)</code>
<ul>
<li>This part creates a new table named <code>c_tableau_collector_pathway_tbl</code> in the <code>dbo</code> schema with three columns:
<ul>
<li><code>c_tableau_collector_pathway_tblId</code> of type <code>INT</code>, which is the primary key and automatically increments by 1 for each new row.</li>
<li><code>pt_no</code> of type <code>VARCHAR(50)</code>, which stores values up to 50 characters long and cannot be NULL.</li>
<li><code>collector_dept_path</code> of type <code>VARCHAR(MAX)</code>, which can store large amounts of text.</li>
</ul></li>
</ul></li>
<li><code>WITH tmp AS (...)</code>
<ul>
<li>This part defines a temporary table (<code>tmp</code>) that contains distinct values of <code>pt_no</code> from another table named <code>sms.dbo.c_tableau_times_with_worklist_tbl</code>.</li>
</ul></li>
<li><code>INSERT INTO sms.dbo.c_tableau_collector_pathway_tbl (...) SELECT ...</code>
<ul>
<li>This part inserts data into the newly created <code>c_tableau_collector_pathway_tbl</code> table. It selects distinct <code>pt_no</code> values from the temporary table <code>tmp</code> and concatenates corresponding <code>collector_dept</code> values into a single string, separated by commas. The <code>FOR XML path('')</code> part formats the result as XML, and <code>stuff(..., 1, 2, '')</code> removes the leading comma and space.</li>
</ul></li>
<li><code>SELECT pt_no, [collector_dept_path], [number_of_distinct_collector_dept] = (...)</code>
<ul>
<li>Finally, this part selects data from the <code>c_tableau_collector_pathway_tbl</code> table. It selects <code>pt_no</code>, <code>collector_dept_path</code>, and calculates the number of distinct collector departments by counting the commas in the <code>collector_dept_path</code> string.</li>
</ul></li>
</ol>
<p>In summary, this SQL code drops an existing table (if it exists), creates a new table with specific columns, inserts data into the new table by concatenating values from another table, and then selects data from the new table along with a calculated value for the number of distinct collector departments.</p>



 ]]></description>
  <category>code</category>
  <category>sql</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-02/index.html</guid>
  <pubDate>Fri, 02 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>R for the Real World: Counting those Business Days like a Pro!</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-02-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hi fellow coders, data wranglers, and all-around R enthusiasts! Have you ever been stuck calculating the number of business days between two dates? You know, like figuring out how long that project <em>actually</em> took, excluding weekends (because let’s be honest, who works on those?). Well, fret no more! Today, we’re diving into the wonderful world of <em>business day calculations</em> in R with some easy-to-follow examples. Buckle up, it’s gonna be a productive ride!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="step-1-grabbing-the-toolkit" class="level2">
<h2 class="anchored" data-anchor-id="step-1-grabbing-the-toolkit">Step 1: Grabbing the Toolkit</h2>
<p>First things first, we need the right tools. We’ll be using the mighty <em>bizdays</em> package. Think of it as your personal business day calculator, always ready to lend a hand (or rather, some code). Install it with this magic spell:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("bizdays")</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bizdays)</span></code></pre></div>
</div>
</section>
<section id="step-2-the-basic-count" class="level2">
<h2 class="anchored" data-anchor-id="step-2-the-basic-count">Step 2: The Basic Count</h2>
<p>Alright, let’s say you want to know how many business days there were between January 1st and December 31st, 2023. Simple, right? Here’s the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">start_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-01"</span>)</span>
<span id="cb2-2">end_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-12-31"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4">business_days <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bizdays</span>(start_date, end_date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weekends"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There were "</span>, business_days, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" business days in 2023!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "There were 259 business days in 2023!"</code></pre>
</div>
</div>
<p>What’s happening here? We define the start and end dates, feed them to the <code>bizdays</code> function, and voila! It counts the business days for us, excluding weekends by default. The <code>print</code> function just displays the result with a fun message.</p>
</section>
<section id="step-3-get-creative-and-explore" class="level2">
<h2 class="anchored" data-anchor-id="step-3-get-creative-and-explore">Step 3: Get Creative and Explore!</h2>
<p>Remember, this is just the tip of the <code>bizdays</code> iceberg. You can explore its other features like:</p>
<ul>
<li>Adding or subtracting business days from a date</li>
<li>Handling custom holiday lists</li>
<li>Working with different time zones</li>
</ul>
<p><em>But wait, there’s more!</em> The most important step is to <strong>experiment and try things out yourself</strong>. Play with different dates, holidays, and weekend definitions. See what results you get and how they fit your specific needs. R is all about exploration and making it work for you!</p>
<p>So, fellow coders, go forth and conquer those business day calculations with confidence! And if you get stuck, remember, the R community is always here to help. Happy coding!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-02-01/index.html</guid>
  <pubDate>Thu, 01 Feb 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Time Flies? Time Travels! Adding Days to Dates in R (Like a Pro)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-31/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wished you could skip ahead a few days for that weekend getaway, or rewind to relive a magical moment? While real-life time travel remains a sci-fi dream, in R, adding days to dates is a breeze! Today, we’ll explore both base R and the powerful <code>lubridate</code> and <code>timetk</code> packages to master this handy skill.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-base-r-basics" class="level2">
<h2 class="anchored" data-anchor-id="example-1-base-r-basics">Example 1: Base R Basics</h2>
<p>Let’s start with the classic. Imagine you have a date stored as <code>my_date &lt;- "2024-01-31"</code> (yes, today!). To add, say, 5 days, you can simply use <code>my_date + 5</code>. Voila! You’ve time-jumped to February 5th, 2024. But wait, this doesn’t handle months or leap years like a pro.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a date object</span></span>
<span id="cb1-2">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-31"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add 5 days to the date</span></span>
<span id="cb1-5">new_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-31"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-05"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(new_date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
</div>
</section>
<section id="example-2-enter-lubridate" class="level2">
<h2 class="anchored" data-anchor-id="example-2-enter-lubridate">Example 2: Enter <code>lubridate</code></h2>
<p>This superhero package offers functions like <code>as.Date()</code> and <code>days()</code> that understand the nuances of dates. Let’s revisit our example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb9-2"></span>
<span id="cb9-3">my_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-31"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert string to Date object</span></span>
<span id="cb9-4">future_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">days</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add 5 days using days()</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">future_date <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "2024-02-05"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-02-05"</code></pre>
</div>
</div>
<p>See the magic? <code>days(5)</code> tells R to add 5 days specifically. You can even subtract days (imagine reliving that delicious pizza!):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pizza_day <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-27"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Date of pizza bliss</span></span>
<span id="cb11-2">relive_pizza <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pizza_day <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">days</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Travel back 2 days</span></span>
<span id="cb11-3"></span>
<span id="cb11-4">relive_pizza <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "2024-01-25"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-25"</code></pre>
</div>
</div>
</section>
<section id="example-3-beyond-days-timetk-takes-the-wheel" class="level2">
<h2 class="anchored" data-anchor-id="example-3-beyond-days-timetk-takes-the-wheel">Example 3: Beyond Days: <code>timetk</code> Takes the Wheel</h2>
<p>Want to add weeks, months, or even years? <code>timetk</code> takes things to the next level with functions like <code>years()</code>, <code>wednesdays()</code>, and more. Check this out:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(timetk)</span>
<span id="cb13-2"></span>
<span id="cb13-3">graduation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-06-15"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your graduation date (hopefully!)</span></span>
<span id="cb13-4"></span>
<span id="cb13-5">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 hour 34 seconds"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-06-15 01:00:34 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3 months"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-09-15"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 year 3 months 6 days"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2026-09-21"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Backward (Minus Time)</span></span>
<span id="cb19-2">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%-time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 hour 34 seconds"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-06-14 22:59:26 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%-time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3 months"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2025-03-15"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">graduation <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%-time%</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1 year 3 months 6 days"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-03-09"</code></pre>
</div>
</div>
<p><strong>Bonus Tip:</strong> Don’t forget about formatting! Use <code>format()</code> with options like <code>"%Y-%m-%d"</code> to display your dates in your preferred format.</p>
</section>
</section>
<section id="now-its-your-turn" class="level1">
<h1>Now it’s your turn!</h1>
<ul>
<li>Try adding different units (weeks, months) to existing dates.</li>
<li>Use these techniques in your R scripts to analyze time-series data.</li>
<li>Challenge yourself: Can you calculate the difference between two dates in days or weeks?</li>
</ul>
<p>Remember, practice makes perfect. The more you play with dates in R, the more comfortable you’ll become with this essential skill. So go forth, explore, and conquer the realm of time in R!</p>
<p><strong>P.S.</strong> Share your coolest date-manipulation tricks in the comments below. Let’s learn from each other and keep the R community thriving!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-31/index.html</guid>
  <pubDate>Wed, 31 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Time Manipulation in R: Subtracting Hours with Ease</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-30/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wished you could rewind time in R, not just for debugging, but for actual data analysis? Well, you don’t need plutonium and flux capacitors! Let’s dive into the fascinating world of time manipulation in R, specifically <strong>subtracting hours from timestamps</strong>. We’ll explore two approaches: one using base R’s time-bending tricks, and another powered by the <strong>lubridate</strong> package, our time-traveling companion.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="base-r-back-to-the-basics" class="level2">
<h2 class="anchored" data-anchor-id="base-r-back-to-the-basics">Base R: Back to the Basics</h2>
<p>Imagine a timestamp like a ticking clock. Each second is another notch on the gears, and we want to turn those gears backward a few hours. Base R lets us do this by treating time as numbers. Remember, there are 3600 seconds in an hour, so to subtract 2 hours, we simply:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">my_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-30 10:00:00"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time object</span></span>
<span id="cb1-2">new_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours (2 * 3600 seconds)</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_time) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># See the original time</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 10:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_time) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Voila! 2 hours back!</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 08:00:00 EST"</code></pre>
</div>
</div>
<p>This code tells R to:</p>
<ol type="1">
<li>Create a time object <code>my_time</code> representing “January 30, 2024, 10:00 AM”.</li>
<li>Define <code>new_time</code> by subtracting 2 hours from <code>my_time</code>. We multiply 2 by 3600 because, well, you get the point.</li>
<li>Print both times to see the magic unfold.</li>
</ol>
</section>
<section id="lubridate-time-travel-made-easy" class="level2">
<h2 class="anchored" data-anchor-id="lubridate-time-travel-made-easy">Lubridate: Time Travel Made Easy</h2>
<p>But what if you want a fancier ride? This is where <strong>lubridate</strong> comes in! This package adds superpowers to our time-traveling toolkit. Let’s rewrite the above using its <code>hours()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">my_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-30 10:00:00"</span>)</span>
<span id="cb5-4">new_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hours</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subtract 2 hours with the `hours()` function</span></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 10:00:00 EST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2024-01-30 08:00:00 EST"</code></pre>
</div>
</div>
<p>This code does the same thing, but with less math and more clarity. We simply tell R to subtract 2 hours using the <code>hours(2)</code> function, making the code cleaner and more readable.</p>
</section>
</section>
<section id="bonus-round-negative-time-zones-no-problem" class="level1">
<h1>Bonus Round: Negative Time Zones? No Problem!</h1>
<p>Let’s say you’re working with data from different time zones. Fear not! Both base R and lubridate can handle these complexities. Simply specify the time zone when creating your time object, and the calculations will adjust accordingly.</p>
</section>
<section id="time-to-experiment" class="level1">
<h1>Time to Experiment!</h1>
<p>Now that you have the tools, try these challenges:</p>
<ol type="1">
<li>Write a function to subtract any number of hours from a given time.</li>
<li>Calculate the time difference between two events in different time zones.</li>
<li>Explore other lubridate functions for manipulating dates and times.</li>
</ol>
<p>Remember, practice makes perfect (and less buggy code!). So, fire up R, grab your data, and let’s start time-traveling!</p>
<p><strong>Bonus Tip:</strong> For extra nerdy fun, try plotting your time-shifted data to visualize the journey through time.</p>
<p>Happy R-ing and happy time-traveling!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-30/index.html</guid>
  <pubDate>Tue, 30 Jan 2024 05:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Extract Month from Date in R (With Examples)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-01-29/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Greetings fellow R enthusiasts! Today, we’re diving into a fundamental task: extracting the month from a date in R. Whether you’re new to R or a seasoned pro, understanding how to manipulate dates is essential. We’ll explore two popular methods: using base R and the powerful lubridate package. So, let’s roll up our sleeves and get started!</p>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using Base R</h2>
<p>First up, let’s tackle the task with base R. We’ll use the <code>format()</code> function to extract the month from a date.</p>
</section>
<section id="example-1-extracting-month-from-a-vector-of-dates" class="level2">
<h2 class="anchored" data-anchor-id="example-1-extracting-month-from-a-vector-of-dates">Example 1: Extracting Month from a Vector of Dates</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector of dates</span></span>
<span id="cb1-2">dates_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-05-20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-10"</span>))</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month</span></span>
<span id="cb1-5">months <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(dates_vector, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m"</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(months)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "01" "05" "09"</code></pre>
</div>
</div>
<p>In this example, we have a vector of dates. We use the <code>format()</code> function to specify that we want to extract the month (<code>%m</code>), and voila! We get the months corresponding to each date.</p>
<section id="example-2-extracting-month-from-a-column-in-a-data-frame" class="level3">
<h3 class="anchored" data-anchor-id="example-2-extracting-month-from-a-column-in-a-data-frame">Example 2: Extracting Month from a Column in a Data Frame</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-01-15"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-05-20"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-09-10"</span>)))</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month from the 'date' column</span></span>
<span id="cb3-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the data frame with the new 'month' column</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        date month
1 2023-01-15    01
2 2023-05-20    05
3 2023-09-10    09</code></pre>
</div>
</div>
<p>Here, we’re working with a data frame. We use the <code>$</code> operator to access the ‘date’ column and apply the <code>format()</code> function to extract the month. The result is a data frame with an additional ‘month’ column containing the extracted months.</p>
</section>
<section id="example-3-extracting-month-from-a-single-date" class="level3">
<h3 class="anchored" data-anchor-id="example-3-extracting-month-from-a-single-date">Example 3: Extracting Month from a Single Date</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Single date</span></span>
<span id="cb5-2">single_date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-07-04"</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month</span></span>
<span id="cb5-5">month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(single_date, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%m"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(month)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "07"</code></pre>
</div>
</div>
<p>Even if you have just one date, you can still use the <code>format()</code> function to extract the month. Simple and effective!</p>
</section>
</section>
<section id="using-lubridate-package" class="level2">
<h2 class="anchored" data-anchor-id="using-lubridate-package">Using lubridate Package</h2>
<p>Now, let’s switch gears and explore how to achieve the same task using the lubridate package, known for its user-friendly date-time functions.</p>
<section id="example-4-extracting-month-using-lubridates-month-function" class="level3">
<h3 class="anchored" data-anchor-id="example-4-extracting-month-using-lubridates-month-function">Example 4: Extracting Month Using lubridate’s month() Function</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the lubridate package</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample date</span></span>
<span id="cb7-5">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ymd</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023-11-30"</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the month using lubridate's month() function</span></span>
<span id="cb7-8">month <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date)</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb7-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(month)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 11</code></pre>
</div>
</div>
<p>With lubridate, we simplify the process using the <code>month()</code> function directly on the date object. It’s clean, concise, and effortlessly extracts the month.</p>
</section>
</section>
</section>
<section id="encouragement-and-conclusion" class="level1">
<h1>Encouragement and Conclusion</h1>
<p>Now that you’ve seen how to extract the month from a date using both base R and the lubridate package, I encourage you to experiment further! Try different date formats, explore other functions within these methods, and integrate them into your data analysis workflows.</p>
<p>Understanding date manipulation in R opens up a world of possibilities for analyzing temporal data. Whether you’re analyzing sales trends, tracking patient appointments, or exploring climate data, mastering date manipulation is a valuable skill.</p>
<p>Keep coding, keep exploring, and stay curious! Happy extracting!</p>
<p>Until next time, Your fellow R enthusiast</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-01-29/index.html</guid>
  <pubDate>Mon, 29 Jan 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
