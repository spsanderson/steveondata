<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 24 Apr 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>A Practical Guide to Selecting Top N Values by Group in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In data analysis, there often arises a need to extract the top N values within each group of a dataset. Whether you’re dealing with sales data, survey responses, or any other type of grouped data, identifying the top performers or outliers within each group can provide valuable insights. In this tutorial, we’ll explore how to accomplish this task using three popular R packages: dplyr, data.table, and base R. By the end of this guide, you’ll have a solid understanding of various approaches to selecting top N values by group in R.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="using-dplyr">Using dplyr</h2>
<p>dplyr is a powerful package for data manipulation, providing intuitive functions for common data manipulation tasks. To select the top N values by group using dplyr, we’ll use the <code>group_by()</code> and <code>top_n()</code> functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the dplyr package</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example dataset</span></span>
<span id="cb1-5">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top 2 values by group</span></span>
<span id="cb1-11">top_n_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">top_n</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, value)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_n_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
# Groups:   group [2]
  group value
  &lt;chr&gt; &lt;dbl&gt;
1 A        15
2 A        20
3 B        25
4 B        30</code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation</h3>
<ul>
<li>We begin by loading the dplyr package.</li>
<li>We create a sample dataset with two columns: ‘group’ and ‘value’.</li>
<li>Using the <code>%&gt;%</code> (pipe) operator, we first group the data by the ‘group’ column using <code>group_by()</code>.</li>
<li>Then, we use the <code>top_n()</code> function to select the top 2 values within each group based on the ‘value’ column.</li>
<li>Finally, we print the resulting dataset containing the top N values by group.</li>
</ul>
</section>
</section>
<section id="using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="using-data.table">Using data.table</h2>
<p>data.table is another popular package for efficient data manipulation, particularly with large datasets. To achieve the same task using data.table, we’ll use the <code>by</code> argument along with the <code>.SD</code> special symbol.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data.table package</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to data.table</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setDT</span>(data)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top 2 values by group</span></span>
<span id="cb3-8">top_n_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[, .SD[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>value)][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> group]</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_n_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    group value
   &lt;char&gt; &lt;num&gt;
1:      A    20
2:      A    15
3:      B    30
4:      B    25</code></pre>
</div>
</div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation</h3>
<ul>
<li>After loading the data.table package, we convert our data frame to a data.table using <code>setDT()</code>.</li>
<li>We then select the top 2 values within each group by ordering the data in descending order of ‘value’ and selecting the first 2 rows using <code>[1:2]</code>.</li>
<li>The <code>by</code> argument is used to specify grouping by the ‘group’ column.</li>
<li>Finally, we print the resulting dataset containing the top N values by group.</li>
</ul>
</section>
</section>
<section id="using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="using-base-r">Using base R</h2>
<p>While dplyr and data.table are powerful packages for data manipulation, base R also provides functionality to achieve this task using functions like <code>split()</code> and <code>lapply()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example dataset</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select top 2 values by group using base R</span></span>
<span id="cb5-8">top_n_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(data, data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group), <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value), ], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert row names to a column</span></span>
<span id="cb5-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(top_n_values) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb5-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(top_n_values)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  group value
1     A    20
2     A    15
3     B    30
4     B    25</code></pre>
</div>
</div>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation</h3>
<ul>
<li>We start with our sample dataset.</li>
<li>Using <code>split()</code>, we split the dataset into subsets based on the ‘group’ column.</li>
<li>Then, we apply a function using <code>lapply()</code> to each subset, which sorts the values in descending order and selects the top 2 rows using <code>head()</code>.</li>
<li>The resulting subsets are combined into a single data frame using <code>do.call(rbind, ...)</code>.</li>
</ul>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this tutorial, we’ve covered three different methods to select the top N values by group in R using dplyr, data.table, and base R. Each approach has its advantages depending on the complexity of your dataset and your familiarity with the packages. I encourage you to try out these examples with your own data and explore further functionalities offered by these packages for efficient data manipulation. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-24/index.html</guid>
  <pubDate>Wed, 24 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Checking Row Existence Across Data Frames in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-19/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello, fellow R users! Today, we’re going to explore a common scenario you might encounter when working with data frames: checking if a row from one data frame exists in another. This is a handy skill that can help you compare datasets and verify data integrity.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-using-merge-function" class="level2">
<h2 class="anchored" data-anchor-id="example-1-using-merge-function">Example 1: Using <code>merge()</code> Function</h2>
<p>Let’s start with our first example. We have two data frames, <code>df1</code> and <code>df2</code>. We want to check if the rows in <code>df1</code> are also present in <code>df2</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data frames</span></span>
<span id="cb1-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>))</span>
<span id="cb1-3">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>))</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use merge() to find common rows</span></span>
<span id="cb1-6">common_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the result</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(common_rows)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Value
1  2     B
2  3     C</code></pre>
</div>
</div>
</section>
<section id="step-by-step-explanation" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-explanation"><strong>Step-by-Step Explanation:</strong></h2>
<ol type="1">
<li>We create two data frames, <code>df1</code> and <code>df2</code>, each with an ‘ID’ column and a ‘Value’ column.</li>
<li>We use the <code>merge()</code> function to find the common rows between <code>df1</code> and <code>df2</code>.</li>
<li>The result, <code>common_rows</code>, will display rows that exist in both data frames.</li>
</ol>
</section>
<section id="example-2-using-in-operator" class="level2">
<h2 class="anchored" data-anchor-id="example-2-using-in-operator">Example 2: Using <code>%in%</code> Operator</h2>
<p>For our second example, we’ll use the <code>%in%</code> operator to check for the existence of specific values from one data frame in another.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if 'ID' from df1 exists in df2</span></span>
<span id="cb3-2">df1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ExistsInDF2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ID <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> df2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ID</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the updated df1 with the existence check</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Value ExistsInDF2
1  1     A       FALSE
2  2     B        TRUE
3  3     C        TRUE</code></pre>
</div>
</div>
</section>
<section id="step-by-step-explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-explanation-1"><strong>Step-by-Step Explanation:</strong></h2>
<ol type="1">
<li>We add a new column to <code>df1</code> named ‘ExistsInDF2’.</li>
<li>The <code>%in%</code> operator checks each ‘ID’ in <code>df1</code> against the ’ID’s in <code>df2</code>.</li>
<li>The new column in <code>df1</code> will show <code>TRUE</code> if the ‘ID’ exists in <code>df2</code> and <code>FALSE</code> otherwise.</li>
</ol>
</section>
</section>
<section id="encouragement-to-try-it-out" class="level1">
<h1>Encouragement to Try It Out</h1>
<p>Now that you’ve seen how it’s done, why not give it a try with your own data frames? It’s a straightforward process that can yield valuable insights into your data. Remember, the best way to learn is by doing, so grab some data and start experimenting!</p>
<p><strong>Tip:</strong> Always double-check your data frames’ structures to ensure the columns you’re comparing are compatible.</p>
<p>Happy coding, and stay curious about your data!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-19/index.html</guid>
  <pubDate>Fri, 19 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Extracting the Last N’th Row in R Data Frames</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-18/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever wrangled with a data frame and needed just the final row? Fear not, R warriors! Today’s quest unveils three mighty tools to conquer this task: base R, the dplyr package, and the data.table package.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="method-1-using-base-r" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-base-r">Method 1: Using Base R</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb1-2">my_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last row using nrow() and indexing</span></span>
<span id="cb1-8">last_row_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(my_df), ]</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(last_row_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age
3 Charlie  22</code></pre>
</div>
</div>
<p>Explanation: - We use <code>nrow(my_df)</code> to get the total number of rows in the data frame. - Then, we use indexing (<code>[nrow(my_df), ]</code>) to extract the last row.</p>
</section>
<section id="method-2-using-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-dplyr">Method 2: Using dplyr</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last row using tail()</span></span>
<span id="cb3-4">last_row_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(last_row_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age
3 Charlie  22</code></pre>
</div>
</div>
<p>Explanation: - The <code>tail()</code> function from <code>dplyr</code> returns the last <code>n</code> rows of a data frame (default is 6). - We use <code>tail(my_df, 1)</code> to get only the last row.</p>
</section>
<section id="method-3-using-data.table" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-data.table">Method 3: Using data.table</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to data.table</span></span>
<span id="cb5-4">my_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(my_df)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the last row using .N</span></span>
<span id="cb5-7">last_row_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_dt[.N]</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(last_row_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      Name   Age
    &lt;char&gt; &lt;num&gt;
1: Charlie    22</code></pre>
</div>
</div>
<p>Explanation: - We convert the data frame to a data.table using <code>as.data.table(my_df)</code>. - The <code>.N</code> special variable in data.table represents the total number of rows. - We use <code>my_dt[.N]</code> to get the last row.</p>
</section>
</section>
<section id="bonus-tip-getting-the-second-to-last-row" class="level1">
<h1>Bonus Tip: Getting the second to last row!</h1>
<p>If you want to get the second to last row, then this is quite easy to do, and in fact is easy to do for any last <code>n</code> rows. Here’s how you can get the second to last row using each method:</p>
<p>Certainly! Let’s explore how to extract the second-to-last row from a data frame using different methods in R. Here’s how you can do it:</p>
<section id="method-1-using-base-r-1" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-base-r-1">Method 1: Using Base R</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb7-2">my_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb7-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eva"</span>),</span>
<span id="cb7-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)</span>
<span id="cb7-5">)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the second-to-last row using nrow() and indexing</span></span>
<span id="cb7-8">second_to_last_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(my_df) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]</span>
<span id="cb7-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(second_to_last_base)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Age
4 David  28</code></pre>
</div>
</div>
<p>Explanation: - We use <code>nrow(my_df)</code> to get the total number of rows in the data frame. - To extract the second-to-last row, we subtract 1 from the total number of rows.</p>
</section>
<section id="method-2-using-dplyr-1" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-dplyr-1">Method 2: Using dplyr</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the second-to-last row using slice()</span></span>
<span id="cb9-2">second_to_last_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(second_to_last_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Age
1 David  28</code></pre>
</div>
</div>
<p>Explanation: - The <code>slice()</code> function from <code>dplyr</code> allows us to select specific rows. - We use <code>slice(my_df, n() - 1)</code> to get the second-to-last row.</p>
</section>
<section id="method-3-using-data.table-1" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-data.table-1">Method 3: Using data.table</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert data frame to data.table</span></span>
<span id="cb11-2">my_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(my_df)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the second-to-last row using .N</span></span>
<span id="cb11-5">second_to_last_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> my_dt[.N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(second_to_last_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name   Age
   &lt;char&gt; &lt;num&gt;
1:  David    28</code></pre>
</div>
</div>
<p>Explanation: - Similar to the previous method, we convert the data frame to a data.table. - The <code>.N</code> special variable in data.table represents the total number of rows. - We use <code>my_dt[.N - 1]</code> to get the second-to-last row.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Now you know three different ways to extract the last row or last <code>nth</code> row from a data frame in R. Feel free to experiment with your own data frames and explore these methods further! 🚀</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-18/index.html</guid>
  <pubDate>Thu, 18 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Guide to Selecting Rows with NA Values in R Using Base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-17/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Dealing with missing data is a common challenge in data analysis and machine learning projects. In R, missing values are represented by NA. Being able to identify and handle these missing values is crucial for accurate analysis and model building. In this guide, we’ll explore how to select rows with NA values in R using base R functions.</p>
</section>
<section id="understanding-na-values" class="level1">
<h1>Understanding NA Values</h1>
<p>NA stands for “Not Available” and is used in R to represent missing or undefined data. When working with datasets, it’s essential to identify and handle NA values appropriately to avoid biased analysis or incorrect results.</p>
</section>
<section id="creating-a-sample-dataset" class="level1">
<h1>Creating a Sample Dataset</h1>
<p>Let’s start by creating a simple dataset with NA values to demonstrate the selection process. We’ll use the data.frame function to create a dataframe named “sample_data” with three columns: “ID”, “Age”, and “Income”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating sample dataset</span></span>
<span id="cb1-2">sample_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80000</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8">sample_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Age Income
1  1  25  50000
2  2  NA  60000
3  3  30     NA
4  4  35  70000
5  5  40  80000</code></pre>
</div>
</div>
<p>Now, “sample_data” contains five rows and three columns, with some NA values in the “Age” and “Income” columns.</p>
</section>
<section id="selecting-rows-with-na-values" class="level1">
<h1>Selecting Rows with NA Values</h1>
<p>To select rows with NA values in R, we can use logical indexing combined with the is.na function. The is.na function returns a logical vector indicating which elements are NA.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Selecting rows with NA values in any column</span></span>
<span id="cb3-2">rows_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb3-3">  sample_data, </span>
<span id="cb3-4">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb3-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(x))</span>
<span id="cb3-6">  ), ]</span></code></pre></div>
</div>
<p>In this code snippet, we use the apply function to apply the any and is.na functions row-wise. This returns a logical vector indicating whether each row contains any NA values. Finally, we use this logical vector to index the rows containing NA values in any column.</p>
</section>
<section id="visualizing-selected-rows" class="level1">
<h1>Visualizing Selected Rows:</h1>
<p>Let’s print the selected rows to see which rows contain NA values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Printing selected rows</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(rows_with_na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Age Income
2  2  NA  60000
3  3  30     NA</code></pre>
</div>
</div>
<p>As shown in the output, rows 2 and 3 contain NA values either in the “Age” or “Income” column.</p>
</section>
<section id="alternative-method" class="level1">
<h1>Alternative Method</h1>
<p>Another approach to select rows with NA values is by using the complete.cases function. This function returns a logical vector indicating which rows are complete (i.e., have no missing values).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Selecting rows with NA values using complete.cases</span></span>
<span id="cb6-2">rows_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sample_data[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete.cases</span>(sample_data), ]</span>
<span id="cb6-3">rows_with_na</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID Age Income
2  2  NA  60000
3  3  30     NA</code></pre>
</div>
</div>
<p>In this code snippet, we use the complete.cases function to identify rows with missing values and then negate (!) the result to select rows with NA values.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this guide, we’ve demonstrated how to select rows with NA values in R using base R functions. By using logical indexing and the is.na or complete.cases functions, you can efficiently identify rows containing missing data in your datasets. Handling missing values appropriately is crucial for ensuring the integrity and accuracy of your data analysis and modeling efforts. Experiment with different datasets and scenarios to deepen your understanding of handling missing values in R. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-17/index.html</guid>
  <pubDate>Wed, 17 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Selecting Rows with Specific Values: Exploring Options in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-16/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In R, we often need to filter data frames based on whether a specific value appears within any of the columns. Both base R and the dplyr package offer efficient ways to achieve this. Let’s delve into both approaches and see how they work!</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1---use-dplyr" class="level2">
<h2 class="anchored" data-anchor-id="example-1---use-dplyr">Example 1 - Use dplyr</h2>
<p>The dplyr package provides a concise and readable syntax for data manipulation. We can achieve our goal using the <code>filter()</code> function in conjunction with <code>if_any()</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"></span>
<span id="cb1-3">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_value"</span>))</span></code></pre></div>
<p>Let’s break down the code:</p>
<ul>
<li><code>data</code>: This represents your data frame.</li>
<li><code>filter()</code>: This function keeps rows that meet a specified condition.</li>
<li><code>if_any()</code>: This checks if the condition is true for any of the columns.</li>
<li><code>everything()</code>: This indicates we want to consider all columns.</li>
<li><code>.x</code>: This represents each individual column within the <code>everything()</code> selection.</li>
<li><code>== "your_value"</code>: This is the condition to check. Here, we are looking for rows where the value in any column is equal to “your_value”.</li>
</ul>
<p>Example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb2-2"></span>
<span id="cb2-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fruit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">if_any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  fruit color price
1 apple   red   0.5</code></pre>
</div>
</div>
<p>This code will return the row where “apple” appears in the “fruit” column.</p>
</section>
<section id="example-2---base-r-approach" class="level2">
<h2 class="anchored" data-anchor-id="example-2---base-r-approach">Example 2 - Base R Approach</h2>
<p>Base R offers its own set of functions for data manipulation. We can achieve the same row filtering using apply() and logical operations.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify rows with the value</span></span>
<span id="cb4-2">row_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_value"</span>))</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset the data</span></span>
<span id="cb4-5">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[row_indices, ]</span></code></pre></div>
<p>Explanation:</p>
<ul>
<li><code>apply(data, 1, ...)</code>: This applies a function to each row of the data frame. The <code>1</code> indicates row-wise application.</li>
<li><code>function(row) any(row == "your_value")</code>: This anonymous function checks if “your_value” is present in any element of the row using the <code>any()</code> function and returns <code>TRUE</code> or <code>FALSE</code>.</li>
<li><code>row_indices</code>: This stores the logical vector indicating which rows meet the condition.</li>
<li><code>data[row_indices, ]</code>: We subset the data frame using the logical vector, keeping only the rows where the condition is <code>TRUE</code>.</li>
</ul>
<p>Example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fruit =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7">row_indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(row) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>))</span>
<span id="cb5-8">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[row_indices, ]</span>
<span id="cb5-9">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  fruit color price
1 apple   red   0.5</code></pre>
</div>
</div>
<p>This code will also return the row where “apple” appears.</p>
</section>
<section id="example-3---base-r-approach-2" class="level2">
<h2 class="anchored" data-anchor-id="example-3---base-r-approach-2">Example 3 - Base R Approach 2</h2>
<p>Another base R approach involves using the <code>rowSums()</code> function to identify rows with the specified value.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify rows with the value</span></span>
<span id="cb7-2">filtered_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.ind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3">df_filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[filtered_rows, ]</span></code></pre></div>
<p>While dplyr offers a concise approach, base R also provides solutions using loops. Here’s one way to achieve the same result:</p>
<ul>
<li><code>which(rowSums(df == value) &gt; 0, arr.ind = TRUE)</code>: This part finds the row indices where the sum of elements in each row being equal to the value is greater than zero (indicating at least one match).</li>
<li><code>rowSums(df == value)</code>: Calculates the sum across rows, checking if any value in the row matches the target value.</li>
<li><code>&gt; 0</code>: Filters rows where the sum is greater than zero (i.e., at least one match).</li>
<li><code>arr.ind = TRUE</code>: Ensures the output includes both row and column indices (useful for debugging but not required here).</li>
<li><code>df[filtered_rows, ]</code>: Subsets the original data frame (df) based on the identified row indices (filtered_rows), creating the filtered data frame (df_filtered).</li>
</ul>
<p>Example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">filtered_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arr.ind =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-2">df_filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[filtered_rows, ]</span>
<span id="cb8-3">df_filtered</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  fruit color price
1 apple   red   0.5</code></pre>
</div>
</div>
<p>This code will return the row where “apple” appears in any column.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>All methods effectively select rows with specific values in any column. Experiment with them and different approaches on your own data and with different conditions!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-16/index.html</guid>
  <pubDate>Tue, 16 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Estimating Chi-Square Distribution Parameters Using R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-15/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of statistics and data analysis, understanding and accurately estimating the parameters of probability distributions is crucial. One such distribution is the chi-square distribution, often encountered in various statistical analyses. In this blog post, we’ll dive into how we can estimate the degrees of freedom (“df”) and the non-centrality parameter (“ncp”) of a chi-square distribution using R programming language.</p>
</section>
<section id="the-chi-square-distribution" class="level1">
<h1>The Chi-Square Distribution</h1>
<p>The chi-square distribution is a continuous probability distribution that arises in the context of hypothesis testing and confidence interval estimation. It is commonly used in goodness-of-fit tests, tests of independence, and tests of homogeneity.</p>
<p>The distribution has two main parameters: - <strong>Degrees of Freedom (df)</strong>: This parameter determines the shape of the chi-square distribution. It represents the number of independent variables in a statistical test. - <strong>Non-Centrality Parameter (ncp)</strong>: This parameter determines the deviation of the distribution from a null hypothesis. It’s particularly relevant in non-central chi-square distributions.</p>
</section>
<section id="the-goal-estimating-parameters" class="level1">
<h1>The Goal: Estimating Parameters</h1>
<p>Our goal is to create a function within the TidyDensity package that can estimate the df and ncp parameters of a chi-square distribution based on a vector of observed data. Let’s walk through the steps involved in achieving this.</p>
</section>
<section id="working-example" class="level1">
<h1>Working Example</h1>
<section id="setting-the-stage-libraries-and-data" class="level2">
<h2 class="anchored" data-anchor-id="setting-the-stage-libraries-and-data">Setting the Stage: Libraries and Data</h2>
<p>First, we load the necessary libraries: <code>tidyverse</code> for data manipulation and <code>bbmle</code> for maximum likelihood estimation. We then generate a grid of parameters (degrees of freedom and non-centrality parameter) and sample sizes to create a diverse set of chi-square distributed data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load libraries</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bbmle)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data ----</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make parameters and grid</span></span>
<span id="cb1-7">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-8">ncp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-9">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>()</span>
<span id="cb1-10">param_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expand_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> ncp)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(param_grid)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
      n    df   ncp
  &lt;dbl&gt; &lt;int&gt; &lt;int&gt;
1   284     1     1
2   284     1     2
3   284     1     3
4   284     1     4
5   284     1     5
6   284     1     6</code></pre>
</div>
</div>
</section>
<section id="function-exploration-unveiling-the-estimation-process" class="level2">
<h2 class="anchored" data-anchor-id="function-exploration-unveiling-the-estimation-process">Function Exploration: Unveiling the Estimation Process</h2>
<p>The core of our exploration lies in several functions designed to estimate the chi-square parameters:</p>
<p><code>dof</code>/<code>k</code> Functions: These functions focus on estimating the degrees of freedom (df) using different approaches:</p>
<ul>
<li><code>mean_x</code>: Calculates the mean of the data.</li>
<li><code>mean_minus_1</code>: Subtracts 1 from the mean.</li>
<li><code>var_div_2</code>: Divides the variance of the data by 2.</li>
<li><code>length_minus_1</code>: Subtracts 1 from the length of the data.</li>
</ul>
<p><code>ncp</code> Functions: These functions aim to estimate the non-centrality parameter (ncp) using various methods:</p>
<ul>
<li><code>mean_minus_mean_minus_1</code>: A seemingly trivial calculation that serves as a baseline.</li>
<li><code>ie_mean_minus_var_div_2</code>: Subtracts half the variance from the mean, ensuring the result is non-negative.</li>
<li><code>ie_optim</code>: Utilizes optimization techniques to find the ncp that maximizes the likelihood of observing the data.</li>
<li><code>estimate_chisq_params</code>: This is the main function that employs maximum likelihood estimation (MLE) via the bbmle package to estimate both df and ncp simultaneously. It defines a negative log-likelihood function based on the chi-square distribution and uses mle2 to find the parameter values that minimize this function.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions ----</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># functions to estimate the parameters of a chisq distribution</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dof</span></span>
<span id="cb3-4">mean_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x)</span>
<span id="cb3-5">mean_minus_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-6">var_div_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-7">length_minus_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ncp</span></span>
<span id="cb3-9">mean_minus_mean_minus_1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10">ie_mean_minus_var_div_2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>((<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-11">ie_optim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">par =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-12">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fn =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ncp) {</span>
<span id="cb3-13">                               <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dchisq</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb3-14">                             },</span>
<span id="cb3-15">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brent"</span>,</span>
<span id="cb3-16">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lower =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-17">                             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">upper =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>par</span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># both</span></span>
<span id="cb3-19">estimate_chisq_params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data) {</span>
<span id="cb3-20">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Negative log-likelihood function</span></span>
<span id="cb3-21">  negLogLik <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, ncp) {</span>
<span id="cb3-22">    <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dchisq</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">log =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb3-23">  }</span>
<span id="cb3-24">  </span>
<span id="cb3-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial values (adjust based on your data if necessary)</span></span>
<span id="cb3-26">  start_vals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(data)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(data)))</span>
<span id="cb3-27">  </span>
<span id="cb3-28">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MLE using bbmle</span></span>
<span id="cb3-29">  mle_fit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> bbmle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mle2</span>(negLogLik, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> start_vals)</span>
<span id="cb3-30">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return estimated parameters as a named vector</span></span>
<span id="cb3-31">  df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb3-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">est_df =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(mle_fit)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb3-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">est_ncp =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coef</span>(mle_fit)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb3-34">  )</span>
<span id="cb3-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df)</span>
<span id="cb3-36">}</span>
<span id="cb3-37"></span>
<span id="cb3-38">safe_estimates <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> {</span>
<span id="cb3-39">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">possibly</span>(</span>
<span id="cb3-40">    estimate_chisq_params,</span>
<span id="cb3-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">otherwise =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>,</span>
<span id="cb3-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quiet =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb3-43">  )</span>
<span id="cb3-44">}</span></code></pre></div>
</div>
</section>
<section id="simulating-and-evaluating-putting-the-functions-to-the-test" class="level2">
<h2 class="anchored" data-anchor-id="simulating-and-evaluating-putting-the-functions-to-the-test">Simulating and Evaluating: Putting the Functions to the Test</h2>
<p>To assess the performance of our functions, we simulate chi-square data using the parameter grid and apply each function to estimate the parameters. We then compare these estimates to the true values and visualize the results using boxplots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate data ----</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb4-3">dff <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> param_grid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>()), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.fun</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rchisq"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">safe_est_parms =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, safe_estimates),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, mean_minus_1),</span>
<span id="cb4-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, var_div_2),</span>
<span id="cb4-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfc =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, length_minus_1),</span>
<span id="cb4-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpa =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, mean_minus_mean_minus_1),</span>
<span id="cb4-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, ie_mean_minus_var_div_2),</span>
<span id="cb4-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpc =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, ie_optim)</span>
<span id="cb4-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(safe_est_parms, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(.x))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> safe_est_parms) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb4-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfa_resid =</span> dfa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfb_resid =</span> dfb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfc_resid =</span> dfc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dfd_resid =</span> est_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df,</span>
<span id="cb4-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpa_resid =</span> ncpa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp,</span>
<span id="cb4-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpb_resid =</span> ncpb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp,</span>
<span id="cb4-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpc_resid =</span> ncpc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp,</span>
<span id="cb4-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncpd_resid =</span> est_ncp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ncp</span>
<span id="cb4-26">  )</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(dff)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 987
Columns: 19
$ n          &lt;dbl&gt; 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284,…
$ df         &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…
$ ncp        &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1…
$ est_df     &lt;dbl&gt; 1.1770904, 0.9905994, 0.9792179, 0.7781877, 1.5161669, 0.82…
$ est_ncp    &lt;dbl&gt; 0.7231638, 1.9462325, 3.0371756, 4.2347494, 3.7611119, 6.26…
$ dfa        &lt;dbl&gt; 0.9050589, 1.9826153, 3.0579375, 4.0515312, 4.2022289, 6.15…
$ dfb        &lt;dbl&gt; 2.626501, 5.428382, 7.297746, 9.265272, 8.465838, 14.597976…
$ dfc        &lt;dbl&gt; 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283,…
$ ncpa       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…
$ ncpb       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…
$ ncpc       &lt;dbl&gt; 5.382789e-09, 8.170550e-09, 6.017177e-09, 8.618892e-09, 7.7…
$ dfa_resid  &lt;dbl&gt; -0.09494109, 0.98261533, 2.05793748, 3.05153121, 3.20222890…
$ dfb_resid  &lt;dbl&gt; 1.626501, 4.428382, 6.297746, 8.265272, 7.465838, 13.597976…
$ dfc_resid  &lt;dbl&gt; 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 281, 281,…
$ dfd_resid  &lt;dbl&gt; 0.177090434, -0.009400632, -0.020782073, -0.221812344, 0.51…
$ ncpa_resid &lt;dbl&gt; 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, 0, -1, -2, -3, -4, -…
$ ncpb_resid &lt;dbl&gt; -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1, -2, -3, -4, -5…
$ ncpc_resid &lt;dbl&gt; -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1, -2, -3, -4, -5…
$ ncpd_resid &lt;dbl&gt; -0.27683618, -0.05376753, 0.03717560, 0.23474943, -1.238888…</code></pre>
</div>
</div>
</section>
<section id="visual-insights-assessing-estimation-accuracy" class="level2">
<h2 class="anchored" data-anchor-id="visual-insights-assessing-estimation-accuracy">Visual Insights: Assessing Estimation Accuracy</h2>
<p>The boxplots reveal interesting insights:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) -1 ~ df"</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfa_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) -1 ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var(x) / 2 ~ df"</span>)</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfb_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var(x) / 2 ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length(x) - 1 ~ df"</span>)</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfc_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length(x) - 1 ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>est_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ df - Looks Good"</span>)</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dfd_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ df Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-4.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpa <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - (mean(x) - 1) ~ ncp"</span>)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpa_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - (mean(x) - 1) ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-5.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpb <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - var(x)/2 ~ nc"</span>)</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpb_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean(x) - var(x)/2 ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-6.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"optim ~ ncp"</span>)</span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpc_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"optim ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-7.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>est_ncp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ ncp - Looks Good"</span>)</span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">boxplot</span>(dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncpd_resid <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> dff<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>ncp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"negloglik ~ ncp Residuals"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-15/index_files/figure-html/unnamed-chunk-4-8.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p><em><code>df</code></em> Estimation:</p>
<ul>
<li><code>mean_x - 1 and var(x) / 2</code> show potential as df estimators but exhibit bias depending on the true df value.</li>
<li><code>length(x) - 1</code> performs poorly, consistently underestimating df.</li>
<li>The MLE approach from <code>estimate_chisq_params</code> demonstrates the most accurate and unbiased estimates across different df values.</li>
</ul>
<p><em><code>ncp</code></em> Estimation:</p>
<ul>
<li>The simple methods (<code>mean(x) - mean(x) - 1</code> and <code>mean(x) - var(x) / 2</code>) show substantial bias and variability.</li>
<li>The optimization-based method (<code>optim</code>) performs better but still exhibits some bias.</li>
<li>The MLE approach again emerges as the most reliable option, providing accurate and unbiased estimates across various ncp values.</li>
</ul>
</section>
</section>
<section id="conclusion-the-power-of-maximum-likelihood" class="level1">
<h1>Conclusion: The Power of Maximum Likelihood</h1>
<p>Our exploration highlights the effectiveness of MLE in estimating the parameters of a chi-square distribution. The estimate_chisq_params function, utilizing the bbmle package, provides a robust and accurate solution for this task. This function will be a valuable addition to the TidyDensity package, empowering users to delve deeper into the analysis of chi-square distributed data.</p>
<p>Stay tuned for further developments and exciting additions to the TidyDensity package!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <category>distribution</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-15/index.html</guid>
  <pubDate>Mon, 15 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Taking the data out of the glue with regex in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-12/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Regular expressions, or regex, are incredibly powerful tools for pattern matching and extracting specific information from text data. Today, we’ll explore how to harness the might of regex in R with a practical example.</p>
<p>Let’s dive into a scenario where we have data that needs cleaning and extracting numerical values from strings. Our data, stored in a dataframe named <code>df</code>, consists of four columns (<code>x1</code>, <code>x2</code>, <code>x3</code>, <code>x4</code>) with strings containing numerical values along with percentage values enclosed in parentheses. Our goal is to extract these numerical values and compute a total for each row.</p>
</section>
<section id="loading-libraries" class="level1">
<h1>Loading Libraries</h1>
<p>Before we begin, we need to load the necessary libraries. We’ll be using the <code>tidyverse</code> package for data manipulation, along with <code>glue</code> and <code>unglue</code> for string manipulation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Library Loading</span></span>
<span id="cb1-2">pacman<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">p_load</span>(tidyverse, glue, unglue)</span></code></pre></div>
</div>
</section>
<section id="exploring-the-data" class="level1">
<h1>Exploring the Data</h1>
<p>Let’s take a sneak peek at our data using the <code>head()</code> function to understand its structure.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unit A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{11:20} ({1:10}%)"</span>),  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{251} ({13}%)"</span>)),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{21:30} ({11:20}%)"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{252} ({14}%)"</span>)),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x4 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{31:40} ({21:30}%)"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{253} ({15}%)"</span>))</span>
<span id="cb2-6">)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 4
  x1     x2      x3       x4      
  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;   
1 Unit A 11 (1%) 21 (11%) 31 (21%)
2 Unit A 12 (2%) 22 (12%) 32 (22%)
3 Unit A 13 (3%) 23 (13%) 33 (23%)</code></pre>
</div>
</div>
<p>This command displays the first three rows of our dataframe <code>df</code>, giving us an idea of how our data looks like.</p>
</section>
<section id="creating-a-regex-function" class="level1">
<h1>Creating a Regex Function</h1>
<p>Now, we’ll define a custom function named <code>reg_val_fns</code> to extract numerical values from strings using regular expressions. This function takes two parameters: <code>.col_data</code> (column data) and <code>.pattern</code> (regex pattern). If no pattern is provided, it defaults to extracting any sequence of digits followed by non-word characters or the end of the string.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make regex function</span></span>
<span id="cb4-2">reg_val_fns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.col_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pattern =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>){</span>
<span id="cb4-3">  ptrn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .pattern</span>
<span id="cb4-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(ptrn)){</span>
<span id="cb4-5">    ptrn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d+(?=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W|$)"</span></span>
<span id="cb4-6">  }</span>
<span id="cb4-7">  </span>
<span id="cb4-8">  reged_val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> .col_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_extract</span>(ptrn) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(reged_val)</span>
<span id="cb4-13">}</span></code></pre></div>
</div>
</section>
<section id="applying-the-regex-function" class="level1">
<h1>Applying the Regex Function</h1>
<p>With our regex function defined, we apply it across desired columns using the <code>mutate(across())</code> function from the <code>dplyr</code> package. This extracts numerical values from strings in each column, converting them into numeric format. Additionally, we compute the total value for each row using <code>rowSums()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the function across the desired columns</span></span>
<span id="cb5-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1, reg_val_fns)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 5
   x1        x2    x3    x4 total_val
   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;
 1 Unit A    11    21    31        63
 2 Unit A    12    22    32        66
 3 Unit A    13    23    33        69
 4 Unit A    14    24    34        72
 5 Unit A    15    25    35        75
 6 Unit A    16    26    36        78
 7 Unit A    17    27    37        81
 8 Unit A    18    28    38        84
 9 Unit A    19    29    39        87
10 Unit A    20    30    40        90
11 Unit A   251   252   253       756</code></pre>
</div>
</div>
</section>
<section id="alternative-approach-using-unglue" class="level1">
<h1>Alternative Approach: Using unglue</h1>
<p>An alternative method to extract values from strings is using the <code>unglue</code> package. Here, we apply the <code>unglue_data()</code> function across columns (excluding <code>x1</code>) to extract values and percentages separately, then unnest the resulting dataframe and compute the total value for each row.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use unglue</span></span>
<span id="cb7-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x1, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unglue_data</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{val} ({pct}%)"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"val"</span>), \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">total_val =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 8
   x1     x2_val x2_pct x3_val x3_pct x4_val x4_pct total_val
   &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt;
 1 Unit A     11 1          21 11         31 21            63
 2 Unit A     12 2          22 12         32 22            66
 3 Unit A     13 3          23 13         33 23            69
 4 Unit A     14 4          24 14         34 24            72
 5 Unit A     15 5          25 15         35 25            75
 6 Unit A     16 6          26 16         36 26            78
 7 Unit A     17 7          27 17         37 27            81
 8 Unit A     18 8          28 18         38 28            84
 9 Unit A     19 9          29 19         39 29            87
10 Unit A     20 10         30 20         40 30            90
11 Unit A    251 13        252 14        253 15           756</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this tutorial, we’ve explored how to leverage the power of regular expressions in R to extract numerical values from strings within a dataframe. By defining custom regex functions and using packages like <code>dplyr</code> and <code>unglue</code>, we can efficiently clean and manipulate text data for further analysis.</p>
<p>I encourage you to try out these techniques on your own datasets and explore the endless possibilities of regex in R. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <category>glue</category>
  <category>unglue</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-12/index.html</guid>
  <pubDate>Fri, 12 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Rows: Selecting by Index in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-11/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Let’s jump into data manipulation with R! Selecting specific rows from our datasets is an important skill. Today, we’ll focus on subsetting rows by index, using the trusty square brackets (<code>[]</code>).</p>
<p>First, we’ll load a dataset containing car characteristics:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">mtcars.data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars</span></code></pre></div>
</div>
<p>This code loads the <code>mtcars</code> dataset (containing car data) into a new variable, <code>mtcars.data</code>. Now, we’ll explore how to target specific rows.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-selecting-a-single-row-by-index" class="level2">
<h2 class="anchored" data-anchor-id="example-1-selecting-a-single-row-by-index">Example 1: Selecting a Single Row by Index</h2>
<p>Imagine you want to analyze the fuel efficiency (miles per gallon) of a particular car. Here’s how to grab a single row by its index (row number):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the 5th row (remember indexing starts from 1!)</span></span>
<span id="cb2-2">specific.car <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,]</span>
<span id="cb2-3">specific.car</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                   mpg cyl disp  hp drat   wt  qsec vs am gear carb
Hornet Sportabout 18.7   8  360 175 3.15 3.44 17.02  0  0    3    2</code></pre>
</div>
</div>
<section id="explanation" class="level3">
<h3 class="anchored" data-anchor-id="explanation">Explanation:</h3>
<ul>
<li><code>mtcars.data</code>: This is our data frame, containing all the car information.</li>
<li><code>[]</code>: These are the square brackets, used for subsetting.</li>
<li><code>5</code>: This is the index of the row we want. Since indexing starts from 1, the 5th row will be selected.</li>
<li><code>,</code>: The comma tells R to select all columns (everything) from that row.</li>
</ul>
<p><strong>Try it yourself!</strong> Select the 10th row and see what car it represents.</p>
</section>
</section>
<section id="example-2-selecting-multiple-rows-by-index" class="level2">
<h2 class="anchored" data-anchor-id="example-2-selecting-multiple-rows-by-index">Example 2: Selecting Multiple Rows by Index</h2>
<p>Let’s say you’re interested in comparing fuel efficiency (miles per gallon) of a few specific cars. We can use a vector of indices to grab multiple rows at once:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the 3rd, 7th, and 12th rows</span></span>
<span id="cb4-2">few.cars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars.data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>),]</span>
<span id="cb4-3">few.cars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            mpg cyl  disp  hp drat   wt  qsec vs am gear carb
Datsun 710 22.8   4 108.0  93 3.85 2.32 18.61  1  1    4    1
Duster 360 14.3   8 360.0 245 3.21 3.57 15.84  0  0    3    4
Merc 450SE 16.4   8 275.8 180 3.07 4.07 17.40  0  0    3    3</code></pre>
</div>
</div>
<section id="explanation-1" class="level3">
<h3 class="anchored" data-anchor-id="explanation-1">Explanation:</h3>
<ul>
<li>We use <code>c()</code> to create a vector containing the desired row indices: 3, 7, and 12.</li>
<li>Everything else remains the same as the previous example.</li>
</ul>
<p><strong>Challenge yourself!</strong> Create a vector to select the last 5 rows and analyze their horsepower.</p>
</section>
</section>
<section id="example-3-selecting-rows-using-a-range-of-indices" class="level2">
<h2 class="anchored" data-anchor-id="example-3-selecting-rows-using-a-range-of-indices">Example 3: Selecting Rows Using a Range of Indices</h2>
<p>Sometimes, you want to analyze a group of consecutive cars. Here’s how to select a range using the colon (<code>:</code>) operator:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select rows from 8 to 15 (inclusive)</span></span>
<span id="cb6-2">car.slice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,]</span>
<span id="cb6-3">car.slice</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    mpg cyl  disp  hp drat   wt  qsec vs am gear carb
Merc 240D          24.4   4 146.7  62 3.69 3.19 20.00  1  0    4    2
Merc 230           22.8   4 140.8  95 3.92 3.15 22.90  1  0    4    2
Merc 280           19.2   6 167.6 123 3.92 3.44 18.30  1  0    4    4
Merc 280C          17.8   6 167.6 123 3.92 3.44 18.90  1  0    4    4
Merc 450SE         16.4   8 275.8 180 3.07 4.07 17.40  0  0    3    3
Merc 450SL         17.3   8 275.8 180 3.07 3.73 17.60  0  0    3    3
Merc 450SLC        15.2   8 275.8 180 3.07 3.78 18.00  0  0    3    3
Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.25 17.98  0  0    3    4</code></pre>
</div>
</div>
<section id="explanation-2" class="level3">
<h3 class="anchored" data-anchor-id="explanation-2">Explanation:</h3>
<ul>
<li><code>8:15</code>: This specifies the range of rows we want. Here, we select from row 8 (inclusive) to row 15 (inclusive).</li>
</ul>
<p><strong>Now it’s your turn!</strong> Select rows 1 to 10 and explore the distribution of the number of cylinders.</p>
<p>Remember, practice is key! Experiment with different indices and ranges to become comfortable with subsetting rows in R. As you work with more datasets, you’ll master these techniques and become a data wrangling pro.</p>
<p>Happy coding!</p>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-11/index.html</guid>
  <pubDate>Thu, 11 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Guide to Removing Multiple Rows in R Using Base R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-10/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As data analysts and scientists, we often find ourselves working with large datasets where data cleaning becomes a crucial step in our analysis pipeline. One common task is removing unwanted rows from our data. In this guide, we’ll explore how to efficiently remove multiple rows in R using the base R package.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="understanding-the-subset-function" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-subset-function">Understanding the <code>subset()</code> Function</h2>
<p>One handy function for removing rows based on certain conditions is <code>subset()</code>. This function allows us to filter rows based on logical conditions. Here’s how it works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example DataFrame</span></span>
<span id="cb1-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frank"</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
2  2     Bob    82
3  3 Charlie    90
4  4   David    68
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows where score is less than 80</span></span>
<span id="cb3-2">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(data, score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb3-3">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
2  2     Bob    82
3  3 Charlie    90
5  5     Eve    95</code></pre>
</div>
</div>
<p>In this example, we have a DataFrame <code>data</code> with columns for <code>id</code>, <code>name</code>, and <code>score</code>. We use the <code>subset()</code> function to filter rows where the <code>score</code> column is greater than or equal to 80, effectively removing rows where the score is less than 80.</p>
</section>
<section id="using-logical-indexing" class="level2">
<h2 class="anchored" data-anchor-id="using-logical-indexing">Using Logical Indexing</h2>
<p>Another approach to remove multiple rows is by using logical indexing. We create a logical vector indicating which rows to keep or remove based on certain conditions. Here’s how it’s done:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example DataFrame</span></span>
<span id="cb5-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frank"</span>),</span>
<span id="cb5-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb5-6">)</span>
<span id="cb5-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
2  2     Bob    82
3  3 Charlie    90
4  4   David    68
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a logical vector</span></span>
<span id="cb7-2">keep_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span></span>
<span id="cb7-3">keep_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE  TRUE  TRUE FALSE  TRUE FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset the DataFrame based on the logical vector</span></span>
<span id="cb9-2">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[keep_rows, ]</span>
<span id="cb9-3">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
2  2     Bob    82
3  3 Charlie    90
5  5     Eve    95</code></pre>
</div>
</div>
<p>In this example, we create a logical vector <code>keep_rows</code> indicating which rows have a score greater than or equal to 80. We then subset the DataFrame <code>data</code> using this logical vector to keep only the rows that meet our condition.</p>
</section>
<section id="removing-rows-by-index" class="level2">
<h2 class="anchored" data-anchor-id="removing-rows-by-index">Removing Rows by Index</h2>
<p>Sometimes, we may want to remove rows by their index position rather than based on a condition. This can be achieved using negative indexing. Here’s how it’s done:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example DataFrame</span></span>
<span id="cb11-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frank"</span>),</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">68</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>)</span>
<span id="cb11-6">)</span>
<span id="cb11-7">data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
2  2     Bob    82
3  3 Charlie    90
4  4   David    68
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows by index</span></span>
<span id="cb13-2">filtered_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), ]</span>
<span id="cb13-3">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  id    name score
1  1   Alice    75
3  3 Charlie    90
5  5     Eve    95
6  6   Frank    60</code></pre>
</div>
</div>
<p>In this example, we use negative indexing to remove the second and fourth rows from the DataFrame <code>data</code>, effectively eliminating rows with indices 2 and 4.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this guide, we’ve explored multiple methods for removing multiple rows in R using base R functions. Whether you prefer using the <code>subset()</code> function, logical indexing, or negative indexing, it’s essential to choose the method that best fits your specific use case.</p>
<p>I encourage you to try these examples with your own datasets and experiment with different conditions and approaches. Data manipulation is a fundamental skill in R programming, and mastering these techniques will empower you to efficiently clean and preprocess your data for further analysis.</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-10/index.html</guid>
  <pubDate>Wed, 10 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Remove Rows with Some or All NAs in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>Handling missing values is a crucial aspect of data preprocessing in R. Often, datasets contain missing values, which can adversely affect the analysis or modeling process. One common task is to remove rows containing missing values entirely. In this tutorial, we’ll explore different methods to accomplish this task in R, catering to scenarios where we want to remove rows with either some or all missing values.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1---using-complete.cases-function" class="level2">
<h2 class="anchored" data-anchor-id="example-1---using-complete.cases-function">Example 1 - Using complete.cases() Function:</h2>
<p>The <code>complete.cases()</code> function is a handy tool in R for removing rows with any missing values. It returns a logical vector indicating which rows in a data frame are complete (i.e., have no missing values).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb1-5">)</span>
<span id="cb1-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2  2  2
3 NA  3
4  4 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any missing values</span></span>
<span id="cb3-2">complete_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complete.cases</span>(df), ]</span>
<span id="cb3-3">complete_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y
2 2 2</code></pre>
</div>
</div>
</section>
<section id="explanation" class="level2">
<h2 class="anchored" data-anchor-id="explanation">Explanation:</h2>
<ul>
<li>We create a sample data frame <code>df</code> with some missing values.</li>
<li>The <code>complete.cases(df)</code> function returns a logical vector indicating complete cases (rows with no missing values).</li>
<li>We subset the data frame <code>df</code> using this logical vector to retain only the complete rows.</li>
</ul>
</section>
<section id="example-2---using-na.omit-function" class="level2">
<h2 class="anchored" data-anchor-id="example-2---using-na.omit-function">Example 2 - Using na.omit() Function:</h2>
<p>Similar to <code>complete.cases()</code>, the <code>na.omit()</code> function also removes rows with any missing values from a data frame. However, it directly returns the data frame without the incomplete rows.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb5-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb5-5">)</span>
<span id="cb5-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2  2  2
3 NA  3
4  4 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with any missing values</span></span>
<span id="cb7-2">complete_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">na.omit</span>(df)</span>
<span id="cb7-3">complete_df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x y
2 2 2</code></pre>
</div>
</div>
<p>##Explanation:</p>
<ul>
<li>We define a sample data frame <code>df</code> with missing values.</li>
<li>The <code>na.omit(df)</code> function directly removes rows with any missing values and returns the cleaned data frame.</li>
</ul>
</section>
<section id="example-3---removing-rows-with-all-nas" class="level2">
<h2 class="anchored" data-anchor-id="example-3---removing-rows-with-all-nas">Example 3 - Removing Rows with All NAs:</h2>
<p>In some cases, we may want to remove rows where all values are missing. We can achieve this by using the <code>complete.cases()</code> function along with the <code>rowSums()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data frame</span></span>
<span id="cb9-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb9-5">)</span>
<span id="cb9-6">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1  1 NA
2 NA NA
3 NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove rows with all missing values</span></span>
<span id="cb11-2">non_na_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowSums</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df), ]</span>
<span id="cb11-3">non_na_rows</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x  y
1 1 NA</code></pre>
</div>
</div>
</section>
<section id="explanation-1" class="level2">
<h2 class="anchored" data-anchor-id="explanation-1">Explanation:</h2>
<ul>
<li>We create a data frame <code>df</code> with all missing values.</li>
<li><code>is.na(df)</code> generates a logical matrix indicating NA values.</li>
<li><code>rowSums(is.na(df))</code> calculates the total number of NA values in each row.</li>
<li>We compare this sum to the total number of columns <code>ncol(df)</code> to identify rows with all missing values.</li>
<li>Finally, we subset the data frame to retain rows with at least one non-missing value.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Handling missing data is an essential skill in data analysis, and removing rows with missing values is a common preprocessing step. In this tutorial, we discussed various methods to achieve this task in R, catering to scenarios where we want to remove rows with some or all missing values. I encourage you to try out these methods on your own datasets to gain a deeper understanding of data manipulation in R.</p>
<p>By mastering these techniques, you’ll be better equipped to preprocess your data effectively and pave the way for more robust analyses and models. Happy coding!</p>
<p><strong>Note:</strong> Remember to always carefully consider the implications of removing data, as it may affect the integrity and representativeness of your dataset.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-09/index.html</guid>
  <pubDate>Tue, 09 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Frame Merging in R (With Examples)</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Merging multiple data frames is a pivotal skill in data manipulation. Whether you’re handling small-scale datasets or large-scale ones, mastering the art of merging can significantly enhance your efficiency. In this tutorial, we’ll delve into various methods of merging data frames in R, using straightforward examples to demystify the process.</p>
</section>
<section id="understanding-the-data" class="level1">
<h1>Understanding the Data</h1>
<p>Before we dive into merging data frames, let’s familiarize ourselves with the data at hand. We have a list named <code>random_list</code>, which comprises three samples (<code>sample1</code>, <code>sample2</code>, and <code>sample3</code>). Each sample consists of 50 random numbers generated from a normal distribution using the <code>rnorm()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">random_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), </span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb1-5">  )</span></code></pre></div>
</div>
<section id="method-1-using-cbind-and-rbind" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-cbind-and-rbind">Method 1: Using <code>cbind()</code> and <code>rbind()</code></h2>
<p>One approach to merge data frames is by combining them column-wise using <code>cbind()</code> or row-wise using <code>rbind()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating data frames from the list</span></span>
<span id="cb2-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> random_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample1)</span>
<span id="cb2-3">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> random_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample2)</span>
<span id="cb2-4">df3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> random_list<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample3)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames column-wise</span></span>
<span id="cb2-7">cbined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(df1, df2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Value, df3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Value)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(cbined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID      Value  df2$Value  df3$Value
1  1 -0.8828435 -1.5116620  1.4729716
2  2  0.7371127  0.1140000  0.6455959
3  3  0.7611256  0.9740632 -0.2355084
4  4  2.0613462 -1.0748615 -0.4654242
5  5  0.1966095 -0.2415080  0.1059656
6  6  0.3217213 -1.3252347  0.9432906</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames row-wise</span></span>
<span id="cb4-2">rbined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df1, df2, df3)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(rbined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  ID      Value
1  1 -0.8828435
2  2  0.7371127
3  3  0.7611256
4  4  2.0613462
5  5  0.1966095
6  6  0.3217213</code></pre>
</div>
</div>
<p>In the first example, <code>cbind()</code> combines <code>df1</code>, <code>df2</code>, and <code>df3</code> column-wise, creating a new data frame <code>combined_df</code>. In the second example, <code>rbind()</code> stacks <code>df1</code>, <code>df2</code>, and <code>df3</code> row-wise, appending the rows to create <code>combined_df</code>.</p>
</section>
<section id="method-2-using-purrrmap-and-data.frame" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-purrrmap-and-data.frame">Method 2: Using <code>purrr::map()</code> and <code>data.frame()</code></h2>
<p>With the <code>purrr</code> package, you can efficiently merge data frames within a list using <code>map()</code> and <code>data.frame()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames within the list</span></span>
<span id="cb6-4">merged_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(random_list, data.frame)</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combining data frames row-wise</span></span>
<span id="cb6-7">combined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(rbind, merged_list)</span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(combined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             .x..i..
sample1.1 -0.8828435
sample1.2  0.7371127
sample1.3  0.7611256
sample1.4  2.0613462
sample1.5  0.1966095
sample1.6  0.3217213</code></pre>
</div>
</div>
<p>Here, <code>map()</code> iterates over each element of <code>random_list</code> and converts them into data frames using <code>data.frame()</code>. Then, <code>do.call(rbind, merged_list)</code> combines the data frames row-wise, creating <code>combined_df</code>.</p>
</section>
<section id="method-3-using-purrrmap_df" class="level2">
<h2 class="anchored" data-anchor-id="method-3-using-purrrmap_df">Method 3: Using <code>purrr::map_df()</code></h2>
<p>Another <code>purrr</code> function, <code>map_df()</code>, directly merges data frames within a list, producing a single combined data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames within the list</span></span>
<span id="cb8-2">combined_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_df</span>(random_list, cbind)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(combined_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 3
  sample1[,1] sample2[,1] sample3[,1]
        &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;
1      -0.883      -1.51        1.47 
2       0.737       0.114       0.646
3       0.761       0.974      -0.236
4       2.06       -1.07       -0.465
5       0.197      -0.242       0.106
6       0.322      -1.33        0.943</code></pre>
</div>
</div>
<p>By employing <code>map_df()</code> with <code>cbind</code>, we merge data frames within <code>random_list</code>, resulting in <code>combined_df</code>, which is a single merged data frame.</p>
</section>
</section>
<section id="encouragement-to-try-on-your-own" class="level1">
<h1>Encouragement to Try on Your Own</h1>
<p>Now that you’ve explored different methods of merging data frames in R, I encourage you to experiment with your datasets. Practice merging data frames using various columns and explore how different merge methods influence the resulting data frame. The more hands-on experience you gain, the more proficient you’ll become in data manipulation with R.</p>
<p>In conclusion, merging multiple data frames in R is a foundational skill for any data analyst or scientist. By understanding the principles behind various merge methods and experimenting with real datasets, you’ll enhance your data manipulation capabilities and streamline your workflow.</p>
<p>Happy coding!</p>
</section>
<section id="bonus-section" class="level1">
<h1>Bonus Section</h1>
<p>One more method of this for you and I think I like this one the best. It’s very simple and adds the name of the list item as a value in a column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">stacked_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> utils<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stack</span>(random_list)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(stacked_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      values     ind
1 -0.8828435 sample1
2  0.7371127 sample1
3  0.7611256 sample1
4  2.0613462 sample1
5  0.1966095 sample1
6  0.3217213 sample1</code></pre>
</div>
</div>
<p>Here is yet another method to merge data frames in R. This method is simple and effective, providing a straightforward way to combine data frames within a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merging data frames within the list</span></span>
<span id="cb12-2">mapped_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(random_list, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list_rbind</span>()</span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mapped_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           x
1 -0.8828435
2  0.7371127
3  0.7611256
4  2.0613462
5  0.1966095
6  0.3217213</code></pre>
</div>
</div>
<p>This next method comes courtesy of a reader who suggested using the <code>list2DF</code> function from base R. This method is concise and efficient, making it a valuable addition to your data manipulation toolkit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list2DF</span>(random_list) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sample1    sample2    sample3
1 -0.8828435 -1.5116620  1.4729716
2  0.7371127  0.1140000  0.6455959
3  0.7611256  0.9740632 -0.2355084
4  2.0613462 -1.0748615 -0.4654242
5  0.1966095 -0.2415080  0.1059656
6  0.3217213 -1.3252347  0.9432906</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-08/index.html</guid>
  <pubDate>Mon, 08 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Practical Guide to Merging Data Frames Based on Multiple Columns in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As a data scientist or analyst, you often encounter situations where you need to combine data from multiple sources. One common task is merging data frames based on multiple columns. In this guide, we’ll walk through several step-by-step examples of how to accomplish this efficiently using R.</p>
</section>
<section id="understanding-the-problem" class="level1">
<h1>Understanding the Problem</h1>
<p>Let’s start with a simple scenario. You have two data frames, and you want to merge them based on two columns: <code>ID</code> and <code>Year</code>. The goal is to combine the data where the <code>ID</code> and <code>Year</code> values match in both data frames.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-data" class="level2">
<h2 class="anchored" data-anchor-id="example-data">Example Data</h2>
<p>For demonstration purposes, let’s create two sample data frames:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample Data Frame 1</span></span>
<span id="cb1-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-3">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>),</span>
<span id="cb1-4">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample Data Frame 2</span></span>
<span id="cb1-7">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb1-8">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>),</span>
<span id="cb1-9">                  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>))</span></code></pre></div>
</div>
</section>
<section id="example-1-inner-join" class="level2">
<h2 class="anchored" data-anchor-id="example-1-inner-join">Example 1: Inner Join</h2>
<p>An inner join combines rows from both data frames where there is a match based on the specified columns (<code>ID</code> and <code>Year</code> in this case). Rows with unmatched values are excluded.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using inner join</span></span>
<span id="cb2-2">merged_inner <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>))</span></code></pre></div>
</div>
</section>
<section id="example-2-left-join" class="level2">
<h2 class="anchored" data-anchor-id="example-2-left-join">Example 2: Left Join</h2>
<p>A left join retains all rows from the left data frame (<code>df1</code>), and includes matching rows from the right data frame (<code>df2</code>). If there is no match, NA values are filled in for the columns from <code>df2</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using left join</span></span>
<span id="cb3-2">merged_left <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
<section id="example-3-right-join" class="level2">
<h2 class="anchored" data-anchor-id="example-3-right-join">Example 3: Right Join</h2>
<p>A right join retains all rows from the right data frame (<code>df2</code>), and includes matching rows from the left data frame (<code>df1</code>). If there is no match, NA values are filled in for the columns from <code>df1</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using right join</span></span>
<span id="cb4-2">merged_right <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
<section id="example-4-full-join" class="level2">
<h2 class="anchored" data-anchor-id="example-4-full-join">Example 4: Full Join</h2>
<p>A full join retains all rows from both data frames, filling in NA values for columns where there is no match.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge based on ID and Year using full join</span></span>
<span id="cb5-2">merged_full <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">merge</span>(df1, df2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ID"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Merging data frames based on multiple columns is a common operation in data analysis. By using functions like <code>merge()</code> in R, you can efficiently combine data from different sources while retaining flexibility in how you handle unmatched values.</p>
<p>I encourage you to try these examples with your own data sets and explore the various options available for merging data frames. Understanding how to effectively merge data is an essential skill for any data professional, and mastering it will greatly enhance your ability to derive insights from your data. Happy merging!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-05/index.html</guid>
  <pubDate>Fri, 05 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Unveiling Car Specs with Multidimensional Scaling in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-04/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Visualizing similarities between data points can be tricky, especially when dealing with many features. This is where multidimensional scaling (MDS) comes in handy. It allows us to explore these relationships in a lower-dimensional space, typically 2D or 3D for easier interpretation. In R, the <code>cmdscale()</code> function from base R and is a great tool for performing classical MDS.</p>
</section>
<section id="cmdscale" class="level1">
<h1>cmdscale()</h1>
<p>Here’s a breakdown of its arguments:</p>
<ul>
<li><code>distance_matrix</code>: This is the key argument. It represents a matrix containing the pairwise distances between your data points. You can calculate this using the <code>dist()</code> function.</li>
<li><code>eig</code>: A logical value indicating whether you want the function to return the eigenvalues (default is <code>FALSE</code>). Eigenvalues help assess the quality of the dimensionality reduction.</li>
<li><code>k</code>: This specifies the number of dimensions for the resulting low-dimensional space (default is 2). You can choose higher values for more complex data, but visualization becomes trickier.</li>
<li><code>...</code>: Additional arguments can be used for fine-tuning the MDS process, but these are less common for basic applications.</li>
</ul>
</section>
<section id="car-specs-with-mds-a-step-by-step-example" class="level1">
<h1>Car Specs with MDS: A Step-by-Step Example</h1>
<p>Let’s use the built-in <code>mtcars</code> dataset in R to demonstrate the power of MDS. This dataset contains information about various car models, including aspects like horsepower, mileage, and weight. While these features provide valuable insights, visualizing all of them simultaneously can be challenging. MDS will help us explore the relationships between these car specifications in a 2D space.</p>
<p>Here’s the code with explanations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select relevant numerical features (exclude car names)</span></span>
<span id="cb1-2">car_features <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)]</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate pairwise distances between car features</span></span>
<span id="cb1-5">distance_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(car_features)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(distance_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  0.6153251 54.8426385 98.1117059</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform MDS to get a 2D representation</span></span>
<span id="cb3-2">mds_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cmdscale</span>(distance_matrix, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">k =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mds_results, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    [,1]      [,2]
Mazda RX4      -79.62307  2.157120
Mazda RX4 Wag  -79.62522  2.172370
Datsun 710    -133.87165 -5.033323</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a base R plot</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(mds_results[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], mds_results[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb5-3">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimension 1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimension 2"</span>,</span>
<span id="cb5-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MDS of Car Specs (mtcars)"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add text labels for car names (optional)</span></span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span>(mds_results, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(mtcars), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.62</span>,</span>
<span id="cb5-8">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pos =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-04/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<ol type="1">
<li>We load the <code>mtcars</code> dataset using <code>data(mtcars)</code>.</li>
<li>We select relevant numerical features from the dataset (excluding car names) and store them in <code>car_features</code>.</li>
<li>The <code>dist()</code> function calculates the pairwise distances between data points based on the chosen features and stores them in the <code>distance_matrix</code>.</li>
<li>We run <code>cmdscale()</code> on the distance matrix, specifying two dimensions (<code>k = 2</code>) for the output. The results are stored in <code>mds_results</code>.</li>
<li>Finally, we use the base R <code>plot()</code> function to create a scatter plot. We set axis labels and a main title for the plot.</li>
</ol>
<p><em>Optional Step:</em></p>
<ul>
<li>We can add text labels for each car model (using car names from <code>mtcars$mpg</code>) on the plot using the <code>text()</code> function. We set the <code>pos</code> argument to 1 to position the text labels above the data points and we set the <code>cex</code> argument to <code>0.62</code> so the size of the text decreases.</li>
</ul>
<p>This plot can reveal interesting patterns. Cars closer together might share similar characteristics in terms of horsepower, weight, and other specifications. You might also observe some separation based on fuel efficiency reflected by the optional text labels.</p>
</section>
<section id="experiment-and-discover" class="level1">
<h1>Experiment and Discover!</h1>
<p>MDS is a powerful tool for exploring data similarity in R. Now that you’ve seen the basics of <code>cmdscale()</code> and base R plotting functions, why not try it on your dataset? Remember to calculate the distance matrix appropriately based on the features you’re interested in. Play around with the number of dimensions (<code>k</code>) to see how it affects the visualization. By experimenting with MDS, you might uncover hidden relationships within your car data or any other dataset you choose to explore!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-04/index.html</guid>
  <pubDate>Thu, 04 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Scaling Your Data in R: Understanding the Range</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today, we’re diving into a fundamental data pre-processing technique: scaling values. This might sound simple, but it can significantly impact how your data behaves in analyses.</p>
</section>
<section id="why-scale" class="level1">
<h1>Why Scale?</h1>
<p>Imagine you have data on customer ages (in years) and purchase amounts (in dollars). The age range might be 18-80, while purchase amounts could vary from $10 to $1000. If you use these values directly in a model, the analysis might be biased towards the purchase amount due to its larger scale. Scaling brings both features (age and purchase amount) to a common ground, ensuring neither overpowers the other.</p>
</section>
<section id="the-scale-function" class="level1">
<h1>The <code>scale()</code> Function</h1>
<p>R offers a handy function called <code>scale()</code> to achieve this. Here’s the basic syntax:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<ul>
<li><code>data</code>: This is the vector or data frame containing the values you want to scale. A numeric matrix(like object)</li>
<li><code>center</code>: Either a logical value or numeric-alike vector of length equal to the number of columns of x, where ‘numeric-alike’ means that as.numeric(.) will be applied successfully if is.numeric(.) is not true.</li>
<li><code>scale</code>: Either a logical value or numeric-alike vector of length equal to the number of columns of x.</li>
<li><code>scaled_data</code>: This stores the new data frame with scaled values (typically one standard deviation from the mean).</li>
</ul>
</section>
<section id="example-in-action" class="level1">
<h1>Example in Action!</h1>
<p>Let’s see <code>scale()</code> in action. We’ll generate some sample data for height (in cm) and weight (in kg) of individuals:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb2-2">height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-3">weight <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb2-4">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(height, weight)</span></code></pre></div>
</div>
<p>This creates a data frame (<code>data</code>) with 100 rows, where <code>height</code> has values around 170 cm with a standard deviation of 10 cm, and <code>weight</code> is centered around 70 kg with a standard deviation of 15 kg.</p>
</section>
<section id="visualizing-before-and-after" class="level1">
<h1>Visualizing Before and After</h1>
<p>Now, let’s visualize the distribution of both features before and after scaling. We’ll use the <code>ggplot2</code> package for this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyr)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make Scaled data and cbind to original</span></span>
<span id="cb3-6">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(data)</span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(data, scaled_data), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height_scaled"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight_scaled"</span>)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> data</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tidy data for facet plotting</span></span>
<span id="cb3-10">data_long <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(</span>
<span id="cb3-11">  data, </span>
<span id="cb3-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(height, weight, height_scaled, weight_scaled), </span>
<span id="cb3-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>, </span>
<span id="cb3-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span></span>
<span id="cb3-15">  )</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize</span></span>
<span id="cb3-18">data_long <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> variable)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(</span>
<span id="cb3-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb3-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.328</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb3-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distribution of Height and Weight Before and After Scaling"</span></span>
<span id="cb3-26">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-03/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Run this code and see the magic! The histograms before scaling will show a clear difference in spread between height and weight. After scaling, both distributions will have a similar shape, centered around 0 with a standard deviation of 1.</p>
</section>
<section id="try-it-yourself" class="level1">
<h1>Try it Yourself!</h1>
<p>This is just a basic example. Get your hands dirty! Try scaling data from your own projects and see how it affects your analysis. Remember, scaling is just one step in data pre-processing. Explore other techniques like centering or normalization depending on your specific needs.</p>
<p>So, the next time you have features with different scales, consider using <code>scale()</code> to bring them to a level playing field and unlock the full potential of your models!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-03/index.html</guid>
  <pubDate>Wed, 03 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Practical Guide to Data Normalization in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-04-02/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data normalization is a crucial preprocessing step in data analysis and machine learning workflows. It helps in standardizing the scale of numeric features, ensuring fair treatment to all variables regardless of their magnitude. In this tutorial, we’ll explore how to normalize data in R using practical examples and step-by-step explanations.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="step-1-prepare-your-data" class="level2">
<h2 class="anchored" data-anchor-id="step-1-prepare-your-data">Step 1: Prepare Your Data</h2>
<p>For demonstration purposes, let’s create a sample dataset. Suppose we have a dataset called <code>my_data</code> with three numeric variables: <code>age</code>, <code>income</code>, and <code>education</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reproducible</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample dataset</span></span>
<span id="cb1-3">my_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>)),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rlnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71000</span>))),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">education =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">trunc</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb1-7">)</span></code></pre></div>
</div>
</section>
<section id="step-2-normalize-the-data" class="level2">
<h2 class="anchored" data-anchor-id="step-2-normalize-the-data">Step 2: Normalize the Data</h2>
<p>Now, let’s normalize the numeric variables in our dataset. We’ll use the <code>scale()</code> function to standardize each variable to have a mean of 0 and a standard deviation of 1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize the data</span></span>
<span id="cb2-2">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age_normalized =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">income_normalized =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">education_normalized =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>education)</span>
<span id="cb2-6">)</span></code></pre></div>
</div>
</section>
<section id="step-3-understand-the-normalized-data" class="level2">
<h2 class="anchored" data-anchor-id="step-3-understand-the-normalized-data">Step 3: Understand the Normalized Data</h2>
<p>After normalization, each variable will have a mean of approximately 0 and a standard deviation of 1. This ensures that all variables are on the same scale, making them comparable and suitable for various analytical techniques.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the normalized data</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(normalized_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  age_normalized income_normalized education_normalized
1     1.38435717        -0.5141139           -0.9663645
2     1.47019281        -0.5829717           -1.3865230
3    -0.76153378        -0.8385455           -0.1260475
4     1.12685026        -0.7375278           -0.9663645
5     0.44016515        -0.1738354           -0.9663645
6     0.01098696         0.1804609           -0.5462060</code></pre>
</div>
</div>
</section>
<section id="step-4-interpret-the-results" class="level2">
<h2 class="anchored" data-anchor-id="step-4-interpret-the-results">Step 4: Interpret the Results</h2>
<p>In the output, you’ll notice that each variable now has its normalized counterpart. For example:</p>
<ul>
<li><code>age_normalized</code> represents the standardized values of the <code>age</code> variable.</li>
<li><code>income_normalized</code> represents the standardized values of the <code>income</code> variable.</li>
<li><code>education_normalized</code> represents the standardized values of the <code>education</code> variable.</li>
</ul>
</section>
<section id="step-5-visualize-the-normalized-data-optional" class="level2">
<h2 class="anchored" data-anchor-id="step-5-visualize-the-normalized-data-optional">Step 5: Visualize the Normalized Data (Optional)</h2>
<p>To gain a better understanding of the normalization process, you can visualize the distribution of the original and normalized variables using histograms or density plots.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the original and normalized data (Optional)</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Arrange plots in a 2x3 grid</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age"</span>)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(normalized_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age_normalized, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Age"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age (Normalized)"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income"</span>)</span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(normalized_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>income_normalized, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Income"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Income (Normalized)"</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(my_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>education, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education"</span>)</span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(normalized_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>education_normalized, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Education"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Education (Normalized)"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-04-02/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p><strong>Conclusion</strong></p>
<p>Congratulations! You’ve successfully normalized your data in R. By standardizing the scale of numeric variables, you’ve prepared your data for further analysis, ensuring fair treatment to all variables. Feel free to explore more advanced techniques or apply normalization to your own datasets.</p>
<p>I encourage you to try this process on your own datasets and experiment with different normalization techniques. Happy analyzing!</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-04-02/index.html</guid>
  <pubDate>Tue, 02 Apr 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Quantile Normalization in R: A Step-by-Step Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-28/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Quantile normalization is a crucial technique in data preprocessing, especially in fields like genomics and bioinformatics. It ensures that the distributions of different samples are aligned, making them directly comparable. In this tutorial, we’ll walk through the process step by step, demystifying the syntax and empowering you to apply this technique confidently in your projects.</p>
</section>
<section id="understanding-quantile-normalization" class="level1">
<h1>Understanding Quantile Normalization</h1>
<p>Before we dive into the code, let’s understand the concept behind quantile normalization. At its core, quantile normalization aims to equalize the distributions of multiple datasets by aligning their quantiles. This ensures that each dataset has the same distribution of values, making meaningful comparisons possible.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="step-1-load-your-data" class="level2">
<h2 class="anchored" data-anchor-id="step-1-load-your-data">Step 1: Load Your Data</h2>
<p>First things first, you’ll need some data to work with. For the sake of this tutorial, let’s say you have a dataframe called <code>df</code> containing your datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample3 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sample1   sample2    sample3
1 7.741917 11.200965 -2.0009292
2 3.870604 11.044751  0.3337772
3 5.726257  8.996791  1.1713251
4 6.265725 11.848482  2.0595392
5 5.808537  9.333227 -1.3768616
6 4.787751 10.105514 -1.1508556</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(df), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(df)), </span>
<span id="cb3-2">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of Sample 1'</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sample3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#add legend</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">legend</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'topright'</span>, </span>
<span id="cb3-7">       <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 3'</span>), </span>
<span id="cb3-8">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-28/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="step-2-perform-quantile-normalization" class="level2">
<h2 class="anchored" data-anchor-id="step-2-perform-quantile-normalization">Step 2: Perform Quantile Normalization</h2>
<p>Now, it’s time to perform quantile normalization using R’s built-in <code>quantile()</code> function. This function calculates quantiles for a given dataset, which is essential for aligning the distributions. Function from: https://lifewithdata.com/2023/09/02/how-to-perform-quantile-normalization-in-r/</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform quantile normalization</span></span>
<span id="cb4-2">qn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.data){</span>
<span id="cb4-3"> data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sort)</span>
<span id="cb4-4"> row_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(data_sort)</span>
<span id="cb4-5"> data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(row_means, </span>
<span id="cb4-6">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data_sort), </span>
<span id="cb4-7">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(data_sort), </span>
<span id="cb4-8">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb4-9">                     )</span>
<span id="cb4-10"> index_rank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, order)</span>
<span id="cb4-11"> normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(.data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data))</span>
<span id="cb4-12"> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data)){</span>
<span id="cb4-13">   normalized_data[,i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_sort[index_rank[,i], i]</span>
<span id="cb4-14"> }</span>
<span id="cb4-15"> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(normalized_data)</span>
<span id="cb4-16">}</span>
<span id="cb4-17"></span>
<span id="cb4-18">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qn</span>(df)</span></code></pre></div>
</div>
<p>Let’s break down this code snippet:</p>
<p>Absolutely, let’s break down this R code block piece by piece:</p>
<p><strong>1. Function Definition:</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">qn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.data){</span>
<span id="cb5-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... function body here ...</span></span>
<span id="cb5-3">}</span></code></pre></div>
<p>This defines a function named <code>qn</code> that takes a data frame (<code>data</code>) as input. This data frame is most likely your dataset you want to normalize.</p>
<p><strong>2. Sorting Each Column:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sort)</span></code></pre></div>
<p>This line sorts each column of the data frame <code>data</code> independently. Imagine sorting rows of data like sorting words in a dictionary. Here, we are sorting each column (each variable) from smallest to largest values. The result is stored in <code>data_sort</code>.</p>
<p><strong>3. Calculating Row Means:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">row_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(data_sort)</span></code></pre></div>
<p>This line calculates the average value for each row in the sorted data frame (<code>data_sort</code>). So, for each row (each data point), it finds the mean of the sorted values across all variables. The result is stored in <code>row_means</code>.</p>
<p><strong>4. Replicating Row Means into a Matrix:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">data_sort <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(row_means, </span>
<span id="cb8-2">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data_sort), </span>
<span id="cb8-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(data_sort), </span>
<span id="cb8-4">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-5">                    )</span></code></pre></div>
<p>This part is a bit trickier. It creates a new matrix (<code>data_sort</code>) with the same dimensions (number of rows and columns) as the original sorted data. Then, it fills each row of this new matrix with the corresponding row mean calculated earlier (<code>row_means</code>). The <code>byrow</code> argument ensures this replication happens row-wise.</p>
<p><strong>5. Ranking Each Value’s Position:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">index_rank <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(.data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, order)</span></code></pre></div>
<p>Similar to sorting, this line assigns a rank (position) to each value within its column (variable) in the original data frame (<code>data</code>). Imagine a race where the first place gets rank 1, second place gets rank 2, and so on. Here, the rank indicates the original position of each value after everything was sorted in step 2. The result is stored in <code>index_rank</code>.</p>
<p><strong>6. Building the Normalized Data Frame:</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">normalized_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(.data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data))</span></code></pre></div>
<p>This line creates an empty matrix (<code>normalized_data</code>) with the same dimensions as the original data frame. This will eventually hold the normalized data.</p>
<p><strong>7. Looping Through Columns and Assigning Ranked Values:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(.data)){</span>
<span id="cb11-2">  normalized_data[,i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data_sort[index_rank[,i], i]</span>
<span id="cb11-3">}</span></code></pre></div>
<p>This is the core of the normalization process. It loops through each column (variable) of the original data frame (<code>data</code>). For each column, it uses the ranks (<code>index_rank</code>) as indices to pick values from the sorted data with row means (<code>data_sort</code>). Basically, it replaces each value in the original data with the value from the sorted data that has the same rank (original position). This effectively replaces the original values with their corresponding row means (representing the center point) based on their original order.</p>
<p><strong>8. Returning the Normalized Data:</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(normalized_data)</span></code></pre></div>
<p>Finally, the function returns the <code>normalized_data</code> matrix, which contains the quantile normalized version of your original data frame.</p>
<p>In essence, this code performs a type of rank-based normalization where each value is replaced with the row mean that corresponds to its original position after sorting all the data together. This approach ensures that the distribution of values across columns becomes more consistent.</p>
</section>
<section id="step-3-explore-the-results" class="level2">
<h2 class="anchored" data-anchor-id="step-3-explore-the-results">Step 3: Explore the Results</h2>
<p>After quantile normalization, you’ll have a list of normalized datasets ready for further analysis. Take a moment to explore the results and ensure that the distributions are aligned as expected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    sample1           sample2          sample3        
 Min.   :-0.9862   Min.   : 7.975   Min.   :-2.69993  
 1st Qu.: 3.7666   1st Qu.: 9.409   1st Qu.:-0.71167  
 Median : 5.1796   Median : 9.931   Median :-0.02474  
 Mean   : 5.0650   Mean   : 9.913   Mean   :-0.01037  
 3rd Qu.: 6.3231   3rd Qu.:10.462   3rd Qu.: 0.65254  
 Max.   : 9.5733   Max.   :12.702   Max.   : 2.45959  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explore the results</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(normalized_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       V1              V2              V3       
 Min.   :1.430   Min.   :1.430   Min.   :1.430  
 1st Qu.:4.154   1st Qu.:4.154   1st Qu.:4.154  
 Median :5.029   Median :5.029   Median :5.029  
 Mean   :4.989   Mean   :4.989   Mean   :4.989  
 3rd Qu.:5.812   3rd Qu.:5.812   3rd Qu.:5.812  
 Max.   :8.245   Max.   :8.245   Max.   :8.245  </code></pre>
</div>
</div>
</section>
<section id="step-4-obtain-quantiles" class="level2">
<h2 class="anchored" data-anchor-id="step-4-obtain-quantiles">Step 4: Obtain Quantiles</h2>
<p>Now that the data is normalized, we can extract the quantiles to compare the distributions across datasets. This will help you confirm that the normalization process was successful.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(normalized_data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           V1       V2       V3
0%   1.429737 1.429737 1.429737
25%  4.154481 4.154481 4.154481
50%  5.028521 5.028521 5.028521
75%  5.812480 5.812480 5.812480
100% 8.244925 8.244925 8.244925</code></pre>
</div>
</div>
<p>As we can see, the quantiles of the normalized data are consistent across the different datasets. This indicates that the distributions have been aligned through quantile normalization.</p>
<p>Let’s visuzlize for another confirmation</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">df_normalized <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(normalized_data)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df_normalized<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb19-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df_normalized<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(df_normalized<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>V3, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">legend</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'topright'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample 3'</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2024-03-28/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
</section>
<section id="wrapping-up" class="level1">
<h1>Wrapping Up</h1>
<p>Congratulations! You’ve successfully mastered quantile normalization in R. By understanding the underlying concept and applying the <code>quantile()</code> function effectively, you can ensure that your datasets are comparable and ready for downstream analysis.</p>
<p>I encourage you to experiment with different datasets and explore the impact of quantile normalization on your analyses. Remember, practice makes perfect, so don’t hesitate to try it out on your own data. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-28/index.html</guid>
  <pubDate>Thu, 28 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Text Manipulation in R: A Guide to Using gsub() for Multiple Pattern Replacement</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the realm of text manipulation in R, the <code>gsub()</code> function stands as a powerful tool, allowing you to replace specific patterns within strings effortlessly. Whether you’re cleaning messy data or transforming text for analysis, mastering <code>gsub()</code> can significantly streamline your workflow. In this tutorial, we’ll focus on how to effectively utilize <code>gsub()</code> to replace multiple patterns, equipping you with the skills to tackle various text manipulation tasks with ease.</p>
</section>
<section id="understanding-gsub" class="level1">
<h1>Understanding gsub()</h1>
<p>Before diving into multiple pattern replacement, let’s grasp the basics of <code>gsub()</code>. This function is designed to search for patterns within strings and replace them with specified replacements. Its syntax is straightforward:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(pattern, replacement, x)</span></code></pre></div>
<ul>
<li><code>pattern</code>: The pattern(s) to be replaced.</li>
<li><code>replacement</code>: The replacement value(s).</li>
<li><code>x</code>: The input vector containing the strings.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="replacing-single-patterns" class="level2">
<h2 class="anchored" data-anchor-id="replacing-single-patterns">Replacing Single Patterns</h2>
<p>First, let’s start with a simple example of replacing a single pattern within a string:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello, world!"</span></span>
<span id="cb2-2">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R community"</span>, text)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hello, R community!"</code></pre>
</div>
</div>
<p>In this example, <code>"world"</code> is replaced with <code>"R community"</code>, resulting in <code>"Hello, R community!"</code>.</p>
</section>
<section id="replacing-multiple-patterns" class="level2">
<h2 class="anchored" data-anchor-id="replacing-multiple-patterns">Replacing Multiple Patterns</h2>
<p>Now, let’s move on to replacing multiple patterns using <code>gsub()</code>. This can be achieved by providing vectors of patterns and replacements:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data science is amazing, but coding can be challenging."</span></span>
<span id="cb4-2">patterns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data science|coding"</span>)</span>
<span id="cb4-3">replacements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Statistics"</span>)</span>
<span id="cb4-4">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(patterns, replacements, text)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Statistics is amazing, but Statistics can be challenging."</code></pre>
</div>
</div>
<p>Here, <code>"Data science"</code> is replaced with <code>"Statistics"</code>, and <code>"coding"</code> is also replaced with <code>"Statistics"</code>, yielding <code>"Statistics is amazing, but Statistics can be challenging."</code>.</p>
</section>
<section id="handling-case-sensitivity" class="level2">
<h2 class="anchored" data-anchor-id="handling-case-sensitivity">Handling Case Sensitivity</h2>
<p>By default, <code>gsub()</code> is case sensitive. However, you can make it case insensitive by specifying the <code>ignore.case</code> argument:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R programming is Fun!"</span></span>
<span id="cb6-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"R"</span></span>
<span id="cb6-3">replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Python"</span></span>
<span id="cb6-4">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(pattern, replacement, text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Python programming is Fun!"</code></pre>
</div>
</div>
<p>With <code>ignore.case = TRUE</code>, <code>"R"</code> is replaced with <code>"Python"</code>, resulting in <code>"Python programming is Fun!"</code>.</p>
</section>
<section id="using-regular-expressions" class="level2">
<h2 class="anchored" data-anchor-id="using-regular-expressions">Using Regular Expressions</h2>
<p><code>gsub()</code> supports regular expressions, providing advanced pattern matching capabilities. Let’s see how to leverage regular expressions for multiple pattern replacement:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today is 2024-03-27, tomorrow will be 2024-03-28."</span></span>
<span id="cb8-2">pattern <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{4}-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{2}-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d{2}"</span></span>
<span id="cb8-3">replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DATE"</span></span>
<span id="cb8-4">new_text <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(pattern, replacement, text)</span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(new_text)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Today is DATE, tomorrow will be DATE."</code></pre>
</div>
</div>
<p>Here, the regular expression <code>"\\d{4}-\\d{2}-\\d{2}"</code> matches dates in the format YYYY-MM-DD and replaces them with <code>"DATE"</code>, resulting in <code>"Today is DATE, tomorrow will be DATE."</code>.</p>
</section>
</section>
<section id="explore" class="level1">
<h1>Explore!</h1>
<p>As you can see, <code>gsub()</code> offers immense flexibility for text manipulation tasks. I encourage you to experiment with different patterns and replacements, exploring its full potential. By mastering <code>gsub()</code>, you’ll enhance your data cleaning and analysis capabilities, empowering you to efficiently handle textual data in R.</p>
<p>In conclusion, <code>gsub()</code> serves as a fundamental tool in your R toolkit for text manipulation. With its ability to replace multiple patterns effortlessly, it becomes an invaluable asset in various data preprocessing and analysis tasks. So, roll up your sleeves, dive into the world of <code>gsub()</code>, and unlock the true potential of text manipulation in R!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-27/index.html</guid>
  <pubDate>Wed, 27 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering the map() Function in R: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-26/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data manipulation and analysis with R, efficiency and simplicity are paramount. One function that epitomizes these qualities is <code>map()</code>. Whether you’re a novice or a seasoned R programmer, mastering <code>map()</code> can significantly streamline your workflow and enhance your code readability. In this guide, we’ll delve into the syntax, usage, and numerous examples to help you harness the full power of <code>map()</code>.</p>
<p><strong>Syntax:</strong></p>
<pre><code>map(.x, .f, ...)</code></pre>
<ul>
<li><code>.x</code>: A list or atomic vector.</li>
<li><code>.f</code>: A function to apply to each element of <code>.x</code>.</li>
<li><code>...</code>: Additional arguments to be passed to <code>.f</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-applying-a-function-to-each-element-of-a-vector" class="level2">
<h2 class="anchored" data-anchor-id="example-1-applying-a-function-to-each-element-of-a-vector">Example 1: Applying a Function to Each Element of a Vector</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a vector</span></span>
<span id="cb2-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Square each element using map()</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb2-6">squared_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(numbers, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> .x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(squared_numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25</code></pre>
</div>
</div>
<p>In this example, we utilize <code>map()</code> to apply the square function to each element of the vector <code>numbers</code>. The result is a new vector <code>squared_numbers</code> containing the squared values.</p>
</section>
<section id="example-2-working-with-lists" class="level2">
<h2 class="anchored" data-anchor-id="example-2-working-with-lists">Example 2: Working with Lists</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a list</span></span>
<span id="cb4-2">names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert each name to uppercase using map()</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb4-6">uppercase_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(names, toupper)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(uppercase_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "JOHN"

[[2]]
[1] "ALICE"

[[3]]
[1] "BOB"</code></pre>
</div>
</div>
<p>Here, <code>map()</code> transforms each element of the list <code>names</code> to uppercase using the <code>toupper()</code> function.</p>
</section>
<section id="example-3-passing-additional-arguments" class="level2">
<h2 class="anchored" data-anchor-id="example-3-passing-additional-arguments">Example 3: Passing Additional Arguments</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a list of strings</span></span>
<span id="cb6-2">words <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract substrings using map()</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb6-6">substring_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(words, substr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stop =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the result</span></span>
<span id="cb6-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(substring_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "app"

[[2]]
[1] "ban"

[[3]]
[1] "ora"</code></pre>
</div>
</div>
<p>In this example, we pass additional arguments <code>start</code> and <code>stop</code> to the <code>substr()</code> function within <code>map()</code>. This extracts the first three characters of each word in the list <code>words</code>.</p>
<p><strong>Explanation:</strong></p>
<p>The <code>map()</code> function iterates over each element of the input data structure (vector or list) and applies the specified function to each element. It then returns the results as a list.</p>
<ul>
<li><strong>Input Data (.x):</strong> This is the data structure (vector or list) over which the function will iterate.</li>
<li><strong>Function (.f):</strong> The function to be applied to each element of the input data.</li>
<li><strong>Additional Arguments (…):</strong> Any additional arguments required by the function can be passed here.</li>
</ul>
</section>
<section id="example-4-mapping-a-function-to-a-vector" class="level2">
<h2 class="anchored" data-anchor-id="example-4-mapping-a-function-to-a-vector">Example 4: Mapping a function to a vector</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(\(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] -0.5899048  0.6927321  0.9609231  1.5313738  2.8812876

[[2]]
[1] 2.786631 1.378856 2.649387 1.362483 0.939132

[[3]]
[1] 1.383364 3.400441 3.722030 2.109162 3.393745</code></pre>
</div>
</div>
<p>In this example, we use the pipe operator to pass the vector <code>data</code> to the <code>map()</code> function. We then apply the <code>rnorm()</code> function to each element of the vector, generating a list of random numbers.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering the <code>map()</code> function in R opens up a world of possibilities for efficient data manipulation and transformation. By simplifying repetitive tasks and improving code readability, <code>map()</code> empowers you to focus more on data analysis and less on cumbersome loops. Experiment with different functions and data structures to explore the versatility of <code>map()</code>. Happy mapping!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-26/index.html</guid>
  <pubDate>Tue, 26 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Wrangling Data with R: A Guide to the tapply() Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-25/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hey R enthusiasts! Today we’re diving into the world of data manipulation with a fantastic function called <code>tapply()</code>. This little gem lets you apply a function of your choice to different subgroups within your data.</p>
<p>Imagine you have a dataset on trees, with a column for tree height and another for species. You might want to know the average height for each species. <code>tapply()</code> comes to the rescue!</p>
</section>
<section id="understanding-the-syntax" class="level1">
<h1>Understanding the Syntax</h1>
<p>Let’s break down the syntax of <code>tapply()</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(X, INDEX, FUN, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<ul>
<li><strong>X</strong>: This is the vector or variable you want to perform the function on.</li>
<li><strong>INDEX</strong>: This is the factor variable that defines the groups. Each level in the factor acts as a subgroup for applying the function.</li>
<li><strong>FUN</strong>: This is the function you want to apply to each subgroup. It can be built-in functions like <code>mean()</code> or <code>sd()</code>, or even custom functions you write!</li>
<li><strong>simplify (optional)</strong>: By default, <code>simplify = TRUE</code> (recommended for most cases). This returns a nice, condensed output that’s easy to work with. Setting it to <code>FALSE</code> gives you a more complex structure.</li>
</ul>
</section>
<section id="examples-in-action" class="level1">
<h1>Examples in Action</h1>
<section id="example-1-average-tree-height-by-species" class="level2">
<h2 class="anchored" data-anchor-id="example-1-average-tree-height-by-species">Example 1: Average Tree Height by Species</h2>
<p>Let’s say we have a data frame <code>trees</code> with columns “height” (numeric) and “species” (factor):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data</span></span>
<span id="cb2-2">trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb2-3">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">species =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oak"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oak"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pine"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pine"</span>))</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average height per species</span></span>
<span id="cb2-6">average_height <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, mean)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(average_height)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Maple   Oak  Pine 
   20    25    34 </code></pre>
</div>
</div>
<p>This code calculates the average height for each species in the “species” column and stores the results in <code>average_height</code>. The output will be a named vector showing the average height for each unique species.</p>
</section>
<section id="example-2-exploring-distribution-with-summary-statistics" class="level2">
<h2 class="anchored" data-anchor-id="example-2-exploring-distribution-with-summary-statistics">Example 2: Exploring Distribution with Summary Statistics</h2>
<p>We can use <code>tapply()</code> with <code>summary()</code> to get a quick overview of how a variable is distributed within groups. Here, we’ll see the distribution of height within each species:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">summary_by_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, summary)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_by_species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Maple
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   15.0    17.5    20.0    20.0    22.5    25.0 

$Oak
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   20.0    22.5    25.0    25.0    27.5    30.0 

$Pine
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     28      31      34      34      37      40 </code></pre>
</div>
</div>
<p>This code applies the <code>summary()</code> function to each subgroup defined by the “species” factor. The output will be a data frame showing various summary statistics (like minimum, maximum, quartiles) for the height of each species.</p>
</section>
<section id="example-3-custom-function-for-identifying-tall-trees" class="level2">
<h2 class="anchored" data-anchor-id="example-3-custom-function-for-identifying-tall-trees">Example 3: Custom Function for Identifying Tall Trees</h2>
<p>Let’s create a custom function to find trees that are taller than the average height of their species:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">tall_trees <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(height, avg_height) {</span>
<span id="cb6-2">    height <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> avg_height</span>
<span id="cb6-3">}</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find tall trees within each species</span></span>
<span id="cb6-6">tall_trees_by_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tapply</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height, trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>species, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(trees<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN=</span>tall_trees)</span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(tall_trees_by_species)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Maple
[1] FALSE FALSE

$Oak
[1] FALSE  TRUE

$Pine
[1] TRUE TRUE</code></pre>
</div>
</div>
<p>Here, we define a function <code>tall_trees()</code> that takes a tree’s height and the average height (passed as arguments) and returns TRUE if the tree’s height is greater. We then use <code>tapply()</code> with this custom function. The crucial difference here is that we use <code>mean(trees$height)</code> within the <code>FUN</code> argument to calculate the average height for each group <strong>outside</strong> of the custom function. This ensures the average height is calculated correctly for each subgroup before being compared to individual tree heights. The output will be a logical vector for each species, indicating which trees are taller than the average.</p>
</section>
</section>
<section id="give-it-a-try" class="level1">
<h1>Give it a Try!</h1>
<p>This is just a taste of what <code>tapply()</code> can do. There are endless possibilities for grouping data and applying functions. Try it out on your own datasets! Here are some ideas:</p>
<ul>
<li>Calculate the median income for different age groups.</li>
<li>Find the most frequent word used in emails sent by different departments.</li>
<li>Group customers by purchase history and analyze their average spending.</li>
</ul>
<p>Remember, R is all about exploration. So dive in, play with <code>tapply()</code>, and see what insights you can uncover from your data!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-25/index.html</guid>
  <pubDate>Mon, 25 Mar 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Data Manipulation in R with the Sweep Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2024-03-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>Welcome to another exciting journey into the world of data manipulation in R! In this blog post, we’re going to explore a powerful tool in R’s arsenal: the <code>sweep</code> function. Whether you’re a seasoned R programmer or just starting out, understanding how to leverage <code>sweep</code> can significantly enhance your data analysis capabilities. So, let’s dive in and unravel the magic of <code>sweep</code>!</p>
</section>
<section id="what-is-the-sweep-function" class="level1">
<h1>What is the Sweep Function?</h1>
<p>The <code>sweep</code> function in R is a versatile tool used for performing operations on arrays or matrices. It allows you to apply a function across either rows or columns of a matrix while controlling the margins.</p>
</section>
<section id="syntax" class="level1">
<h1>Syntax</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(x, margin, STATS, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, ...)</span></code></pre></div>
<ul>
<li><code>x</code>: The array or matrix to be swept.</li>
<li><code>margin</code>: An integer vector indicating which margins should be swept over (1 indicates rows, 2 indicates columns).</li>
<li><code>STATS</code>: The statistics to be used in the sweeping operation.</li>
<li><code>FUN</code>: The function to be applied during sweeping.</li>
<li><code>...</code>: Additional arguments passed to the function specified in <code>FUN</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-scaling-data" class="level2">
<h2 class="anchored" data-anchor-id="example-1-scaling-data">Example 1: Scaling Data</h2>
<p>Suppose we have a matrix <code>data</code> containing numerical values, and we want to scale each column by subtracting its mean and dividing by its standard deviation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]        [,3]       [,4]
[1,] -0.0345423  0.5671910  0.64555547 -1.4316793
[2,]  0.2124999  0.7805793 -2.03254741 -0.4705828
[3,]  1.1442591  0.6055960  0.41827804 -0.7136599
[4,]  0.4727024  0.9285763 -0.27855411  0.1741202
[5,]  0.1429103 -0.9512931 -0.01988827 -0.4070733</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale each column</span></span>
<span id="cb4-2">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colMeans</span>(data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scaled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]        [,3]        [,4]
[1,] -0.4221082  0.1810611  0.89898672 -0.86190434
[2,] -0.1750660  0.3944494 -1.77911615  0.09919224
[3,]  0.7566932  0.2194661  0.67170929 -0.14388487
[4,]  0.0851365  0.5424464 -0.02512285  0.74389523
[5,] -0.2446556 -1.3374230  0.23354299  0.16270174</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">scaled_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(scaled_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sd), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View scaled data</span></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scaled_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]       [,3]       [,4]
[1,] -0.9164833  0.2377712  0.8494817 -1.4818231
[2,] -0.3801042  0.5179946 -1.6811446  0.1705356
[3,]  1.6429362  0.2882050  0.6347199 -0.2473731
[4,]  0.1848488  0.7123457 -0.0237394  1.2789367
[5,] -0.5311974 -1.7563166  0.2206823  0.2797238</code></pre>
</div>
</div>
<p>In this example, we first subtracted the column means from each column and then divided by the column standard deviations.</p>
</section>
<section id="example-2-centering-data" class="level2">
<h2 class="anchored" data-anchor-id="example-2-centering-data">Example 2: Centering Data</h2>
<p>Let’s say we have a matrix <code>scores</code> representing student exam scores, and we want to center each row by subtracting the row means.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb8-2">scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(</span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>), </span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb8-6">  )</span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]   80   75   85
[2,]   90   95   85
[3,]   70   80   75</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Center each row</span></span>
<span id="cb10-2">centered_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(scores, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowMeans</span>(scores), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View centered data</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(centered_scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    0   -5    5
[2,]    0    5   -5
[3,]   -5    5    0</code></pre>
</div>
</div>
<p>Here, we subtracted the row means from each row, effectively centering the data around zero.</p>
</section>
<section id="example-3-custom-operations" class="level2">
<h2 class="anchored" data-anchor-id="example-3-custom-operations">Example 3: Custom Operations</h2>
<p>You can also apply custom functions using <code>sweep</code>. Let’s say we want to cube each element in a matrix <code>nums</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb12-2">nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(nums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    4    7
[2,]    2    5    8
[3,]    3    6    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom operation: cube each element</span></span>
<span id="cb14-2">cubed_nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sweep</span>(nums, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View result</span></span>
<span id="cb14-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(cubed_nums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1   64  343
[2,]    8  125  512
[3,]   27  216  729</code></pre>
</div>
</div>
<p>In this example, we defined a custom function to cube each element and applied it across all elements of the matrix.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>sweep</code> function in R is a powerful tool for performing array-based operations efficiently. Whether you need to scale data, center observations, or apply custom functions, <code>sweep</code> provides the flexibility to accomplish a wide range of tasks. I encourage you to experiment with <code>sweep</code> in your own R projects and discover its full potential in data manipulation and analysis! Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>operations</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2024-03-22/index.html</guid>
  <pubDate>Fri, 22 Mar 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
