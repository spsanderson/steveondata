<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/#category=rtip</link>
<atom:link href="https://www.spsanderson.com/steveondata/index-rtip.xml" rel="self" type="application/rss+xml"/>
<description>Steve&#39;s Data Tips and Tricks in R, C, SQL and Linux</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Wed, 03 Sep 2025 04:00:00 GMT</lastBuildDate>
<item>
  <title>The Beginner’s Guide to Web Scraping in Python: From Zero to Web Data Hero</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-03/</link>
  <description><![CDATA[ 






<section id="authors-note" class="level2">
<h2 class="anchored" data-anchor-id="authors-note">Author’s Note</h2>
<blockquote class="blockquote">
<p><strong>Learning Together:</strong> Hey there! I want to be completely honest with you from the start. I’m learning web scraping as I write this series, which means we’re on this journey together. My goal isn’t to pretend I’m an expert, but rather to share what I discover in the clearest, most beginner friendly way possible. Every example in this guide has been tested to ensure it works, and I’ll explain every piece of code like I’m talking to a friend who’s never seen Python before. Let’s dive in!</p>
</blockquote>
<hr>
</section>
<section id="introduction-what-is-web-scraping-and-why-should-you-care" class="level1">
<h1>Introduction: What Is Web Scraping and Why Should You Care?</h1>
<p><strong>Web scraping</strong> is like having a super-powered copy-and-paste tool for the internet. Instead of manually visiting websites and copying information by hand, you can write Python programs that automatically visit web pages, extract the data you need, and organize it for you .</p>
<p>Think of it this way: if you wanted to collect product prices from 100 different online stores, you could spend days clicking through websites, or you could write a 20-line Python script that does it in minutes.</p>
<blockquote class="blockquote">
<p><strong>Key Insight:</strong> Web scraping transforms the entire internet into your personal database, accessible through Python code.</p>
</blockquote>
</section>
<section id="understanding-the-python-web-scraping-ecosystem" class="level1">
<h1>Understanding the Python Web Scraping Ecosystem</h1>
<p>Before we start coding, let’s understand the tools in our toolkit. Python offers several libraries for web scraping, each with its own strengths and use cases.</p>
<section id="the-big-three-requests-beautifulsoup-and-selenium" class="level2">
<h2 class="anchored" data-anchor-id="the-big-three-requests-beautifulsoup-and-selenium">The Big Three: Requests, BeautifulSoup, and Selenium</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 22%">
<col style="width: 36%">
</colgroup>
<thead>
<tr class="header">
<th>Library</th>
<th>Purpose</th>
<th>Best For</th>
<th>Learning Curve</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>requests</strong></td>
<td>Fetches web pages</td>
<td>Static content, APIs</td>
<td>Easy</td>
</tr>
<tr class="even">
<td><strong>BeautifulSoup</strong></td>
<td>Parses HTML</td>
<td>Simple HTML extraction</td>
<td>Easy</td>
</tr>
<tr class="odd">
<td><strong>Selenium</strong></td>
<td>Controls browsers</td>
<td>Dynamic content, JavaScript</td>
<td>Moderate</td>
</tr>
</tbody>
</table>
<section id="what-about-the-webbrowser-module" class="level3">
<h3 class="anchored" data-anchor-id="what-about-the-webbrowser-module">What About the <code>webbrowser</code> Module?</h3>
<p>You might have heard about Python’s <code>webbrowser</code> module, but here’s the thing: <strong>it’s not actually for scraping</strong> . The <code>webbrowser</code> module simply opens URLs in your default browser - it can’t extract or process data. Think of it as Python’s way of saying “Hey browser, open this page for the human to look at.”</p>
</section>
</section>
</section>
<section id="setting-up-your-web-scraping-environment" class="level1">
<h1>Setting Up Your Web Scraping Environment</h1>
<p>Before we can start scraping, we need to install our tools. Open your terminal or command prompt and run:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install requests beautifulsoup4</span></code></pre></div>
<p>For Selenium (we’ll cover this later):</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install selenium</span></code></pre></div>
</section>
<section id="your-first-web-scraping-script-static-content" class="level1">
<h1>Your First Web Scraping Script: Static Content</h1>
<p>Let’s start with the simplest possible example. We’ll scrape a basic webpage and extract some information.</p>
<section id="step-by-step-breakdown" class="level2">
<h2 class="anchored" data-anchor-id="step-by-step-breakdown">Step-by-Step Breakdown</h2>
<div id="7642266a" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Send HTTP request to get web page</span></span>
<span id="cb3-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://example.com"</span></span>
<span id="cb3-6">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Check if request was successful</span></span>
<span id="cb3-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb3-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"✓ Successfully fetched the page!"</span>)</span>
<span id="cb3-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Content length: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(response.text)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> characters"</span>)</span>
<span id="cb3-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb3-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"✗ Failed to fetch page. Status code: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>response<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>status_code<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Parse HTML with BeautifulSoup</span></span>
<span id="cb3-16">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb3-17"></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Extract data</span></span>
<span id="cb3-19">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>).get_text()</span>
<span id="cb3-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Page title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all paragraphs</span></span>
<span id="cb3-23">paragraphs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>)</span>
<span id="cb3-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Found </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(paragraphs)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> paragraph(s):"</span>)</span>
<span id="cb3-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(paragraphs, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get_text()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strip()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>✓ Successfully fetched the page!
Content length: 1256 characters
Page title: Example Domain
Found 2 paragraph(s):
  1. This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.
  2. More information...</code></pre>
</div>
</div>
</section>
<section id="function-explanations-in-simple-terms" class="level2">
<h2 class="anchored" data-anchor-id="function-explanations-in-simple-terms">Function Explanations (In Simple Terms)</h2>
<ul>
<li><strong><code>requests.get(url)</code></strong>: Think of this as knocking on a website’s door and asking for its content</li>
<li><strong><code>response.status_code</code></strong>: The website’s response - 200 means “sure, here’s the page!”</li>
<li><strong><code>BeautifulSoup(html, 'html.parser')</code></strong>: Takes messy HTML and organizes it so we can easily find things</li>
<li><strong><code>soup.find('title')</code></strong>: Looks for the first <code>&lt;title&gt;</code> tag on the page</li>
<li><strong><code>soup.find_all('p')</code></strong>: Finds ALL <code>&lt;p&gt;</code> (paragraph) tags on the page</li>
<li><strong><code>.get_text()</code></strong>: Extracts just the text content, ignoring HTML tags</li>
</ul>
</section>
</section>
<section id="mastering-beautifulsoup-different-ways-to-find-elements" class="level1">
<h1>Mastering BeautifulSoup: Different Ways to Find Elements</h1>
<p>BeautifulSoup gives you multiple ways to find HTML elements. Here’s a comparison of the most common methods:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 37%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Syntax</th>
<th>What It Finds</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>By Tag</strong></td>
<td><code>soup.find("tag")</code></td>
<td>First element with that tag</td>
<td><code>soup.find("title")</code></td>
</tr>
<tr class="even">
<td><strong>By ID</strong></td>
<td><code>soup.find("tag", id="id-name")</code></td>
<td>Element with specific ID</td>
<td><code>soup.find("h1", id="main-title")</code></td>
</tr>
<tr class="odd">
<td><strong>By Class</strong></td>
<td><code>soup.find("tag", class_="class-name")</code></td>
<td>Element with specific CSS class</td>
<td><code>soup.find("p", class_="intro")</code></td>
</tr>
<tr class="even">
<td><strong>CSS Selectors</strong></td>
<td><code>soup.select_one("css-selector")</code></td>
<td>First element matching CSS selector</td>
<td><code>soup.select_one(".footer a")</code></td>
</tr>
<tr class="odd">
<td><strong>Find All</strong></td>
<td><code>soup.find_all("tag")</code></td>
<td>ALL elements with that tag</td>
<td><code>soup.find_all("li", class_="item")</code></td>
</tr>
</tbody>
</table>
<section id="practical-example-multiple-selection-methods" class="level2">
<h2 class="anchored" data-anchor-id="practical-example-multiple-selection-methods">Practical Example: Multiple Selection Methods</h2>
<div id="1b32db16" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample HTML structure</span></span>
<span id="cb5-2">html_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;html&gt;</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;body&gt;</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;h1 id="main-title"&gt;Welcome to Web Scraping&lt;/h1&gt;</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;p class="intro"&gt;This is an introduction.&lt;/p&gt;</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;ul&gt;</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;li class="item"&gt;Item 1&lt;/li&gt;</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;li class="item featured"&gt;Item 2 (Featured)&lt;/li&gt;</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        &lt;li class="item"&gt;Item 3&lt;/li&gt;</span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    &lt;/ul&gt;</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/body&gt;</span></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;/html&gt;</span></span>
<span id="cb5-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(html_content, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Different ways to extract data</span></span>
<span id="cb5-19">title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h1'</span>).get_text()                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "Welcome to Web Scraping"</span></span>
<span id="cb5-20">intro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'p'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'intro'</span>).get_text()     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "This is an introduction."</span></span>
<span id="cb5-21">featured <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'li'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'item featured'</span>).get_text()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "Item 2 (Featured)"</span></span>
<span id="cb5-22">all_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [li.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> li <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'li'</span>)]      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of all items</span></span>
<span id="cb5-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(featured)</span>
<span id="cb5-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(all_items)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Item 2 (Featured)
['Item 1', 'Item 2 (Featured)', 'Item 3']</code></pre>
</div>
</div>
</section>
</section>
<section id="when-static-scraping-isnt-enough-enter-selenium" class="level1">
<h1>When Static Scraping Isn’t Enough: Enter Selenium</h1>
<p>Some websites load their content using JavaScript after the initial page loads. This is called <strong>dynamic content</strong>. When <code>requests</code> and <code>BeautifulSoup</code> visit these pages, they only see the empty shell - not the data that gets filled in later.</p>
<p>This is where <strong>Selenium</strong> comes in. Selenium actually opens a real web browser and can wait for JavaScript to run.</p>
<section id="when-to-use-each-tool" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-each-tool">When to Use Each Tool</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 29%">
<col style="width: 38%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>Scenario</th>
<th>Tool Choice</th>
<th>Reasoning</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Static HTML pages</strong></td>
<td>requests + BeautifulSoup</td>
<td>Faster and more efficient</td>
</tr>
<tr class="even">
<td><strong>JavaScript-heavy sites</strong></td>
<td>Selenium</td>
<td>Can execute JavaScript</td>
</tr>
<tr class="odd">
<td><strong>Need to interact</strong> (click, scroll, forms)</td>
<td>Selenium</td>
<td>Full browser control</td>
</tr>
<tr class="even">
<td><strong>Large-scale scraping</strong></td>
<td>requests + BeautifulSoup</td>
<td>Better performance</td>
</tr>
<tr class="odd">
<td><strong>Sites behind login</strong></td>
<td>Either (with sessions)</td>
<td>Depends on complexity</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-selenium-example" class="level2">
<h2 class="anchored" data-anchor-id="basic-selenium-example">Basic Selenium Example</h2>
<div id="ecc98364" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> webdriver</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.common.by <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> By</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> selenium.webdriver.chrome.options <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Options</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setup Chrome to run in the background (headless)</span></span>
<span id="cb7-6">chrome_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Options()</span>
<span id="cb7-7">chrome_options.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--headless"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run without opening browser window</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create WebDriver instance</span></span>
<span id="cb7-10">driver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> webdriver.Chrome(options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>chrome_options)</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb7-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Navigate to webpage</span></span>
<span id="cb7-14">    driver.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://example.com"</span>)</span>
<span id="cb7-15">    </span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait for page to load (implicit wait)</span></span>
<span id="cb7-17">    driver.implicitly_wait(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb7-18">    </span>
<span id="cb7-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find elements</span></span>
<span id="cb7-20">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.find_element(By.TAG_NAME, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h1"</span>).text</span>
<span id="cb7-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Page title: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-22">    </span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find multiple elements</span></span>
<span id="cb7-24">    paragraphs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> driver.find_elements(By.TAG_NAME, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>)</span>
<span id="cb7-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> paragraphs:</span>
<span id="cb7-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Paragraph: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>text<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-27">        </span>
<span id="cb7-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">finally</span>:</span>
<span id="cb7-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Always close the browser</span></span>
<span id="cb7-30">    driver.quit()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Page title: Example Domain
Paragraph: This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.
Paragraph: More information...</code></pre>
</div>
</div>
<p><strong>Selenium Function Explanations:</strong></p>
<ul>
<li><strong><code>webdriver.Chrome()</code></strong>: Starts a Chrome browser that Python can control</li>
<li><strong><code>driver.get(url)</code></strong>: Tells the browser to navigate to a specific webpage</li>
<li><strong><code>driver.find_element(By.TAG_NAME, "h1")</code></strong>: Finds the first <code>&lt;h1&gt;</code> element on the page</li>
<li><strong><code>driver.quit()</code></strong>: Closes the browser (very important - don’t leave browsers running!)</li>
</ul>
</section>
</section>
<section id="handling-common-challenges-the-reality-of-web-scraping" class="level1">
<h1>Handling Common Challenges: The Reality of Web Scraping</h1>
<p>Web scraping isn’t always smooth sailing. Here are the most common challenges you’ll face and how to handle them:</p>
<section id="challenge-solutions-table" class="level2">
<h2 class="anchored" data-anchor-id="challenge-solutions-table">Challenge Solutions Table</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 25%">
<col style="width: 20%">
<col style="width: 22%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>Challenge</th>
<th>Problem</th>
<th>Solution</th>
<th>Code Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Rate Limiting</strong></td>
<td>Server blocks rapid requests</td>
<td>Add delays</td>
<td><code>time.sleep(1)</code></td>
</tr>
<tr class="even">
<td><strong>Bot Detection</strong></td>
<td>Server detects automated requests</td>
<td>Use realistic headers</td>
<td><code>headers = {'User-Agent': 'Mozilla/5.0...'}</code></td>
</tr>
<tr class="odd">
<td><strong>Dynamic Content</strong></td>
<td>Data loads via JavaScript</td>
<td>Use Selenium</td>
<td><code>driver.get(url)</code></td>
</tr>
<tr class="even">
<td><strong>Session Management</strong></td>
<td>Need to stay logged in</td>
<td>Use requests.Session()</td>
<td><code>session = requests.Session()</code></td>
</tr>
<tr class="odd">
<td><strong>Changing Structure</strong></td>
<td>Website layout changes</td>
<td>Use multiple selectors</td>
<td><code>soup.find('h1') or soup.find('h2')</code></td>
</tr>
</tbody>
</table>
</section>
<section id="robust-scraping-with-error-handling" class="level2">
<h2 class="anchored" data-anchor-id="robust-scraping-with-error-handling">Robust Scraping with Error Handling</h2>
<p>Here’s a more professional scraping function that handles errors gracefully:</p>
<div id="19f28a84" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> robust_scrape(url, max_retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, delay_range<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)):</span>
<span id="cb9-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A robust scraping function with error handling</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        url (str): Website URL to scrape</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_retries (int): How many times to retry if something fails</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        delay_range (tuple): Random delay between requests (min, max seconds)</span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        BeautifulSoup object or None if failed</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb9-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Headers to look like a real browser</span></span>
<span id="cb9-19">    headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'User-Agent'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'</span></span>
<span id="cb9-21">    }</span>
<span id="cb9-22">    </span>
<span id="cb9-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> attempt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_retries):</span>
<span id="cb9-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb9-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random delay to seem human-like</span></span>
<span id="cb9-26">            delay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>delay_range)</span>
<span id="cb9-27">            time.sleep(delay)</span>
<span id="cb9-28">            </span>
<span id="cb9-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the request</span></span>
<span id="cb9-30">            response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb9-31">            response.raise_for_status()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Raises error for bad status codes</span></span>
<span id="cb9-32">            </span>
<span id="cb9-33">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse and return</span></span>
<span id="cb9-34">            soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb9-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> soup</span>
<span id="cb9-36">            </span>
<span id="cb9-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> requests.exceptions.Timeout:</span>
<span id="cb9-38">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Attempt </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>attempt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Request timed out"</span>)</span>
<span id="cb9-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> requests.exceptions.RequestException <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb9-40">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Attempt </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>attempt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: Request error: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-41">        </span>
<span id="cb9-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> attempt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_retries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb9-43">            wait_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> attempt  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait longer each time (1s, 2s, 4s)</span></span>
<span id="cb9-44">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Waiting </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>wait_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds before retry..."</span>)</span>
<span id="cb9-45">            time.sleep(wait_time)</span>
<span id="cb9-46">    </span>
<span id="cb9-47">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All retry attempts failed"</span>)</span>
<span id="cb9-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb9-49"></span>
<span id="cb9-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Usage example</span></span>
<span id="cb9-51">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> robust_scrape(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://example.com"</span>)</span>
<span id="cb9-52"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> soup:</span>
<span id="cb9-53">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>).get_text()</span>
<span id="cb9-54">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully scraped: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-55"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb9-56">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Scraping failed after all retries"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Successfully scraped: Example Domain</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices-and-ethical-considerations" class="level1">
<h1>Best Practices and Ethical Considerations</h1>
<p>Web scraping comes with great power and great responsibility. Here are the essential guidelines every scraper should follow:</p>
<section id="technical-best-practices" class="level2">
<h2 class="anchored" data-anchor-id="technical-best-practices">Technical Best Practices</h2>
<ul>
<li><strong>Always check robots.txt</strong> before scraping (visit website.com/robots.txt)</li>
<li><strong>Add delays between requests</strong> to avoid overwhelming servers</li>
<li><strong>Use proper User-Agent headers</strong> to identify your scraper honestly</li>
<li><strong>Handle errors gracefully</strong> with try/except blocks</li>
<li><strong>Validate and clean your data</strong> after extraction</li>
<li><strong>Close browser instances</strong> when using Selenium (use <code>driver.quit()</code>)</li>
</ul>
</section>
<section id="ethical-guidelines" class="level2">
<h2 class="anchored" data-anchor-id="ethical-guidelines">Ethical Guidelines</h2>
<ul>
<li><strong>Respect website Terms of Service</strong> - read them before scraping</li>
<li><strong>Don’t scrape personal or private data</strong> without permission</li>
<li><strong>Use official APIs when available</strong> - they’re usually better than scraping</li>
<li><strong>Give attribution</strong> when using scraped data in your projects</li>
<li><strong>Be transparent</strong> about your scraping activities if asked</li>
<li><strong>Don’t overload servers</strong> - be respectful of website resources</li>
</ul>
</section>
<section id="legal-considerations" class="level2">
<h2 class="anchored" data-anchor-id="legal-considerations">Legal Considerations</h2>
<p><strong>Important:</strong> This is not legal advice, but here are some general principles: - Scraping publicly available data is generally okay - Always respect copyright and intellectual property rights - Be extra careful with personal data due to privacy laws (GDPR, CCPA) - When in doubt, contact the website owner for permission</p>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it’s your turn to practice! Here’s a hands-on exercise to reinforce what you’ve learned.</p>
<p><strong>Challenge:</strong> Create a script that scrapes quotes from a test website and saves them to a text file.</p>
<p><strong>Your Task:</strong> 1. Visit <code>https://quotes.toscrape.com/</code> (a site designed for scraping practice) 2. Extract the first 5 quotes on the page 3. For each quote, get the text, author, and tags 4. Save the results to a text file</p>
<p><strong>Starter Code:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb11-3"></span>
<span id="cb11-4">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://quotes.toscrape.com/"</span></span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here!</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hint: Look for &lt;div class="quote"&gt; elements</span></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Each quote has text in &lt;span class="text"&gt;</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Authors are in &lt;small class="author"&gt;</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tags are in &lt;div class="tags"&gt; with &lt;a&gt; elements</span></span></code></pre></div>
<details>
<summary>
Click here for Solution!
</summary>
<div id="32368129" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scrape_quotes():</span>
<span id="cb12-5">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://quotes.toscrape.com/"</span></span>
<span id="cb12-6">    </span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fetch the page</span></span>
<span id="cb12-8">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb12-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> response.status_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>:</span>
<span id="cb12-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to fetch the page"</span>)</span>
<span id="cb12-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb12-12">    </span>
<span id="cb12-13">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(response.text, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'html.parser'</span>)</span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all quote containers</span></span>
<span id="cb12-16">    quotes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'quote'</span>)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract data from first 5 quotes</span></span>
<span id="cb12-19">    scraped_quotes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb12-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> quote <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quotes[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]:</span>
<span id="cb12-21">        text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quote.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'span'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>).get_text()</span>
<span id="cb12-22">        author <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quote.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'small'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author'</span>).get_text()</span>
<span id="cb12-23">        tags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tag.get_text() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> tag <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> quote.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tag'</span>)]</span>
<span id="cb12-24">        </span>
<span id="cb12-25">        scraped_quotes.append({</span>
<span id="cb12-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>: text,</span>
<span id="cb12-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author'</span>: author,</span>
<span id="cb12-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tags'</span>: tags</span>
<span id="cb12-29">        })</span>
<span id="cb12-30">    </span>
<span id="cb12-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save to file</span></span>
<span id="cb12-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scraped_quotes.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb12-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, quote <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(scraped_quotes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb12-34">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Quote </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-35">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Text: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>quote[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'text'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-36">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Author: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>quote[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'author'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-37">            f.write(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Tags: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(quote[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tags'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-38">            f.write(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-39">    </span>
<span id="cb12-40">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Successfully scraped </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(scraped_quotes)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> quotes!"</span>)</span>
<span id="cb12-41">    </span>
<span id="cb12-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb12-43">    scrape_quotes()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Successfully scraped 5 quotes!</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways-your-web-scraping-cheat-sheet" class="level1">
<h1>Quick Takeaways: Your Web Scraping Cheat Sheet</h1>
<p>Here are the key points to remember from this guide:</p>
<ul>
<li><strong>Start Simple</strong>: Begin with <code>requests</code> + <code>BeautifulSoup</code> for static websites</li>
<li><strong>Use Selenium for JavaScript</strong>: Only when content loads dynamically</li>
<li><strong>Always Be Respectful</strong>: Add delays, check robots.txt, follow terms of service</li>
<li><strong>Handle Errors Gracefully</strong>: Use try/except blocks and retry logic</li>
<li><strong>Clean Your Data</strong>: Validate and normalize scraped data</li>
<li><strong>Choose the Right Tool</strong>: Static content = requests; Dynamic content = Selenium</li>
<li><strong>Practice Makes Perfect</strong>: Start with simple sites before tackling complex ones</li>
<li><strong>Stay Ethical</strong>: Respect privacy, copyright, and website policies</li>
</ul>
</section>
<section id="conclusion-your-web-scraping-journey-starts-now" class="level1">
<h1>Conclusion: Your Web Scraping Journey Starts Now</h1>
<p>Congratulations! You’ve just taken your first steps into the powerful world of web scraping with Python. We’ve covered the essential tools (requests, BeautifulSoup, and Selenium), learned how to handle common challenges, and explored the ethical considerations that make you a responsible scraper.</p>
<p>Remember, web scraping is like learning to drive - you start in empty parking lots (simple websites) before tackling busy highways (complex sites). The examples in this guide give you a solid foundation, but the real learning happens when you start building your own projects.</p>
<p><strong>Your Next Steps:</strong></p>
<ol type="1">
<li>Practice with the exercise above</li>
<li>Try scraping your favorite website (responsibly!)<br>
</li>
<li>Explore advanced topics like handling forms and sessions</li>
<li>Build a project that solves a real problem for you</li>
</ol>
<p><strong>Ready to Level Up Your Python Skills?</strong> Start your next web scraping project today, and remember - every expert was once a beginner. You’ve got this! 🚀</p>
<hr>
<p><em>Have questions about web scraping or want to share your first scraping success story? Drop a comment below - I’d love to hear about your journey and help with any challenges you encounter along the way!</em></p>
<hr>
<p>Happy Coding! 🚀</p>
<section id="webscraping-in-python" class="level2">
<h2 class="anchored" data-anchor-id="webscraping-in-python"><img src="https://www.spsanderson.com/steveondata/posts/2025-09-03/todays_post.png" class="img-fluid" alt="Webscraping in Python"></h2>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/<span class="citation" data-cites="stevensanderson">@stevensanderson</span></a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/<span class="citation" data-cites="spsanderson">@spsanderson</span></a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: <em>Extending Excel with Python and R</em> here</em>: <a href="https://packt.link/oTyZJ">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>python</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-03/</guid>
  <pubDate>Wed, 03 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Reset Row Numbers of Data Frame in R: Complete Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-09-01/</link>
  <description><![CDATA[ 






<section id="primary-methods-for-resetting-row-numbers" class="level1">
<h1>Primary Methods for Resetting Row Numbers</h1>
<section id="setting-row-names-to-null-recommended" class="level2">
<h2 class="anchored" data-anchor-id="setting-row-names-to-null-recommended">1. Setting Row Names to NULL (Recommended)</h2>
<p>The <strong>most straightforward and widely recommended</strong> method is setting row names to <code>NULL</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic syntax</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span></code></pre></div>
<p>This approach removes any custom row names and resets them to the default sequence (1, 2, 3, …) . After execution, your data frame will have continuous sequential row numbers starting from 1.</p>
<p><strong>Example:</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data with non-sequential row names</span></span>
<span id="cb2-2">iris_subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">77</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), ]</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(iris_subset))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "77" "1" "55" "20" "6" "10"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "77" "1"  "55" "20" "6"  "10"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset row numbers</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(iris_subset) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(iris_subset))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4" "5" "6"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4" "5" "6"</code></pre>
</div>
</div>
</section>
<section id="assigning-new-sequential-numbers" class="level2">
<h2 class="anchored" data-anchor-id="assigning-new-sequential-numbers">2. Assigning New Sequential Numbers</h2>
<p>You can explicitly assign a new sequence of numbers to row names:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2A: Using seq_len()</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df))</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Method 2B: Using range notation</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)</span></code></pre></div>
<p>This method ensures row names are numeric and sequential, particularly useful after subsetting or reordering operations .</p>
</section>
<section id="using-tidyverse-approaches" class="level2">
<h2 class="anchored" data-anchor-id="using-tidyverse-approaches">3. Using Tidyverse Approaches</h2>
<p>While base R methods are most common, tidyverse users have alternative options:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a sequential ID column</span></span>
<span id="cb7-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>())</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to tibble (removes row names by default)</span></span>
<span id="cb7-7">df_tibble <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(df)</span></code></pre></div>
<hr>
</section>
</section>
<section id="common-use-cases-and-scenarios" class="level1">
<h1>Common Use Cases and Scenarios</h1>
<section id="after-filtering-or-subsetting-data" class="level2">
<h2 class="anchored" data-anchor-id="after-filtering-or-subsetting-data">After Filtering or Subsetting Data</h2>
<p><strong>Most frequent scenario:</strong> When rows are filtered, original row numbers are retained, creating non-sequential indices .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original data</span></span>
<span id="cb8-2">original_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb8-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"David"</span>),</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>),</span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb8-6">)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter data (creates gaps in row numbers)</span></span>
<span id="cb8-9">filtered_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> original_df[original_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, ]</span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset row numbers for clean indexing</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3"</code></pre>
</div>
</div>
</section>
<section id="after-removing-duplicates" class="level2">
<h2 class="anchored" data-anchor-id="after-removing-duplicates">After Removing Duplicates</h2>
<p>Duplicate removal often leaves non-sequential row numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data with duplicates</span></span>
<span id="cb12-2">data_with_dups <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb12-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ID =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb12-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>)</span>
<span id="cb12-5">)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove duplicates</span></span>
<span id="cb12-8">unique_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(data_with_dups)</span>
<span id="cb12-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(unique_data))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-sequential: "1" "2" "4" "7"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "4" "5" "7"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset for clean presentation</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(unique_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb14-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(unique_data))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sequential: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4" "5"</code></pre>
</div>
</div>
</section>
<section id="after-sorting-or-reordering" class="level2">
<h2 class="anchored" data-anchor-id="after-sorting-or-reordering">After Sorting or Reordering</h2>
<p>Sorting doesn’t automatically update row numbers :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Student data</span></span>
<span id="cb16-2">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Carol"</span>),</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">GPA =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.9</span>)</span>
<span id="cb16-5">)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort by GPA (descending)</span></span>
<span id="cb16-8">students_sorted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> students[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(students<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>GPA, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), ]</span>
<span id="cb16-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(students_sorted))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows original row numbers: "4" "2" "3" "1"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "4" "2" "3" "1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset to reflect new order</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(students_sorted) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(students_sorted))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="advanced-techniques-and-considerations" class="level1">
<h1>Advanced Techniques and Considerations</h1>
<section id="handling-large-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="handling-large-data-frames">Handling Large Data Frames</h2>
<p>For <strong>large datasets</strong>, the performance differences between methods are minimal:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 21%">
<col style="width: 37%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th>Method</th>
<th>Average Time</th>
<th>Best Use Case</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>rownames(df) &lt;- NULL</code></td>
<td>Fastest</td>
<td>General purpose</td>
</tr>
<tr class="even">
<td><code>rownames(df) &lt;- 1:nrow(df)</code></td>
<td>Slightly slower</td>
<td>When explicit numbering needed</td>
</tr>
<tr class="odd">
<td><code>df %&gt;% mutate(row_id = row_number())</code></td>
<td>Moderate</td>
<td>When keeping original structure</td>
</tr>
</tbody>
</table>
</section>
<section id="data-integrity-considerations" class="level2">
<h2 class="anchored" data-anchor-id="data-integrity-considerations">Data Integrity Considerations</h2>
<blockquote class="blockquote">
<p><strong>Important:</strong> Resetting row names can obscure original data structure. Consider keeping original identifiers as separate columns when traceability is important .</p>
</blockquote>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preserve original row information</span></span>
<span id="cb20-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>original_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df)</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="potential-issues-and-edge-cases" class="level1">
<h1>Potential Issues and Edge Cases</h1>
<section id="confusion-between-row-names-vs.-row-numbers" class="level2">
<h2 class="anchored" data-anchor-id="confusion-between-row-names-vs.-row-numbers">1. Confusion Between Row Names vs.&nbsp;Row Numbers</h2>
<p><strong>Critical distinction:</strong> Row names are labels, while row numbers indicate position .</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After subsetting</span></span>
<span id="cb21-2">subset_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> original_df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), ]</span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(subset_df))     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row names: "1" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(subset_df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ])          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accesses second row (originally row 4)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Score
4 David    88</code></pre>
</div>
</div>
</section>
<section id="non-unique-row-names-error" class="level2">
<h2 class="anchored" data-anchor-id="non-unique-row-names-error">2. Non-Unique Row Names Error</h2>
<p>Attempting to assign duplicate values as row names fails:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will cause an error</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error: duplicate 'row.names' are not allowed</span></span></code></pre></div>
</section>
<section id="na-values-in-row-names" class="level2">
<h2 class="anchored" data-anchor-id="na-values-in-row-names">3. NA Values in Row Names</h2>
<p>Row names cannot be NA or missing:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will cause an error</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error: missing values not allowed</span></span></code></pre></div>
<hr>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p><strong>Practice Exercise:</strong> Create a data frame, filter it to create non-sequential row numbers, then reset them using different methods.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create sample data</span></span>
<span id="cb27-2">practice_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb27-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>),</span>
<span id="cb27-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),</span>
<span id="cb27-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>)</span>
<span id="cb27-6">)</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Filter for specific categories (creates gaps)</span></span>
<span id="cb27-9">filtered_practice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[practice_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Category <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>), ]</span>
<span id="cb27-10"></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Try different reset methods and compare results</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here...</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create sample data</span></span>
<span id="cb28-2">practice_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb28-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"D"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>),</span>
<span id="cb28-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),</span>
<span id="cb28-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>)</span>
<span id="cb28-6">)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Filter for specific categories</span></span>
<span id="cb28-9">filtered_practice <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> practice_df[practice_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Category <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z"</span>), ]</span>
<span id="cb28-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original row names after filtering:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Original row names after filtering:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(filtered_practice))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "3" "4" "6"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "3" "4" "6"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Method 1 - Set to NULL</span></span>
<span id="cb32-2">method1_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_practice</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method1_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb32-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method 1 result:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Method 1 result:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method1_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 4: Method 2 - Explicit sequence</span></span>
<span id="cb36-2">method2_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_practice  </span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method2_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(method2_df)</span>
<span id="cb36-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method 2 result:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Method 2 result:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method2_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 5: Method 3 - Using dplyr</span></span>
<span id="cb40-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">method3_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> filtered_practice <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb44-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb44-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>new_id)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the helper column</span></span>
<span id="cb44-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method3_df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb44-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method 3 result:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Method 3 result:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(method3_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows: "1" "2" "3" "4"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
</div>
</details>
<hr>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<p>• <strong>Primary Method:</strong> Use <code>rownames(df) &lt;- NULL</code> for most scenarios - it’s simple, fast, and reliable</p>
<p>• <strong>Common Use Cases:</strong> Essential after filtering, removing duplicates, sorting, or sampling data</p>
<p>• <strong>Performance:</strong> All methods perform similarly; choose based on functional requirements rather than speed</p>
<p>• <strong>Data Integrity:</strong> Consider preserving original row identifiers as separate columns when traceability matters</p>
<p>• <strong>Error Prevention:</strong> Ensure row names are unique and non-missing to avoid common pitfalls</p>
<p>• <strong>Best Practice:</strong> Reset row numbers as part of data cleaning workflows for cleaner presentation and export</p>
<hr>
</section>
<section id="method-comparison-table" class="level1">
<h1>Method Comparison Table</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 38%">
<col style="width: 28%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th>Scenario</th>
<th>Recommended Method</th>
<th>Code Example</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>General reset</td>
<td><code>rownames(df) &lt;- NULL</code></td>
<td><code>rownames(filtered_df) &lt;- NULL</code></td>
<td>Fastest, most common</td>
</tr>
<tr class="even">
<td>Explicit numbering</td>
<td><code>rownames(df) &lt;- 1:nrow(df)</code></td>
<td><code>rownames(sorted_df) &lt;- 1:nrow(sorted_df)</code></td>
<td>When specific sequence needed</td>
</tr>
<tr class="odd">
<td>Tidyverse workflow</td>
<td><code>as_tibble()</code> or <code>mutate()</code></td>
<td><code>df %&gt;% as_tibble()</code></td>
<td>Integrates with dplyr pipelines</td>
</tr>
<tr class="even">
<td>Preserve original</td>
<td>Keep as column</td>
<td><code>df$orig_row &lt;- rownames(df)</code></td>
<td>When traceability required</td>
</tr>
</tbody>
</table>
<hr>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Resetting row numbers in R data frames is a fundamental skill for effective data manipulation and presentation. The <code>rownames(df) &lt;- NULL</code> method provides the most straightforward solution for most use cases, ensuring clean sequential indexing essential for professional data analysis workflows.</p>
<p>Whether you’re filtering datasets, removing duplicates, or preparing data for export, understanding these techniques ensures your data frames maintain proper structure and readability. The choice between methods should be driven by your specific requirements rather than performance considerations, as the differences are minimal in practical applications.</p>
<p><strong>Ready to implement these techniques in your next R project? Start with the basic <code>rownames(df) &lt;- NULL</code> method and expand to more specialized approaches as your needs develop.</strong></p>
<hr>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: When should I reset row numbers in my data frame?</strong> Reset row numbers after filtering, subsetting, removing duplicates, sorting, or any operation that creates gaps in the row sequence. This ensures clean, sequential indexing.</p>
<p><strong>Q2: What’s the difference between <code>rownames(df) &lt;- NULL</code> and <code>rownames(df) &lt;- 1:nrow(df)</code>?</strong> Both create sequential row numbers, but <code>NULL</code> is faster and more commonly used. The explicit sequence method gives you more control over the exact values assigned.</p>
<p><strong>Q3: Will resetting row numbers affect my data frame’s content?</strong> No, resetting row numbers only changes the row labels/names, not the actual data content. Your data remains unchanged.</p>
<p><strong>Q4: Can I reset row numbers in tibbles?</strong> Tibbles don’t use row names by default. If you need sequential IDs, add them as a regular column using <code>mutate(id = row_number())</code>.</p>
<p><strong>Q5: What happens if I try to set duplicate row names?</strong> R will throw an error: “duplicate ‘row.names’ are not allowed.” Row names must be unique across the entire data frame.</p>
<hr>
<p><em>Found this guide helpful? Share your experience with row number resetting in the comments below, and don’t forget to share this article with fellow R users who might benefit from these techniques!</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><strong>Stack Overflow Community</strong>. (2023). <a href="https://stackoverflow.com/questions/5208679/how-to-reset-row-names"><em>How to reset row names?</em></a>. Stack Overflow. Retrieved August 28, 2025.</p></li>
<li><p><strong>Wickham, H., François, R., Henry, L., &amp; Müller, K.</strong> (2023). <a href="https://dplyr.tidyverse.org/articles/rowwise.html"><em>Row-wise operations</em></a>. dplyr: A Grammar of Data Manipulation Documentation. Posit PBC.</p></li>
<li><p><strong>Müller, K. &amp; Wickham, H.</strong> (2023). <a href="https://tibble.tidyverse.org/reference/rownames.html"><em>Tools for working with row names — rownames</em></a>. tibble: Simple Data Frames Documentation. Posit PBC.</p></li>
<li><p><strong>R-bloggers Community</strong>. (2020). <a href="https://www.r-bloggers.com/2020/08/data-manipulation-in-r-using-data-frames-an-extensive-article-of-basics/"><em>Data manipulation in R using data frames – an extensive article of basics</em></a>. R-bloggers.</p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-09-01/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Rownumbers in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-09-01/</guid>
  <pubDate>Mon, 01 Sep 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Revolutionary RandomWalker Update: 23 New Functions Transform Stochastic Modeling in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-08-19/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Key Update:</strong> RandomWalker version 0.3.0 introduces 21 new distribution-based random walk generators plus 2 enhanced utility functions, expanding from basic normal distributions to comprehensive stochastic modeling across discrete, continuous, and statistical test distributions.</p>
</blockquote>
<p>The RandomWalker package has undergone a revolutionary transformation, evolving from a basic random walk generator to a comprehensive stochastic modeling toolkit. This update represents the most significant expansion in the package’s history, introducing <strong>21 new random walk generator functions</strong> and <strong>2 enhanced utility functions</strong> that will fundamentally change how R programmers approach random walk simulations.</p>
<section id="complete-function-arsenal-from-basic-to-advanced" class="level1">
<h1><strong>Complete Function Arsenal: From Basic to Advanced</strong></h1>
<p>The new RandomWalker update delivers an unprecedented collection of functions covering every major category of statistical distributions.</p>
<section id="continuous-distribution-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="continuous-distribution-random-walks"><strong>Continuous Distribution Random Walks</strong></h2>
<p>The package now supports nine sophisticated continuous distribution functions, each optimized for specific modeling scenarios:</p>
<ul>
<li><strong><code>random_uniform_walk()</code></strong>: Perfect for Monte Carlo simulations requiring flat probability distributions</li>
<li><strong><code>random_weibull_walk()</code></strong>: Essential for reliability engineering and survival analysis applications</li>
<li><strong><code>random_t_walk()</code></strong>: Ideal for heavy-tailed financial processes and robust statistical modeling</li>
<li><strong><code>random_logistic_walk()</code></strong>: Designed for growth modeling and S-curve phenomena</li>
<li><strong><code>random_lognormal_walk()</code></strong>: Critical for asset pricing and multiplicative processes</li>
<li><strong><code>random_gamma_walk()</code></strong>: Optimized for waiting times and shape-scale modeling scenarios</li>
<li><strong><code>random_exponential_walk()</code></strong>: Built for Poisson process intervals and decay modeling</li>
<li><strong><code>random_beta_walk()</code></strong>: Perfect for bounded probability processes and proportion modeling</li>
<li><strong><code>random_cauchy_walk()</code></strong>: Specialized for extreme value theory and heavy-tailed phenomena</li>
</ul>
<div class="cell" data-warnng="false">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RandomWalker)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Continuous Walks</span></span>
<span id="cb1-5">ns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb1-8">rw_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brownian_motion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brownian Motion"</span>),</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geometric_brownian_motion</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Geometric Brownian Motion"</span>),</span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_beta_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beta"</span>),</span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_cauchy_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cauchy"</span>),</span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_chisquared_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chisquared"</span>),</span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_exponential_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exponential"</span>),</span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_f_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F Distribution"</span>),</span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_gamma_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamma"</span>),</span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_logistic_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Logisitic"</span>),</span>
<span id="cb1-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_lognormal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Log-Normal"</span>),</span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_drift_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Normal Drift"</span>),</span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Normal"</span>),</span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_t_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-34">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T Distribution"</span>),</span>
<span id="cb1-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_uniform_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-36">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Uniform"</span>),</span>
<span id="cb1-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_weibull_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Weibull"</span>)</span>
<span id="cb1-39">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(step_number, x, y, walk_type)</span>
<span id="cb1-41"></span>
<span id="cb1-42">rw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> walk_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb1-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> rw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-48">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-49">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb1-50">        step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(step_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb1-51">          step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(step_number)</span>
<span id="cb1-52">      ),</span>
<span id="cb1-53">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number),</span>
<span id="cb1-54">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-55">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-58">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb1-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Walks for Continuous Distributions"</span>,</span>
<span id="cb1-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb1-61">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Simulations: "</span>, ns, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" - "</span>,</span>
<span id="cb1-62">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Steps: "</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb1-63">    ),</span>
<span id="cb1-64">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Value"</span>,</span>
<span id="cb1-65">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Value"</span></span>
<span id="cb1-66">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb1-68">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb1-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-71">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb1-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb1-73">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/continuous_random_walks-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="discrete-distribution-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="discrete-distribution-random-walks"><strong>Discrete Distribution Random Walks</strong></h2>
<p>Six new discrete distribution functions enable precise modeling of count processes and success-based scenarios:</p>
<ul>
<li><strong><code>random_poisson_walk()</code></strong>: Event counting and arrival processes</li>
<li><strong><code>random_binomial_walk()</code></strong>: Fixed trials with success/failure modeling</li>
<li><strong><code>random_negbinomial_walk()</code></strong>: Over-dispersed counts and waiting for multiple successes</li>
<li><strong><code>random_geometric_walk()</code></strong>: First success timing with memoryless properties</li>
<li><strong><code>random_hypergeometric_walk()</code></strong>: Sampling without replacement from finite populations</li>
<li><strong><code>random_multinomial_walk()</code></strong>: Multi-category outcomes for complex probability spaces</li>
</ul>
</section>
<section id="statistical-test-based-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="statistical-test-based-random-walks"><strong>Statistical Test-Based Random Walks</strong></h2>
<p>Four specialized functions bring nonparametric testing capabilities to random walk modeling:</p>
<ul>
<li><strong><code>random_wilcox_walk()</code></strong>: Wilcoxon signed-rank applications for nonparametric analysis</li>
<li><strong><code>random_wilcoxon_sr_walk()</code></strong>: Enhanced Wilcoxon with step specification functionality</li>
<li><strong><code>random_smirnov_walk()</code></strong>: Distribution comparison and goodness-of-fit testing</li>
<li><strong><code>random_f_walk()</code></strong>: Variance ratio testing and ANOVA applications</li>
<li><strong><code>random_chisquared_walk()</code></strong>: Goodness-of-fit and variance testing scenarios</li>
</ul>
</section>
<section id="specialized-functions" class="level2">
<h2 class="anchored" data-anchor-id="specialized-functions"><strong>Specialized Functions</strong></h2>
<p>The update includes a powerful custom modeling function:</p>
<ul>
<li><strong><code>random_displacement_walk()</code></strong>: User-defined step distributions enabling unlimited flexibility for custom modeling scenarios.</li>
</ul>
<div class="cell" data-warnng="false">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Discrete Walks</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb2-3">dw_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discrete_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Discrete"</span>),</span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_binomial_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Binomial"</span>),</span>
<span id="cb2-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_displacement_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Displacement"</span>),</span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_geometric_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Geometric"</span>),</span>
<span id="cb2-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_hypergeometric_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hypergeometric"</span>),</span>
<span id="cb2-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_multinomial_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Multinomial"</span>),</span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_negbinomial_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb2-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative Binomial"</span>),</span>
<span id="cb2-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_poisson_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-20">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poisson"</span>),</span>
<span id="cb2-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_smirnov_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sizes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smirnov"</span>),</span>
<span id="cb2-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_wilcoxon_sr_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wilcoxon Signed Rank"</span>),</span>
<span id="cb2-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_wilcox_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> ns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-27">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">walk_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Wilcox"</span>)</span>
<span id="cb2-28">  )</span>
<span id="cb2-29"></span>
<span id="cb2-30">dw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> walk_type, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-33">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb2-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dw_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-36">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_type) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb2-37">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(</span>
<span id="cb2-38">        step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(step_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-39">          step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(step_number)</span>
<span id="cb2-40">      ),</span>
<span id="cb2-41">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number),</span>
<span id="cb2-42">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-43">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-46">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb2-47">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Walks for Discrete Distributions"</span>,</span>
<span id="cb2-48">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb2-49">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Simulations: "</span>, ns, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" - "</span>,</span>
<span id="cb2-50">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of Steps: "</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb2-51">    ),</span>
<span id="cb2-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Value"</span>,</span>
<span id="cb2-53">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Value"</span></span>
<span id="cb2-54">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb2-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb2-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb2-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb2-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb2-61">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/discrete_random_walks-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="enhanced-utility-functions-powerful-new-capabilities" class="level1">
<h1><strong>Enhanced Utility Functions: Powerful New Capabilities</strong></h1>
<p>Two critical utility functions received major enhancements that dramatically expand their functionality:</p>
<section id="advanced-subsetting-with-subset_walks" class="level2">
<h2 class="anchored" data-anchor-id="advanced-subsetting-with-subset_walks"><strong>Advanced Subsetting with <code>subset_walks()</code></strong></h2>
<p>The updated <code>subset_walks()</code> function introduces the <code>.value</code> parameter, allowing users to subset random walks based on any column, not just the default “y” position :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb3-2">walks <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rw30</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="girafe html-widget html-fill-item" id="htmlwidget-75c802b17b45502efefe" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-75c802b17b45502efefe">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f' viewBox='0 0 504 360'>\n <defs id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_defs'>\n  <clipPath id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c1'>\n   <rect x='0' y='0' width='504' height='360'/>\n  <\/clipPath>\n  <clipPath id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c2'>\n   <rect x='30.17' y='66.51' width='458.39' height='248.36'/>\n  <\/clipPath>\n  <clipPath id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c3'>\n   <rect x='5.48' y='38.85' width='493.04' height='302.04'/>\n  <\/clipPath>\n <\/defs>\n <g id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_rootg' class='ggiraph-svg-rootg'>\n  <g clip-path='url(#svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c1)'>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='round'/>\n  <\/g>\n  <g clip-path='url(#svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c2)'>\n   <polyline points='30.17,273.74 488.56,273.74' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,214.06 488.56,214.06' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,154.37 488.56,154.37' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,94.69 488.56,94.69' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='99.41,314.87 99.41,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='204.64,314.87 204.64,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='309.87,314.87 309.87,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='415.11,314.87 415.11,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,303.58 488.56,303.58' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,243.90 488.56,243.90' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,184.22 488.56,184.22' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='30.17,124.53 488.56,124.53' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='46.79,314.87 46.79,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='152.02,314.87 152.02,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='257.26,314.87 257.26,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='362.49,314.87 362.49,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='467.72,314.87 467.72,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e1' points='51.00,303.58 55.21,294.87 59.42,301.88 63.63,301.87 67.84,275.44 72.05,263.87 76.26,254.70 80.47,267.93 84.68,277.31 88.89,250.05 93.09,263.10 97.30,260.54 101.51,249.89 105.72,237.72 109.93,224.72 114.14,226.67 118.35,236.47 122.56,240.14 126.77,250.91 130.98,243.42 135.19,230.05 139.40,204.66 143.61,200.29 147.82,210.73 152.02,198.50 156.23,187.70 160.44,190.54 164.65,209.14 168.86,200.05 173.07,186.57 177.28,190.10 181.49,183.69 185.70,186.99 189.91,178.84 194.12,180.24 198.33,184.36 202.54,183.02 206.75,186.41 210.95,193.46 215.16,197.23 219.37,197.33 223.58,194.85 227.79,176.56 232.00,192.77 236.21,195.16 240.42,187.62 244.63,166.58 248.84,161.50 253.05,161.66 257.26,165.33 261.47,160.39 265.68,148.58 269.88,150.78 274.09,148.82 278.30,146.23 282.51,137.53 286.72,124.26 290.93,120.93 295.14,121.84 299.35,105.19 303.56,103.23 307.77,84.39 311.98,85.13 316.19,77.80 320.40,96.26 324.61,97.60 328.82,97.86 333.02,106.91 337.23,119.28 341.44,107.96 345.65,97.05 349.86,112.55 354.07,107.48 358.28,120.76 362.49,133.31 366.70,127.04 370.91,135.23 375.12,123.37 379.33,122.91 383.54,116.51 387.75,122.76 391.95,136.50 396.16,125.58 400.37,122.74 404.58,125.59 408.79,124.77 413.00,108.94 417.21,117.27 421.42,126.22 425.63,133.62 429.84,152.54 434.05,142.75 438.26,140.46 442.47,137.98 446.68,138.50 450.88,144.59 455.09,154.42 459.30,144.25 463.51,161.27 467.72,156.02' fill='none' stroke='#F8766D' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e2' cx='51' cy='303.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e3' cx='55.21' cy='294.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 2 | y: 0.73'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e4' cx='59.42' cy='301.88' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 3 | y: 0.143'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e5' cx='63.63' cy='301.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 4 | y: 0.143'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e6' cx='67.84' cy='275.44' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 5 | y: 2.358'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e7' cx='72.05' cy='263.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 6 | y: 3.327'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e8' cx='76.26' cy='254.7' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 7 | y: 4.095'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e9' cx='80.47' cy='267.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 8 | y: 2.987'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e10' cx='84.68' cy='277.31' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 9 | y: 2.201'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e11' cx='88.89' cy='250.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 10 | y: 4.485'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e12' cx='93.09' cy='263.1' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 11 | y: 3.392'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e13' cx='97.3' cy='260.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 12 | y: 3.606'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e14' cx='101.51' cy='249.89' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 13 | y: 4.499'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e15' cx='105.72' cy='237.72' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 14 | y: 5.517'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e16' cx='109.93' cy='224.72' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 15 | y: 6.606'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e17' cx='114.14' cy='226.67' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 16 | y: 6.443'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e18' cx='118.35' cy='236.47' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 17 | y: 5.622'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e19' cx='122.56' cy='240.14' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 18 | y: 5.315'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e20' cx='126.77' cy='250.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 19 | y: 4.413'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e21' cx='130.98' cy='243.42' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 20 | y: 5.04'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e22' cx='135.19' cy='230.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 21 | y: 6.16'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e23' cx='139.4' cy='204.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 22 | y: 8.288'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e24' cx='143.61' cy='200.29' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 23 | y: 8.654'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e25' cx='147.82' cy='210.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 24 | y: 7.779'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e26' cx='152.02' cy='198.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 25 | y: 8.803'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e27' cx='156.23' cy='187.7' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 26 | y: 9.708'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e28' cx='160.44' cy='190.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 27 | y: 9.47'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e29' cx='164.65' cy='209.14' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 28 | y: 7.912'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e30' cx='168.86' cy='200.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 29 | y: 8.673'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e31' cx='173.07' cy='186.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 30 | y: 9.803'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e32' cx='177.28' cy='190.1' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 31 | y: 9.507'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e33' cx='181.49' cy='183.69' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 32 | y: 10.044'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e34' cx='185.7' cy='186.99' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 33 | y: 9.768'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e35' cx='189.91' cy='178.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 34 | y: 10.45'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e36' cx='194.12' cy='180.24' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 35 | y: 10.333'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e37' cx='198.33' cy='184.36' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 36 | y: 9.988'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e38' cx='202.54' cy='183.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 37 | y: 10.1'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e39' cx='206.75' cy='186.41' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 38 | y: 9.816'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e40' cx='210.95' cy='193.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 39 | y: 9.225'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e41' cx='215.16' cy='197.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 40 | y: 8.909'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e42' cx='219.37' cy='197.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 41 | y: 8.901'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e43' cx='223.58' cy='194.85' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 42 | y: 9.109'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e44' cx='227.79' cy='176.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 43 | y: 10.641'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e45' cx='232' cy='192.77' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 44 | y: 9.283'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e46' cx='236.21' cy='195.16' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 45 | y: 9.084'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e47' cx='240.42' cy='187.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 46 | y: 9.715'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e48' cx='244.63' cy='166.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 47 | y: 11.477'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e49' cx='248.84' cy='161.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 48 | y: 11.903'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e50' cx='253.05' cy='161.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 49 | y: 11.889'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e51' cx='257.26' cy='165.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 50 | y: 11.582'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e52' cx='261.47' cy='160.39' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 51 | y: 11.996'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e53' cx='265.68' cy='148.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 52 | y: 12.985'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e54' cx='269.88' cy='150.78' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 53 | y: 12.801'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e55' cx='274.09' cy='148.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 54 | y: 12.965'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e56' cx='278.3' cy='146.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 55 | y: 13.182'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e57' cx='282.51' cy='137.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 56 | y: 13.911'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e58' cx='286.72' cy='124.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 57 | y: 15.023'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e59' cx='290.93' cy='120.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 58 | y: 15.302'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e60' cx='295.14' cy='121.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 59 | y: 15.226'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e61' cx='299.35' cy='105.19' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 60 | y: 16.62'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e62' cx='303.56' cy='103.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 61 | y: 16.785'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e63' cx='307.77' cy='84.39' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 62 | y: 18.363'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e64' cx='311.98' cy='85.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 63 | y: 18.301'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e65' cx='316.19' cy='77.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 64 | y: 18.915'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e66' cx='320.4' cy='96.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 65 | y: 17.369'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e67' cx='324.61' cy='97.6' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 66 | y: 17.256'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e68' cx='328.82' cy='97.86' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 67 | y: 17.234'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e69' cx='333.02' cy='106.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 68 | y: 16.476'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e70' cx='337.23' cy='119.28' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 69 | y: 15.44'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e71' cx='341.44' cy='107.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 70 | y: 16.388'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e72' cx='345.65' cy='97.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 71 | y: 17.302'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e73' cx='349.86' cy='112.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 72 | y: 16.004'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e74' cx='354.07' cy='107.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 73 | y: 16.428'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e75' cx='358.28' cy='120.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 74 | y: 15.316'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e76' cx='362.49' cy='133.31' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 75 | y: 14.265'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e77' cx='366.7' cy='127.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 76 | y: 14.79'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e78' cx='370.91' cy='135.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 77 | y: 14.104'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e79' cx='375.12' cy='123.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 78 | y: 15.097'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e80' cx='379.33' cy='122.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 79 | y: 15.136'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e81' cx='383.54' cy='116.51' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 80 | y: 15.672'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e82' cx='387.75' cy='122.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 81 | y: 15.148'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e83' cx='391.95' cy='136.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 82 | y: 13.997'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e84' cx='396.16' cy='125.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 83 | y: 14.912'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e85' cx='400.37' cy='122.74' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 84 | y: 15.15'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e86' cx='404.58' cy='125.59' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 85 | y: 14.911'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e87' cx='408.79' cy='124.77' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 86 | y: 14.98'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e88' cx='413' cy='108.94' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 87 | y: 16.306'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e89' cx='417.21' cy='117.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 88 | y: 15.608'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e90' cx='421.42' cy='126.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 89 | y: 14.859'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e91' cx='425.63' cy='133.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 90 | y: 14.239'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e92' cx='429.84' cy='152.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 91 | y: 12.654'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e93' cx='434.05' cy='142.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 92 | y: 13.474'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e94' cx='438.26' cy='140.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 93 | y: 13.666'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e95' cx='442.47' cy='137.98' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 94 | y: 13.873'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e96' cx='446.68' cy='138.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 95 | y: 13.83'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e97' cx='450.88' cy='144.59' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 96 | y: 13.32'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e98' cx='455.09' cy='154.42' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 97 | y: 12.496'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e99' cx='459.3' cy='144.25' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 98 | y: 13.348'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e100' cx='463.51' cy='161.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 99 | y: 11.922'/>\n   <circle id='svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_e101' cx='467.72' cy='156.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 100 | y: 12.362'/>\n  <\/g>\n  <g clip-path='url(#svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f_c1)'>\n   <text x='20.34' y='306.73' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='20.34' y='247.05' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>5<\/text>\n   <text x='15.44' y='187.37' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>10<\/text>\n   <text x='15.44' y='127.68' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>15<\/text>\n   <text x='44.34' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='147.13' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>25<\/text>\n   <text x='252.36' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>50<\/text>\n   <text x='357.59' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>75<\/text>\n   <text x='460.38' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>100<\/text>\n   <text x='248.04' y='338.57' font-size='8.25pt' font-family='Arial'>Step<\/text>\n   <text x='30.17' y='58.26' font-size='9.9pt' font-family='Arial'>y<\/text>\n   <text x='330.01' y='352.67' font-size='6.6pt' font-family='Arial'>1 dimensions, 100 steps, mu = 0, sd = 1.<\/text>\n   <text x='15.44' y='31.05' font-size='8.25pt' font-family='Arial'>Function: rw30<\/text>\n   <text x='15.44' y='14.93' font-size='9.9pt' font-family='Arial'>30 Random Walks<\/text>\n  <\/g>\n <\/g>\n<\/svg>","js":null,"uid":"svg_d8bea0e9_a032_42c2_a8e1_7bbe705cc63f","ratio":1.4,"settings":{"tooltip":{"css":".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}","placement":"doc","opacity":0.7,"offx":200,"offy":5,"use_cursor_pos":false,"use_fill":false,"use_stroke":false,"delay_over":200,"delay_out":500},"hover":{"css":".hover_data_SVGID_ { stroke:black;stroke-width:2pt; }","reactive":false,"nearest_distance":null},"hover_inv":{"css":".hover_inv_SVGID_ { opacity:0.4; }"},"hover_key":{"css":".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\nimage.hover_key_SVGID_ { stroke:orange; }","reactive":true},"hover_theme":{"css":".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\nimage.hover_theme_SVGID_ { stroke:orange; }","reactive":true},"select":{"css":".select_data_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_data_SVGID_ { stroke:none;fill:red; }\ncircle.select_data_SVGID_ { fill:red;stroke:black; }\nline.select_data_SVGID_, polyline.select_data_SVGID_ { fill:none;stroke:red; }\nrect.select_data_SVGID_, polygon.select_data_SVGID_, path.select_data_SVGID_ { fill:red;stroke:none; }\nimage.select_data_SVGID_ { stroke:red; }","type":"multiple","only_shiny":true,"selected":[]},"select_inv":{"css":""},"select_key":{"css":".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_key_SVGID_ { stroke:none;fill:red; }\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\nimage.select_key_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"select_theme":{"css":".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\nimage.select_theme_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"zoom":{"min":1,"max":5,"duration":300},"toolbar":{"position":"topright","pngname":"diagram","tooltips":null,"fixed":false,"hidden":[],"delay_over":200,"delay_out":500},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="girafe html-widget html-fill-item" id="htmlwidget-6fc14a306ffce2a6ae61" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-6fc14a306ffce2a6ae61">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2' viewBox='0 0 504 360'>\n <defs id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_defs'>\n  <clipPath id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c1'>\n   <rect x='0' y='0' width='504' height='360'/>\n  <\/clipPath>\n  <clipPath id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c2'>\n   <rect x='33.1' y='66.51' width='455.46' height='248.36'/>\n  <\/clipPath>\n  <clipPath id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c3'>\n   <rect x='5.48' y='38.85' width='493.04' height='302.04'/>\n  <\/clipPath>\n <\/defs>\n <g id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_rootg' class='ggiraph-svg-rootg'>\n  <g clip-path='url(#svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c1)'>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='round'/>\n  <\/g>\n  <g clip-path='url(#svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c2)'>\n   <polyline points='33.10,278.11 488.56,278.11' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,233.60 488.56,233.60' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,189.08 488.56,189.08' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,144.57 488.56,144.57' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,100.06 488.56,100.06' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='101.90,314.87 101.90,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='206.46,314.87 206.46,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='311.02,314.87 311.02,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='415.58,314.87 415.58,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,300.37 488.56,300.37' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,255.85 488.56,255.85' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,211.34 488.56,211.34' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,166.83 488.56,166.83' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,122.31 488.56,122.31' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,77.80 488.56,77.80' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='49.62,314.87 49.62,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='154.18,314.87 154.18,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='258.74,314.87 258.74,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='363.30,314.87 363.30,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='467.86,314.87 467.86,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e1' points='53.80,77.80 57.98,84.81 62.16,95.93 66.35,105.52 70.53,103.30 74.71,104.36 78.89,107.04 83.08,127.70 87.26,139.49 91.44,140.66 95.62,148.48 99.81,155.57 103.99,146.23 108.17,144.66 112.35,153.96 116.53,158.13 120.72,160.66 124.90,166.72 129.08,175.30 133.26,175.76 137.45,169.17 141.63,167.15 145.81,168.93 149.99,165.48 154.18,158.41 158.36,159.66 162.54,155.60 166.72,165.80 170.91,168.02 175.09,171.76 179.27,170.02 183.45,166.84 187.64,167.94 191.82,174.76 196.00,183.04 200.18,180.56 204.36,168.48 208.55,175.49 212.73,178.91 216.91,175.97 221.09,180.91 225.28,179.83 229.46,180.25 233.64,187.16 237.82,179.76 242.01,172.22 246.19,163.11 250.37,151.82 254.55,156.33 258.74,160.46 262.92,158.13 267.10,152.53 271.28,155.55 275.47,159.32 279.65,164.82 283.83,151.63 288.01,173.96 292.19,175.45 296.38,175.11 300.56,184.54 304.74,181.11 308.92,198.62 313.11,190.12 317.29,204.93 321.47,224.54 325.65,231.34 329.84,229.89 334.02,235.69 338.20,240.67 342.38,237.71 346.57,247.13 350.75,247.90 354.93,243.46 359.11,228.92 363.30,224.65 367.48,209.38 371.66,205.35 375.84,205.38 380.02,225.47 384.21,236.37 388.39,239.21 392.57,232.87 396.75,235.74 400.94,230.90 405.12,240.37 409.30,242.81 413.48,240.88 417.67,244.08 421.85,243.07 426.03,249.05 430.21,245.71 434.40,246.43 438.58,246.85 442.76,264.20 446.94,270.20 451.13,283.46 455.31,297.76 459.49,302.15 463.67,303.58 467.86,301.06' fill='none' stroke='#F8766D' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e2' cx='53.8' cy='77.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e3' cx='57.98' cy='84.81' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 2 | y: -0.787'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e4' cx='62.16' cy='95.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 3 | y: -2.036'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e5' cx='66.35' cy='105.52' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 4 | y: -3.114'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e6' cx='70.53' cy='103.3' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 5 | y: -2.864'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e7' cx='74.71' cy='104.36' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 6 | y: -2.983'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e8' cx='78.89' cy='107.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 7 | y: -3.284'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e9' cx='83.08' cy='127.7' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 8 | y: -5.605'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e10' cx='87.26' cy='139.49' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 9 | y: -6.929'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e11' cx='91.44' cy='140.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 10 | y: -7.061'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e12' cx='95.62' cy='148.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 11 | y: -7.939'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e13' cx='99.81' cy='155.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 12 | y: -8.735'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e14' cx='103.99' cy='146.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 13 | y: -7.686'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e15' cx='108.17' cy='144.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 14 | y: -7.51'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e16' cx='112.35' cy='153.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 15 | y: -8.554'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e17' cx='116.53' cy='158.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 16 | y: -9.023'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e18' cx='120.72' cy='160.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 17 | y: -9.308'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e19' cx='124.9' cy='166.72' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 18 | y: -9.988'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e20' cx='129.08' cy='175.3' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 19 | y: -10.952'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e21' cx='133.26' cy='175.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 20 | y: -11.004'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e22' cx='137.45' cy='169.17' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 21 | y: -10.263'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e23' cx='141.63' cy='167.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 22 | y: -10.036'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e24' cx='145.81' cy='168.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 23 | y: -10.236'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e25' cx='149.99' cy='165.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 24 | y: -9.848'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e26' cx='154.18' cy='158.41' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 25 | y: -9.054'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e27' cx='158.36' cy='159.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 26 | y: -9.195'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e28' cx='162.54' cy='155.6' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 27 | y: -8.739'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e29' cx='166.72' cy='165.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 28 | y: -9.885'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e30' cx='170.91' cy='168.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 29 | y: -10.134'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e31' cx='175.09' cy='171.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 30 | y: -10.554'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e32' cx='179.27' cy='170.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 31 | y: -10.359'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e33' cx='183.45' cy='166.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 32 | y: -10.002'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e34' cx='187.64' cy='167.94' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 33 | y: -10.125'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e35' cx='191.82' cy='174.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 34 | y: -10.891'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e36' cx='196' cy='183.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 35 | y: -11.821'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e37' cx='200.18' cy='180.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 36 | y: -11.543'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e38' cx='204.36' cy='168.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 37 | y: -10.186'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e39' cx='208.55' cy='175.49' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 38 | y: -10.973'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e40' cx='212.73' cy='178.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 39 | y: -11.358'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e41' cx='216.91' cy='175.97' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 40 | y: -11.027'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e42' cx='221.09' cy='180.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 41 | y: -11.582'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e43' cx='225.28' cy='179.83' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 42 | y: -11.46'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e44' cx='229.46' cy='180.25' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 43 | y: -11.508'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e45' cx='233.64' cy='187.16' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 44 | y: -12.284'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e46' cx='237.82' cy='179.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 45 | y: -11.452'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e47' cx='242.01' cy='172.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 46 | y: -10.606'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e48' cx='246.19' cy='163.11' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 47 | y: -9.582'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e49' cx='250.37' cy='151.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 48 | y: -8.314'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e50' cx='254.55' cy='156.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 49 | y: -8.82'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e51' cx='258.74' cy='160.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 50 | y: -9.285'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e52' cx='262.92' cy='158.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 51 | y: -9.024'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e53' cx='267.1' cy='152.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 52 | y: -8.394'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e54' cx='271.28' cy='155.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 53 | y: -8.733'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e55' cx='275.47' cy='159.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 54 | y: -9.156'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e56' cx='279.65' cy='164.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 55 | y: -9.775'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e57' cx='283.83' cy='151.63' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 56 | y: -8.293'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e58' cx='288.01' cy='173.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 57 | y: -10.801'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e59' cx='292.19' cy='175.45' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 58 | y: -10.968'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e60' cx='296.38' cy='175.11' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 59 | y: -10.93'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e61' cx='300.56' cy='184.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 60 | y: -11.99'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e62' cx='304.74' cy='181.11' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 61 | y: -11.604'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e63' cx='308.92' cy='198.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 62 | y: -13.571'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e64' cx='313.11' cy='190.12' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 63 | y: -12.616'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e65' cx='317.29' cy='204.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 64 | y: -14.28'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e66' cx='321.47' cy='224.54' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 65 | y: -16.482'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e67' cx='325.65' cy='231.34' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 66 | y: -17.246'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e68' cx='329.84' cy='229.89' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 67 | y: -17.084'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e69' cx='334.02' cy='235.69' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 68 | y: -17.736'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e70' cx='338.2' cy='240.67' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 69 | y: -18.295'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e71' cx='342.38' cy='237.71' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 70 | y: -17.962'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e72' cx='346.57' cy='247.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 71 | y: -19.021'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e73' cx='350.75' cy='247.9' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 72 | y: -19.106'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e74' cx='354.93' cy='243.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 73 | y: -18.608'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e75' cx='359.11' cy='228.92' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 74 | y: -16.974'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e76' cx='363.3' cy='224.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 75 | y: -16.495'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e77' cx='367.48' cy='209.38' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 76 | y: -14.78'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e78' cx='371.66' cy='205.35' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 77 | y: -14.327'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e79' cx='375.84' cy='205.38' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 78 | y: -14.33'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e80' cx='380.02' cy='225.47' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 79 | y: -16.587'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e81' cx='384.21' cy='236.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 80 | y: -17.811'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e82' cx='388.39' cy='239.21' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 81 | y: -18.13'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e83' cx='392.57' cy='232.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 82 | y: -17.418'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e84' cx='396.75' cy='235.74' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 83 | y: -17.741'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e85' cx='400.94' cy='230.9' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 84 | y: -17.197'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e86' cx='405.12' cy='240.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 85 | y: -18.261'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e87' cx='409.3' cy='242.81' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 86 | y: -18.535'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e88' cx='413.48' cy='240.88' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 87 | y: -18.318'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e89' cx='417.67' cy='244.08' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 88 | y: -18.677'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e90' cx='421.85' cy='243.07' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 89 | y: -18.565'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e91' cx='426.03' cy='249.05' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 90 | y: -19.235'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e92' cx='430.21' cy='245.71' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 91 | y: -18.861'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e93' cx='434.4' cy='246.43' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 92 | y: -18.942'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e94' cx='438.58' cy='246.85' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 93 | y: -18.989'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e95' cx='442.76' cy='264.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 94 | y: -20.938'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e96' cx='446.94' cy='270.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 95 | y: -21.612'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e97' cx='451.13' cy='283.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 96 | y: -23.101'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e98' cx='455.31' cy='297.76' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 97 | y: -24.707'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e99' cx='459.49' cy='302.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 98 | y: -25.201'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e100' cx='463.67' cy='303.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 99 | y: -25.362'/>\n   <circle id='svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_e101' cx='467.86' cy='301.06' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 100 | y: -25.078'/>\n  <\/g>\n  <g clip-path='url(#svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2_c1)'>\n   <text x='15.44' y='303.52' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-25<\/text>\n   <text x='15.44' y='259' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-20<\/text>\n   <text x='15.44' y='214.49' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-15<\/text>\n   <text x='15.44' y='169.98' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-10<\/text>\n   <text x='20.34' y='125.46' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-5<\/text>\n   <text x='23.27' y='80.95' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='47.17' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='149.28' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>25<\/text>\n   <text x='253.84' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>50<\/text>\n   <text x='358.4' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>75<\/text>\n   <text x='460.51' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>100<\/text>\n   <text x='249.51' y='338.57' font-size='8.25pt' font-family='Arial'>Step<\/text>\n   <text x='33.1' y='58.26' font-size='9.9pt' font-family='Arial'>y<\/text>\n   <text x='330.01' y='352.67' font-size='6.6pt' font-family='Arial'>1 dimensions, 100 steps, mu = 0, sd = 1.<\/text>\n   <text x='15.44' y='31.05' font-size='8.25pt' font-family='Arial'>Function: rw30<\/text>\n   <text x='15.44' y='14.93' font-size='9.9pt' font-family='Arial'>30 Random Walks<\/text>\n  <\/g>\n <\/g>\n<\/svg>","js":null,"uid":"svg_0c9cd6e6_6174_486a_a605_21a5772e5ec2","ratio":1.4,"settings":{"tooltip":{"css":".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}","placement":"doc","opacity":0.7,"offx":200,"offy":5,"use_cursor_pos":false,"use_fill":false,"use_stroke":false,"delay_over":200,"delay_out":500},"hover":{"css":".hover_data_SVGID_ { stroke:black;stroke-width:2pt; }","reactive":false,"nearest_distance":null},"hover_inv":{"css":".hover_inv_SVGID_ { opacity:0.4; }"},"hover_key":{"css":".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\nimage.hover_key_SVGID_ { stroke:orange; }","reactive":true},"hover_theme":{"css":".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\nimage.hover_theme_SVGID_ { stroke:orange; }","reactive":true},"select":{"css":".select_data_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_data_SVGID_ { stroke:none;fill:red; }\ncircle.select_data_SVGID_ { fill:red;stroke:black; }\nline.select_data_SVGID_, polyline.select_data_SVGID_ { fill:none;stroke:red; }\nrect.select_data_SVGID_, polygon.select_data_SVGID_, path.select_data_SVGID_ { fill:red;stroke:none; }\nimage.select_data_SVGID_ { stroke:red; }","type":"multiple","only_shiny":true,"selected":[]},"select_inv":{"css":""},"select_key":{"css":".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_key_SVGID_ { stroke:none;fill:red; }\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\nimage.select_key_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"select_theme":{"css":".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\nimage.select_theme_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"zoom":{"min":1,"max":5,"duration":300},"toolbar":{"position":"topright","pngname":"diagram","tooltips":null,"fixed":false,"hidden":[],"delay_over":200,"delay_out":500},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset by custom criteria</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walks, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interactive =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="girafe html-widget html-fill-item" id="htmlwidget-ef21ebe1ba1bb7886db8" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-ef21ebe1ba1bb7886db8">{"x":{"html":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_13db3af7_5c79_452f_b102_263548f29962' viewBox='0 0 504 360'>\n <defs id='svg_13db3af7_5c79_452f_b102_263548f29962_defs'>\n  <clipPath id='svg_13db3af7_5c79_452f_b102_263548f29962_c1'>\n   <rect x='0' y='0' width='504' height='360'/>\n  <\/clipPath>\n  <clipPath id='svg_13db3af7_5c79_452f_b102_263548f29962_c2'>\n   <rect x='33.1' y='66.51' width='455.46' height='248.36'/>\n  <\/clipPath>\n  <clipPath id='svg_13db3af7_5c79_452f_b102_263548f29962_c3'>\n   <rect x='5.48' y='38.85' width='493.04' height='302.04'/>\n  <\/clipPath>\n <\/defs>\n <g id='svg_13db3af7_5c79_452f_b102_263548f29962_rootg' class='ggiraph-svg-rootg'>\n  <g clip-path='url(#svg_13db3af7_5c79_452f_b102_263548f29962_c1)'>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\n   <rect x='0' y='0' width='504' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='round'/>\n  <\/g>\n  <g clip-path='url(#svg_13db3af7_5c79_452f_b102_263548f29962_c2)'>\n   <polyline points='33.10,301.74 488.56,301.74' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,250.75 488.56,250.75' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,199.75 488.56,199.75' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,148.76 488.56,148.76' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,97.76 488.56,97.76' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='101.90,314.87 101.90,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='206.46,314.87 206.46,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='311.02,314.87 311.02,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='415.58,314.87 415.58,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,276.24 488.56,276.24' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,225.25 488.56,225.25' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,174.26 488.56,174.26' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,123.26 488.56,123.26' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='33.10,72.27 488.56,72.27' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='49.62,314.87 49.62,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='154.18,314.87 154.18,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='258.74,314.87 258.74,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='363.30,314.87 363.30,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline points='467.86,314.87 467.86,66.51' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\n   <polyline id='svg_13db3af7_5c79_452f_b102_263548f29962_e1' points='53.80,174.26 57.98,170.53 62.16,173.53 66.35,173.52 70.53,162.23 74.71,157.29 78.89,153.37 83.08,159.02 87.26,163.03 91.44,151.39 95.62,156.96 99.81,155.87 103.99,151.32 108.17,146.12 112.35,140.57 116.53,141.40 120.72,145.58 124.90,147.15 129.08,151.75 133.26,148.55 137.45,142.84 141.63,131.99 145.81,130.13 149.99,134.59 154.18,129.36 158.36,124.75 162.54,125.96 166.72,133.91 170.91,130.03 175.09,124.27 179.27,125.77 183.45,123.04 187.64,124.45 191.82,120.97 196.00,121.56 200.18,123.32 204.36,122.75 208.55,124.20 212.73,127.21 216.91,128.82 221.09,128.86 225.28,127.81 229.46,119.99 233.64,126.92 237.82,127.93 242.01,124.71 246.19,115.73 250.37,113.56 254.55,113.63 258.74,115.20 262.92,113.08 267.10,108.04 271.28,108.98 275.47,108.14 279.65,107.04 283.83,103.32 288.01,97.65 292.19,96.23 296.38,96.61 300.56,89.50 304.74,88.66 308.92,80.62 313.11,80.93 317.29,77.80 321.47,85.69 325.65,86.26 329.84,86.37 334.02,90.24 338.20,95.52 342.38,90.68 346.57,86.02 350.75,92.65 354.93,90.48 359.11,96.15 363.30,101.51 367.48,98.84 371.66,102.33 375.84,97.27 380.02,97.07 384.21,94.34 388.39,97.01 392.57,102.88 396.75,98.21 400.94,97.00 405.12,98.22 409.30,97.87 413.48,91.10 417.67,94.66 421.85,98.49 426.03,101.65 430.21,109.73 434.40,105.55 438.58,104.57 442.76,103.51 446.94,103.73 451.13,106.33 455.31,110.53 459.49,106.19 463.67,113.46 467.86,111.22' fill='none' stroke='#F8766D' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <polyline id='svg_13db3af7_5c79_452f_b102_263548f29962_e2' points='53.80,174.26 57.98,178.27 62.16,184.64 66.35,190.13 70.53,188.86 74.71,189.47 78.89,191.00 83.08,202.84 87.26,209.59 91.44,210.26 95.62,214.74 99.81,218.80 103.99,213.45 108.17,212.55 112.35,217.88 116.53,220.27 120.72,221.72 124.90,225.19 129.08,230.10 133.26,230.37 137.45,226.59 141.63,225.43 145.81,226.45 149.99,224.48 154.18,220.43 158.36,221.14 162.54,218.82 166.72,224.66 170.91,225.93 175.09,228.08 179.27,227.08 183.45,225.26 187.64,225.89 191.82,229.80 196.00,234.54 200.18,233.12 204.36,226.20 208.55,230.21 212.73,232.17 216.91,230.49 221.09,233.31 225.28,232.69 229.46,232.94 233.64,236.90 237.82,232.66 242.01,228.34 246.19,223.12 250.37,216.65 254.55,219.23 258.74,221.60 262.92,220.27 267.10,217.06 271.28,218.79 275.47,220.95 279.65,224.10 283.83,216.54 288.01,229.33 292.19,230.19 296.38,229.99 300.56,235.40 304.74,233.43 308.92,243.46 313.11,238.59 317.29,247.07 321.47,258.31 325.65,262.20 329.84,261.37 334.02,264.70 338.20,267.55 342.38,265.85 346.57,271.25 350.75,271.69 354.93,269.15 359.11,260.82 363.30,258.37 367.48,249.63 371.66,247.32 375.84,247.33 380.02,258.84 384.21,265.08 388.39,266.71 392.57,263.08 396.75,264.72 400.94,261.95 405.12,267.38 409.30,268.77 413.48,267.67 417.67,269.50 421.85,268.92 426.03,272.34 430.21,270.44 434.40,270.85 438.58,271.09 442.76,281.03 446.94,284.46 451.13,292.06 455.31,300.25 459.49,302.76 463.67,303.58 467.86,302.14' fill='none' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e3' cx='53.8' cy='174.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 1 | y: 0'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e4' cx='57.98' cy='170.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 2 | y: 0.73'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e5' cx='62.16' cy='173.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 3 | y: 0.143'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e6' cx='66.35' cy='173.52' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 4 | y: 0.143'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e7' cx='70.53' cy='162.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 5 | y: 2.358'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e8' cx='74.71' cy='157.29' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 6 | y: 3.327'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e9' cx='78.89' cy='153.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 7 | y: 4.095'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e10' cx='83.08' cy='159.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 8 | y: 2.987'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e11' cx='87.26' cy='163.03' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 9 | y: 2.201'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e12' cx='91.44' cy='151.39' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 10 | y: 4.485'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e13' cx='95.62' cy='156.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 11 | y: 3.392'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e14' cx='99.81' cy='155.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 12 | y: 3.606'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e15' cx='103.99' cy='151.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 13 | y: 4.499'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e16' cx='108.17' cy='146.12' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 14 | y: 5.517'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e17' cx='112.35' cy='140.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 15 | y: 6.606'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e18' cx='116.53' cy='141.4' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 16 | y: 6.443'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e19' cx='120.72' cy='145.58' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 17 | y: 5.622'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e20' cx='124.9' cy='147.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 18 | y: 5.315'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e21' cx='129.08' cy='151.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 19 | y: 4.413'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e22' cx='133.26' cy='148.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 20 | y: 5.04'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e23' cx='137.45' cy='142.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 21 | y: 6.16'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e24' cx='141.63' cy='131.99' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 22 | y: 8.288'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e25' cx='145.81' cy='130.13' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 23 | y: 8.654'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e26' cx='149.99' cy='134.59' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 24 | y: 7.779'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e27' cx='154.18' cy='129.36' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 25 | y: 8.803'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e28' cx='158.36' cy='124.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 26 | y: 9.708'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e29' cx='162.54' cy='125.96' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 27 | y: 9.47'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e30' cx='166.72' cy='133.91' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 28 | y: 7.912'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e31' cx='170.91' cy='130.03' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 29 | y: 8.673'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e32' cx='175.09' cy='124.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 30 | y: 9.803'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e33' cx='179.27' cy='125.77' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 31 | y: 9.507'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e34' cx='183.45' cy='123.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 32 | y: 10.044'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e35' cx='187.64' cy='124.45' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 33 | y: 9.768'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e36' cx='191.82' cy='120.97' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 34 | y: 10.45'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e37' cx='196' cy='121.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 35 | y: 10.333'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e38' cx='200.18' cy='123.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 36 | y: 9.988'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e39' cx='204.36' cy='122.75' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 37 | y: 10.1'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e40' cx='208.55' cy='124.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 38 | y: 9.816'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e41' cx='212.73' cy='127.21' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 39 | y: 9.225'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e42' cx='216.91' cy='128.82' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 40 | y: 8.909'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e43' cx='221.09' cy='128.86' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 41 | y: 8.901'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e44' cx='225.28' cy='127.81' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 42 | y: 9.109'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e45' cx='229.46' cy='119.99' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 43 | y: 10.641'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e46' cx='233.64' cy='126.92' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 44 | y: 9.283'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e47' cx='237.82' cy='127.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 45 | y: 9.084'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e48' cx='242.01' cy='124.71' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 46 | y: 9.715'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e49' cx='246.19' cy='115.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 47 | y: 11.477'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e50' cx='250.37' cy='113.56' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 48 | y: 11.903'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e51' cx='254.55' cy='113.63' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 49 | y: 11.889'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e52' cx='258.74' cy='115.2' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 50 | y: 11.582'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e53' cx='262.92' cy='113.08' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 51 | y: 11.996'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e54' cx='267.1' cy='108.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 52 | y: 12.985'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e55' cx='271.28' cy='108.98' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 53 | y: 12.801'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e56' cx='275.47' cy='108.14' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 54 | y: 12.965'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e57' cx='279.65' cy='107.04' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 55 | y: 13.182'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e58' cx='283.83' cy='103.32' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 56 | y: 13.911'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e59' cx='288.01' cy='97.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 57 | y: 15.023'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e60' cx='292.19' cy='96.23' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 58 | y: 15.302'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e61' cx='296.38' cy='96.61' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 59 | y: 15.226'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e62' cx='300.56' cy='89.5' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 60 | y: 16.62'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e63' cx='304.74' cy='88.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 61 | y: 16.785'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e64' cx='308.92' cy='80.62' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 62 | y: 18.363'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e65' cx='313.11' cy='80.93' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 63 | y: 18.301'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e66' cx='317.29' cy='77.8' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 64 | y: 18.915'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e67' cx='321.47' cy='85.69' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 65 | y: 17.369'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e68' cx='325.65' cy='86.26' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 66 | y: 17.256'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e69' cx='329.84' cy='86.37' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 67 | y: 17.234'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e70' cx='334.02' cy='90.24' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 68 | y: 16.476'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e71' cx='338.2' cy='95.52' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 69 | y: 15.44'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e72' cx='342.38' cy='90.68' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 70 | y: 16.388'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e73' cx='346.57' cy='86.02' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 71 | y: 17.302'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e74' cx='350.75' cy='92.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 72 | y: 16.004'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e75' cx='354.93' cy='90.48' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 73 | y: 16.428'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e76' cx='359.11' cy='96.15' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 74 | y: 15.316'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e77' cx='363.3' cy='101.51' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 75 | y: 14.265'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e78' cx='367.48' cy='98.84' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 76 | y: 14.79'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e79' cx='371.66' cy='102.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 77 | y: 14.104'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e80' cx='375.84' cy='97.27' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 78 | y: 15.097'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e81' cx='380.02' cy='97.07' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 79 | y: 15.136'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e82' cx='384.21' cy='94.34' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 80 | y: 15.672'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e83' cx='388.39' cy='97.01' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 81 | y: 15.148'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e84' cx='392.57' cy='102.88' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 82 | y: 13.997'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e85' cx='396.75' cy='98.21' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 83 | y: 14.912'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e86' cx='400.94' cy='97' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 84 | y: 15.15'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e87' cx='405.12' cy='98.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 85 | y: 14.911'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e88' cx='409.3' cy='97.87' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 86 | y: 14.98'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e89' cx='413.48' cy='91.1' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 87 | y: 16.306'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e90' cx='417.67' cy='94.66' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 88 | y: 15.608'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e91' cx='421.85' cy='98.49' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 89 | y: 14.859'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e92' cx='426.03' cy='101.65' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 90 | y: 14.239'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e93' cx='430.21' cy='109.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 91 | y: 12.654'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e94' cx='434.4' cy='105.55' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 92 | y: 13.474'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e95' cx='438.58' cy='104.57' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 93 | y: 13.666'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e96' cx='442.76' cy='103.51' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 94 | y: 13.873'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e97' cx='446.94' cy='103.73' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 95 | y: 13.83'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e98' cx='451.13' cy='106.33' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 96 | y: 13.32'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e99' cx='455.31' cy='110.53' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 97 | y: 12.496'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e100' cx='459.49' cy='106.19' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 98 | y: 13.348'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e101' cx='463.67' cy='113.46' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 99 | y: 11.922'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e102' cx='467.86' cy='111.22' r='0.35pt' fill='#F8766D' fill-opacity='0.7' stroke='#F8766D' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='16' title='Walk Number: 16 | Step: 100 | y: 12.362'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e103' cx='53.8' cy='174.26' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 1 | y: 0'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e104' cx='57.98' cy='178.27' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 2 | y: -0.787'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e105' cx='62.16' cy='184.64' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 3 | y: -2.036'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e106' cx='66.35' cy='190.13' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 4 | y: -3.114'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e107' cx='70.53' cy='188.86' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 5 | y: -2.864'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e108' cx='74.71' cy='189.47' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 6 | y: -2.983'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e109' cx='78.89' cy='191' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 7 | y: -3.284'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e110' cx='83.08' cy='202.84' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 8 | y: -5.605'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e111' cx='87.26' cy='209.59' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 9 | y: -6.929'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e112' cx='91.44' cy='210.26' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 10 | y: -7.061'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e113' cx='95.62' cy='214.74' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 11 | y: -7.939'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e114' cx='99.81' cy='218.8' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 12 | y: -8.735'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e115' cx='103.99' cy='213.45' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 13 | y: -7.686'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e116' cx='108.17' cy='212.55' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 14 | y: -7.51'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e117' cx='112.35' cy='217.88' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 15 | y: -8.554'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e118' cx='116.53' cy='220.27' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 16 | y: -9.023'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e119' cx='120.72' cy='221.72' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 17 | y: -9.308'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e120' cx='124.9' cy='225.19' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 18 | y: -9.988'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e121' cx='129.08' cy='230.1' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 19 | y: -10.952'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e122' cx='133.26' cy='230.37' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 20 | y: -11.004'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e123' cx='137.45' cy='226.59' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 21 | y: -10.263'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e124' cx='141.63' cy='225.43' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 22 | y: -10.036'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e125' cx='145.81' cy='226.45' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 23 | y: -10.236'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e126' cx='149.99' cy='224.48' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 24 | y: -9.848'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e127' cx='154.18' cy='220.43' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 25 | y: -9.054'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e128' cx='158.36' cy='221.14' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 26 | y: -9.195'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e129' cx='162.54' cy='218.82' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 27 | y: -8.739'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e130' cx='166.72' cy='224.66' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 28 | y: -9.885'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e131' cx='170.91' cy='225.93' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 29 | y: -10.134'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e132' cx='175.09' cy='228.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 30 | y: -10.554'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e133' cx='179.27' cy='227.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 31 | y: -10.359'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e134' cx='183.45' cy='225.26' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 32 | y: -10.002'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e135' cx='187.64' cy='225.89' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 33 | y: -10.125'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e136' cx='191.82' cy='229.8' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 34 | y: -10.891'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e137' cx='196' cy='234.54' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 35 | y: -11.821'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e138' cx='200.18' cy='233.12' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 36 | y: -11.543'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e139' cx='204.36' cy='226.2' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 37 | y: -10.186'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e140' cx='208.55' cy='230.21' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 38 | y: -10.973'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e141' cx='212.73' cy='232.17' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 39 | y: -11.358'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e142' cx='216.91' cy='230.49' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 40 | y: -11.027'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e143' cx='221.09' cy='233.31' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 41 | y: -11.582'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e144' cx='225.28' cy='232.69' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 42 | y: -11.46'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e145' cx='229.46' cy='232.94' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 43 | y: -11.508'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e146' cx='233.64' cy='236.9' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 44 | y: -12.284'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e147' cx='237.82' cy='232.66' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 45 | y: -11.452'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e148' cx='242.01' cy='228.34' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 46 | y: -10.606'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e149' cx='246.19' cy='223.12' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 47 | y: -9.582'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e150' cx='250.37' cy='216.65' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 48 | y: -8.314'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e151' cx='254.55' cy='219.23' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 49 | y: -8.82'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e152' cx='258.74' cy='221.6' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 50 | y: -9.285'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e153' cx='262.92' cy='220.27' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 51 | y: -9.024'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e154' cx='267.1' cy='217.06' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 52 | y: -8.394'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e155' cx='271.28' cy='218.79' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 53 | y: -8.733'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e156' cx='275.47' cy='220.95' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 54 | y: -9.156'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e157' cx='279.65' cy='224.1' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 55 | y: -9.775'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e158' cx='283.83' cy='216.54' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 56 | y: -8.293'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e159' cx='288.01' cy='229.33' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 57 | y: -10.801'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e160' cx='292.19' cy='230.19' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 58 | y: -10.968'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e161' cx='296.38' cy='229.99' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 59 | y: -10.93'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e162' cx='300.56' cy='235.4' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 60 | y: -11.99'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e163' cx='304.74' cy='233.43' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 61 | y: -11.604'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e164' cx='308.92' cy='243.46' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 62 | y: -13.571'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e165' cx='313.11' cy='238.59' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 63 | y: -12.616'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e166' cx='317.29' cy='247.07' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 64 | y: -14.28'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e167' cx='321.47' cy='258.31' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 65 | y: -16.482'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e168' cx='325.65' cy='262.2' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 66 | y: -17.246'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e169' cx='329.84' cy='261.37' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 67 | y: -17.084'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e170' cx='334.02' cy='264.7' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 68 | y: -17.736'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e171' cx='338.2' cy='267.55' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 69 | y: -18.295'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e172' cx='342.38' cy='265.85' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 70 | y: -17.962'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e173' cx='346.57' cy='271.25' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 71 | y: -19.021'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e174' cx='350.75' cy='271.69' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 72 | y: -19.106'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e175' cx='354.93' cy='269.15' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 73 | y: -18.608'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e176' cx='359.11' cy='260.82' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 74 | y: -16.974'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e177' cx='363.3' cy='258.37' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 75 | y: -16.495'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e178' cx='367.48' cy='249.63' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 76 | y: -14.78'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e179' cx='371.66' cy='247.32' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 77 | y: -14.327'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e180' cx='375.84' cy='247.33' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 78 | y: -14.33'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e181' cx='380.02' cy='258.84' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 79 | y: -16.587'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e182' cx='384.21' cy='265.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 80 | y: -17.811'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e183' cx='388.39' cy='266.71' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 81 | y: -18.13'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e184' cx='392.57' cy='263.08' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 82 | y: -17.418'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e185' cx='396.75' cy='264.72' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 83 | y: -17.741'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e186' cx='400.94' cy='261.95' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 84 | y: -17.197'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e187' cx='405.12' cy='267.38' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 85 | y: -18.261'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e188' cx='409.3' cy='268.77' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 86 | y: -18.535'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e189' cx='413.48' cy='267.67' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 87 | y: -18.318'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e190' cx='417.67' cy='269.5' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 88 | y: -18.677'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e191' cx='421.85' cy='268.92' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 89 | y: -18.565'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e192' cx='426.03' cy='272.34' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 90 | y: -19.235'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e193' cx='430.21' cy='270.44' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 91 | y: -18.861'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e194' cx='434.4' cy='270.85' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 92 | y: -18.942'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e195' cx='438.58' cy='271.09' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 93 | y: -18.989'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e196' cx='442.76' cy='281.03' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 94 | y: -20.938'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e197' cx='446.94' cy='284.46' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 95 | y: -21.612'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e198' cx='451.13' cy='292.06' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 96 | y: -23.101'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e199' cx='455.31' cy='300.25' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 97 | y: -24.707'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e200' cx='459.49' cy='302.76' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 98 | y: -25.201'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e201' cx='463.67' cy='303.58' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 99 | y: -25.362'/>\n   <circle id='svg_13db3af7_5c79_452f_b102_263548f29962_e202' cx='467.86' cy='302.14' r='0.35pt' fill='#00BFC4' fill-opacity='0.7' stroke='#00BFC4' stroke-opacity='0.7' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='22' title='Walk Number: 22 | Step: 100 | y: -25.078'/>\n  <\/g>\n  <g clip-path='url(#svg_13db3af7_5c79_452f_b102_263548f29962_c1)'>\n   <text x='15.44' y='279.39' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-20<\/text>\n   <text x='15.44' y='228.4' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>-10<\/text>\n   <text x='23.27' y='177.41' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='18.37' y='126.41' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>10<\/text>\n   <text x='18.37' y='75.42' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>20<\/text>\n   <text x='47.17' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>0<\/text>\n   <text x='149.28' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>25<\/text>\n   <text x='253.84' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>50<\/text>\n   <text x='358.4' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>75<\/text>\n   <text x='460.51' y='326.11' font-size='6.6pt' font-family='Arial' fill='#4D4D4D' fill-opacity='1'>100<\/text>\n   <text x='249.51' y='338.57' font-size='8.25pt' font-family='Arial'>Step<\/text>\n   <text x='33.1' y='58.26' font-size='9.9pt' font-family='Arial'>y<\/text>\n   <text x='330.01' y='352.67' font-size='6.6pt' font-family='Arial'>1 dimensions, 100 steps, mu = 0, sd = 1.<\/text>\n   <text x='15.44' y='31.05' font-size='8.25pt' font-family='Arial'>Function: rw30<\/text>\n   <text x='15.44' y='14.93' font-size='9.9pt' font-family='Arial'>30 Random Walks<\/text>\n  <\/g>\n <\/g>\n<\/svg>","js":null,"uid":"svg_13db3af7_5c79_452f_b102_263548f29962","ratio":1.4,"settings":{"tooltip":{"css":".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px 2px 2px 2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}","placement":"doc","opacity":0.7,"offx":200,"offy":5,"use_cursor_pos":false,"use_fill":false,"use_stroke":false,"delay_over":200,"delay_out":500},"hover":{"css":".hover_data_SVGID_ { stroke:black;stroke-width:2pt; }","reactive":false,"nearest_distance":null},"hover_inv":{"css":".hover_inv_SVGID_ { opacity:0.4; }"},"hover_key":{"css":".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\nimage.hover_key_SVGID_ { stroke:orange; }","reactive":true},"hover_theme":{"css":".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\nimage.hover_theme_SVGID_ { stroke:orange; }","reactive":true},"select":{"css":".select_data_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_data_SVGID_ { stroke:none;fill:red; }\ncircle.select_data_SVGID_ { fill:red;stroke:black; }\nline.select_data_SVGID_, polyline.select_data_SVGID_ { fill:none;stroke:red; }\nrect.select_data_SVGID_, polygon.select_data_SVGID_, path.select_data_SVGID_ { fill:red;stroke:none; }\nimage.select_data_SVGID_ { stroke:red; }","type":"multiple","only_shiny":true,"selected":[]},"select_inv":{"css":""},"select_key":{"css":".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_key_SVGID_ { stroke:none;fill:red; }\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\nimage.select_key_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"select_theme":{"css":".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\nimage.select_theme_SVGID_ { stroke:red; }","type":"single","only_shiny":true,"selected":[]},"zoom":{"min":1,"max":5,"duration":300},"toolbar":{"position":"topright","pngname":"diagram","tooltips":null,"fixed":false,"hidden":[],"delay_over":200,"delay_out":500},"sizing":{"rescale":true,"width":1}}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
<section id="multi-column-visualization-with-visualize_walks" class="level2">
<h2 class="anchored" data-anchor-id="multi-column-visualization-with-visualize_walks"><strong>Multi-Column Visualization with <code>visualize_walks()</code></strong></h2>
<p>The enhanced <code>visualize_walks()</code> function now accepts vector inputs for the <code>.pluck</code> parameter, enabling simultaneous visualization of multiple walk types or simulations :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb6-2">rw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>()</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize specific simulations</span></span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(rw, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pluck =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/pluck_visualizations-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare multiple distribution types</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>(rw, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.pluck =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_min"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cum_max"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/index_files/figure-html/pluck_visualizations-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="multi-dimensional-modeling-revolution" class="level1">
<h1><strong>Multi-Dimensional Modeling Revolution</strong></h1>
<p>All 21 generator functions support multi-dimensional random walks through the <code>.dimensions</code> parameter, breaking the traditional 1D limitation. This capability transforms spatial modeling applications:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D random walks for spatial modeling</span></span>
<span id="cb8-2">walk_2d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(walk_2d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]         
walk_number "1"          
step_number "1"          
x           "0.03563341" 
y           "-0.01747179"
cum_sum_x   "0.03563341" 
cum_sum_y   "-0.01747179"
cum_prod_x  "0"          
cum_prod_y  "0"          
cum_min_x   "0.03563341" 
cum_min_y   "-0.01747179"
cum_max_x   "0.03563341" 
cum_max_y   "-0.01747179"
cum_mean_x  "0.03563341" 
cum_mean_y  "-0.01747179"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3D random walks for complex spatial analysis  </span></span>
<span id="cb10-2">walk_3d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_uniform_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(walk_3d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       
walk_number "1"        
step_number "1"        
x           "0.3000542"
y           "0.8856108"
z           "0.6017601"
cum_sum_x   "0.3000542"
cum_sum_y   "0.8856108"
cum_sum_z   "0.6017601"
cum_prod_x  "0"        
cum_prod_y  "0"        
cum_prod_z  "0"        
cum_min_x   "0.3000542"
cum_min_y   "0.8856108"
cum_min_z   "0.6017601"
cum_max_x   "0.3000542"
cum_max_y   "0.8856108"
cum_max_z   "0.6017601"
cum_mean_x  "0.3000542"
cum_mean_y  "0.8856108"
cum_mean_z  "0.6017601"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multi-dimensional discrete processes</span></span>
<span id="cb12-2">poisson_2d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_poisson_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(poisson_2d, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]
walk_number "1" 
step_number "1" 
x           "3" 
y           "1" 
cum_sum_x   "3" 
cum_sum_y   "1" 
cum_prod_x  "0" 
cum_prod_y  "0" 
cum_min_x   "3" 
cum_min_y   "1" 
cum_max_x   "3" 
cum_max_y   "1" 
cum_mean_x  "3" 
cum_mean_y  "1" </code></pre>
</div>
</div>
</section>
<section id="real-world-applications-across-industries" class="level1">
<h1><strong>Real-World Applications Across Industries</strong></h1>
<section id="financial-modeling-excellence" class="level2">
<h2 class="anchored" data-anchor-id="financial-modeling-excellence"><strong>Financial Modeling Excellence</strong></h2>
<p>The expanded distribution set revolutionizes financial applications:</p>
<ul>
<li><strong>Asset Pricing</strong>: Use <code>random_lognormal_walk()</code> for realistic stock price simulations</li>
<li><strong>Risk Management</strong>: Apply <code>random_weibull_walk()</code> for failure time analysis in portfolios</li>
<li><strong>Heavy-Tail Modeling</strong>: Leverage <code>random_cauchy_walk()</code> for extreme market events</li>
</ul>
</section>
<section id="engineering-and-reliability-analysis" class="level2">
<h2 class="anchored" data-anchor-id="engineering-and-reliability-analysis"><strong>Engineering and Reliability Analysis</strong></h2>
<p>Engineering applications benefit from specialized distributions:</p>
<ul>
<li><strong>Failure Analysis</strong>: <code>random_weibull_walk()</code> and <code>random_exponential_walk()</code> for system reliability</li>
<li><strong>Quality Control</strong>: <code>random_binomial_walk()</code> and <code>random_hypergeometric_walk()</code> for sampling processes</li>
<li><strong>System Testing</strong>: <code>random_chisquared_walk()</code> and <code>random_f_walk()</code> for statistical validation</li>
</ul>
</section>
<section id="biological-and-ecological-modeling" class="level2">
<h2 class="anchored" data-anchor-id="biological-and-ecological-modeling"><strong>Biological and Ecological Modeling</strong></h2>
<p>Life sciences gain powerful new modeling tools:</p>
<ul>
<li><strong>Population Dynamics</strong>: <code>random_negbinomial_walk()</code> for over-dispersed population counts</li>
<li><strong>Disease Modeling</strong>: <code>random_poisson_walk()</code> and <code>random_multinomial_walk()</code> for epidemic spread</li>
<li><strong>Genetic Analysis</strong>: <code>random_hypergeometric_walk()</code> for sampling genetic variants</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1><strong>Your Turn!</strong></h1>
<p><strong>Challenge</strong>: Create a portfolio simulation comparing three different risk models using normal, t-distribution, and Weibull random walks.</p>
<p><strong>Task</strong>:</p>
<ol type="1">
<li>Generate 1000-step walks for each distribution</li>
<li>Calculate risk metrics (max drawdown, volatility)</li>
<li>Compare performance characteristics</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Portfolio simulation with different risk models</span></span>
<span id="cb14-2">normal_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mu =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, </span>
<span id="cb14-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(walk_number, y)</span>
<span id="cb14-8"></span>
<span id="cb14-9">t_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_t_walk</span>(</span>
<span id="cb14-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb14-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.df =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(walk_number, y)</span>
<span id="cb14-14"></span>
<span id="cb14-15">weibull_portfolio <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_weibull_walk</span>(</span>
<span id="cb14-16">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, </span>
<span id="cb14-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb14-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.shape =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, </span>
<span id="cb14-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.scale =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(walk_number, y)</span>
<span id="cb14-21"></span>
<span id="cb14-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate risk metrics grouped on walk_number with y as the value</span></span>
<span id="cb14-23">calculate_risk_metrics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(walks) {</span>
<span id="cb14-24">  max_drawdowns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> walks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> </span>
<span id="cb14-25">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_drawdowns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cummax</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(max_drawdowns)</span>
<span id="cb14-29">  volatility <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> walks <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-30">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(walk_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-31">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">volatility =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-33">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(volatility)</span>
<span id="cb14-34">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb14-35">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_drawdown =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(max_drawdowns), </span>
<span id="cb14-36">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">volatility =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(volatility))</span>
<span id="cb14-37">      )</span>
<span id="cb14-38">}</span>
<span id="cb14-39"></span>
<span id="cb14-40"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_risk_metrics</span>(normal_portfolio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$max_drawdown
[1] 1.200971

$volatility
[1] 0.2005195</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_risk_metrics</span>(t_portfolio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$max_drawdown
[1] 21.07394

$volatility
[1] 1.698124</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_risk_metrics</span>(weibull_portfolio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$max_drawdown
[1] 3.641576

$volatility
[1] 0.611113</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways-key-points-for-r-programmers" class="level1">
<h1><strong>Quick Takeaways: Key Points for R Programmers</strong></h1>
<p>• <strong>Complete Coverage</strong>: 21 new distribution-based generators plus 2 enhanced utilities cover every major statistical distribution family</p>
<p>• <strong>Multi-Dimensional</strong>: All functions support 2D and 3D random walks through the <code>.dimensions</code> parameter</p>
<p>• <strong>Enhanced Utilities</strong>: <code>subset_walks()</code> gains <code>.value</code> parameter flexibility; <code>visualize_walks()</code> supports vector <code>.pluck</code> inputs</p>
<p>• <strong>Custom Flexibility</strong>: <code>random_displacement_walk()</code> enables unlimited user-defined step distributions</p>
<p>• <strong>Tidyverse Integration</strong>: Full compatibility with dplyr, ggplot2, and pipe-friendly workflows</p>
<p>• <strong>Industry Applications</strong>: Purpose-built functions for finance, engineering, biology, and statistical testing</p>
</section>
<section id="migration-and-best-practices" class="level1">
<h1><strong>Migration and Best Practices</strong></h1>
<p>Existing RandomWalker users can seamlessly integrate the new functions while maintaining backward compatibility. The package maintains its tidyverse-friendly design philosophy, ensuring smooth integration with existing R workflows .</p>
<p><strong>Documentation</strong>: Each function includes comprehensive documentation with parameter specifications, use cases, and practical examples.</p>
</section>
<section id="conclusion-the-future-of-stochastic-modeling-in-r" class="level1">
<h1><strong>Conclusion: The Future of Stochastic Modeling in R</strong></h1>
<p>The RandomWalker v0.3.0 update represents a paradigm shift in R-based stochastic modeling. With 23 new and enhanced functions covering the complete spectrum of statistical distributions, R programmers now have unprecedented power to model complex random processes across any domain.</p>
<p>Whether you’re simulating financial markets with heavy tailed distributions, modeling biological populations with discrete processes, or conducting advanced statistical testing with nonparametric approaches, RandomWalker delivers the tools needed for sophisticated analysis.</p>
<p><strong>Ready to explore the new capabilities?</strong> Install the latest version and discover how these powerful new functions can transform your stochastic modeling projects. The future of random walk simulation in R has arrived.</p>
<hr>
<p><em>Have you tried the new RandomWalker functions? Share your experiences and applications in the comments below, and don’t forget to spread the word about these exciting updates on social media!</em></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-19/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Update to RandomWalker</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-08-19/</guid>
  <pubDate>Tue, 19 Aug 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Retrieve Row Numbers in R: Complete Guide with Base R, dplyr, and data.table Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-08-04/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Key Insight:</strong> Retrieving row numbers in R is a skill that comes in very handy for any R programmer. No matter if you’re working with base R, dplyr, or data.table, each approach has its strengths, and choosing the right method can significantly impact your code’s performance and readability.</p>
</blockquote>
<p>Working with row numbers is one of the most common tasks in R programming. Whether you need to identify specific rows, create unique identifiers, or filter data based on position, understanding how to retrieve row numbers efficiently is crucial for effective data manipulation.</p>
<p>In this comprehensive guide, you’ll learn multiple approaches to retrieve row numbers in R using <strong>base R</strong>, <strong>dplyr</strong>, and <strong>data.table</strong> packages. We’ll cover the syntax, provide practical examples, and compare performance to help you choose the best method for your specific use case.</p>
<hr>
<section id="why-row-numbers-matter-in-r-programming" class="level1">
<h1>Why Row Numbers Matter in R Programming</h1>
<p>Row numbers serve several critical purposes in data analysis:</p>
<ul>
<li><strong>Data identification</strong>: Uniquely identify rows for tracking and referencing</li>
<li><strong>Conditional filtering</strong>: Select rows based on their position</li>
<li><strong>Ranking and ordering</strong>: Create rankings within groups or datasets</li>
<li><strong>Data validation</strong>: Check data integrity and identify duplicates</li>
<li><strong>Indexing</strong>: Create custom indices for complex data operations</li>
</ul>
<p>Understanding different approaches to retrieve row numbers gives you flexibility to choose the most appropriate method based on your data size, performance requirements, and coding style preferences.</p>
<hr>
</section>
<section id="base-r-methods-for-row-number-retrieval" class="level1">
<h1>Base R Methods for Row Number Retrieval</h1>
<p>Base R provides several built-in functions for working with row numbers. These methods are reliable, widely supported, and often surprisingly fast for many use cases .</p>
<section id="using-rownames-and-row.names" class="level2">
<h2 class="anchored" data-anchor-id="using-rownames-and-row.names">Using <code>rownames()</code> and <code>row.names()</code></h2>
<p>The most straightforward way to get row identifiers in base R is using <code>rownames()</code> or <code>row.names()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data frame</span></span>
<span id="cb1-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diana"</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">city =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New York"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boston"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chicago"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miami"</span>)</span>
<span id="cb1-6">)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row names (returns character vector)</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] "1" "2" "3" "4"</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative syntax (identical result)</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row.names</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [1] "1" "2" "3" "4"</span></span></code></pre></div>
</div>
<p><strong>Simple Explanation</strong>: Both functions return the row names as a character vector. By default, R assigns sequential numbers as row names starting from “1”.</p>
</section>
<section id="creating-sequential-row-numbers-with-seq_len" class="level2">
<h2 class="anchored" data-anchor-id="creating-sequential-row-numbers-with-seq_len">Creating Sequential Row Numbers with <code>seq_len()</code></h2>
<p>To generate actual numeric row numbers, combine <code>seq_len()</code> with <code>nrow()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row numbers as a new column</span></span>
<span id="cb6-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row_num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df))</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age     city row_num
1   Alice  25 New York       1
2     Bob  30   Boston       2
3 Charlie  35  Chicago       3
4   Diana  28    Miami       4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>seq_len(nrow(df))</code> creates a sequence from 1 to the number of rows in the data frame. This is the standard base R idiom for generating row numbers .</p>
</section>
<section id="finding-row-numbers-with-conditions-using-which" class="level2">
<h2 class="anchored" data-anchor-id="finding-row-numbers-with-conditions-using-which">Finding Row Numbers with Conditions using <code>which()</code></h2>
<p>Use <code>which()</code> to find row numbers that meet specific criteria:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find rows where age is greater than 30</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find rows where city is "Boston"</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Boston"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Multiple conditions</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miami"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2 3</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>which()</code> returns the positions (row numbers) where a logical condition is <code>TRUE</code>. It’s perfect for conditional row selection .</p>
</section>
<section id="row-numbers-within-groups-using-ave" class="level2">
<h2 class="anchored" data-anchor-id="row-numbers-within-groups-using-ave">Row Numbers Within Groups using <code>ave()</code></h2>
<p>For grouped operations, use <code>ave()</code> with <code>seq_along()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add group column</span></span>
<span id="cb14-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create row numbers within each group</span></span>
<span id="cb14-5">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ave</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>age, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> seq_along)</span>
<span id="cb14-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"group_row"</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name group group_row
1   Alice     A         1
2     Bob     A         2
3 Charlie     B         1
4   Diana     B         2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>ave()</code> applies a function within groups. <code>seq_along()</code> creates sequential numbers for each group separately.</p>
<hr>
</section>
</section>
<section id="dplyr-methods-for-row-number-retrieval" class="level1">
<h1>dplyr Methods for Row Number Retrieval</h1>
<p>The dplyr package offers intuitive, pipe-friendly functions for row number operations. While generally slower than base R for large datasets, dplyr excels in readability and integration with tidyverse workflows.</p>
<section id="basic-row-numbering-with-row_number" class="level2">
<h2 class="anchored" data-anchor-id="basic-row-numbering-with-row_number">Basic Row Numbering with <code>row_number()</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row numbers using mutate</span></span>
<span id="cb16-4">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dplyr_row_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>())</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, dplyr_row_num))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name dplyr_row_num
1   Alice             1
2     Bob             2
3 Charlie             3
4   Diana             4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>row_number()</code> creates consecutive integers for each row. Combined with <code>mutate()</code>, it adds a new column with row numbers.</p>
</section>
<section id="conditional-row-selection-with-slice" class="level2">
<h2 class="anchored" data-anchor-id="conditional-row-selection-with-slice">Conditional Row Selection with <code>slice()</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select specific rows by position</span></span>
<span id="cb18-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age     city row_num group group_row dplyr_row_num
1   Alice  25 New York       1     A         1             1
2 Charlie  35  Chicago       3     B         1             3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select first two rows</span></span>
<span id="cb20-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age     city row_num group group_row dplyr_row_num
1 Alice  25 New York       1     A         1             1
2   Bob  30   Boston       2     A         2             2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select last row</span></span>
<span id="cb22-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   name age  city row_num group group_row dplyr_row_num
1 Diana  28 Miami       4     B         2             4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>slice()</code> selects rows by their position. Use <code>n()</code> to reference the last row.</p>
</section>
<section id="row-numbers-within-groups" class="level2">
<h2 class="anchored" data-anchor-id="row-numbers-within-groups">Row Numbers Within Groups</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row numbers within each group</span></span>
<span id="cb24-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_row_dplyr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb24-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, group, group_row_dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
# Groups:   group [2]
  name    group group_row_dplyr
  &lt;chr&gt;   &lt;chr&gt;           &lt;int&gt;
1 Alice   A                   1
2 Bob     A                   2
3 Charlie B                   1
4 Diana   B                   2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: Combine <code>group_by()</code> with <code>row_number()</code> to restart numbering within each group.</p>
</section>
<section id="finding-row-numbers-with-filter" class="level2">
<h2 class="anchored" data-anchor-id="finding-row-numbers-with-filter">Finding Row Numbers with Filter</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row numbers for rows meeting criteria</span></span>
<span id="cb26-2">df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">original_row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(name, age, original_row)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age original_row
1 Charlie  35            3</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: Add row numbers first, then filter to preserve original row positions.</p>
<hr>
</section>
</section>
<section id="data.table-methods-for-row-number-retrieval" class="level1">
<h1>data.table Methods for Row Number Retrieval</h1>
<p>data.table provides the most efficient methods for row operations, especially with large datasets. The syntax is concise but requires understanding data.table’s unique approach.</p>
<section id="basic-row-indexing-with-.i" class="level2">
<h2 class="anchored" data-anchor-id="basic-row-indexing-with-.i">Basic Row Indexing with <code>.I</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb28-4">DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row numbers using .I</span></span>
<span id="cb28-7">DT[, row_num_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> .I]</span>
<span id="cb28-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(DT[, .(name, row_num_dt)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name row_num_dt
    &lt;char&gt;      &lt;int&gt;
1:   Alice          1
2:     Bob          2
3: Charlie          3
4:   Diana          4</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>.I</code> returns row indices. The <code>:=</code> operator adds a new column by reference (very efficient).</p>
</section>
<section id="finding-row-numbers-with-conditions" class="level2">
<h2 class="anchored" data-anchor-id="finding-row-numbers-with-conditions">Finding Row Numbers with Conditions</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get row numbers where age &gt; 30</span></span>
<span id="cb30-2">DT[age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, .I]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More complex conditions</span></span>
<span id="cb32-2">DT[age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miami"</span>, .I]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: Place the condition in the first argument (<code>i</code>), and <code>.I</code> in the second argument (<code>j</code>) to get matching row numbers.</p>
</section>
<section id="row-numbers-within-groups-1" class="level2">
<h2 class="anchored" data-anchor-id="row-numbers-within-groups-1">Row Numbers Within Groups</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add group row numbers</span></span>
<span id="cb34-2">DT[, group_row_dt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(.N), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> group]</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(DT[, .(name, group, group_row_dt)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name  group group_row_dt
    &lt;char&gt; &lt;char&gt;        &lt;int&gt;
1:   Alice      A            1
2:     Bob      A            2
3: Charlie      B            1
4:   Diana      B            2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>.N</code> gives the number of rows in each group. <code>seq_len(.N)</code> creates sequential numbers within each group defined by <code>by = group</code>.</p>
</section>
<section id="using-rowid-for-group-numbering" class="level2">
<h2 class="anchored" data-anchor-id="using-rowid-for-group-numbering">Using <code>rowid()</code> for Group Numbering</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative method for group row numbers</span></span>
<span id="cb36-2">DT[, group_row_alt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rowid</span>(group)]</span>
<span id="cb36-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(DT[, .(name, group, group_row_alt)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      name  group group_row_alt
    &lt;char&gt; &lt;char&gt;         &lt;int&gt;
1:   Alice      A             1
2:     Bob      A             2
3: Charlie      B             1
4:   Diana      B             2</code></pre>
</div>
</div>
<p><strong>Simple Explanation</strong>: <code>rowid()</code> is a data.table convenience function that automatically generates sequential IDs within groups.</p>
<hr>
</section>
</section>
<section id="performance-benchmarking-with-rbenchmark" class="level1">
<h1>Performance Benchmarking with rbenchmark</h1>
<p>To compare the performance of different row number retrieval methods, we’ll use the <code>rbenchmark</code> package . This package provides reliable timing results with statistical analysis across multiple replications.</p>
<section id="setting-up-the-benchmark" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-benchmark">Setting Up the Benchmark</h2>
<p>Here’s how to benchmark different approaches for finding rows that meet specific conditions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rbenchmark)</span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample dataset</span></span>
<span id="cb38-5">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb38-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,</span>
<span id="cb38-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>),</span>
<span id="cb38-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb38-9">)</span>
<span id="cb38-10"></span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run benchmark comparison</span></span>
<span id="cb38-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb38-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which(condition)"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-14">    row_nums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb38-15">  },</span>
<span id="cb38-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grep(pattern, rownames)"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-17">    matching_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^[1-9]"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df))</span>
<span id="cb38-18">  },</span>
<span id="cb38-19">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"subset(df, condition, select=row.names)"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-20">    subset_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(df, value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb38-21">  },</span>
<span id="cb38-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr::filter() %&gt;% row_number()"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb38-23">    filtered_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb38-26">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(row_num)</span>
<span id="cb38-27">  },</span>
<span id="cb38-28">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb38-29">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb38-30">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-31">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                                     test replications elapsed relative
1                        which(condition)          500    0.08     1.00
2        dplyr::filter() %&gt;% row_number()          500    2.02    25.25
3                 grep(pattern, rownames)          500    3.12    39.00
4 subset(df, condition, select=row.names)          500    3.22    40.25
  user.self sys.self
1      0.03     0.01
2      1.77     0.02
3      2.54     0.06
4      2.62     0.23</code></pre>
</div>
</div>
</section>
<section id="understanding-rbenchmark-output" class="level2">
<h2 class="anchored" data-anchor-id="understanding-rbenchmark-output">Understanding rbenchmark Output</h2>
<ul>
<li><strong>elapsed</strong>: Total time in seconds for all replications</li>
<li><strong>relative</strong>: Performance relative to the fastest method (1.00 = fastest)</li>
<li><strong>user.self</strong>: CPU time spent in the user process</li>
<li><strong>sys.self</strong>: CPU time spent in system calls</li>
<li><strong>replications</strong>: Number of times each test was run for accuracy</li>
</ul>
</section>
<section id="recommendations-by-use-case" class="level2">
<h2 class="anchored" data-anchor-id="recommendations-by-use-case">Recommendations by Use Case:</h2>
<table class="caption-top table">
<colgroup>
<col style="width: 37%">
<col style="width: 44%">
<col style="width: 17%">
</colgroup>
<thead>
<tr class="header">
<th>Data Size</th>
<th>Best Choice</th>
<th>Why</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&lt; 1K rows</td>
<td>Base R</td>
<td>Simple, readable, adequate performance</td>
</tr>
<tr class="even">
<td>1K - 10K rows</td>
<td>Base R or data.table</td>
<td>Both perform well, choose based on preference</td>
</tr>
<tr class="odd">
<td>10K - 100K rows</td>
<td>data.table</td>
<td>Clear performance advantage</td>
</tr>
<tr class="even">
<td>&gt; 100K rows</td>
<td>data.table</td>
<td>Significant speed improvement, memory efficient</td>
</tr>
<tr class="odd">
<td>Tidyverse workflow</td>
<td>dplyr</td>
<td>Better integration, acceptable for small-medium data</td>
</tr>
</tbody>
</table>
<hr>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s put these concepts into practice with a real-world scenario.</p>
<p><strong>Challenge</strong>: You have a sales dataset and need to:</p>
<ol type="1">
<li>Add row numbers to track each transaction</li>
<li>Find the row numbers of sales over $1000</li>
<li>Create sequential numbers within each salesperson group</li>
<li>Select every 3rd row for quality control sampling</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample sales data</span></span>
<span id="cb40-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb40-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">transaction_id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>,</span>
<span id="cb40-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">salesperson =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mike"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb40-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">amount =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">750</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">890</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">650</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">900</span>),</span>
<span id="cb40-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-01"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"day"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb40-7">)</span></code></pre></div>
</div>
<p>Try to solve this using all three methods (base R, dplyr, and data.table), then check the solution below.</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># BASE R SOLUTION</span></span>
<span id="cb41-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Add row numbers</span></span>
<span id="cb41-3">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>row_num <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(sales_data))</span>
<span id="cb41-4"></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find rows with sales &gt; $1000</span></span>
<span id="cb41-6">high_sales_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb41-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"High sales in rows:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(high_sales_rows, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "High sales in rows: 2, 4, 6, 7, 9"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Row numbers within salesperson groups</span></span>
<span id="cb43-2">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>group_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ave</span>(sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>amount, sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>salesperson, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> seq_along)</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Select every 3rd row</span></span>
<span id="cb43-5">every_third <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(sales_data), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), ]</span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DPLYR SOLUTION</span></span>
<span id="cb43-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb43-9">sales_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Add row numbers</span></span>
<span id="cb43-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_num =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Group row numbers</span></span>
<span id="cb43-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(salesperson) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group_row =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_number</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ungroup</span>()</span>
<span id="cb43-16"></span>
<span id="cb43-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find high sales rows</span></span>
<span id="cb43-18">high_sales_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dplyr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb43-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(row_num)</span>
<span id="cb43-21"></span>
<span id="cb43-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Every 3rd row</span></span>
<span id="cb43-23">every_third_dplyr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dplyr <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb43-24"></span>
<span id="cb43-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DATA.TABLE SOLUTION</span></span>
<span id="cb43-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb43-27">sales_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(sales_data)</span>
<span id="cb43-28"></span>
<span id="cb43-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Add row numbers</span></span>
<span id="cb43-30">sales_dt[, row_num <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> .I]</span>
<span id="cb43-31"></span>
<span id="cb43-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Find high sales rows</span></span>
<span id="cb43-33">high_sales_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dt[amount <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, .I]</span>
<span id="cb43-34"></span>
<span id="cb43-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Group row numbers</span></span>
<span id="cb43-36">sales_dt[, group_row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(.N), by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> salesperson]</span>
<span id="cb43-37"></span>
<span id="cb43-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Every 3rd row</span></span>
<span id="cb43-39">every_third_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dt[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, .N, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span></code></pre></div>
</div>
</details>
<hr>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<p>• <strong>Base R</strong>: Use <code>seq_len(nrow())</code> for row numbers, <code>which()</code> for conditional selection, and <code>ave()</code> for grouped operations</p>
<p>• <strong>dplyr</strong>: Leverage <code>row_number()</code>, <code>slice()</code>, and <code>group_by()</code> combinations for readable, pipeline-friendly code</p>
<p>• <strong>data.table</strong>: Utilize <code>.I</code> for row indices, <code>.N</code> for group sizes, and <code>rowid()</code> for efficient group numbering</p>
<p>• <strong>Performance</strong>: <code>which()</code> is fastest for conditions, data.table excels for large datasets, dplyr prioritizes readability</p>
<p>• <strong>Benchmarking</strong>: Use <code>rbenchmark</code> package to compare methods with statistical reliability across multiple replications</p>
<p>• <strong>Memory</strong>: data.table modifies by reference (efficient), while base R and dplyr create copies</p>
<p>• <strong>Syntax</strong>: data.table is most concise, dplyr is most readable, base R is most familiar</p>
<hr>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<p><strong>Q: What’s the difference between rownames() and row_number()?</strong> A: <code>rownames()</code> returns character row identifiers (which may not be sequential), while <code>row_number()</code> creates consecutive integers starting from 1.</p>
<p><strong>Q: Why is data.table faster than dplyr for row operations?</strong> A: data.table modifies objects by reference and uses optimized C code, while dplyr creates copies and has more overhead from its abstraction layer.</p>
<p><strong>Q: When should I use which() instead of filter()?</strong> A: Use <code>which()</code> when you need the actual row numbers/positions. Use <code>filter()</code> when you want to subset the data and continue with dplyr operations.</p>
<p><strong>Q: Can I mix different approaches in the same project?</strong> A: Yes, but be consistent within functions or analysis sections. Consider using dtplyr to combine dplyr syntax with data.table performance.</p>
<p><strong>Q: How do I handle row numbers when data has missing values?</strong> A: All methods handle NA values consistently - row numbers are assigned regardless of missing data. Use <code>complete.cases()</code> if you need to exclude rows with missing values.</p>
<hr>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Mastering row number retrieval in R opens up powerful possibilities for data manipulation and analysis. Each approach - base R, dplyr, and data.table - offers unique advantages:</p>
<ul>
<li><strong>Base R</strong> provides reliable, universally available functions that work well for small to medium datasets</li>
<li><strong>dplyr</strong> offers readable, intuitive syntax that integrates seamlessly with tidyverse workflows<br>
</li>
<li><strong>data.table</strong> delivers superior performance and memory efficiency, especially crucial for large datasets</li>
</ul>
<p>The choice between methods depends on your specific needs: data size, performance requirements, team preferences, and existing codebase. For maximum flexibility, consider learning all three approaches and choosing the most appropriate one for each situation.</p>
<p>Start practicing these techniques with your own datasets, and remember that the best method is the one that helps you solve your specific data challenges effectively and efficiently.</p>
<hr>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.geeksforgeeks.org/r-language/how-to-retrieve-row-numbers-in-r-dataframe/">How to Retrieve Row Numbers in R DataFrame - GeeksforGeeks</a></p></li>
<li><p><a href="https://cran.r-project.org/package=rbenchmark">rbenchmark: Benchmarking routine for R - CRAN</a></p></li>
<li><p><a href="https://www.r-bloggers.com/2018/04/benchmarking-the-six-most-used-manipulations-for-data-tables-in-r/">Benchmarking the six most used manipulations for data.tables in R - R-bloggers</a></p></li>
<li><p><a href="https://stackoverflow.com/questions/1269624/how-to-get-row-from-r-data-frame">How to get row from R data.frame - Stack Overflow</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-08-04/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Row Numbers in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-08-04/</guid>
  <pubDate>Mon, 04 Aug 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Add a Total Row to a Data Frame in R: Complete Guide for R Programmers</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-28/</link>
  <description><![CDATA[ 





<p>Adding a <strong>total row in R</strong> is one of those everyday tasks that an analyst encounters when creating reports or analyzing data. Whether you’re summarizing sales figures, calculating budget totals, or creating financial statements, knowing how to efficiently add total rows to your data frames can be helpful.</p>
<p>In this comprehensive guide, we’ll explore three different approaches to adding total rows: using Base R, the popular dplyr package, and the lightning-fast data.table package. We’ll break down the syntax in simple terms, provide practical examples, and even compare their performance to help you choose the best method for your needs.</p>
<blockquote class="blockquote">
<p><strong>Key Insight:</strong> While adding total rows might seem simple, choosing the right method can significantly impact your code’s readability and performance, especially with large datasets.</p>
</blockquote>
<hr>
<section id="why-add-total-rows-to-data-frames" class="level1">
<h1>Why Add Total Rows to Data Frames?</h1>
<p>Before jumping into the code, let’s understand when and why you might need to add total rows:</p>
<section id="common-use-cases" class="level2">
<h2 class="anchored" data-anchor-id="common-use-cases">Common Use Cases</h2>
<ol type="1">
<li><strong>Financial Reports</strong>
<ul>
<li>Income statements showing total revenue</li>
<li>Expense reports with grand totals</li>
<li>Budget summaries with category totals</li>
</ul></li>
<li><strong>Data Validation</strong>
<ul>
<li>Verifying calculations are correct</li>
<li>Cross-checking subtotals</li>
<li>Quality control in data entry</li>
</ul></li>
<li><strong>Business Analytics</strong>
<ul>
<li>Sales reports by region or product</li>
<li>Inventory summaries</li>
<li>Performance metrics dashboards</li>
</ul></li>
<li><strong>Academic Research</strong>
<ul>
<li>Survey response summaries</li>
<li>Experimental data totals</li>
<li>Statistical report tables</li>
</ul></li>
</ol>
</section>
</section>
<section id="method-1-adding-total-rows-using-base-r" class="level1">
<h1>Method 1: Adding Total Rows Using Base R</h1>
<p>Base R provides the most straightforward approach using built-in functions. This method requires no additional packages and works well for simple cases.</p>
<section id="the-basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="the-basic-syntax">The Basic Syntax</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Calculate column sums</span></span>
<span id="cb1-2">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(df[, numeric_columns], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Create the total row</span></span>
<span id="cb1-5">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Add the total row</span></span>
<span id="cb1-8">df_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, total_row)</span></code></pre></div>
</section>
<section id="complete-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-example">Complete Example</h2>
<p>Let’s create a simple sales data frame and add a total row:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>)</span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display original data</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales Q2_Sales Q3_Sales
1   Laptop    15000    18000    20000
2    Mouse     2500     3000     2800
3 Keyboard     3500     4000     3800</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate totals for numeric columns</span></span>
<span id="cb4-2">numeric_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q3_Sales"</span>)</span>
<span id="cb4-3">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(sales_data[, numeric_cols])</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create total row</span></span>
<span id="cb4-6">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals)</span>
<span id="cb4-9">)</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total row</span></span>
<span id="cb4-12">sales_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(sales_data, total_row)</span>
<span id="cb4-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales Q2_Sales Q3_Sales
1   Laptop    15000    18000    20000
2    Mouse     2500     3000     2800
3 Keyboard     3500     4000     3800
4    Total    21000    25000    26600</code></pre>
</div>
</div>
</section>
<section id="handling-mixed-data-types" class="level2">
<h2 class="anchored" data-anchor-id="handling-mixed-data-types">Handling Mixed Data Types</h2>
<p>When your data frame has both numeric and non-numeric columns, you need to be more careful:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More complex example with mixed types</span></span>
<span id="cb6-2">company_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marketing"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IT"</span>),</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Manager =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sarah"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mike"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Employees =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb6-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Budget =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400000</span>),</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb6-8">)</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify numeric columns automatically</span></span>
<span id="cb6-11">numeric_columns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(company_data, is.numeric)</span>
<span id="cb6-12">numeric_col_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(company_data)[numeric_columns]</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate totals only for numeric columns</span></span>
<span id="cb6-15">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(company_data[, numeric_col_names])</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create total row with proper structure</span></span>
<span id="cb6-18">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> company_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy structure</span></span>
<span id="cb6-19">total_row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear all values</span></span>
<span id="cb6-20">total_row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Department <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span></span>
<span id="cb6-21">total_row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Manager <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span></span>
<span id="cb6-22">total_row[, numeric_col_names] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> totals</span>
<span id="cb6-23"></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine original data with total row</span></span>
<span id="cb6-25">company_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(company_data, total_row)</span>
<span id="cb6-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(company_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Department Manager Employees  Budget
1      Sales    John        25  500000
2  Marketing   Sarah        15  300000
3         IT    Mike        10  400000
4      Total       -        50 1200000</code></pre>
</div>
</div>
</section>
</section>
<section id="method-2-adding-total-rows-using-dplyr" class="level1">
<h1>Method 2: Adding Total Rows Using dplyr</h1>
<p>The <strong>total row using dplyr</strong> approach offers a more modern, pipeline-friendly syntax that many R programmers prefer .</p>
<section id="the-dplyr-syntax" class="level2">
<h2 class="anchored" data-anchor-id="the-dplyr-syntax">The dplyr Syntax</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb8-2"></span>
<span id="cb8-3">df_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(., </span>
<span id="cb8-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum),</span>
<span id="cb8-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.character), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>)</span>
<span id="cb8-8">    )</span>
<span id="cb8-9">  )</span></code></pre></div>
</section>
<section id="complete-dplyr-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-dplyr-example">Complete dplyr Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using the same sales data</span></span>
<span id="cb9-4">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb9-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>),</span>
<span id="cb9-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>),</span>
<span id="cb9-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>),</span>
<span id="cb9-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>)</span>
<span id="cb9-9">)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total row using dplyr</span></span>
<span id="cb9-12">sales_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb9-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb9-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb9-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb9-17">    )</span>
<span id="cb9-18">  )</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales Q2_Sales Q3_Sales
1   Laptop    15000    18000    20000
2    Mouse     2500     3000     2800
3 Keyboard     3500     4000     3800
4    Total    21000    25000    26600</code></pre>
</div>
</div>
</section>
<section id="advanced-dplyr-techniques" class="level2">
<h2 class="anchored" data-anchor-id="advanced-dplyr-techniques">Advanced dplyr Techniques</h2>
<section id="adding-subtotals-and-grand-total" class="level3">
<h3 class="anchored" data-anchor-id="adding-subtotals-and-grand-total">Adding Subtotals and Grand Total</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data with categories</span></span>
<span id="cb11-2">detailed_sales <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb11-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electronics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Electronics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Office"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Office"</span>),</span>
<span id="cb11-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desk"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chair"</span>),</span>
<span id="cb11-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6000</span>),</span>
<span id="cb11-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7000</span>)</span>
<span id="cb11-7">)</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add category subtotals and grand total</span></span>
<span id="cb11-10">sales_with_all_totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> detailed_sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add category subtotals</span></span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Category) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(</span>
<span id="cb11-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Subtotal"</span>,</span>
<span id="cb11-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb11-16">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine with original data</span></span>
<span id="cb11-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(detailed_sales, .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add grand total</span></span>
<span id="cb11-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb11-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(detailed_sales,</span>
<span id="cb11-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grand Total"</span>,</span>
<span id="cb11-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>,</span>
<span id="cb11-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb11-25">    )</span>
<span id="cb11-26">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(Category, Product)</span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_all_totals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Category  Product Q1_Sales Q2_Sales
1 Electronics   Laptop    15000    18000
2 Electronics    Mouse     2500     3000
3 Electronics Subtotal    17500    21000
4 Grand Total        -    31500    37000
5      Office    Chair     6000     7000
6      Office     Desk     8000     9000
7      Office Subtotal    14000    16000</code></pre>
</div>
</div>
</section>
<section id="using-custom-summary-functions" class="level3">
<h3 class="anchored" data-anchor-id="using-custom-summary-functions">Using Custom Summary Functions</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add multiple summary rows (total, mean, max)</span></span>
<span id="cb13-2">sales_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb13-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total row</span></span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb13-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb13-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb13-8">    ),</span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Average row</span></span>
<span id="cb13-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb13-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Average"</span>,</span>
<span id="cb13-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), mean)</span>
<span id="cb13-13">    ),</span>
<span id="cb13-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximum row</span></span>
<span id="cb13-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb13-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Maximum"</span>,</span>
<span id="cb13-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), max)</span>
<span id="cb13-18">    )</span>
<span id="cb13-19">  )</span>
<span id="cb13-20"></span>
<span id="cb13-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Product Q1_Sales  Q2_Sales  Q3_Sales
1   Laptop    15000 18000.000 20000.000
2    Mouse     2500  3000.000  2800.000
3 Keyboard     3500  4000.000  3800.000
4    Total    21000 25000.000 26600.000
5  Average     7000  8333.333  8866.667
6  Maximum    15000 18000.000 20000.000</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="method-3-adding-total-rows-using-data.table" class="level1">
<h1>Method 3: Adding Total Rows Using data.table</h1>
<p>The <strong>total row using data.table</strong> method provides the best performance for large datasets .</p>
<section id="the-data.table-syntax" class="level2">
<h2 class="anchored" data-anchor-id="the-data.table-syntax">The data.table Syntax</h2>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data.table</span></span>
<span id="cb15-4">dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb15-5"></span>
<span id="cb15-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add total row</span></span>
<span id="cb15-7">dt_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb15-8">  dt,</span>
<span id="cb15-9">  dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.SDcols =</span> numeric_cols][, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category :=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb15-10">))</span></code></pre></div>
</section>
<section id="complete-data.table-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-data.table-example">Complete data.table Example</h2>
<div class="cell" data-messge="false">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'data.table'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:dplyr':

    between, first, last</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create data.table</span></span>
<span id="cb19-2">sales_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb19-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mouse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Keyboard"</span>),</span>
<span id="cb19-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3500</span>),</span>
<span id="cb19-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>),</span>
<span id="cb19-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3800</span>)</span>
<span id="cb19-7">)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify numeric columns</span></span>
<span id="cb19-10">num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sales_dt)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(sales_dt, is.numeric)]</span>
<span id="cb19-11"></span>
<span id="cb19-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create total row</span></span>
<span id="cb19-13">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sales_dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols]</span>
<span id="cb19-14">total_row[, Product <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb19-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setcolorder</span>(total_row, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(sales_dt))</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine with original data</span></span>
<span id="cb19-18">sales_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(sales_dt, total_row))</span>
<span id="cb19-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    Product Q1_Sales Q2_Sales Q3_Sales
     &lt;char&gt;    &lt;num&gt;    &lt;num&gt;    &lt;num&gt;
1:   Laptop    15000    18000    20000
2:    Mouse     2500     3000     2800
3: Keyboard     3500     4000     3800
4:    Total    21000    25000    26600</code></pre>
</div>
</div>
</section>
<section id="advanced-data.table-techniques" class="level2">
<h2 class="anchored" data-anchor-id="advanced-data.table-techniques">Advanced data.table Techniques</h2>
<section id="group-wise-totals" class="level3">
<h3 class="anchored" data-anchor-id="group-wise-totals">Group-wise Totals</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data with groups</span></span>
<span id="cb21-2">grouped_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.table</span>(</span>
<span id="cb21-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Region =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"East"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"East"</span>),</span>
<span id="cb21-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>),</span>
<span id="cb21-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>),</span>
<span id="cb21-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Units =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)</span>
<span id="cb21-7">)</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add regional totals</span></span>
<span id="cb21-10">regional_totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grouped_dt[, </span>
<span id="cb21-11">  .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Regional Total"</span>, </span>
<span id="cb21-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Sales), </span>
<span id="cb21-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Units =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Units)), </span>
<span id="cb21-14">  by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> Region</span>
<span id="cb21-15">]</span>
<span id="cb21-16"></span>
<span id="cb21-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add grand total</span></span>
<span id="cb21-18">grand_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> grouped_dt[, </span>
<span id="cb21-19">  .(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Region =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Grand Total"</span>,</span>
<span id="cb21-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span>, </span>
<span id="cb21-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Sales), </span>
<span id="cb21-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Units =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(Units))</span>
<span id="cb21-23">]</span>
<span id="cb21-24"></span>
<span id="cb21-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine all</span></span>
<span id="cb21-26">complete_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(grouped_dt, regional_totals, grand_total))</span>
<span id="cb21-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setorder</span>(complete_dt, Region, Product)</span>
<span id="cb21-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(complete_dt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Region        Product Sales Units
         &lt;char&gt;         &lt;char&gt; &lt;num&gt; &lt;num&gt;
 1:        East              A   120    12
 2:        East              B   180    18
 3:        East Regional Total   300    30
 4: Grand Total              -  1000   100
 5:       North              A   100    10
 6:       North              B   200    20
 7:       North Regional Total   300    30
 8:       South              A   150    15
 9:       South              B   250    25
10:       South Regional Total   400    40</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="performance-comparison-using-the-rbenchmark-package" class="level1">
<h1>Performance Comparison Using the <code>rbenchmark</code> Package</h1>
<p>To objectively compare the speed of adding a total row using <strong>Base R</strong>, <strong>dplyr</strong>, and <strong>data.table</strong>, we can use the <a href="https://cran.r-project.org/web/packages/rbenchmark/index.html"><code>rbenchmark</code></a> package. This package allows you to run each method multiple times and provides a summary of their execution times, making it easy to see which approach is fastest on your system.</p>
<p>Below is a reproducible example using a data frame with 10,000 rows and three numeric columns. We’ll benchmark each method for adding a total row.</p>
<div class="cell" data-messge="false">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install and load required packages</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages(c("dplyr", "data.table", "rbenchmark"))</span></span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb23-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb23-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rbenchmark)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a sample data frame</span></span>
<span id="cb23-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb23-9">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb23-10">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb23-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>), n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q1_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q2_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q3_Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb23-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb23-16">)</span>
<span id="cb23-17"></span>
<span id="cb23-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base R method</span></span>
<span id="cb23-19">base_r_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb23-20">  numeric_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2_Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q3_Sales"</span>)</span>
<span id="cb23-21">  totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(df[, numeric_cols])</span>
<span id="cb23-22">  total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals))</span>
<span id="cb23-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(df, total_row)</span>
<span id="cb23-24">}</span>
<span id="cb23-25"></span>
<span id="cb23-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dplyr method</span></span>
<span id="cb23-27">dplyr_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb23-28">  df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb23-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb23-30">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb23-31">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb23-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb23-33">      )</span>
<span id="cb23-34">    )</span>
<span id="cb23-35">}</span>
<span id="cb23-36"></span>
<span id="cb23-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data.table method</span></span>
<span id="cb23-38">data_table_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb23-39">  dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(df)</span>
<span id="cb23-40">  num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dt)[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(dt, is.numeric)]</span>
<span id="cb23-41">  total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols]</span>
<span id="cb23-42">  total_row[, Product <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb23-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setcolorder</span>(total_row, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(dt))</span>
<span id="cb23-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(dt, total_row))</span>
<span id="cb23-45">}</span>
<span id="cb23-46"></span>
<span id="cb23-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Benchmark all three methods</span></span>
<span id="cb23-48"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">benchmark</span>(</span>
<span id="cb23-49">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">baseR =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">base_r_total</span>(),</span>
<span id="cb23-50">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dplyr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dplyr_total</span>(),</span>
<span id="cb23-51">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data_table =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data_table_total</span>(),</span>
<span id="cb23-52">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replications =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb23-53">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">columns =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"replications"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"elapsed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relative"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user.self"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sys.self"</span>)</span>
<span id="cb23-54">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        test replications elapsed relative user.self sys.self
1      baseR          500    0.57    1.000      0.53     0.03
3 data_table          500    0.77    1.351      0.71     0.06
2      dplyr          500    1.51    2.649      1.46     0.02</code></pre>
</div>
</div>
<ul>
<li><strong>elapsed</strong>: Total time taken (in seconds) for all replications.</li>
<li><strong>relative</strong>: Time relative to the fastest method (lower is better).</li>
</ul>
<p><strong>Tip:</strong> The <code>rbenchmark</code> package is a simple and effective way to compare the performance of different R code snippets, especially when you want to see clear timing differences between approaches.</p>
<p><strong>Summary:</strong></p>
<ul>
<li>Use <code>rbenchmark</code> to compare methods for adding total rows.</li>
<li>For large data, <strong>dplyr</strong> and <strong>data.table</strong> are generally faster than Base R.</li>
</ul>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it’s time to practice what you’ve learned. Try solving this problem:</p>
<p><strong>Challenge:</strong> You have monthly expense data for different departments. Add a total row showing the sum of all expenses.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Given data</span></span>
<span id="cb25-2">expenses <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb25-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HR"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IT"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sales"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Marketing"</span>),</span>
<span id="cb25-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Jan =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6000</span>),</span>
<span id="cb25-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Feb =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6500</span>),</span>
<span id="cb25-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7000</span>)</span>
<span id="cb25-7">)</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your task: Add a total row using any method</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution using dplyr (recommended)</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb26-3"></span>
<span id="cb26-4">expenses_with_total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> expenses <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_rows</span>(</span>
<span id="cb26-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(.,</span>
<span id="cb26-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>,</span>
<span id="cb26-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), sum)</span>
<span id="cb26-9">    )</span>
<span id="cb26-10">  )</span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(expenses_with_total)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Department   Jan   Feb   Mar
1         HR  5000  5200  4800
2         IT  8000  7500  8200
3      Sales 12000 13000 11500
4  Marketing  6000  6500  7000
5      Total 31000 32200 31500</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative: Base R solution</span></span>
<span id="cb28-2">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(expenses[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb28-3">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Department =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(totals))</span>
<span id="cb28-4">expenses_with_total_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbind</span>(expenses, total_row)</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative: data.table solution</span></span>
<span id="cb28-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(data.table)</span>
<span id="cb28-8">expenses_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.table</span>(expenses)</span>
<span id="cb28-9">num_cols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(expenses_dt)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb28-10">total_row_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> expenses_dt[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, sum), .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> num_cols]</span>
<span id="cb28-11">total_row_dt[, Department <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total"</span>]</span>
<span id="cb28-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setcolorder</span>(total_row_dt, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(expenses_dt))</span>
<span id="cb28-13">expenses_with_total_dt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbindlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(expenses_dt, total_row_dt))</span></code></pre></div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>Base R</strong> is best for simple cases and when avoiding dependencies</li>
<li><strong>dplyr</strong> offers the cleanest syntax and best performance for most use cases<br>
</li>
<li><strong>data.table</strong> provides the best memory efficiency for very large datasets</li>
<li>Always identify numeric columns before calculating totals</li>
<li>Use <code>na.rm = TRUE</code> in sum functions to handle missing values</li>
<li>Consider adding multiple summary rows (totals, averages, etc.) for comprehensive reports</li>
</ul>
</section>
<section id="best-practices-and-tips" class="level1">
<h1>Best Practices and Tips</h1>
<section id="handle-missing-values-properly" class="level2">
<h2 class="anchored" data-anchor-id="handle-missing-values-properly">1. Handle Missing Values Properly</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Always use na.rm = TRUE when calculating totals</span></span>
<span id="cb29-2">df_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb29-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>),</span>
<span id="cb29-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>),</span>
<span id="cb29-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Value2 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb29-6">)</span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct approach</span></span>
<span id="cb29-9">totals <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colSums</span>(df_with_na[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb29-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(totals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Value1 Value2 
   400    125 </code></pre>
</div>
</div>
</section>
<section id="preserve-data-types" class="level2">
<h2 class="anchored" data-anchor-id="preserve-data-types">2. Preserve Data Types</h2>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure numeric columns stay numeric</span></span>
<span id="cb31-2">total_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy structure</span></span>
<span id="cb31-3">total_row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clear values</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then fill in your totals</span></span></code></pre></div>
</section>
<section id="format-numbers-for-display" class="level2">
<h2 class="anchored" data-anchor-id="format-numbers-for-display">3. Format Numbers for Display</h2>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format large numbers for readability</span></span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb32-3">df_formatted <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(is.numeric), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">comma</span>(.)))</span></code></pre></div>
</section>
<section id="consider-tidy-data-principles" class="level2">
<h2 class="anchored" data-anchor-id="consider-tidy-data-principles">4. Consider Tidy Data Principles</h2>
<p>Remember that adding total rows technically violates “tidy data” principles where each row should represent one observation. Consider whether you need the total row in your data or just in your final output/report.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Adding a <strong>total row in R</strong> is a skill that every R programmer can master. We’ve explored three powerful methods:</p>
<ol type="1">
<li><strong>Base R</strong> - Simple and dependency-free</li>
<li><strong>dplyr</strong> - Modern, readable, and performant</li>
<li><strong>data.table</strong> - Fast and memory-efficient</li>
</ol>
<p>For most R programmers, <strong>dplyr provides the best balance</strong> of readability, performance, and ease of use. However, don’t overlook Base R for simple scripts or data.table when working with massive datasets.</p>
<p><strong>Ready to level up your R skills?</strong> Start practicing with your own datasets and experiment with combining these methods to create more complex summaries and reports!</p>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: Can I add multiple total rows at once?</strong> Yes! You can add multiple summary rows (like totals, averages, and counts) by combining multiple <code>summarise()</code> calls in dplyr or creating multiple summary rows and using <code>rbind()</code> in Base R.</p>
<p><strong>Q2: How do I add total rows to grouped data?</strong> Use <code>group_by()</code> before <code>summarise()</code> in dplyr, or use the <code>by</code> parameter in data.table to create group-wise totals before adding a grand total.</p>
<p><strong>Q3: What if my data has factor columns?</strong> Convert factors to characters first using <code>as.character()</code>, or handle them separately when creating your total row to avoid factor level conflicts.</p>
<p><strong>Q4: Is it better to add totals in R or in my reporting tool?</strong> It depends on your workflow. Adding totals in R ensures consistency across all outputs, while adding them in reporting tools (like Excel) keeps your data “tidy.”</p>
<p><strong>Q5: How can I add row totals (sum across columns) instead of column totals?</strong> Use <code>rowSums()</code> in Base R or <code>rowwise()</code> with <code>mutate()</code> in dplyr to calculate sums across columns for each row.</p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did this guide help you master adding total rows in R? We’d love to hear about your use cases and any creative solutions you’ve developed!</p>
<p>Share your thoughts in the comments below, or connect with us on social media. Don’t forget to bookmark this guide for future reference and share it with fellow R programmers who might find it helpful!</p>
<p><strong>Happy coding, and may your totals always add up! 📊</strong></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><a href="https://dplyr.tidyverse.org/">dplyr: A Grammar of Data Manipulation (official documentation)</a></li>
<li><a href="https://cran.r-project.org/package=data.table/vignettes/datatable-intro.html">Introduction to data.table (official CRAN vignette)</a></li>
<li><a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.html">R Introduction Manual - Data manipulation (CRAN)</a></li>
<li><a href="https://adv-r.hadley.nz/perf-measure.html">Profiling and benchmarking - Advanced R by Hadley Wickham</a></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-28/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Totals Rows in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-28/</guid>
  <pubDate>Mon, 28 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Calculate Odds Ratios in R With Examples Using epitools</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-21/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’re an R programmer working with categorical data, you’ll often need to measure the association between two binary variables. That’s where <strong>odds ratios</strong> come in handy! The <code>epitools</code> package in R makes calculating odds ratios simple with its <code>oddsratio()</code> function .</p>
<p>In this guide, we’ll walk through everything you need to know about calculating odds ratios in R. You’ll learn the function syntax, see practical examples, and understand how to interpret the results. Whether you’re analyzing medical data, conducting epidemiological research, or exploring any binary relationships, this tutorial has you covered.</p>
</section>
<section id="what-are-odds-ratios" class="level1">
<h1>What Are Odds Ratios?</h1>
<p>An <strong>odds ratio (OR)</strong> compares the odds of an event happening in one group versus another group. It’s especially useful when you have two binary variables (yes/no, exposed/unexposed, success/failure) .</p>
<p>Here’s what the values mean:</p>
<ul>
<li><strong>OR = 1</strong>: No association between the variables</li>
<li><strong>OR &gt; 1</strong>: Positive association (higher odds in the first group)</li>
<li><strong>OR &lt; 1</strong>: Negative association (lower odds in the first group)</li>
</ul>
<p>For example, if the odds ratio is 3.0, the odds of the outcome are 3 times higher in the exposed group compared to the unexposed group.</p>
</section>
<section id="installing-and-loading-epitools" class="level1">
<h1>Installing and Loading epitools</h1>
<p>Before we dive into calculations, let’s get the <code>epitools</code> package ready:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the package (only need to do this once)</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("epitools")</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the package</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(epitools)</span></code></pre></div>
</div>
</section>
<section id="understanding-oddsratio-syntax" class="level1">
<h1>Understanding oddsratio() Syntax</h1>
<p>The <code>oddsratio()</code> function has a straightforward syntax with several customizable options :</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, </span>
<span id="cb2-2">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"midp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fisher"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>), </span>
<span id="cb2-3">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">conf.level =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>, </span>
<span id="cb2-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rev =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neither"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rows"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>), </span>
<span id="cb2-5">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">correction =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb2-6">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">verbose =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>Let’s break down each parameter:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>x</strong></td>
<td>A 2x2 matrix or table of counts</td>
<td>Required</td>
</tr>
<tr class="even">
<td><strong>y</strong></td>
<td>Optional second vector (rarely used)</td>
<td>NULL</td>
</tr>
<tr class="odd">
<td><strong>method</strong></td>
<td>Estimation method</td>
<td>“midp”</td>
</tr>
<tr class="even">
<td><strong>conf.level</strong></td>
<td>Confidence level (e.g., 0.95 for 95%)</td>
<td>0.95</td>
</tr>
<tr class="odd">
<td><strong>rev</strong></td>
<td>Reverse table orientation</td>
<td>“neither”</td>
</tr>
<tr class="even">
<td><strong>correction</strong></td>
<td>Apply continuity correction</td>
<td>FALSE</td>
</tr>
<tr class="odd">
<td><strong>verbose</strong></td>
<td>Print detailed output</td>
<td>FALSE</td>
</tr>
</tbody>
</table>
</section>
<section id="creating-2x2-tables-in-r" class="level1">
<h1>Creating 2x2 Tables in R</h1>
<p>Odds ratios work with 2x2 contingency tables. Here’s how to create them :</p>
<section id="method-1-using-matrix" class="level2">
<h2 class="anchored" data-anchor-id="method-1-using-matrix">Method 1: Using matrix()</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 2x2 table</span></span>
<span id="cb3-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add row and column names for clarity</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>)</span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disease"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Disease"</span>)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the table</span></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Disease No Disease
Exposed        30         70
Unexposed      10         90</code></pre>
</div>
</div>
</section>
<section id="method-2-using-a-data-frame" class="level2">
<h2 class="anchored" data-anchor-id="method-2-using-a-data-frame">Method 2: Using a Data Frame</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame</span></span>
<span id="cb5-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb5-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exposure =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)),</span>
<span id="cb5-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disease =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>), </span>
<span id="cb5-5">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>))</span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to table</span></span>
<span id="cb5-9">my_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>exposure, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>disease)</span>
<span id="cb5-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(my_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           
            No Yes
  Exposed   70  30
  Unexposed 90  10</code></pre>
</div>
</div>
</section>
</section>
<section id="basic-examples-with-oddsratio" class="level1">
<h1>Basic Examples with oddsratio()</h1>
<p>Let’s calculate odds ratios with real examples :</p>
<section id="example-1-simple-calculation" class="level2">
<h2 class="anchored" data-anchor-id="example-1-simple-calculation">Example 1: Simple Calculation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the data</span></span>
<span id="cb7-2">data1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(data1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>)</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(data1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disease"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Disease"</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate odds ratio</span></span>
<span id="cb7-7">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>)</span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower   upper
               Exposed   1.000000       NA      NA
               Unexposed 3.857143 1.766603 8.42156

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "Unconditional MLE &amp; normal approximation (Wald) CI"</code></pre>
</div>
</div>
<p>Based on our computation results, this would give us:</p>
<ul>
<li><strong>Odds Ratio</strong>: 3.857</li>
<li><strong>95% CI</strong>: 1.767 to 8.422</li>
<li><strong>p-value</strong>: 0.0007</li>
</ul>
</section>
<section id="example-2-different-method-options" class="level2">
<h2 class="anchored" data-anchor-id="example-2-different-method-options">Example 2: Different Method Options</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using Fisher's exact method</span></span>
<span id="cb9-2">result_fisher <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fisher"</span>)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fisher's Exact Method Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Fisher's Exact Method Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_fisher)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower    upper
               Exposed   1.000000       NA       NA
               Unexposed 3.831525 1.684537 9.405984

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "Conditional MLE &amp; exact CI from 'fisher.test'"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using mid-p method (default)</span></span>
<span id="cb13-2">result_midp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"midp"</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mid-P Method Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mid-P Method Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_midp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower    upper
               Exposed   1.000000       NA       NA
               Unexposed 3.796852 1.783145 8.728312

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "median-unbiased estimate &amp; mid-p exact CI"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using small sample adjustment</span></span>
<span id="cb17-2">result_small <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(data1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"small"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in any(or, na.rm = TRUE): coercing argument of type 'double' to logical</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Small Sample Adjustment Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Small Sample Adjustment Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_small)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Disease No Disease Total
Exposed        30         70   100
Unexposed      10         90   100
Total          40        160   200

$measure
                        NA
odds ratio with 95% C.I. estimate    lower    upper
               Exposed   1.000000       NA       NA
               Unexposed 3.457106 1.731167 8.031582

$p.value
           NA
two-sided     midp.exact fisher.exact  chi.square
  Exposed             NA           NA          NA
  Unexposed 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "small sample-adjusted UMLE &amp; normal approx (Wald) CI"</code></pre>
</div>
</div>
</section>
</section>
<section id="interpreting-the-results" class="level1">
<h1>Interpreting the Results</h1>
<p>When you run <code>oddsratio()</code>, you get several key outputs :</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Output</th>
<th>What It Means</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Odds Ratio</strong></td>
<td>The strength of association</td>
</tr>
<tr class="even">
<td><strong>95% CI Lower</strong></td>
<td>Lower bound of confidence interval</td>
</tr>
<tr class="odd">
<td><strong>95% CI Upper</strong></td>
<td>Upper bound of confidence interval</td>
</tr>
<tr class="even">
<td><strong>p-value</strong></td>
<td>Statistical significance test</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Key Takeaway</strong>: If the confidence interval includes 1, the association is not statistically significant at your chosen confidence level.</p>
</blockquote>
</section>
<section id="real-world-examples" class="level1">
<h1>Real-World Examples</h1>
<p>Let’s look at some practical scenarios:</p>
<section id="medical-study-example" class="level2">
<h2 class="anchored" data-anchor-id="medical-study-example">Medical Study Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Smoking and lung cancer data</span></span>
<span id="cb23-2">smoking_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(smoking_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smokers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-smokers"</span>)</span>
<span id="cb23-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(smoking_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cancer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Cancer"</span>)</span>
<span id="cb23-5"></span>
<span id="cb23-6">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(smoking_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>)</span>
<span id="cb23-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smoking and Lung Cancer Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Smoking and Lung Cancer Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
            Cancer No Cancer Total
Smokers         15        25    40
Non-smokers      5        35    40
Total           20        60    80

$measure
                        NA
odds ratio with 95% C.I. estimate    lower   upper
             Smokers          1.0       NA      NA
             Non-smokers      4.2 1.350224 13.0645

$p.value
             NA
two-sided     midp.exact fisher.exact  chi.square
  Smokers             NA           NA          NA
  Non-smokers 0.01128547   0.01877238 0.009823275

$correction
[1] FALSE

attr(,"method")
[1] "Unconditional MLE &amp; normal approximation (Wald) CI"</code></pre>
</div>
</div>
<p>From our calculations, this gives:</p>
<ul>
<li><strong>Odds Ratio</strong>: 4.200</li>
<li><strong>95% CI</strong>: 1.350 to 13.065</li>
<li><strong>p-value</strong>: 0.011</li>
</ul>
<p>This means smokers have 4.2 times higher odds of cancer compared to non-smokers.</p>
</section>
<section id="small-sample-example" class="level2">
<h2 class="anchored" data-anchor-id="small-sample-example">Small Sample Example</h2>
<p>When dealing with small samples, use appropriate methods:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sparse data</span></span>
<span id="cb27-2">sparse_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb27-3">result_sparse <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(sparse_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fisher"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in chisq.test(xx, correct = correction): Chi-squared approximation may
be incorrect</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sparse Data Results:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sparse Data Results:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_sparse)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
          Outcome
Predictor  Disease1 Disease2 Total
  Exposed1        2        8    10
  Exposed2        1       19    20
  Total           3       27    30

$measure
          odds ratio with 95% C.I.
Predictor  estimate     lower    upper
  Exposed1 1.000000        NA       NA
  Exposed2 4.480431 0.2060739 293.9622

$p.value
          two-sided
Predictor  midp.exact fisher.exact chi.square
  Exposed1         NA           NA         NA
  Exposed2  0.2807882    0.2512315  0.1967056

$correction
[1] FALSE

attr(,"method")
[1] "Conditional MLE &amp; exact CI from 'fisher.test'"</code></pre>
</div>
</div>
<p>Results:</p>
<ul>
<li><strong>Odds Ratio</strong>: 4.48</li>
<li><strong>95% CI</strong>: 0.206 to 293.962</li>
<li><strong>p-value</strong>: 0.251</li>
</ul>
<p>Note the wide confidence interval due to small sample size!</p>
</section>
</section>
<section id="visualizing-odds-ratios" class="level1">
<h1>Visualizing Odds Ratios</h1>
<p>Visual representations help communicate your findings. Here are the odds ratios from our examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'dplyr'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:stats':

    filter, lag</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame for plotting</span></span>
<span id="cb37-2">odds_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb37-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Smokers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Non-smokers"</span>),</span>
<span id="cb37-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Odds_Ratio =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.857</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb37-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Lower_CI =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.767</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.350</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>),</span>
<span id="cb37-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Upper_CI =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.422</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">13.065</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb37-7">)</span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the odds ratios with confidence intervals</span></span>
<span id="cb37-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(odds_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> Group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> Odds_Ratio)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_errorbar</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> Lower_CI, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> Upper_CI), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yintercept =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dashed"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Odds Ratios with 95% Confidence Intervals"</span>,</span>
<span id="cb37-14">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Odds Ratio"</span>,</span>
<span id="cb37-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Group"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-21/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The plot shows odds ratios with 95% confidence intervals. The dashed line at OR=1 represents no association.</p>
<p>Here’s how the data looks in a contingency table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a contingency table for visualization</span></span>
<span id="cb38-2">contingency_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb38-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(contingency_table) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Exposed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unexposed"</span>)</span>
<span id="cb38-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(contingency_table) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Disease"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Disease"</span>)</span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the contingency table</span></span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(contingency_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          Disease No Disease
Exposed        30         70
Unexposed      10         90</code></pre>
</div>
</div>
</section>
<section id="common-use-cases" class="level1">
<h1>Common Use Cases</h1>
<p>Odds ratios are widely used in:</p>
<ol type="1">
<li><strong>Case-Control Studies</strong>: Comparing disease cases with healthy controls</li>
<li><strong>Clinical Trials</strong>: Evaluating treatment effectiveness</li>
<li><strong>Epidemiology</strong>: Identifying risk factors for diseases</li>
<li><strong>Cross-Sectional Studies</strong>: Analyzing prevalence relationships</li>
<li><strong>Public Health</strong>: Informing policy decisions</li>
</ol>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try calculating an odds ratio yourself! Given this vaccination data:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th></th>
<th>Got Flu</th>
<th>No Flu</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Vaccinated</td>
<td>10</td>
<td>90</td>
</tr>
<tr class="even">
<td>Unvaccinated</td>
<td>30</td>
<td>70</td>
</tr>
</tbody>
</table>
<p><strong>Challenge</strong>: Calculate the odds ratio using the <code>oddsratio()</code> function. What does it tell you about vaccine effectiveness?</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the table</span></span>
<span id="cb40-2">vaccine_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb40-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(vaccine_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vaccinated"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unvaccinated"</span>)</span>
<span id="cb40-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(vaccine_data) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Got Flu"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Flu"</span>)</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate odds ratio</span></span>
<span id="cb40-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(epitools)</span>
<span id="cb40-8">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">oddsratio</span>(vaccine_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wald"</span>)</span>
<span id="cb40-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$data
             Got Flu No Flu Total
Vaccinated        10     90   100
Unvaccinated      30     70   100
Total             40    160   200

$measure
                        NA
odds ratio with 95% C.I.  estimate     lower     upper
            Vaccinated   1.0000000        NA        NA
            Unvaccinated 0.2592593 0.1187428 0.5660582

$p.value
              NA
two-sided        midp.exact fisher.exact  chi.square
  Vaccinated             NA           NA          NA
  Unvaccinated 0.0004024082 0.0006504107 0.000406952

$correction
[1] FALSE

attr(,"method")
[1] "Unconditional MLE &amp; normal approximation (Wald) CI"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The odds ratio should be approximately 0.259</span></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This means vaccinated people have about 74% lower odds of getting flu</span></span>
<span id="cb42-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1 - 0.259 = 0.741 or 74.1% reduction)</span></span></code></pre></div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>Odds ratios</strong> measure association between two binary variables</li>
<li>Use <code>epitools::oddsratio()</code> for easy calculation in R</li>
<li>The function requires a 2x2 contingency table</li>
<li>Choose the right method based on sample size:
<ul>
<li>Large samples: “wald”</li>
<li>Small samples: “fisher” or “midp”</li>
</ul></li>
<li>Always check confidence intervals for statistical significance</li>
<li>OR &gt; 1 means positive association, OR &lt; 1 means negative association</li>
<li>Wide confidence intervals indicate uncertainty (often due to small samples)</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Calculating <strong>odds ratios in R</strong> using the <code>epitools</code> package is straightforward once you understand the basics. The <code>oddsratio()</code> function provides a powerful tool for analyzing binary relationships in your data.</p>
<p>Remember to:</p>
<ul>
<li>Structure your data as a 2x2 table</li>
<li>Choose the appropriate estimation method</li>
<li>Interpret both the odds ratio and its confidence interval</li>
<li>Consider sample size when drawing conclusions</li>
</ul>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: What’s the difference between odds ratio and risk ratio?</strong> A: Odds ratios compare odds (probability of event/probability of no event), while risk ratios compare probabilities directly. Odds ratios are preferred in case-control studies where risk cannot be directly calculated.</p>
<p><strong>Q2: When should I use Fisher’s method instead of Wald?</strong> A: Use Fisher’s method when you have small sample sizes (any cell count &lt; 5) or sparse data. It provides exact p-values rather than approximations.</p>
<p><strong>Q3: How do I handle tables larger than 2x2?</strong> A: The <code>oddsratio()</code> function only works with 2x2 tables. For larger tables, you’ll need to subset your data or use other functions like <code>epitab()</code> for more complex analyses.</p>
<p><strong>Q4: What does it mean if my confidence interval is very wide?</strong> A: A wide confidence interval indicates high uncertainty in your estimate, usually due to small sample sizes. Consider collecting more data or using methods designed for small samples.</p>
<p><strong>Q5: Can I use odds ratios for non-binary variables?</strong> A: No, odds ratios are specifically for binary (two-category) variables. For variables with more categories, consider other measures like relative risk ratios or multinomial logistic regression.</p>
<p><em>Found this guide helpful? Share it with fellow R programmers and let us know what topics you’d like us to cover next! Follow us for more R programming tutorials and statistical analysis guides.</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://cran.r-project.org/web/packages/epitools/index.html">https://cran.r-project.org/web/packages/epitools/index.html</a></p></li>
<li><p><a href="https://www.statology.org/odds-ratio-in-r/">https://www.statology.org/odds-ratio-in-r/</a></p></li>
<li><p><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6532386/">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6532386/</a></p></li>
<li><p><a href="https://stats.oarc.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/">https://stats.oarc.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-21/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>odds Ratio in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-21/</guid>
  <pubDate>Mon, 21 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Master Python Input Validation: A Beginner’s Guide to Safe User Input</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-16/</link>
  <description><![CDATA[ 





<div class="cell">
<div class="cell-output cell-output-stdout">
<pre><code>exit</code></pre>
</div>
</div>
<p><em>Authors Note: I am learning as I write this series so you might find mistakes. If you find them please comment, or if you know a better way, then please share it!</em></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Have you ever written a Python program that crashed because a user typed “twenty” instead of “20”? Or maybe your code broke when someone entered their email as “not-an-email”? <strong>Input validation</strong> is your shield against these common problems, and today you’re going to learn them!</p>
<p>Think of input validation as a security guard for your program. Just like a guard checks IDs at the door, input validation checks that user data is correct, safe, and in the expected format before your program processes it. For anyone building input forms, this is a necessary skill in order to write robust, user-friendly applications that won’t crash at the first sign of unexpected input.</p>
<p>In this comprehensive guide, we’ll explore powerful input validation functions that make your life easier, from basic string validation to complex date/time checking. You’ll discover how the <strong>PyInputPlus</strong> library transforms tedious validation code into simple, one-line solutions .</p>
</section>
<section id="why-input-validation-matters-for-python-beginners" class="level1">
<h1>Why Input Validation Matters for Python Beginners</h1>
<section id="the-hidden-dangers-of-user-input" class="level2">
<h2 class="anchored" data-anchor-id="the-hidden-dangers-of-user-input">The Hidden Dangers of User Input</h2>
<p>Every time your program accepts user input, you’re opening a door to potential problems:</p>
<ul>
<li><strong>Type Errors:</strong> Users might enter text when you expect numbers</li>
<li><strong>Logic Errors:</strong> Invalid values can break your program’s logic</li>
<li><strong>Security Vulnerabilities:</strong> Unvalidated input can lead to serious security issues</li>
<li><strong>Poor User Experience:</strong> Crashes frustrate users and make your program look unprofessional</li>
</ul>
</section>
<section id="the-traditional-approach-vs.-modern-solutions" class="level2">
<h2 class="anchored" data-anchor-id="the-traditional-approach-vs.-modern-solutions">The Traditional Approach vs.&nbsp;Modern Solutions</h2>
<p>Let’s compare how input validation looks with and without proper tools:</p>
<p><strong>Traditional Approach (Tedious and Error-Prone):</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb2-2">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span>)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb2-4">        age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(age)</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb2-6">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please enter a positive number."</span>)</span>
<span id="cb2-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb2-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>:</span>
<span id="cb2-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Please use numeric digits."</span>)</span></code></pre></div>
<p><strong>Modern Approach with PyInputPlus (Clean and Simple):</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyinputplus <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyip</span>
<span id="cb3-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>The difference is striking! The modern approach handles all validation, error messages, and reprompting automatically .</p>
</section>
</section>
<section id="getting-started-with-pyinputplus" class="level1">
<h1>Getting Started with PyInputPlus</h1>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>Before we get into the functions, let’s install PyInputPlus:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install pyinputplus</span></code></pre></div>
</section>
<section id="basic-import" class="level2">
<h2 class="anchored" data-anchor-id="basic-import">Basic Import</h2>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyinputplus <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyip</span></code></pre></div>
<p>Now you’re ready!</p>
</section>
</section>
<section id="complete-guide-to-input-validation-functions" class="level1">
<h1>Complete Guide to Input Validation Functions</h1>
<p>Let’s explore each input validation function with some practical examples.</p>
<section id="inputstr---smart-string-input" class="level2">
<h2 class="anchored" data-anchor-id="inputstr---smart-string-input">1. inputStr() - Smart String Input</h2>
<p>The <code>inputStr()</code> function is like Python’s built-in <code>input()</code>, but with validation superpowers.</p>
<p><strong>Basic Usage:</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your name: "</span>)</span></code></pre></div>
<p><strong>Advanced Features:</strong></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Minimum and maximum length</span></span>
<span id="cb7-2">username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb7-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create username (3-15 characters): "</span>,</span>
<span id="cb7-4">    minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb7-5">    maxLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb7-6">)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Custom validation with regex</span></span>
<span id="cb7-9">phone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb7-10">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter phone (digits only): "</span>,</span>
<span id="cb7-11">    allowRegexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^\d+$'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only digits allowed</span></span>
<span id="cb7-12">)</span></code></pre></div>
</section>
<section id="inputint---integer-input-with-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputint---integer-input-with-validation">2. inputInt() - Integer Input with Validation</h2>
<p>Never worry about type conversion errors again!</p>
<p><strong>Basic Usage:</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your age: "</span>)</span></code></pre></div>
<p><strong>With Range Validation:</strong></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Age between 1 and 120</span></span>
<span id="cb9-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(</span>
<span id="cb9-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age (1-120): "</span>,</span>
<span id="cb9-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb9-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb9-6">)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Score with specific range</span></span>
<span id="cb9-9">score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(</span>
<span id="cb9-10">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter test score (0-100): "</span>,</span>
<span id="cb9-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb9-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb9-13">)</span></code></pre></div>
</section>
<section id="inputfloat---decimal-number-input" class="level2">
<h2 class="anchored" data-anchor-id="inputfloat---decimal-number-input">3. inputFloat() - Decimal Number Input</h2>
<p>Perfect for prices, measurements, and scientific data.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Product price</span></span>
<span id="cb10-2">price <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFloat(</span>
<span id="cb10-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter price: $"</span>,</span>
<span id="cb10-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Minimum 1 cent</span></span>
<span id="cb10-5">)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temperature reading</span></span>
<span id="cb10-8">temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFloat(</span>
<span id="cb10-9">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter temperature (°C): "</span>,</span>
<span id="cb10-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">273.15</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Absolute zero</span></span>
<span id="cb10-11">)</span></code></pre></div>
</section>
<section id="inputchoice---restricted-choice-input" class="level2">
<h2 class="anchored" data-anchor-id="inputchoice---restricted-choice-input">4. inputChoice() - Restricted Choice Input</h2>
<p>Ensure users only select from predefined options.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple choice</span></span>
<span id="cb11-2">size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputChoice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'small'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'medium'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'large'</span>])</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With custom prompt</span></span>
<span id="cb11-5">color <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputChoice(</span>
<span id="cb11-6">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>],</span>
<span id="cb11-7">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Choose a color (red/green/blue): "</span></span>
<span id="cb11-8">)</span></code></pre></div>
</section>
<section id="inputmenu---interactive-menu-selection" class="level2">
<h2 class="anchored" data-anchor-id="inputmenu---interactive-menu-selection">5. inputMenu() - Interactive Menu Selection</h2>
<p>Create user-friendly menus with automatic numbering.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic menu</span></span>
<span id="cb12-2">options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'New Game'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Load Game'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Settings'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Quit'</span>]</span>
<span id="cb12-3">choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputMenu(options)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The menu displays as:</span></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. New Game</span></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Load Game</span></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Settings</span></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Quit</span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User enters a number, function returns the selected option</span></span></code></pre></div>
</section>
<section id="inputdatetime---date-and-time-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputdatetime---date-and-time-validation">6. inputDatetime() - Date and Time Validation</h2>
<p>Handle date/time input without complex parsing.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic date input</span></span>
<span id="cb13-2">birthday <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputDatetime(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your birthday: "</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With specific format</span></span>
<span id="cb13-5">appointment <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputDatetime(</span>
<span id="cb13-6">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter date (MM/DD/YYYY): "</span>,</span>
<span id="cb13-7">    formats<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%m/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/%Y'</span>]</span>
<span id="cb13-8">)</span></code></pre></div>
</section>
<section id="inputyesno---boolean-questions-made-easy" class="level2">
<h2 class="anchored" data-anchor-id="inputyesno---boolean-questions-made-easy">7. inputYesNo() - Boolean Questions Made Easy</h2>
<p>Perfect for confirmation prompts.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns True for yes, False for no</span></span>
<span id="cb14-2">confirm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputYesNo(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you want to continue? "</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accepts: yes, y, no, n (case-insensitive)</span></span>
<span id="cb14-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> confirm:</span>
<span id="cb14-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Continuing..."</span>)</span>
<span id="cb14-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb14-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Operation cancelled."</span>)</span></code></pre></div>
</section>
<section id="inputbool---truefalse-input" class="level2">
<h2 class="anchored" data-anchor-id="inputbool---truefalse-input">8. inputBool() - True/False Input</h2>
<p>For when you need explicit Boolean values.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Accepts "True" or "False"</span></span>
<span id="cb15-2">debug_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputBool(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enable debug mode? "</span>)</span></code></pre></div>
</section>
<section id="inputemail---email-address-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputemail---email-address-validation">9. inputEmail() - Email Address Validation</h2>
<p>Ensure valid email formats without regex headaches.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputEmail(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter your email address: "</span>)</span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatically validates format like user@example.com</span></span></code></pre></div>
</section>
<section id="inputfilepath---file-path-validation" class="level2">
<h2 class="anchored" data-anchor-id="inputfilepath---file-path-validation">10. inputFilepath() - File Path Validation</h2>
<p>Check file paths and optionally verify existence.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Just validate path format</span></span>
<span id="cb17-2">config_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFilepath(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter config file path: "</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure file exists</span></span>
<span id="cb17-5">data_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputFilepath(</span>
<span id="cb17-6">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter data file: "</span>,</span>
<span id="cb17-7">    mustExist<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb17-8">)</span></code></pre></div>
</section>
<section id="inputpassword---secure-password-input" class="level2">
<h2 class="anchored" data-anchor-id="inputpassword---secure-password-input">11. inputPassword() - Secure Password Input</h2>
<p>Hide password characters as users type.</p>
<p><strong>Example:</strong></p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputPassword(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter password: "</span>)</span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Characters are masked with * as user types</span></span></code></pre></div>
</section>
</section>
<section id="comprehensive-comparison-table" class="level1">
<h1>Comprehensive Comparison Table</h1>
<p>Here’s a detailed comparison of all input validation functions:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 12%">
<col style="width: 11%">
<col style="width: 16%">
<col style="width: 19%">
<col style="width: 20%">
<col style="width: 18%">
</colgroup>
<thead>
<tr class="header">
<th>Function</th>
<th>Purpose</th>
<th>Return Type</th>
<th>Example Input</th>
<th>Example Output</th>
<th>Key Features</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>inputStr()</strong></td>
<td>Validated string input</td>
<td><code>str</code></td>
<td>“Hello”</td>
<td>“Hello”</td>
<td>Length limits, regex patterns</td>
</tr>
<tr class="even">
<td><strong>inputInt()</strong></td>
<td>Integer validation</td>
<td><code>int</code></td>
<td>“42”</td>
<td>42</td>
<td>Min/max values, greater/less than</td>
</tr>
<tr class="odd">
<td><strong>inputFloat()</strong></td>
<td>Decimal validation</td>
<td><code>float</code></td>
<td>“3.14”</td>
<td>3.14</td>
<td>Range checking, precision</td>
</tr>
<tr class="even">
<td><strong>inputChoice()</strong></td>
<td>Limited options</td>
<td><code>str</code></td>
<td>“blue”</td>
<td>“blue”</td>
<td>Must match list items</td>
</tr>
<tr class="odd">
<td><strong>inputMenu()</strong></td>
<td>Numbered menu</td>
<td><code>str</code></td>
<td>“2”</td>
<td>“Option 2”</td>
<td>Auto-numbered display</td>
</tr>
<tr class="even">
<td><strong>inputDatetime()</strong></td>
<td>Date/time input</td>
<td><code>datetime</code></td>
<td>“2024-01-01”</td>
<td>datetime object</td>
<td>Format flexibility</td>
</tr>
<tr class="odd">
<td><strong>inputYesNo()</strong></td>
<td>Yes/no questions</td>
<td><code>bool</code></td>
<td>“yes”</td>
<td>True</td>
<td>Accepts y/n variations</td>
</tr>
<tr class="even">
<td><strong>inputBool()</strong></td>
<td>Boolean input</td>
<td><code>bool</code></td>
<td>“True”</td>
<td>True</td>
<td>Explicit True/False</td>
</tr>
<tr class="odd">
<td><strong>inputEmail()</strong></td>
<td>Email validation</td>
<td><code>str</code></td>
<td>“user@example.com”</td>
<td>“user@example.com”</td>
<td>Format checking</td>
</tr>
<tr class="even">
<td><strong>inputFilepath()</strong></td>
<td>Path validation</td>
<td><code>str</code></td>
<td>“/home/file.txt”</td>
<td>“/home/file.txt”</td>
<td>Existence checking</td>
</tr>
<tr class="odd">
<td><strong>inputPassword()</strong></td>
<td>Hidden input</td>
<td><code>str</code></td>
<td>“secret123”</td>
<td>“secret123”</td>
<td>Character masking</td>
</tr>
</tbody>
</table>
</section>
<section id="advanced-features-and-best-practices" class="level1">
<h1>Advanced Features and Best Practices</h1>
<section id="setting-timeouts-and-retry-limits" class="level2">
<h2 class="anchored" data-anchor-id="setting-timeouts-and-retry-limits">1. Setting Timeouts and Retry Limits</h2>
<p>Prevent infinite loops with smart limits:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Timeout after 10 seconds</span></span>
<span id="cb19-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quick! Enter your name: "</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Limit to 3 attempts</span></span>
<span id="cb19-5">answer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter the answer: "</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine both</span></span>
<span id="cb19-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter code: "</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</section>
<section id="default-values" class="level2">
<h2 class="anchored" data-anchor-id="default-values">2. Default Values</h2>
<p>Provide fallbacks for better user experience:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default if user presses Enter</span></span>
<span id="cb20-2">name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb20-3">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter name (or press Enter for 'Guest'): "</span>,</span>
<span id="cb20-4">    default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Guest"</span>,</span>
<span id="cb20-5">    blank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb20-6">)</span></code></pre></div>
</section>
<section id="custom-validation-functions" class="level2">
<h2 class="anchored" data-anchor-id="custom-validation-functions">3. Custom Validation Functions</h2>
<p>Create your own validation logic:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> validatePhone(text):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(text) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> text.isdigit():</span>
<span id="cb21-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Phone must be 10 digits'</span>)</span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> text</span>
<span id="cb21-5"></span>
<span id="cb21-6">phone <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputCustom(validatePhone)</span></code></pre></div>
</section>
<section id="error-handling" class="level2">
<h2 class="anchored" data-anchor-id="error-handling">4. Error Handling</h2>
<p>Gracefully handle validation failures:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">try</span>:</span>
<span id="cb22-2">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: "</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">except</span> pyip.RetryLimitException:</span>
<span id="cb22-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Too many invalid attempts!"</span>)</span>
<span id="cb22-5">    age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Default value</span></span></code></pre></div>
</section>
</section>
<section id="security-best-practices" class="level1">
<h1>Security Best Practices</h1>
<blockquote class="blockquote">
<p><strong>🔒 Security First:</strong> Input validation is your first line of defense against security vulnerabilities .</p>
</blockquote>
<section id="important-security-guidelines" class="level2">
<h2 class="anchored" data-anchor-id="important-security-guidelines">Important Security Guidelines</h2>
<ol type="1">
<li><p><strong>Never Trust User Input</strong></p>
<ul>
<li>Always validate, even from “trusted” sources</li>
<li>Assume all input is potentially malicious</li>
</ul></li>
<li><p><strong>Use Whitelisting Over Blacklisting</strong></p>
<ul>
<li>Define what’s allowed, not what’s forbidden</li>
<li>More secure and maintainable</li>
</ul></li>
<li><p><strong>Validate Early and Often</strong></p>
<ul>
<li>Check input immediately upon receipt</li>
<li>Re-validate before critical operations</li>
</ul></li>
<li><p><strong>Avoid Dangerous Functions</strong></p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NEVER DO THIS:</span></span>
<span id="cb23-2">user_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter code: "</span>)</span>
<span id="cb23-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>(user_code)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extremely dangerous!</span></span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DO THIS INSTEAD:</span></span>
<span id="cb23-6">choice <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputChoice([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option2'</span>])</span></code></pre></div></li>
<li><p><strong>Sanitize for Context</strong></p>
<ul>
<li>Different contexts require different validation</li>
<li>File paths need different checks than usernames</li>
</ul></li>
</ol>
</section>
</section>
<section id="your-turn-practical-exercise" class="level1">
<h1>Your Turn! Practical Exercise</h1>
<p>Let’s put your new knowledge to the test with a real-world scenario!</p>
<p><strong>Challenge:</strong> Create a user registration system that validates:</p>
<ol type="1">
<li>Username (3-20 characters, alphanumeric only)</li>
<li>Age (must be 13 or older)</li>
<li>Email address</li>
<li>Password (at least 8 characters)</li>
<li>Terms acceptance (yes/no)</li>
</ol>
<p>Try writing the code yourself before checking the solution!</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyinputplus <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pyip</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"=== User Registration ===</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Username validation</span></span>
<span id="cb24-6">username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(</span>
<span id="cb24-7">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Username (3-20 chars, letters/numbers only): "</span>,</span>
<span id="cb24-8">    minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb24-9">    maxLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb24-10">    allowRegexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'^[a-zA-Z0-9]+$'</span>],</span>
<span id="cb24-11">    blockRegexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'[^a-zA-Z0-9]'</span>]</span>
<span id="cb24-12">)</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Age validation</span></span>
<span id="cb24-15">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(</span>
<span id="cb24-16">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Age: "</span>,</span>
<span id="cb24-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>,</span>
<span id="cb24-18">    lessThan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span>
<span id="cb24-19">)</span>
<span id="cb24-20"></span>
<span id="cb24-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Email validation</span></span>
<span id="cb24-22">email <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputEmail(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Email address: "</span>)</span>
<span id="cb24-23"></span>
<span id="cb24-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Password validation</span></span>
<span id="cb24-25">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputPassword(</span>
<span id="cb24-26">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password (min 8 characters): "</span>,</span>
<span id="cb24-27">    minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb24-28">)</span>
<span id="cb24-29"></span>
<span id="cb24-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Terms acceptance</span></span>
<span id="cb24-31">accepted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputYesNo(</span>
<span id="cb24-32">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Do you accept the terms and conditions? "</span></span>
<span id="cb24-33">)</span>
<span id="cb24-34"></span>
<span id="cb24-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> accepted:</span>
<span id="cb24-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">✅ Registration successful!"</span>)</span>
<span id="cb24-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Welcome, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>username<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">!"</span>)</span>
<span id="cb24-38"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb24-39">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">❌ Registration cancelled - terms not accepted."</span>)</span></code></pre></div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li>✅ <strong>Input validation prevents crashes</strong> and security vulnerabilities in your Python programs</li>
<li>✅ <strong>PyInputPlus</strong> transforms complex validation into simple one-liners</li>
<li>✅ <strong>Always validate user input</strong> - never trust data from external sources</li>
<li>✅ <strong>Use the right function</strong> for each data type (inputInt for numbers, inputEmail for emails, etc.)</li>
<li>✅ <strong>Set appropriate limits</strong> with timeouts, retry limits, and value ranges</li>
<li>✅ <strong>Handle errors gracefully</strong> to improve user experience</li>
<li>✅ <strong>Whitelisting is more secure</strong> than blacklisting for input validation</li>
<li>✅ <strong>Custom validators</strong> let you implement complex business logic easily</li>
</ul>
</section>
<section id="common-pitfalls-to-avoid" class="level1">
<h1>Common Pitfalls to Avoid</h1>
<section id="forgetting-edge-cases" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-edge-cases">1. Forgetting Edge Cases</h2>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad: Doesn't handle negative numbers</span></span>
<span id="cb25-2">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age: "</span>)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Ensures positive age</span></span>
<span id="cb25-5">age <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter age: "</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="over-permissive-validation" class="level2">
<h2 class="anchored" data-anchor-id="over-permissive-validation">2. Over-Permissive Validation</h2>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad: Too permissive</span></span>
<span id="cb26-2">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputStr(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password: "</span>)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Enforces minimum security</span></span>
<span id="cb26-5">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyip.inputPassword(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password: "</span>, minLength<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
</section>
<section id="poor-error-messages" class="level2">
<h2 class="anchored" data-anchor-id="poor-error-messages">3. Poor Error Messages</h2>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad: Generic error</span></span>
<span id="cb27-2">pyip.inputInt(prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number: "</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Helpful guidance</span></span>
<span id="cb27-5">pyip.inputInt(</span>
<span id="cb27-6">    prompt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Enter a number between 1-10: "</span>,</span>
<span id="cb27-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb27-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb27-9">)</span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Congratulations! You’ve just mastered Python input validation, transforming yourself from a beginner who writes fragile code to a developer who creates robust applications. By using PyInputPlus and following the best practices we’ve covered, you’ll write programs that gracefully handle any input users throw at them .</p>
<p>Remember, <strong>input validation isn’t just about preventing errors</strong>; it’s about creating a professional user experience and protecting your application from security vulnerabilities. Every time you use <code>inputInt()</code> instead of plain <code>input()</code>, you’re making your code more reliable and your users happier.</p>
<p><strong>Your Next Steps:</strong></p>
<ol type="1">
<li>Install PyInputPlus and try each function</li>
<li>Refactor an existing project to use proper input validation</li>
<li>Create a small project using at least 5 different validation functions</li>
<li>Share your experience with other Python beginners!</li>
</ol>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: Do I always need to use PyInputPlus for input validation?</strong> <strong>A:</strong> While PyInputPlus makes validation much easier, you can write custom validation logic using loops and try-except blocks. However, for beginners and rapid development, PyInputPlus saves time and reduces errors.</p>
<p><strong>Q2: Can I use PyInputPlus in web applications?</strong> <strong>A:</strong> PyInputPlus is designed for command-line applications. For web apps, use form validation libraries specific to your web framework (like Flask-WTF or Django forms).</p>
<p><strong>Q3: What’s the difference between inputNum(), inputInt(), and inputFloat()?</strong> <strong>A:</strong> <code>inputInt()</code> only accepts whole numbers (integers), <code>inputFloat()</code> accepts decimal numbers, and <code>inputNum()</code> accepts both integers and floats, returning the appropriate type.</p>
<p><strong>Q4: How do I validate multiple conditions at once?</strong> <strong>A:</strong> You can combine PyInputPlus parameters or create custom validation functions. For complex logic, use <code>inputCustom()</code> with your own validator.</p>
<p><strong>Q5: Is input validation enough for security?</strong> <strong>A:</strong> Input validation is the first line of defense, but comprehensive security requires multiple layers including output encoding, secure communication, and proper authentication .</p>
</section>
<section id="join-the-conversation" class="level1">
<h1>Join the Conversation!</h1>
<p>Did this guide help you write better Python code? We’d love to hear about your experience with input validation! Share your favorite validation function or a creative way you’ve used PyInputPlus in the comments below.</p>
<p><strong>Help others discover this guide:</strong></p>
<ul>
<li>🐦 Tweet your favorite tip with #PythonInputValidation #steveondata</li>
<li>💼 Share on LinkedIn to help fellow developers</li>
<li>⭐ Star the PyInputPlus repository on GitHub</li>
</ul>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>Here are four working, relevant resources to deepen your understanding of Python input validation:</p>
<ol type="1">
<li><p><strong><a href="https://pyinputplus.readthedocs.io/en/latest/">PyInputPlus Official Documentation</a></strong><br>
The comprehensive official documentation for PyInputPlus, featuring detailed explanations of all functions, parameters, and advanced usage examples. This is your go-to reference for mastering every feature discussed in this article.</p></li>
<li><p><strong><a href="https://automatetheboringstuff.com/2e/chapter8/">Automate the Boring Stuff with Python: Input Validation Chapter</a></strong><br>
A beginner-friendly chapter from Al Sweigart’s popular book (who also created PyInputPlus). This resource provides practical examples and explains input validation concepts in simple terms, perfect for Python beginners.</p></li>
<li><p><strong><a href="https://realpython.com/python-keyboard-input/">Real Python: Python User Input Tutorial</a></strong><br>
An in-depth tutorial covering user input handling, validation techniques, and best practices. This resource goes beyond PyInputPlus to explore various approaches to input validation in Python applications.</p></li>
<li><p><strong><a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html">OWASP Input Validation Cheat Sheet</a></strong><br>
Essential security guidelines for input validation from the Open Web Application Security Project. While not Python-specific, these principles are crucial for writing secure code and understanding why proper validation matters.</p></li>
</ol>
<hr>
<p><em>Happy coding, and remember: validated input is happy input! 🐍✨</em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-16/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Input Validation with Python</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-16/</guid>
  <pubDate>Wed, 16 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Use with() and within() Functions in R: A Complete Guide for Cleaner Code</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-14/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Ever find yourself typing <code>df$column</code> over and over again in your R code? Or struggling with repetitive data frame references that make your scripts look cluttered? You’re not alone! R’s <strong>with()</strong> and <strong>within()</strong> functions are here to save the day, making your data manipulation code cleaner and more readable.</p>
<p>These two base R functions might seem similar at first glance, but they serve different purposes in your data analysis workflow. The <strong>with()</strong> function lets you evaluate expressions using data frame columns directly, while <strong>within()</strong> helps you modify data frames without all the repetitive typing. In this guide, we’ll explore how to use both functions effectively, complete with practical examples and tips to avoid common pitfalls.</p>
<p>Let’s dive in!</p>
</section>
<section id="understanding-the-with-function" class="level1">
<h1>Understanding the with() Function</h1>
<section id="what-does-with-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-with-do">What Does with() Do?</h2>
<p>The <strong>with()</strong> function creates a temporary environment where you can reference data frame columns directly by name. Think of it as telling R: “Hey, work with this data frame for a moment, and let me use the column names without the <code>$</code> symbol.”</p>
</section>
<section id="basic-syntax-of-with" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-of-with">Basic Syntax of with()</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(data, expression)</span></code></pre></div>
<p>Where:</p>
<ul>
<li><code>data</code>: Your data frame or list</li>
<li><code>expression</code>: The R code you want to run using the columns</li>
</ul>
</section>
<section id="simple-examples-of-with" class="level2">
<h2 class="anchored" data-anchor-id="simple-examples-of-with">Simple Examples of with()</h2>
<p>Let’s start with a basic data frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>)</span>
<span id="cb2-5">)</span></code></pre></div>
</div>
<p><strong>Example 1: Calculate the mean</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without with()</span></span>
<span id="cb3-2">mean_x_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With with()</span></span>
<span id="cb3-5">mean_x_with <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))</span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result: 2.5</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean of x:"</span>, mean_x_base, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean of x: 2.5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean of x:"</span>, mean_x_with, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean of x: 2.5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the results are identical</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are results identical: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(mean_x_with, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Are results identical:  TRUE</code></pre>
</div>
</div>
<p><strong>Example 2: Perform calculations using multiple columns</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without with()</span></span>
<span id="cb9-2">result_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With with()</span></span>
<span id="cb9-5">result_with <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)</span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result: c(11, 22, 33, 44)</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print results</span></span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Result without with():"</span>, result_base, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Result without with(): 11 22 33 44 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Result with with():"</span>, result_with, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Result with with(): 11 22 33 44 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the results are identical</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Are results identical: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(result_with, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Are results identical:  TRUE</code></pre>
</div>
</div>
<p><strong>Example 3: Statistical tests made easy</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a t-test between two columns</span></span>
<span id="cb15-2">test_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t.test</span>(x, y))</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(test_result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Welch Two Sample t-test

data:  x and y
t = -3.4684, df = 3.06, p-value = 0.03917
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -42.917954  -2.082046
sample estimates:
mean of x mean of y 
      2.5      25.0 </code></pre>
</div>
</div>
</section>
</section>
<section id="understanding-the-within-function" class="level1">
<h1>Understanding the within() Function</h1>
<section id="what-does-within-do" class="level2">
<h2 class="anchored" data-anchor-id="what-does-within-do">What Does within() Do?</h2>
<p>While <strong>with()</strong> evaluates expressions, <strong>within()</strong> goes a step further—it modifies your data frame and returns a new version with your changes . It’s perfect for creating new columns or updating existing ones.</p>
</section>
<section id="basic-syntax-of-within" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-of-within">Basic Syntax of within()</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(data, {</span>
<span id="cb17-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your modification expressions</span></span>
<span id="cb17-3">})</span></code></pre></div>
<p>The curly braces <code>{}</code> let you write multiple modifications in a clean, organized way.</p>
</section>
<section id="practical-examples-of-within" class="level2">
<h2 class="anchored" data-anchor-id="practical-examples-of-within">Practical Examples of within()</h2>
<p><strong>Example 1: Create a new column</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb18-2">  z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span>
<span id="cb18-3">})</span>
<span id="cb18-4"></span>
<span id="cb18-5">df2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  x  y   z
1 1 10  10
2 2 20  40
3 3 30  90
4 4 40 160</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df2 now has columns x, y, and z</span></span></code></pre></div>
</div>
<p><strong>Example 2: Modify existing columns</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb21-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb21-3">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb21-4">})</span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x values increased by 10, y values halved</span></span>
<span id="cb21-6">df3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   x  y
1 11  5
2 12 10
3 13 15
4 14 20</code></pre>
</div>
</div>
<p><strong>Example 3: Remove a column</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">df4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb23-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb23-3">})</span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df4 only has the y column</span></span>
<span id="cb23-5">df4</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   y
1 10
2 20
3 30
4 40</code></pre>
</div>
</div>
</section>
</section>
<section id="key-differences-between-with-and-within" class="level1">
<h1>Key Differences Between with() and within()</h1>
<p>Understanding when to use each function is crucial for effective R programming:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 32%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Feature</th>
<th>with()</th>
<th>within()</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Purpose</strong></td>
<td>Evaluate expressions</td>
<td>Modify data frames</td>
</tr>
<tr class="even">
<td><strong>Returns</strong></td>
<td>Result of expression</td>
<td>Modified data frame</td>
</tr>
<tr class="odd">
<td><strong>Modifies original?</strong></td>
<td>No</td>
<td>No (returns copy)</td>
</tr>
<tr class="even">
<td><strong>Best for</strong></td>
<td>Calculations, summaries</td>
<td>Adding/updating columns</td>
</tr>
</tbody>
</table>
<blockquote class="blockquote">
<p><strong>Key Takeaway:</strong> Use <strong>with()</strong> when you want to calculate something FROM your data. Use <strong>within()</strong> when you want to change something IN your data.</p>
</blockquote>
</section>
<section id="common-mistakes-to-avoid" class="level1">
<h1>Common Mistakes to Avoid</h1>
<section id="expecting-with-to-modify-data" class="level2">
<h2 class="anchored" data-anchor-id="expecting-with-to-modify-data">1. Expecting with() to Modify Data</h2>
<p><strong>Wrong:</strong></p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(df, new_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This doesn't add a column!</span></span></code></pre></div>
<p><strong>Right:</strong></p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, new_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This adds the column</span></span></code></pre></div>
</section>
<section id="forgetting-to-assign-within-results" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-to-assign-within-results">2. Forgetting to Assign within() Results</h2>
<p><strong>Wrong:</strong></p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Changes are lost!</span></span></code></pre></div>
<p><strong>Right:</strong></p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Changes are saved</span></span></code></pre></div>
</section>
<section id="variable-name-conflicts" class="level2">
<h2 class="anchored" data-anchor-id="variable-name-conflicts">3. Variable Name Conflicts</h2>
<p>If you have variables in your global environment with the same names as your data frame columns, <strong>with()</strong> and <strong>within()</strong> will use the data frame columns first. This can lead to unexpected results!</p>
</section>
</section>
<section id="best-practices-for-clean-code" class="level1">
<h1>Best Practices for Clean Code</h1>
<section id="choose-the-right-function" class="level2">
<h2 class="anchored" data-anchor-id="choose-the-right-function">1. Choose the Right Function</h2>
<ul>
<li>Use <strong>with()</strong> for:
<ul>
<li>Statistical calculations</li>
<li>Temporary computations</li>
<li>When you don’t need to modify the data</li>
</ul></li>
<li>Use <strong>within()</strong> for:
<ul>
<li>Creating new columns</li>
<li>Updating existing columns</li>
<li>Data transformation tasks</li>
</ul></li>
</ul>
</section>
<section id="keep-it-readable" class="level2">
<h2 class="anchored" data-anchor-id="keep-it-readable">2. Keep It Readable</h2>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: Clear and organized</span></span>
<span id="cb29-2">df_clean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(df, {</span>
<span id="cb29-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate age groups</span></span>
<span id="cb29-4">  age_group <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Young"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult"</span>)</span>
<span id="cb29-5">  </span>
<span id="cb29-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standardize income</span></span>
<span id="cb29-7">  income_scaled <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (income <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(income)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(income)</span>
<span id="cb29-8">  </span>
<span id="cb29-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove temporary column</span></span>
<span id="cb29-10">  temp_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb29-11">})</span></code></pre></div>
</section>
<section id="document-your-intent" class="level2">
<h2 class="anchored" data-anchor-id="document-your-intent">3. Document Your Intent</h2>
<p>Always add comments explaining why you’re using <strong>with()</strong> or <strong>within()</strong>, especially in complex scripts.</p>
</section>
</section>
<section id="comparing-with-alternative-approaches" class="level1">
<h1>Comparing with Alternative Approaches</h1>
<p>While <strong>with()</strong> and <strong>within()</strong> are useful, R offers other approaches too:</p>
<section id="traditional-operator" class="level2">
<h2 class="anchored" data-anchor-id="traditional-operator">Traditional $ Operator</h2>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simple but repetitive</span></span>
<span id="cb30-2">df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>new_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb30-3">mean_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x)</span></code></pre></div>
</section>
<section id="modern-dplyr-approach" class="level2">
<h2 class="anchored" data-anchor-id="modern-dplyr-approach">Modern dplyr Approach</h2>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More readable for complex operations</span></span>
<span id="cb31-3">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb31-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_col =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y)</span></code></pre></div>
</section>
<section id="when-to-use-what" class="level2">
<h2 class="anchored" data-anchor-id="when-to-use-what">When to Use What?</h2>
<ul>
<li><strong>with()/within()</strong>: Great for base R scripts, simple operations</li>
<li><strong>$ operator</strong>: Quick one-off operations</li>
<li><strong>dplyr</strong>: Complex data pipelines, modern R workflows</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Let’s practice using both functions. Try solving this problem:</p>
<p><strong>Challenge:</strong> You have a data frame with student scores:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb32-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">math =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>),</span>
<span id="cb32-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">english =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb32-5">)</span></code></pre></div>
</div>
<p>Tasks:</p>
<ol type="1">
<li>Use <strong>with()</strong> to calculate the average math score</li>
<li>Use <strong>within()</strong> to add a “total” column (math + english)</li>
<li>Use <strong>within()</strong> to add a “grade” column: “A” if total &gt;= 170, “B” otherwise</li>
</ol>
<p>Try it yourself before checking the solution!</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 1: Average math score with with()</span></span>
<span id="cb33-2">avg_math <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(students, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(math))</span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result: 84.33333</span></span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 2: Add total column with within()</span></span>
<span id="cb33-6">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(students, {</span>
<span id="cb33-7">  total <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> math <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> english</span>
<span id="cb33-8">})</span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task 3: Add grade column with within()</span></span>
<span id="cb33-11">students <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">within</span>(students, {</span>
<span id="cb33-12">  grade <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(total <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb33-13">})</span>
<span id="cb33-14"></span>
<span id="cb33-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Final result:</span></span>
<span id="cb33-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#      name math english total grade</span></span>
<span id="cb33-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1   Alice   85      92   177     A</span></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2     Bob   90      88   178     A</span></span>
<span id="cb33-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3 Charlie   78      85   163     B</span></span>
<span id="cb33-20"></span>
<span id="cb33-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(students)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name math english total grade
1   Alice   85      92   177     A
2     Bob   90      88   178     A
3 Charlie   78      85   163     B</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>with()</strong> evaluates expressions using data frame columns without modifying the data</li>
<li><strong>within()</strong> modifies data frames and returns a new copy with changes</li>
<li>Always assign <strong>within()</strong> results back to save changes</li>
<li>Use <strong>with()</strong> for calculations, <strong>within()</strong> for modifications<br>
</li>
<li>Both functions help reduce repetitive <code>df$column</code> typing</li>
<li>They work with data frames and lists, not other object types</li>
<li>Consider modern alternatives like dplyr for complex workflows</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <strong>with()</strong> and <strong>within()</strong> functions are powerful tools in your R programming toolkit. They make your code cleaner, more readable, and less error-prone by eliminating repetitive data frame references. While <strong>with()</strong> excels at calculations and temporary operations, <strong>within()</strong> shines when you need to transform your data.</p>
<p>Remember the golden rule: <strong>with()</strong> for reading, <strong>within()</strong> for writing. Master these functions, and you’ll write more elegant R code that’s easier to maintain and understand.</p>
<p>Ready to clean up your R scripts? Start by identifying places where you use <code>df$column</code> repeatedly, and try replacing them with <strong>with()</strong> or <strong>within()</strong>. Your future self (and your colleagues) will thank you!</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: Can I use with() and within() with lists?</strong> A: Yes! Both functions work with lists as well as data frames. They create environments from the list elements, allowing you to reference them directly.</p>
<p><strong>Q2: Do these functions work with tibbles from the tidyverse?</strong> A: Yes, tibbles are enhanced data frames, so <strong>with()</strong> and <strong>within()</strong> work perfectly with them.</p>
<p><strong>Q3: Is there a performance difference between using with() and the $ operator?</strong> A: For single operations, the performance difference is negligible. However, <strong>with()</strong> can be slightly more efficient when performing multiple operations on the same data frame.</p>
<p><strong>Q4: Can I nest with() and within() functions?</strong> A: While technically possible, nesting these functions can make code hard to read. It’s better to use them separately or consider alternative approaches for complex operations.</p>
<p><strong>Q5: How do I access documentation for these functions in R?</strong> A: Simply type <code>?with</code> or <code>?within</code> in your R console to access the official documentation , .</p>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience!</h1>
<p>Found this guide helpful? We’d love to hear how you’re using <strong>with()</strong> and <strong>within()</strong> in your R projects! Share your favorite use cases or clever applications in the comments below.</p>
<p>Don’t forget to share this article with your fellow R programmers who might benefit from cleaner, more efficient code. Follow us on social media for more R programming tips and tricks!</p>
<p><em>What’s your favorite way to simplify R code? Let us know! 👇</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/with">R Documentation - with() Function</a>. RDocumentation. Base R Package Version 3.6.2.</p></li>
<li><p><a href="https://sparkbyexamples.com/r-programming/r-base-functions/">R Base Functions Guide</a>. Spark By Examples. R Programming Tutorials.</p></li>
<li><p><a href="https://www.datacamp.com/doc/r/withby">DataCamp Documentation - with() and by() Functions</a>. DataCamp. R Documentation.</p></li>
<li><p><a href="https://www.r-bloggers.com/2023/07/simplify-your-code-with-rs-powerful-functions-with-and-within/">Simplify Your Code with R’s Powerful Functions: with() and within()</a>. R-bloggers. July 2023.</p></li>
<li><p><a href="https://www.statology.org/r-with-within-function/">R with() and within() Functions: A Complete Guide</a>. Statology. R Programming Tutorials.</p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-14/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>with() and within() in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-14/</guid>
  <pubDate>Mon, 14 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Calculate Difference Between Rows in R Using diff()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-07-07/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>This tutorial explains how to use R’s diff() function to calculate differences between consecutive values in your data. You’ll learn the basic syntax, see practical examples with vectors and data frames, and understand common applications and pitfalls. All visualizations use base R graphics with code samples.</p>
</blockquote>
<section id="what-is-diff-and-what-does-it-do" class="level1">
<h1>What is diff() and What Does It Do?</h1>
<p>The <code>diff()</code> function in R calculates the differences between consecutive elements in a vector, data frame, or time series. It subtracts each element from the next one, giving you a result that shows how values change from one position to the next.</p>
</section>
<section id="basic-syntax-and-parameters" class="level1">
<h1>Basic Syntax and Parameters</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">differences =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ...)</span></code></pre></div>
<p>Here’s what each parameter means:</p>
<ul>
<li><strong>x</strong>: The input data (vector, data frame, time series)</li>
<li><strong>lag</strong>: How many positions to look back when calculating differences (default is 1)</li>
<li><strong>differences</strong>: How many times to apply the differencing operation (default is 1)</li>
<li><strong>…</strong>: Additional arguments for specific methods</li>
</ul>
</section>
<section id="simple-vector-examples" class="level1">
<h1>Simple Vector Examples</h1>
<p>Let’s start with a basic example using a numeric vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector</span></span>
<span id="cb2-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences</span></span>
<span id="cb2-5">dx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(dx)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5  5 -2  7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5 5 -2 7</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the differences using base R</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb4-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb4-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Vector"</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(dx, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb4-10">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Difference"</span>,</span>
<span id="cb4-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Plot of First Differences using diff()"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The function calculates: - 15 - 10 = 5 - 20 - 15 = 5 - 18 - 20 = -2 - 25 - 18 = 7</p>
</section>
<section id="working-with-data-frames" class="level1">
<h1>Working with Data Frames</h1>
<p>When you apply <code>diff()</code> to a data frame, it calculates differences for each column separately:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame</span></span>
<span id="cb6-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences</span></span>
<span id="cb6-5">diff_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>()</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  a  b
1 2 -2
2 3  5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot differences for each column</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up 2 plots stacked vertically</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot column 'a' differences</span></span>
<span id="cb8-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diff of a"</span>,</span>
<span id="cb8-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Column 'a' Differences"</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot column 'b' differences</span></span>
<span id="cb8-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkred"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb8-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diff of b"</span>,</span>
<span id="cb8-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Column 'b' Differences"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset the plotting layout</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>This code would produce two plots showing: - Column a: (4 - 2 = 2, 7 - 4 = 3) - Column b: (3 - 5 = -2, 8 - 3 = 5)</p>
</section>
<section id="time-series-applications" class="level1">
<h1>Time Series Applications</h1>
<p>The <code>diff()</code> function is very useful for time series analysis to:</p>
<ol type="1">
<li><strong>Remove trends</strong>: Taking the first difference can make a trending series more stationary</li>
<li><strong>Calculate returns</strong>: In finance, to compute price changes or returns</li>
<li><strong>Identify patterns</strong>: See how values change over time</li>
</ol>
<p>Example with a trending time series:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a time series</span></span>
<span id="cb10-2">ts_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ts</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">start =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences</span></span>
<span id="cb10-5">diff_ts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(ts_data)</span>
<span id="cb10-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff_ts)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Time Series:
Start = 2001 
End = 2004 
Frequency = 1 
[1]  5  5 10 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5 5 10 10</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the time series and its differences</span></span>
<span id="cb12-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original time series</span></span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(ts_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgreen"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb12-8">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb12-9">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Time Series"</span>)</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Differenced time series</span></span>
<span id="cb12-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_ts, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgreen"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb12-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Year"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Difference"</span>,</span>
<span id="cb12-14">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Differences of Time Series"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
</section>
<section id="using-the-lag-parameter" class="level1">
<h1>Using the lag Parameter</h1>
<p>The <code>lag</code> parameter controls how many positions apart the values should be when calculating differences. This is useful for seasonal data or when you want to compare values at specific intervals.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create seasonal data</span></span>
<span id="cb14-2">seasonal_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate differences with lag=1 and lag=2</span></span>
<span id="cb14-5">diff1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(seasonal_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-6">diff2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(seasonal_data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot differences with different lags</span></span>
<span id="cb14-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lag 1 differences</span></span>
<span id="cb14-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Difference"</span>,</span>
<span id="cb14-14">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Differences with lag = 1"</span>)</span>
<span id="cb14-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a reference line at y=0</span></span>
<span id="cb14-16"></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lag 2 differences</span></span>
<span id="cb14-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-19">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Difference"</span>,</span>
<span id="cb14-20">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Differences with lag = 2"</span>)</span>
<span id="cb14-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a reference line at y=0</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>With <code>lag = 2</code>, each value is compared to the value from two positions earlier: - For lag=1: 20-10, 15-20, 25-15, 20-25, 30-20 - For lag=2: 15-10, 25-20, 20-15, 30-25</p>
</section>
<section id="multiple-differences" class="level1">
<h1>Multiple Differences</h1>
<p>You can apply differencing multiple times by setting the <code>differences</code> parameter. This is useful for achieving stationarity in time series with strong trends.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector with quadratic growth</span></span>
<span id="cb16-2">vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span>)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate first and second differences</span></span>
<span id="cb16-5">diff1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">differences =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First difference</span></span>
<span id="cb16-6">diff2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">differences =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second difference</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 4 5 8 13</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  4  5  8 13</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 1 3 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot original data and differences</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original data</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb20-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb20-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First difference</span></span>
<span id="cb20-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb20-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Diff"</span>,</span>
<span id="cb20-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First Differences"</span>)</span>
<span id="cb20-13"></span>
<span id="cb20-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second difference</span></span>
<span id="cb20-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb20-16">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Second Diff"</span>,</span>
<span id="cb20-17">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Second Differences"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The second difference calculates the differences of the differences: - First differences: 4, 5, 8, 13 - Second differences (differences of differences): 1, 3, 5</p>
</section>
<section id="financial-applications" class="level1">
<h1>Financial Applications</h1>
<p>In finance, <code>diff()</code> is commonly used to calculate returns from price data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create price data</span></span>
<span id="cb22-2">prices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">108</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>)</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate price changes</span></span>
<span id="cb22-5">returns <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(prices)</span>
<span id="cb22-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(returns)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 2 -1 4 5 -2 4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2 -1  4  5 -2  4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot prices and returns</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot prices</span></span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(prices, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb24-6">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Day"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Price"</span>,</span>
<span id="cb24-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Stock Price"</span>)</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot returns</span></span>
<span id="cb24-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(returns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkred"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb24-11">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Day"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Price Change"</span>,</span>
<span id="cb24-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Daily Price Changes"</span>)</span>
<span id="cb24-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abline</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">h =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reference line at y=0</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reset plotting layout</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
</section>
<section id="common-pitfalls-and-edge-cases" class="level1">
<h1>Common Pitfalls and Edge Cases</h1>
<section id="output-length-is-shorter" class="level2">
<h2 class="anchored" data-anchor-id="output-length-is-shorter">1. Output Length Is Shorter</h2>
<p>The <code>diff()</code> function always returns a vector that is shorter than the input. For a vector of length n, applying <code>diff()</code> once gives a result of length n-1.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original vector length:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Original vector length: 5 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Differenced vector length:"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Differenced vector length: 4 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output:</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original vector length: 5</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Differenced vector length: 4</span></span></code></pre></div>
</div>
</section>
<section id="handling-missing-values-na" class="level2">
<h2 class="anchored" data-anchor-id="handling-missing-values-na">2. Handling Missing Values (NA)</h2>
<p>The <code>diff()</code> function propagates <code>NA</code> values. If any element in a pair contains <code>NA</code>, the result for that position will be <code>NA</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create vector with NA values</span></span>
<span id="cb31-2">x_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb31-3">diff_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(x_na)</span>
<span id="cb31-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(diff_na)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: NA NA 4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA NA  4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot to visualize NA handling</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(diff_na, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"o"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>, </span>
<span id="cb33-3">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Index"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Difference"</span>,</span>
<span id="cb33-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diff() with NA Values"</span>)</span>
<span id="cb33-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grid</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add grid lines for better readability</span></span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Here’s how NA values affect the results: - diff(c(1, NA)) = NA - diff(c(NA, 3)) = NA - diff(c(3, 7)) = 4</p>
</section>
<section id="empty-results" class="level2">
<h2 class="anchored" data-anchor-id="empty-results">3. Empty Results</h2>
<p>If your input is too short compared to the <code>lag</code> parameter, you might get an empty result:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">short_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb34-2">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diff</span>(short_vec, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lag =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns an empty vector</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numeric(0)</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices" class="level1">
<h1>Best Practices</h1>
<ol type="1">
<li><strong>Check output length</strong>: Remember that the output will be shorter than input</li>
<li><strong>Handle NA values</strong>: Clean your data before using <code>diff()</code> or handle NAs in the results</li>
<li><strong>Align with original data</strong>: If you need to plot or compare with original data, you might need to add NA values to maintain alignment</li>
<li><strong>Verify lag value</strong>: Make sure your lag parameter makes sense for your data’s pattern</li>
</ol>
</section>
<section id="quick-summary" class="level1">
<h1>Quick Summary</h1>
<ul>
<li><code>diff()</code> calculates the differences between consecutive elements</li>
<li>Basic syntax: <code>diff(x, lag = 1, differences = 1)</code></li>
<li>Works with vectors, data frames, and time series</li>
<li>Output is always shorter than input by <code>lag × differences</code></li>
<li>Useful for trend removal, calculating returns, and finding patterns in data</li>
<li>Base R plotting functions like <code>plot()</code> with appropriate parameters provide clear visualization of differences</li>
</ul>
<p>With the <code>diff()</code> function and base R plotting, you can easily track and visualize changes in your data, remove trends, and prepare data for further analysis.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<p>The following references provide additional information about using the diff() function in R and time series analysis:</p>
<ol type="1">
<li><p>R Cookbook, 2nd Edition. (n.d.). <a href="https://rc2e.com/timeseriesanalysis">Time Series Analysis</a>. RC2E.</p></li>
<li><p>R-Bloggers. (2023, June). <a href="https://www.r-bloggers.com/2023/06/mastering-the-power-of-rs-diff-function-a-programmers-guide/">Mastering the Power of R’s diff() Function: A Programmer’s Guide</a>. R-Bloggers.</p></li>
<li><p>Coghlan, A. (n.d.). <a href="https://a-little-book-of-r-for-time-series.readthedocs.io/en/latest/src/timeseries.html">A Little Book of R for Time Series</a>. ReadTheDocs.</p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-07-07/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>See the diff()Rence with R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-07-07/</guid>
  <pubDate>Mon, 07 Jul 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Use xtabs() in R to Calculate Frequencies: A Comprehensive Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-06-30/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Working with frequency tables is a common task in data analysis, and R provides several ways to create them. The <strong>xtabs()</strong> function stands out as a powerful tool that uses a formula interface to create contingency tables from your data. Whether you’re counting occurrences of categories or creating complex cross-tabulations, <strong>xtabs()</strong> makes the process straightforward and flexible.</p>
<p>In this guide, we’ll explore how to use <strong>xtabs()</strong> effectively, starting with basic syntax and moving through practical examples. You’ll learn how to create simple frequency tables, handle multiple variables, work with weighted data, and solve common problems that R programmers encounter.</p>
</section>
<section id="what-is-xtabs" class="level1">
<h1>What is xtabs()?</h1>
<p>The <strong>xtabs()</strong> function creates contingency tables (also called cross-tabulation tables or crosstabs) by counting combinations of factor levels in your data . Think of it as a way to summarize how often different combinations of categories appear together.</p>
<p>What makes <strong>xtabs()</strong> special is its formula interface. Instead of passing individual vectors like you would with <code>table()</code>, you can work directly with data frames using a simple formula notation .</p>
</section>
<section id="basic-syntax" class="level1">
<h1>Basic Syntax</h1>
<p>Here’s the basic syntax for <strong>xtabs()</strong>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(formula, data, subset, na.action, exclude, drop.unused.levels, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sparse =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<p>Let’s break down the main parameters:</p>
<ul>
<li><strong>formula</strong>: A formula like <code>~ var1 + var2</code> that describes which variables to cross-tabulate</li>
<li><strong>data</strong>: Your data frame containing the variables</li>
<li><strong>subset</strong>: Optional - select specific rows to include</li>
<li><strong>na.action</strong>: How to handle missing values (NA)</li>
<li><strong>exclude</strong>: Values to exclude from the table</li>
<li><strong>drop.unused.levels</strong>: Whether to remove unused factor levels</li>
<li><strong>sparse</strong>: Return a sparse matrix (useful for large tables)</li>
</ul>
</section>
<section id="simple-examples" class="level1">
<h1>Simple Examples</h1>
<section id="single-variable-frequency-table" class="level2">
<h2 class="anchored" data-anchor-id="single-variable-frequency-table">Single Variable Frequency Table</h2>
<p>Let’s start with the simplest case - counting frequencies for one variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create sample data</span></span>
<span id="cb2-2">survey_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>)</span>
<span id="cb2-4">)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create frequency table</span></span>
<span id="cb2-7">product_freq <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> survey_data)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(product_freq)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Product
A B C 
5 3 2 </code></pre>
</div>
</div>
</section>
<section id="two-variable-cross-tabulation" class="level2">
<h2 class="anchored" data-anchor-id="two-variable-cross-tabulation">Two-Variable Cross-Tabulation</h2>
<p>Now let’s look at relationships between two variables:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample data with two variables</span></span>
<span id="cb4-2">survey_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb4-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Gender =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, </span>
<span id="cb4-4">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Male"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Female"</span>),</span>
<span id="cb4-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>)</span>
<span id="cb4-6">)</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create cross-tabulation</span></span>
<span id="cb4-9">gender_product <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> survey_data)</span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(gender_product)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Product
Gender   A B C
  Female 1 3 1
  Male   3 1 1</code></pre>
</div>
</div>
</section>
</section>
<section id="working-with-data-frames" class="level1">
<h1>Working with Data Frames</h1>
<p>One of the biggest advantages of <strong>xtabs()</strong> over <code>table()</code> is how well it works with data frames . You don’t need to extract individual columns:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># More complex data frame</span></span>
<span id="cb6-2">sales_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Region =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, </span>
<span id="cb6-4">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"South"</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Device =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>,</span>
<span id="cb6-6">             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Desktop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mobile"</span>),</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sales =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">180</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">220</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">160</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>)</span>
<span id="cb6-8">)</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count by Region and Device</span></span>
<span id="cb6-11">device_region <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(device_region)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Region
Device    North South
  Desktop     2     2
  Mobile      3     3</code></pre>
</div>
</div>
</section>
<section id="weighted-frequency-tables" class="level1">
<h1>Weighted Frequency Tables</h1>
<p>Sometimes you need to sum values instead of just counting rows. <strong>xtabs()</strong> handles this by putting a variable on the left side of the formula:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum sales by device type</span></span>
<span id="cb8-2">sales_by_device <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_by_device)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Device
Desktop  Mobile 
    710     760 </code></pre>
</div>
</div>
<p>This sums the <code>Sales</code> values for each device type instead of just counting occurrences.</p>
<p>For a two-way weighted table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum sales by device and region</span></span>
<span id="cb10-2">sales_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Region, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sales_summary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>         Region
Device    North South
  Desktop   400   310
  Mobile    440   320</code></pre>
</div>
</div>
</section>
<section id="three-way-tables" class="level1">
<h1>Three-Way Tables</h1>
<p><strong>xtabs()</strong> can handle multiple dimensions easily:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a time period variable</span></span>
<span id="cb12-2">sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Period <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, </span>
<span id="cb12-3">                      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q2"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Three-way table</span></span>
<span id="cb12-6">three_way <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Region <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Period, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb12-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(three_way)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>, , Period = Q1

         Region
Device    North South
  Desktop     2     0
  Mobile      3     0

, , Period = Q2

         Region
Device    North South
  Desktop     0     2
  Mobile      0     3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use ftable() for better display</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftable</span>(three_way))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               Period Q1 Q2
Device  Region             
Desktop North          2  0
        South          0  2
Mobile  North          3  0
        South          0  3</code></pre>
</div>
</div>
<p>The <code>ftable()</code> function creates a “flat” table that’s easier to read when you have three or more variables .</p>
</section>
<section id="including-na-values" class="level1">
<h1>Including NA Values</h1>
<p>By default, <strong>xtabs()</strong> might exclude rows with missing values. To include them:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data with NA values</span></span>
<span id="cb16-2">data_with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb16-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Category =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>),</span>
<span id="cb16-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y"</span>)</span>
<span id="cb16-5">)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Include NA as a category</span></span>
<span id="cb16-8">with_na <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Category <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Group, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data_with_na, </span>
<span id="cb16-9">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.action =</span> na.pass)</span>
<span id="cb16-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(with_na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        Group
Category X Y
       A 1 2
       B 1 1
       C 0 1</code></pre>
</div>
</div>
<p>Setting <code>na.action = na.pass</code> ensures that NA values appear in your table .</p>
</section>
<section id="dynamic-column-selection" class="level1">
<h1>Dynamic Column Selection</h1>
<p>When you need to select columns programmatically, use <code>as.formula()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to create frequency table for any column</span></span>
<span id="cb18-2">create_freq_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, col_name) {</span>
<span id="cb18-3">  formula_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~"</span>, col_name)</span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.formula</span>(formula_str), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data)</span>
<span id="cb18-5">}</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use the function</span></span>
<span id="cb18-8">my_col <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Product"</span></span>
<span id="cb18-9">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">create_freq_table</span>(survey_data, my_col)</span>
<span id="cb18-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Product
A B C 
4 4 2 </code></pre>
</div>
</div>
<p>This technique is useful when building interactive applications or processing multiple columns.</p>
</section>
<section id="converting-output-to-data-frame" class="level1">
<h1>Converting Output to Data Frame</h1>
<p>The output of <strong>xtabs()</strong> is a special table object. To convert it for further analysis:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a frequency table</span></span>
<span id="cb20-2">freq_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Gender <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> survey_data)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to data frame</span></span>
<span id="cb20-5">freq_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(freq_table)</span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(freq_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Gender Product Freq
1 Female       A    1
2   Male       A    3
3 Female       B    3
4   Male       B    1
5 Female       C    1
6   Male       C    1</code></pre>
</div>
</div>
</section>
<section id="common-problems-and-solutions" class="level1">
<h1>Common Problems and Solutions</h1>
<section id="calculating-means-instead-of-sums" class="level2">
<h2 class="anchored" data-anchor-id="calculating-means-instead-of-sums">1. <strong>Calculating Means Instead of Sums</strong></h2>
<p><strong>xtabs()</strong> only sums values, not averages them . To get means:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get sums and counts</span></span>
<span id="cb22-2">sum_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Sales <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb22-3">count_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate means</span></span>
<span id="cb22-6">mean_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> sum_table <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count_table</span>
<span id="cb22-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(mean_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Device
 Desktop   Mobile 
177.5000 126.6667 </code></pre>
</div>
</div>
</section>
<section id="removing-unused-factor-levels" class="level2">
<h2 class="anchored" data-anchor-id="removing-unused-factor-levels">2. <strong>Removing Unused Factor Levels</strong></h2>
<p>If your factors have levels with no data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove unused levels before creating table</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sales_data$Device &lt;- droplevels(sales_data$Device)</span></span>
<span id="cb24-3">clean_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> sales_data)</span>
<span id="cb24-4">clean_table</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Device
Desktop  Mobile 
      4       6 </code></pre>
</div>
</div>
</section>
<section id="group-wise-tables" class="level2">
<h2 class="anchored" data-anchor-id="group-wise-tables">3. <strong>Group-wise Tables</strong></h2>
<p>To create separate tables for each group:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split by region and create tables</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">by</span>(sales_data, sales_data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Region, <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(subset) {</span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Device, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> subset)</span>
<span id="cb26-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sales_data$Region: North
Device
Desktop  Mobile 
      2       3 
------------------------------------------------------------ 
sales_data$Region: South
Device
Desktop  Mobile 
      2       3 </code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Here’s a practice problem to test your understanding:</p>
<p><strong>Problem:</strong> Given the following data frame, create a weighted frequency table showing total scores by student grade and subject. Then, calculate the average score for each grade-subject combination.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">student_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb28-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Grade =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"C"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>),</span>
<span id="cb28-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Subject =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, </span>
<span id="cb28-4">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Science"</span>),</span>
<span id="cb28-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">78</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">82</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">79</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">88</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>)</span>
<span id="cb28-6">)</span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your code here</span></span></code></pre></div>
</div>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1: Create weighted frequency table (sum of scores)</span></span>
<span id="cb29-2">score_sums <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(Score <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Grade <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Subject, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> student_data)</span>
<span id="cb29-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sum of scores:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Sum of scores:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(score_sums)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Subject
Grade Math Science
    A  173     187
    B  160     173
    C   75      79</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2: Create count table</span></span>
<span id="cb33-2">count_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xtabs</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> Grade <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Subject, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> student_data)</span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Count of students:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nCount of students:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(count_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Subject
Grade Math Science
    A    2       2
    B    2       2
    C    1       1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 3: Calculate averages</span></span>
<span id="cb37-2">avg_scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> score_sums <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count_table</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Average scores:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nAverage scores:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(avg_scores)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Subject
Grade Math Science
    A 86.5    93.5
    B 80.0    86.5
    C 75.0    79.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bonus: Convert to data frame for easier viewing</span></span>
<span id="cb41-2">avg_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(avg_scores)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(avg_df)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AvgScore"</span></span>
<span id="cb41-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">As data frame:"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "\nAs data frame:"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(avg_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Grade Subject AvgScore
1     A    Math     86.5
2     B    Math     80.0
3     C    Math     75.0
4     A Science     93.5
5     B Science     86.5
6     C Science     79.0</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<blockquote class="blockquote">
<p><strong>Key Points to Remember:</strong></p>
</blockquote>
<ul>
<li><strong>xtabs()</strong> uses formula notation (<code>~</code>) to specify variables</li>
<li>Put variables on the right side of <code>~</code> to count frequencies</li>
<li>Put a numeric variable on the left side to sum values</li>
<li>Use <code>data =</code> parameter to work directly with data frames</li>
<li>Add <code>na.action = na.pass</code> to include NA values in tables</li>
<li>Use <code>as.formula()</code> for dynamic column selection</li>
<li>Convert to data frame with <code>as.data.frame()</code> for further processing</li>
<li>For means, divide sum tables by count tables</li>
<li>Use <code>ftable()</code> to display multi-dimensional tables clearly</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <strong>xtabs()</strong> function provides a flexible and powerful way to create frequency tables in R. Its formula interface makes it particularly convenient when working with data frames, and its ability to handle weighted frequencies and multiple dimensions makes it suitable for a wide range of data analysis tasks.</p>
<p>Remember that while <strong>xtabs()</strong> excels at creating frequency and sum tables, you’ll need to combine it with other functions for more complex aggregations like means or medians. By mastering <strong>xtabs()</strong> alongside complementary functions like <code>ftable()</code> and data frame conversions, you’ll be well-equipped to handle any frequency analysis task in R.</p>
<p><strong>Ready to put xtabs() to work?</strong> Start by applying it to your own datasets, experiment with different formula combinations, and don’t forget to explore how it integrates with your broader data analysis workflow!</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: What’s the difference between xtabs() and table()?</strong><br>
A: The main difference is that <strong>xtabs()</strong> uses a formula interface and works directly with data frames using the <code>data =</code> parameter, while <code>table()</code> requires you to pass individual vectors. <strong>xtabs()</strong> is generally more convenient for data frame operations.</p>
<p><strong>Q2: Can xtabs() calculate percentages directly?</strong><br>
A: No, <strong>xtabs()</strong> creates count or sum tables. To get percentages, use <code>prop.table()</code> on the result: <code>prop.table(xtabs(~ var1 + var2, data = mydata))</code>.</p>
<p><strong>Q3: How do I handle very large tables with xtabs()?</strong><br>
A: For large tables, set <code>sparse = TRUE</code> to return a sparse matrix, which uses less memory. This is especially useful when many combinations have zero counts.</p>
<p><strong>Q4: Can I use xtabs() with continuous variables?</strong><br>
A: Yes, but you should first convert continuous variables to categories using <code>cut()</code> or similar functions. Otherwise, you’ll get a separate count for each unique value.</p>
<p><strong>Q5: How do I save xtabs() output to a CSV file?</strong><br>
A: First convert to a data frame, then use <code>write.csv()</code>: <code>write.csv(as.data.frame(my_xtabs), "output.csv")</code>.</p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>Did this guide help you understand <strong>xtabs()</strong> better? We’d love to hear about your experiences using it in your R projects! Share your favorite use cases or any creative applications you’ve discovered in the comments below, or connect with us on social media to join the conversation with other R programmers.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ul>
<li><p><a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/xtabs.html">https://stat.ethz.ch/R-manual/R-devel/library/stats/html/xtabs.html</a></p></li>
<li><p><a href="https://www.statology.org/xtabs-in-r/">https://www.statology.org/xtabs-in-r/</a></p></li>
<li><p><a href="https://www.r-bloggers.com/2023/06/mastering-data-aggregation-with-xtabs-in-r/">https://www.r-bloggers.com/2023/06/mastering-data-aggregation-with-xtabs-in-r/</a></p></li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-30/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>xtabs() in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-06-30/</guid>
  <pubDate>Mon, 30 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering Normal Distributions in R: A Comprehensive Guide to rnorm(), TidyDensity, and Statistical Analysis</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-06-23/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>This guide covers normal distribution generation in R using the base <code>rnorm()</code> function and the TidyDensity package’s specialized functions. You’ll learn each function’s syntax, parameters, and practical applications with code examples and visualizations.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Normal distributions are among the most commonly used probability distributions in statistical programming. R offers several methods to generate, analyze, and visualize normal distributions, from the base <code>rnorm()</code> function to specialized tools in the TidyDensity package. This guide walks through these functions with practical examples to help you incorporate normal distributions in your R workflows.</p>
</section>
<section id="base-r-using-rnorm-function" class="level1">
<h1>Base R: Using <code>rnorm()</code> Function</h1>
<p>The <code>rnorm()</code> function is R’s built-in method for generating random numbers from a normal distribution. It’s part of base R and requires no additional packages.</p>
<section id="syntax-and-parameters" class="level2">
<h2 class="anchored" data-anchor-id="syntax-and-parameters">Syntax and Parameters</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
<th>Required</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>n</code></td>
<td>Number of observations</td>
<td>None</td>
<td>Yes</td>
</tr>
<tr class="even">
<td><code>mean</code></td>
<td>Mean of the distribution</td>
<td>0</td>
<td>No</td>
</tr>
<tr class="odd">
<td><code>sd</code></td>
<td>Standard deviation</td>
<td>1</td>
<td>No</td>
</tr>
</tbody>
</table>
</section>
<section id="basic-examples" class="level2">
<h2 class="anchored" data-anchor-id="basic-examples">Basic Examples</h2>
<p>Generate 10 random values from a standard normal distribution (mean=0, sd=1):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard normal distribution</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] -0.6034933  0.0570314 -1.4114139 -1.4458639  0.1759349  1.3702679
 [7]  0.7680125  0.5288952 -0.9041921  0.2244687</code></pre>
</div>
</div>
<p>Generate values from a normal distribution with specified parameters:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normal distribution with mean=100, sd=15</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 104.58449 100.48635  83.55449 109.67438  96.21077</code></pre>
</div>
</div>
</section>
<section id="visualizing-normal-distributions" class="level2">
<h2 class="anchored" data-anchor-id="visualizing-normal-distributions">Visualizing Normal Distributions</h2>
<p>Here’s how to generate and visualize two normal distributions with different parameters:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate and plot standard normal distribution</span></span>
<span id="cb6-2">std_normal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(std_normal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Normal Distribution"</span>,</span>
<span id="cb6-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb6-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(std_normal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/rnorm_3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate and plot normal with mean=100, sd=15</span></span>
<span id="cb7-2">custom_normal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(custom_normal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal Distribution (mean=100, sd=15)"</span>,</span>
<span id="cb7-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(custom_normal<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/rnorm_3-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="tidydensity-package-enhanced-normal-distribution-tools" class="level1">
<h1>TidyDensity Package: Enhanced Normal Distribution Tools</h1>
<p>The TidyDensity package extends R’s capabilities with functions that generate tidy data structures for normal distributions and provide additional utility functions for analysis.</p>
<section id="using-tidy_normal-function" class="level2">
<h2 class="anchored" data-anchor-id="using-tidy_normal-function">Using <code>tidy_normal()</code> Function</h2>
<p>The <code>tidy_normal()</code> function generates random samples from a normal distribution and returns them in a tidy tibble format with additional information .</p>
<section id="syntax-and-parameters-1" class="level3">
<h3 class="anchored" data-anchor-id="syntax-and-parameters-1">Syntax and Parameters</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.return_tibble =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.n</code></td>
<td>Number of random points</td>
<td>50</td>
</tr>
<tr class="even">
<td><code>.mean</code></td>
<td>Mean of the distribution</td>
<td>0</td>
</tr>
<tr class="odd">
<td><code>.sd</code></td>
<td>Standard deviation</td>
<td>1</td>
</tr>
<tr class="even">
<td><code>.num_sims</code></td>
<td>Number of simulation runs</td>
<td>1</td>
</tr>
<tr class="odd">
<td><code>.return_tibble</code></td>
<td>Return as tibble?</td>
<td>TRUE</td>
</tr>
</tbody>
</table>
</section>
<section id="example-output" class="level3">
<h3 class="anchored" data-anchor-id="example-output">Example Output</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 50 × 7
   sim_number     x       y    dx       dy      p       q
   &lt;fct&gt;      &lt;int&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;
 1 1              1 -1.26   -3.36 0.000390 0.104  -1.26  
 2 1              2  0.559  -3.22 0.00106  0.712   0.559 
 3 1              3 -1.63   -3.08 0.00260  0.0514 -1.63  
 4 1              4  1.67   -2.94 0.00574  0.953   1.67  
 5 1              5  1.12   -2.80 0.0115   0.869   1.12  
 6 1              6 -0.0232 -2.67 0.0207   0.491  -0.0232
 7 1              7 -0.0430 -2.53 0.0342   0.483  -0.0430
 8 1              8  1.28   -2.39 0.0517   0.900   1.28  
 9 1              9 -1.67   -2.25 0.0724   0.0472 -1.67  
10 1             10  0.217  -2.12 0.0949   0.586   0.217 
# ℹ 40 more rows</code></pre>
</div>
</div>
<p>Here’s a visualization of data generated using <code>tidy_normal()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate and visualize normal distribution data</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_autoplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/tidy_normal-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="understanding-the-output-columns" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-output-columns">Understanding the Output Columns</h2>
<p>The tibble returned by tidy_normal() includes:</p>
<ul>
<li><code>sim_number</code>: Simulation identifier</li>
<li><code>x</code>: Index of the generated point</li>
<li><code>y</code>: The randomly generated value</li>
<li><code>dx</code>, <code>dy</code>: Density values from <code>stats::density()</code></li>
<li><code>p</code>: Cumulative probability (<code>pnorm</code>)</li>
<li><code>q</code>: Quantile value (<code>qnorm</code>)</li>
</ul>
<p>This structure provides a comprehensive dataset for analysis and visualization in a single function call.</p>
</section>
<section id="parameter-estimation-with-util_normal_param_estimate" class="level2">
<h2 class="anchored" data-anchor-id="parameter-estimation-with-util_normal_param_estimate">Parameter Estimation with <code>util_normal_param_estimate()</code></h2>
<p>The <code>util_normal_param_estimate()</code> function estimates normal distribution parameters from a numeric vector of data .</p>
<section id="syntax-and-parameters-2" class="level3">
<h3 class="anchored" data-anchor-id="syntax-and-parameters-2">Syntax and Parameters</h3>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_param_estimate</span>(.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.auto_gen_empirical =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>.x</code></td>
<td>Numeric vector</td>
<td>Required</td>
</tr>
<tr class="even">
<td><code>.auto_gen_empirical</code></td>
<td>Generate empirical data comparison?</td>
<td>TRUE</td>
</tr>
</tbody>
</table>
</section>
<section id="example-usage" class="level3">
<h3 class="anchored" data-anchor-id="example-usage">Example Usage</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimate parameters from mtcars mpg data</span></span>
<span id="cb13-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg</span>
<span id="cb13-3">output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_param_estimate</span>(x)</span>
<span id="cb13-4">output<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parameter_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 2 × 8
  dist_type samp_size   min   max method              mu stan_dev shape_ratio
  &lt;chr&gt;         &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;
1 Gaussian         32  10.4  33.9 EnvStats_MME_MLE  20.1     5.93        3.39
2 Gaussian         32  10.4  33.9 EnvStats_MVUE     20.1     6.03        3.33</code></pre>
</div>
</div>
<p>The function provides parameter estimates using two methods: - <strong>MLE (Maximum Likelihood Estimation)/MME (Method of Moments Estimation)</strong>: Returns the sample mean and standard deviation - <strong>MVUE (Minimum Variance Unbiased Estimation)</strong>: Returns unbiased estimates for the parameters</p>
</section>
</section>
<section id="distribution-statistics-with-util_normal_stats_tbl" class="level2">
<h2 class="anchored" data-anchor-id="distribution-statistics-with-util_normal_stats_tbl">Distribution Statistics with <code>util_normal_stats_tbl()</code></h2>
<p>The <code>util_normal_stats_tbl()</code> function computes a comprehensive set of distribution statistics from a tidy normal distribution tibble .</p>
<section id="example-usage-1" class="level3">
<h3 class="anchored" data-anchor-id="example-usage-1">Example Usage</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_stats_tbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 17
$ tidy_function     &lt;chr&gt; "tidy_gaussian"
$ function_call     &lt;chr&gt; "Gaussian c(0, 1)"
$ distribution      &lt;chr&gt; "Gaussian"
$ distribution_type &lt;chr&gt; "continuous"
$ points            &lt;dbl&gt; 50
$ simulations       &lt;dbl&gt; 1
$ mean              &lt;dbl&gt; 0
$ median            &lt;dbl&gt; -0.2635105
$ mode              &lt;dbl&gt; 0
$ std_dv            &lt;dbl&gt; 1
$ coeff_var         &lt;dbl&gt; Inf
$ skewness          &lt;dbl&gt; 0
$ kurtosis          &lt;dbl&gt; 3
$ computed_std_skew &lt;dbl&gt; -0.03932958
$ computed_std_kurt &lt;dbl&gt; 2.638299
$ ci_lo             &lt;dbl&gt; -2.012057
$ ci_hi             &lt;dbl&gt; 1.693464</code></pre>
</div>
</div>
<p>The returned tibble includes a wealth of statistics:</p>
<ul>
<li>Basic measures: mean, median, mode</li>
<li>Dispersion measures: standard deviation, coefficient of variation</li>
<li>Shape measures: skewness, kurtosis</li>
<li>Confidence intervals</li>
</ul>
</section>
</section>
<section id="model-selection-with-util_normal_aic" class="level2">
<h2 class="anchored" data-anchor-id="model-selection-with-util_normal_aic">Model Selection with <code>util_normal_aic()</code></h2>
<p>The <code>util_normal_aic()</code> function estimates normal distribution parameters from data and calculates the Akaike Information Criterion (AIC) .</p>
<section id="syntax" class="level3">
<h3 class="anchored" data-anchor-id="syntax">Syntax</h3>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_aic</span>(.x)</span></code></pre></div>
</section>
<section id="example-usage-2" class="level3">
<h3 class="anchored" data-anchor-id="example-usage-2">Example Usage</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate AIC for normal fit to mpg data</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_aic</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 208.7555</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns the AIC value as a scalar</span></span></code></pre></div>
</div>
<p>The AIC value helps in model selection when comparing multiple distribution fits to the same data. Lower AIC values indicate better model fit.</p>
</section>
</section>
</section>
<section id="practical-applications-of-normal-distributions-in-r" class="level1">
<h1>Practical Applications of Normal Distributions in R</h1>
<section id="random-data-generation-and-simulation" class="level2">
<h2 class="anchored" data-anchor-id="random-data-generation-and-simulation">1. Random Data Generation and Simulation</h2>
<p>Normal distributions are frequently used in simulation studies to generate synthetic data. For example, to simulate experimental results:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate 1000 experimental measurements with instrument error</span></span>
<span id="cb21-2">true_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb21-3">measurement_error <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span></span>
<span id="cb21-4">measurements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span>true_value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span>measurement_error)</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate summary statistics</span></span>
<span id="cb21-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(measurements)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 100.0614</code></pre>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(measurements)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2.523131</code></pre>
</div>
</div>
</section>
<section id="statistical-inference-and-hypothesis-testing" class="level2">
<h2 class="anchored" data-anchor-id="statistical-inference-and-hypothesis-testing">2. Statistical Inference and Hypothesis Testing</h2>
<p>Many statistical tests assume normality of the data. You can use <code>rnorm()</code> to simulate control and treatment groups:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate control and treatment groups</span></span>
<span id="cb25-2">control <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb25-3">treatment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform t-test</span></span>
<span id="cb25-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t.test</span>(control, treatment)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Welch Two Sample t-test

data:  control and treatment
t = -3.3845, df = 52.285, p-value = 0.001359
alternative hypothesis: true difference in means is not equal to 0
95 percent confidence interval:
 -2.6448455 -0.6761244
sample estimates:
mean of x mean of y 
 10.16769  11.82818 </code></pre>
</div>
</div>
</section>
<section id="parameter-estimation" class="level2">
<h2 class="anchored" data-anchor-id="parameter-estimation">3. Parameter Estimation</h2>
<p>Estimating parameters of a normal distribution from observed data is a common task in statistical analysis. The <code>util_normal_param_estimate()</code> function provides convenient methods:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimate parameters from data</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb27-3">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-4">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_param_estimate</span>(data)</span>
<span id="cb27-5">params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parameter_tbl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2
Columns: 8
$ dist_type   &lt;chr&gt; "Gaussian", "Gaussian"
$ samp_size   &lt;int&gt; 100, 100
$ min         &lt;dbl&gt; -3.98618, -3.98618
$ max         &lt;dbl&gt; 6.573291, 6.573291
$ method      &lt;chr&gt; "EnvStats_MME_MLE", "EnvStats_MVUE"
$ mu          &lt;dbl&gt; 2.06503, 2.06503
$ stan_dev    &lt;dbl&gt; 2.072274, 2.082714
$ shape_ratio &lt;dbl&gt; 0.9965041, 0.9915090</code></pre>
</div>
</div>
</section>
<section id="model-selection-and-goodness-of-fit" class="level2">
<h2 class="anchored" data-anchor-id="model-selection-and-goodness-of-fit">4. Model Selection and Goodness-of-Fit</h2>
<p>The <code>util_normal_aic()</code> function helps determine if a normal distribution is appropriate for your data:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare AIC for different distributions</span></span>
<span id="cb29-2">normal_aic <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_aic</span>(data)</span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare with other distributions...</span></span></code></pre></div>
</section>
<section id="tidy-data-workflows" class="level2">
<h2 class="anchored" data-anchor-id="tidy-data-workflows">5. Tidy Data Workflows</h2>
<p>The TidyDensity package integrates well with the tidyverse, enabling seamless workflows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate normal data</span></span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_normal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.sd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute statistics</span></span>
<span id="cb30-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_normal_stats_tbl</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select key statistics</span></span>
<span id="cb30-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mean, median, std_dv, ci_lo, ci_hi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 5
   mean median std_dv ci_lo ci_hi
  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1     5   5.13    1.5  1.36  7.62</code></pre>
</div>
</div>
</section>
</section>
<section id="comparing-rnorm-and-tidy_normal" class="level1">
<h1>Comparing rnorm() and tidy_normal()</h1>
<p>When deciding which function to use for normal distribution generation, consider these differences:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Feature</th>
<th><code>rnorm()</code></th>
<th><code>tidy_normal()</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Output type</strong></td>
<td>Numeric vector</td>
<td>Tibble with multiple columns</td>
</tr>
<tr class="even">
<td><strong>Additional info</strong></td>
<td>None</td>
<td>Density, probability, quantiles</td>
</tr>
<tr class="odd">
<td><strong>Memory usage</strong></td>
<td>Lower</td>
<td>Higher (more data stored)</td>
</tr>
<tr class="even">
<td><strong>Workflow integration</strong></td>
<td>Base R</td>
<td>Tidyverse-friendly</td>
</tr>
<tr class="odd">
<td><strong>Performance</strong></td>
<td>Fastest</td>
<td>Slightly more overhead</td>
</tr>
</tbody>
</table>
</section>
<section id="advanced-applications" class="level1">
<h1>Advanced Applications</h1>
<section id="monte-carlo-simulation" class="level2">
<h2 class="anchored" data-anchor-id="monte-carlo-simulation">Monte Carlo Simulation</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Estimate probability using Monte Carlo simulation</span></span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_mcmc_sampling</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$mcmc_data
# A tibble: 4,000 × 3
   sim_number name              value
   &lt;fct&gt;      &lt;fct&gt;             &lt;dbl&gt;
 1 1          .sample_mean     0.0732
 2 1          .cum_stat_cmean  0.0732
 3 2          .sample_mean     0.162 
 4 2          .cum_stat_cmean  0.118 
 5 3          .sample_mean     0.0961
 6 3          .cum_stat_cmean  0.110 
 7 4          .sample_mean     0.0711
 8 4          .cum_stat_cmean  0.101 
 9 5          .sample_mean    -0.0186
10 5          .cum_stat_cmean  0.0768
# ℹ 3,990 more rows

$plt</code></pre>
</div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="bootstrap-confidence-intervals" class="level2">
<h2 class="anchored" data-anchor-id="bootstrap-confidence-intervals">Bootstrap Confidence Intervals</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bootstrap confidence interval for mean</span></span>
<span id="cb34-2">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb34-3">boot_means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span>
<span id="cb34-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(boot_means, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.975</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 95% CI</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     2.5%     97.5% 
 9.358964 10.645430 </code></pre>
</div>
</div>
</section>
<section id="probability-density-function-visualization" class="level2">
<h2 class="anchored" data-anchor-id="probability-density-function-visualization">Probability Density Function Visualization</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate x-values</span></span>
<span id="cb36-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate density values</span></span>
<span id="cb36-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x)</span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot PDF</span></span>
<span id="cb36-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, </span>
<span id="cb36-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Normal Probability Density Function"</span>, </span>
<span id="cb36-8">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Try generating a mixture of two normal distributions in R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a mixture of two normal distributions</span></span>
<span id="cb37-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb37-3">mixture <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb37-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(mixture, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mixture of Two Normal Distributions"</span>)</span>
<span id="cb37-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(mixture), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<details>
<summary>
See Solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a mixture of two normal distributions</span></span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb38-3">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb38-4">mixture <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb38-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(mixture, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mixture of Two Normal Distributions"</span>)</span>
<span id="cb38-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">density</span>(mixture), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can also visualize the component distributions:</span></span>
<span id="cb38-9">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb38-10">y1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scaling by 0.5 for mixture proportion</span></span>
<span id="cb38-11">y2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb38-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(x, y1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb38-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(x, y2, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb38-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">legend</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"topright"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mixture"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Component 1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Component 2"</span>), </span>
<span id="cb38-15">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lty=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><code>rnorm()</code> is the fastest and simplest way to generate random normal values in base R</li>
<li><code>tidy_normal()</code> creates enhanced tibbles with density, probability, and quantile information</li>
<li><code>util_normal_param_estimate()</code> offers multiple methods to estimate distribution parameters from data</li>
<li><code>util_normal_stats_tbl()</code> provides comprehensive statistics for normal distributions</li>
<li><code>util_normal_aic()</code> helps with model selection through AIC calculation</li>
<li>Performance differences between methods are minor for typical dataset sizes</li>
<li>Each function serves different purposes in a statistical workflow, from data generation to analysis</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The R programming language provides multiple approaches to generate and analyze normal distributions. Whether you prefer the simplicity of base R’s <code>rnorm()</code> or the comprehensive tibble output of TidyDensity’s <code>tidy_normal()</code> and utility functions, you can easily incorporate normal distributions in your statistical analysis workflows.</p>
<p>For straightforward random number generation, <code>rnorm()</code> is fast and efficient. For more complex analyses requiring additional statistics and tidy data structures, the TidyDensity package’s functions offer integrated solutions that work well within modern R programming paradigms.</p>
</section>
<section id="faq" class="level1">
<h1>FAQ</h1>
<p><strong>Q: How do I generate the same random normal values every time?</strong><br>
A: Use <code>set.seed()</code> before calling <code>rnorm()</code> or <code>tidy_normal()</code> to ensure reproducibility:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb39-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Will always produce the same 5 values</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -0.56047565 -0.23017749  1.55870831  0.07050839  0.12928774</code></pre>
</div>
</div>
<p><strong>Q: Can I generate multivariate normal distributions?</strong><br>
A: Yes, use the <code>MASS::mvrnorm()</code> function from the MASS package:</p>
<div class="cell" data-messge="false">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MASS)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'MASS'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:dplyr':

    select</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma=</span>sigma) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]         [,2]
[1,]  1.5078037  1.462775985
[2,]  0.7916174  0.006712909
[3,] -0.2616042 -1.929546135
[4,] -0.4047188 -0.784945279
[5,] -0.8454529  0.073543717
[6,]  1.3477594  0.772412452</code></pre>
</div>
</div>
<p><strong>Q: How can I check if my data follows a normal distribution?</strong><br>
A: Use the Shapiro-Wilk test or QQ plots:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">shapiro.test</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Shapiro-Wilk normality test

data:  data
W = 0.98244, p-value = 0.8861</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqnorm</span>(data); <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqline</span>(data)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/index_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p><strong>Q: What’s the difference between MLE and MVUE parameter estimation?</strong><br>
A: MLE uses maximum likelihood estimation while MVUE provides minimum variance unbiased estimates. For normal distributions, they primarily differ in how they calculate the standard deviation.</p>
<p><strong>Q: How many data points should I generate for accurate simulations?</strong><br>
A: It depends on your purpose, but typically 1,000+ points provide good distribution shape, while sensitive statistical tests might require 10,000+ samples for stability.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.r-project.org/">R Project for Statistical Computing</a> - Official website for the R programming language.</p></li>
<li><p><a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/Normal.html">Normal Distribution in R Documentation</a> - Official documentation for <code>rnorm()</code> and related normal distribution functions.</p></li>
<li><p><a href="https://cran.r-project.org/manuals.html">R Manuals and Documentation</a> - Comprehensive list of all documentation for R functions and packages.</p></li>
<li><p><a href="https://cran.r-project.org/web/packages/TidyDensity/index.html">TidyDensity Package on CRAN</a> - Official CRAN page with documentation and vignettes.</p></li>
<li><p><a href="https://cran.r-project.org/web/packages/TidyDensity/TidyDensity.pdf">TidyDensity Reference Manual (PDF)</a> - Complete reference guide for all TidyDensity functions.</p></li>
<li><p><a href="https://github.com/spsanderson/TidyDensity">TidyDensity GitHub Repository</a> - Source code and additional documentation.</p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-23/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>R your data normal?</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-06-23/</guid>
  <pubDate>Mon, 23 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Use runif Function in R With Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-06-17/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Random number generation is a common task when working with simulations or sampling data in R. In this article, we explain how the runif function creates random values that follow a uniform distribution. We present several code examples to illustrate basic usage and a deeper exploration of generating random numbers. The article is split into two main parts. The first part explains the base runif() function, while the second part introduces a TidyDensity function: tidy_uniform(), that outputs uniformly distributed numbers in a tibble format. This discussion will help R programmers at every level apply these tools in data analysis and simulation tasks .</p>
</section>
<section id="what-is-a-uniform-distribution" class="level1">
<h1>What Is a Uniform Distribution?</h1>
<p>A uniform distribution is one where every value in a specified range is equally likely to occur. In R, the runif() function allows you to tap into this distribution by specifying the total number of samples, along with the lower and upper boundaries. For example, by default runif produces values between 0 and 1 when the boundary values are not provided. This even distribution of chance is useful in many statistical simulations and random sampling scenarios .</p>
</section>
<section id="base-r-using-the-runif-function" class="level1">
<h1>Base R: Using the runif() Function</h1>
<p>The base R runif() function is widely used to create random deviates that follow a uniform distribution. Its simple syntax is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Here,</p>
<p>• <code>n</code> represents the number of random points to be generated,<br>
• <code>min</code> is the lower limit, and<br>
• <code>max</code> is the upper limit of the distribution .</p>
<p>Below are several examples that demonstrate how to use runif() in practice for various purposes.</p>
<section id="example-1-generating-ten-random-numbers" class="level2">
<h2 class="anchored" data-anchor-id="example-1-generating-ten-random-numbers">Example 1: Generating Ten Random Numbers</h2>
<p>A straightforward application involves generating ten random numbers between 0 and 1. This is the default setting:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 10 random numbers between 0 and 1</span></span>
<span id="cb2-2">random_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(random_numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0.8795819 0.9655049 0.5384998 0.3639172 0.9813085 0.5184960 0.6944798
 [8] 0.1403714 0.8494588 0.3798931</code></pre>
</div>
</div>
<p>This code creates ten random values that are evenly spread over the [0, 1] interval. This is useful for simple simulations or random sampling tasks.</p>
</section>
<section id="example-2-customizing-the-lower-and-upper-limits" class="level2">
<h2 class="anchored" data-anchor-id="example-2-customizing-the-lower-and-upper-limits">Example 2: Customizing the Lower and Upper Limits</h2>
<p>Sometimes you require random numbers within a different range. In the following example, we generate 15 random values between 5 and 10:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 15 random numbers between 5 and 10</span></span>
<span id="cb4-2">custom_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(custom_numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 5.710368 5.455214 6.676397 8.699054 5.003504 9.817521 9.503646 7.077873
 [9] 8.047693 6.917545 6.546502 8.389270 8.825989 6.048662 6.418651</code></pre>
</div>
</div>
<p>By creating a sample over the [5, 10] interval, the code can be applied when using measurement units or settings where the numbers do not naturally fall between 0 and 1 .</p>
</section>
<section id="example-3-creating-a-large-sample-and-plotting-a-histogram" class="level2">
<h2 class="anchored" data-anchor-id="example-3-creating-a-large-sample-and-plotting-a-histogram">Example 3: Creating a Large Sample and Plotting a Histogram</h2>
<p>For simulation studies or visual analysis, generating a large sample can help in understanding the distribution. Use this example to create 1,000 random numbers and plot a histogram to visually inspect the even spread.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 1,000 random numbers and plot the distribution</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ensure reproducibility</span></span>
<span id="cb6-3">large_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plotting the histogram</span></span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(large_sample, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of 1000 Uniform Random Numbers"</span>, </span>
<span id="cb6-7">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"skyblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">border =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-17/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The histogram should show an even distribution of numbers across the defined range. Visualizing the output reinforces understanding of the uniform nature of these values .</p>
</section>
<section id="example-4-using-runif-within-a-simulation-function" class="level2">
<h2 class="anchored" data-anchor-id="example-4-using-runif-within-a-simulation-function">Example 4: Using runif() Within a Simulation Function</h2>
<p>In many simulation tasks, you may require a custom function that uses runif() to generate uniform deviates as part of a broader algorithm. The following code shows how to embed runif() within a simulation scenario:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a simulation function using runif()</span></span>
<span id="cb7-2">simulate_uniform <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(simulations, points) {</span>
<span id="cb7-3">  results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(simulations)</span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>simulations) {</span>
<span id="cb7-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a sample of random numbers and compute the mean</span></span>
<span id="cb7-6">    sample_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(points, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb7-7">    results[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(sample_values)</span>
<span id="cb7-8">  }</span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(results)</span>
<span id="cb7-10">}</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the simulation with 50 iterations; each iteration has 100 uniform random numbers</span></span>
<span id="cb7-13">simulation_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate_uniform</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb7-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(simulation_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 14.79126 14.94206 14.98547 14.48088 15.49497 14.70642 15.16824 15.40201
 [9] 15.29996 14.55437 14.91566 15.11270 14.87605 14.96450 14.67318 15.23566
[17] 14.74193 15.17651 15.21840 14.94577 15.26565 14.84095 15.00358 15.15409
[25] 14.77025 15.35455 15.03522 15.01672 14.86161 15.09590 15.26783 14.75215
[33] 14.63188 15.10038 14.79742 14.72019 15.04457 15.46613 14.13749 14.99490
[41] 15.28005 15.10991 14.79033 14.78180 15.05600 15.31129 14.53123 15.18169
[49] 15.11222 15.39883</code></pre>
</div>
</div>
<p>This function collects statistical summaries from repeated runs of random sampling. Such techniques are common in simulation-based inference or bootstrapping methods .</p>
</section>
</section>
<section id="tidy-runif-using-the-tidydensity-approach-with-tidy_uniform" class="level1">
<h1>Tidy runif: Using the TidyDensity Approach with tidy_uniform()</h1>
<p>In addition to the classic runif() function in base R, the tidy ecosystem offers a cleaner, tibble based approach to random number generation. The function tidy_uniform(), part of a collection of functions for generating various probability distributions, produces outputs as a tibble. This makes it easier to integrate with other tidyverse tools for further processing and visualization.</p>
<p>The tidy_uniform() function generates n random points from a uniform distribution over specified minimum and maximum values. It returns a tibble that includes columns such as:</p>
<p>• <code>sim_number</code>: Current simulation number<br>
• <code>x</code>: The sample index<br>
• <code>y</code>: The generated random number<br>
• <code>dx</code> and <code>dy</code>: Values derived from density computations<br>
• <code>p</code> and <code>q</code>: Values from the probability and quantile functions, respectively</p>
<p>This added information can be useful when exploring the distribution in more depth.</p>
<section id="example-1-generating-a-tibble-of-uniform-random-numbers" class="level2">
<h2 class="anchored" data-anchor-id="example-1-generating-a-tibble-of-uniform-random-numbers">Example 1: Generating a Tibble of Uniform Random Numbers</h2>
<p>The first example with tidy_uniform() illustrates a simple call that returns a tibble. The following code snippet demonstrates how to generate 50 random numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load necessary libraries</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(TidyDensity)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming tidy_uniform is available from your analysis package</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a tibble with 50 random uniform values using tidy_uniform()</span></span>
<span id="cb9-6">result_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_uniform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 50 × 7
   sim_number     x      y      dx      dy      p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1 0.440  -0.334  0.00153 0.440  0.440 
 2 1              2 0.397  -0.300  0.00371 0.397  0.397 
 3 1              3 0.372  -0.265  0.00832 0.372  0.372 
 4 1              4 0.529  -0.231  0.0172  0.529  0.529 
 5 1              5 0.0738 -0.196  0.0332  0.0738 0.0738
 6 1              6 0.717  -0.162  0.0591  0.717  0.717 
 7 1              7 0.243  -0.128  0.0980  0.243  0.243 
 8 1              8 0.844  -0.0933 0.152   0.844  0.844 
 9 1              9 0.995  -0.0590 0.219   0.995  0.995 
10 1             10 0.105  -0.0246 0.298   0.105  0.105 
# ℹ 40 more rows</code></pre>
</div>
</div>
<p>The output is a tibble so this format makes it easier to integrate analyses across other tidy tools and pipelines.</p>
</section>
<section id="example-2-simulating-multiple-runs" class="level2">
<h2 class="anchored" data-anchor-id="example-2-simulating-multiple-runs">Example 2: Simulating Multiple Runs</h2>
<p>Using tidy_uniform(), you can simulate several runs of random figures easily. Here is an example where we generate random numbers from 3 separate simulations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a tibble with 3 simulation runs; each simulation has 30 random numbers</span></span>
<span id="cb11-2">multi_sim_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_uniform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(multi_sim_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 90 × 7
   sim_number     x     y      dx       dy      p     q
   &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
 1 1              1  3.91 -0.383  0.000537 0.318   3.91
 2 1              2  5.50 -0.0157 0.00208  0.583   5.50
 3 1              3  2.31  0.352  0.00663  0.0513  2.31
 4 1              4  3.50  0.720  0.0175   0.250   3.50
 5 1              5  2.09  1.09   0.0383   0.0147  2.09
 6 1              6  3.31  1.45   0.0708   0.218   3.31
 7 1              7  5.14  1.82   0.112    0.524   5.14
 8 1              8  3.98  2.19   0.155    0.330   3.98
 9 1              9  6.45  2.56   0.194    0.741   6.45
10 1             10  7.73  2.93   0.223    0.956   7.73
# ℹ 80 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">util_uniform_stats_tbl</span>(multi_sim_tbl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 16
$ tidy_function     &lt;chr&gt; "tidy_uniform"
$ function_call     &lt;chr&gt; "Uniform c(2, 8)"
$ distribution      &lt;chr&gt; "Uniform"
$ distribution_type &lt;chr&gt; "continuous"
$ points            &lt;dbl&gt; 30
$ simulations       &lt;dbl&gt; 3
$ mean              &lt;dbl&gt; 5
$ median            &lt;dbl&gt; 5
$ std_dv            &lt;dbl&gt; 1.732051
$ coeff_var         &lt;dbl&gt; 0.3464102
$ skewness          &lt;dbl&gt; 0
$ kurtosis          &lt;dbl&gt; 1.8
$ computed_std_skew &lt;dbl&gt; 0.08194513
$ computed_std_kurt &lt;dbl&gt; 1.915291
$ ci_lo             &lt;dbl&gt; 2.087999
$ ci_hi             &lt;dbl&gt; 7.85991</code></pre>
</div>
</div>
<p>Each simulation run is identified by the sim_number column, allowing for easy grouping and comparing between the different simulation runs .</p>
</section>
<section id="example-3-plotting-the-results-with-ggplot2" class="level2">
<h2 class="anchored" data-anchor-id="example-3-plotting-the-results-with-ggplot2">Example 3: Plotting the Results with ggplot2</h2>
<p>The tibble output from tidy_uniform() can be directly used with ggplot2 for a more detailed visual analysis of the generated data. The following example shows how to plot the density of these random numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load required libraries</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random uniform data using tidy_uniform()</span></span>
<span id="cb15-5">data_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_uniform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the density of the random numbers</span></span>
<span id="cb15-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data_tbl, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density)), </span>
<span id="cb15-10">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgreen"</span>, </span>
<span id="cb15-11">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>,</span>
<span id="cb15-12">                 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkgreen"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb15-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density Plot of Uniform Random Numbers"</span>, </span>
<span id="cb15-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Value"</span>, </span>
<span id="cb15-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span></span>
<span id="cb15-18">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-17/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>This graph provides a visual confirmation of the uniform distribution of the random outcomes and shows how tidy data structures are easily integrated into visualization workflows .</p>
</section>
<section id="example-4-combining-tidy_uniform-with-data-analysis-pipelines" class="level2">
<h2 class="anchored" data-anchor-id="example-4-combining-tidy_uniform-with-data-analysis-pipelines">Example 4: Combining tidy_uniform with Data Analysis Pipelines</h2>
<p>For further statistical analysis, tidy_uniform() can be integrated with additional data processing steps. Consider the following example that computes summary statistics grouped by simulation number:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume tidy_uniform() has generated a tibble called simulation_data</span></span>
<span id="cb16-2">simulation_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_uniform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Summarize the data by simulation number</span></span>
<span id="cb16-5">summary_tbl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> simulation_data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(sim_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y),</span>
<span id="cb16-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(y),</span>
<span id="cb16-9">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(y),</span>
<span id="cb16-10">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(y))</span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(summary_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 5
  sim_number mean_value min_value max_value median_value
  &lt;fct&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;
1 1               10.2       5.02      14.9        10.0 
2 2                9.90      5.05      14.8         9.64
3 3                9.97      5.27      14.9         9.78
4 4               10.1       5.01      14.9        10.3 
5 5                9.66      5.10      14.7         9.92</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_stat_tbl</span>(simulation_data, y, quantile, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tibble"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> p) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-3">  tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_wider</span>(</span>
<span id="cb18-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_from =</span> name,</span>
<span id="cb18-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values_from =</span> quantile</span>
<span id="cb18-6">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 5 × 6
  sim_number `2.5%` `25%` `50%` `75%` `95%`
  &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1 1            5.31  7.42 10.0   12.9  14.6
2 2            5.13  7.73  9.64  12.5  14.0
3 3            5.55  7.80  9.78  12.3  14.1
4 4            5.27  7.51 10.3   12.8  14.6
5 5            5.36  7.11  9.92  11.4  14.0</code></pre>
</div>
</div>
<p>This grouping and summarizing is a typical step in data analysis pipelines when leveraging the tidyverse. The output provides insights into how the generated values vary between different simulation runs .</p>
</section>
</section>
<section id="interactive-section-your-turn" class="level1">
<h1>Interactive Section: Your Turn!</h1>
<p>Now it is time for you to experiment with both approaches. Try the following exercise in your R console:</p>
<ol type="1">
<li>Use runif() to generate 20 random numbers between 100 and 200 and compute their standard deviation.</li>
<li>Use tidy_uniform() to create a tibble with 100 uniform random numbers between -5 and 5 over 2 simulation runs.</li>
<li>Plot histograms for both outputs and compare the visual results.</li>
</ol>
<details>
<summary>
See Solution
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exercise Solution</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Part 1 - Using base runif()</span></span>
<span id="cb20-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb20-5">base_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb20-6">std_dev <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(base_data)</span>
<span id="cb20-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(base_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 128.7578 178.8305 140.8977 188.3017 194.0467 104.5556 152.8105 189.2419
 [9] 155.1435 145.6615 195.6833 145.3334 167.7571 157.2633 110.2925 189.9825
[17] 124.6088 104.2060 132.7921 195.4504</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard Deviation:"</span>, std_dev))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Standard Deviation: 31.3471021463883"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Part 2 - Using tidy_uniform()</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure that tidy_uniform() is available and the necessary library is loaded</span></span>
<span id="cb24-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb24-4">tidy_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy_uniform</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.min =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_sims =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(tidy_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 200 × 7
   sim_number     x      y    dx       dy      p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1 -2.12  -8.06 0.000107 0.288  -2.12 
 2 1              2  2.88  -7.89 0.000178 0.788   2.88 
 3 1              3 -0.910 -7.73 0.000290 0.409  -0.910
 4 1              4  3.83  -7.57 0.000461 0.883   3.83 
 5 1              5  4.40  -7.41 0.000717 0.940   4.40 
 6 1              6 -4.54  -7.25 0.00109  0.0456 -4.54 
 7 1              7  0.281 -7.08 0.00162  0.528   0.281
 8 1              8  3.92  -6.92 0.00237  0.892   3.92 
 9 1              9  0.514 -6.76 0.00338  0.551   0.514
10 1             10 -0.434 -6.60 0.00472  0.457  -0.434
# ℹ 190 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Part 3 - Plotting the histograms</span></span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Histogram for base runif data</span></span>
<span id="cb26-4">base_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> base_data)</span>
<span id="cb26-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(base_df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of Base runif Data"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-17/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Histogram for tidy_uniform data (plot for the first simulation only)</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(tidy_data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> sim_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Histogram of tidy_uniform Data for Simulation 1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Count"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-17/index_files/figure-html/unnamed-chunk-9-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><strong>Uniform Distribution:</strong> Every value in a set range has an equal chance of occurring. This is what runif() and tidy_uniform() rely on.</li>
<li><strong>Base runif() Function:</strong> Provides a simple interface to generate random numbers in any specified interval using parameters n, min, and max.</li>
<li><strong>Tidy Approach:</strong> The tidy_uniform() function returns a well-structured tibble that integrates seamlessly with tidyverse operations.</li>
<li><strong>Multiple Applications:</strong> Both methods can be used for simulations, random sampling, and even statistical analyses when combined with plotting and summarization.</li>
</ul>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<ol type="1">
<li><p><strong>What is the syntax for the runif function in R?</strong><br>
The syntax is <code>runif(n, min = 0, max = 1)</code>, where n is the number of observations and min and max define the range .</p></li>
<li><p><strong>How can I generate random numbers between a specified range using runif()?</strong><br>
Simply pass the desired lower and upper limits as the min and max arguments, for example, <code>runif(10, min = 5, max = 15)</code>.</p></li>
<li><p><strong>What does the tidy_uniform() function return?</strong><br>
It returns a tibble containing multiple columns that include simulation identifiers and the calculated density and probability values. This output is handy for further tidyverse data processing .</p></li>
<li><p><strong>Which method should I use: base runif or tidy_uniform?</strong><br>
If you work mostly in base R, runif() is straightforward and quick. However, if you are more familiar with tidyverse pipelines, tidy_uniform() offers a more integrated approach.</p></li>
<li><p><strong>Can I visualize the output from these functions?</strong><br>
Yes, you can easily use packages like ggplot2 to plot histograms or density plots based on the random values generated by either runif() or tidy_uniform().</p></li>
</ol>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this article, we have examined different ways to generate random numbers following a uniform distribution in R. You learned how to use the base runif() function to quickly generate random deviates and how to implement the tidy_uniform() function for a structured, tibble-based output that works well in data analysis pipelines.</p>
<p>Using these approaches, you can simulate data for testing, perform statistical analyses, and integrate the outputs seamlessly into your data visualization routines. Experiment with these examples and tailor them for your own projects. Feel free to comment on your experiences, ask questions, or share additional tips on how you use random number generation in your R code.</p>
<p>Happy coding and keep exploring the possibilities that R offers for simulation and data analysis!</p>
</section>
<section id="engage" class="level1">
<h1>Engage!</h1>
<p>If you found this article useful, please share your thoughts in the comments below and consider sharing the post on social media. Your feedback helps us create posts that truly help fellow R programmers explore and enhance their skills.</p>
<p><em>By following the examples and explanations provided here, you will be well equipped to generate uniform random numbers using both the base runif() function and the tidy uniform approach. Enjoy your data analysis and simulations in R!</em></p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://cran.r-project.org/package=TidyDensity">TidyDensity: Tidy Uniform Functions on CRAN</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-17/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Random Uniformness</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-06-17/</guid>
  <pubDate>Tue, 17 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create a Data Frame from Vectors in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-06-09/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Data frames are foundational data structures in R programming, serving as the backbone for most data analysis workflows. Whether you’re cleaning data, preparing it for visualization, or conducting statistical analysis, knowing how to efficiently create data frames from vectors is an essential skill for any R programmer.</p>
<p>In this comprehensive guide, we’ll explore <strong>how to create a data frame from vectors in R</strong> using multiple approaches, from basic methods to more advanced techniques. You’ll learn the strengths and limitations of each method, along with practical examples that you can apply to your own projects.</p>
</section>
<section id="understanding-vectors-and-data-frames" class="level1">
<h1>Understanding Vectors and Data Frames</h1>
<p>Before diving into the methods, let’s briefly review what vectors and data frames are in R:</p>
<ul>
<li><strong>Vectors</strong>: The most basic data structure in R, containing elements of the same type (numeric, character, logical)</li>
<li><strong>Data Frames</strong>: Two-dimensional, tabular data structures where each column can have a different data type</li>
</ul>
<p>The goal of this article is to show you how to combine multiple vectors into a cohesive data frame using various techniques.</p>
</section>
<section id="method-1-using-data.frame" class="level1">
<h1>Method 1: Using <code>data.frame()</code></h1>
<p>The most straightforward approach to create a data frame from vectors is using the built-in <code>data.frame()</code> function. This method is part of base R and doesn’t require any additional packages.</p>
<section id="basic-example" class="level2">
<h2 class="anchored" data-anchor-id="basic-example">Basic Example</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating vectors</span></span>
<span id="cb1-2">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>)</span>
<span id="cb1-3">age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb1-4">score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.8</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a data frame</span></span>
<span id="cb1-7">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> name,</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> age,</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> score</span>
<span id="cb1-11">)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age Score
1   Alice  25  88.5
2     Bob  30  92.3
3 Charlie  35  79.8</code></pre>
</div>
</div>
</section>
<section id="key-points-about-data.frame" class="level2">
<h2 class="anchored" data-anchor-id="key-points-about-data.frame">Key Points About <code>data.frame()</code></h2>
<ul>
<li>All vectors must have the same length</li>
<li>By default (in R versions prior to 4.0.0), character vectors are converted to factors</li>
<li>Column names are derived from the argument names</li>
<li>You can prevent automatic conversion of strings to factors with <code>stringsAsFactors = FALSE</code></li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preventing automatic conversion to factors (for R versions &lt; 4.0.0)</span></span>
<span id="cb3-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> name,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> age,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> score,</span>
<span id="cb3-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb3-7">)</span></code></pre></div>
</section>
</section>
<section id="method-2-creating-tibbles-with-tibble" class="level1">
<h1>Method 2: Creating Tibbles with <code>tibble</code></h1>
<p>Tibbles are modern reimaginations of data frames provided by the <code>tibble</code> package, which is part of the tidyverse. They offer improved printing, better handling of complex data types, and don’t convert strings to factors by default.</p>
<section id="installing-and-loading-the-package" class="level2">
<h2 class="anchored" data-anchor-id="installing-and-loading-the-package">Installing and Loading the Package</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install tibble if you haven't already</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("tibble")</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the package</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span></code></pre></div>
</div>
</section>
<section id="creating-a-tibble" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-tibble">Creating a Tibble</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating vectors</span></span>
<span id="cb5-2">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>)</span>
<span id="cb5-3">age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb5-4">score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.8</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a tibble</span></span>
<span id="cb5-7">tb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb5-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> name,</span>
<span id="cb5-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> age,</span>
<span id="cb5-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> score</span>
<span id="cb5-11">)</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb5-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(tb)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  Name      Age Score
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 Alice      25  88.5
2 Bob        30  92.3
3 Charlie    35  79.8</code></pre>
</div>
</div>
</section>
<section id="advantages-of-tibbles" class="level2">
<h2 class="anchored" data-anchor-id="advantages-of-tibbles">Advantages of Tibbles</h2>
<ul>
<li><strong>Better printing</strong>: Tibbles only show the first 10 rows by default and adapt to your screen width</li>
<li><strong>No string-to-factor conversion</strong>: Character vectors remain as character vectors</li>
<li><strong>Improved subsetting behavior</strong>: Subsetting a tibble always returns another tibble</li>
<li><strong>Better handling of list-columns</strong>: Tibbles can easily contain lists, data frames, or complex objects as column values</li>
</ul>
</section>
</section>
<section id="method-3-using-cbind" class="level1">
<h1>Method 3: Using <code>cbind()</code></h1>
<p>The <code>cbind()</code> function combines vectors or matrices by columns. It can be used to create data frames by binding vectors side-by-side.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating vectors</span></span>
<span id="cb7-2">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>)</span>
<span id="cb7-3">age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb7-4">score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.8</span>)</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using cbind() and converting to data frame</span></span>
<span id="cb7-7">df_cbind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(</span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> name,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> age,</span>
<span id="cb7-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> score</span>
<span id="cb7-12">  )</span>
<span id="cb7-13">)</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb7-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_cbind)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     Name Age Score
1   Alice  25  88.5
2     Bob  30  92.3
3 Charlie  35  79.8</code></pre>
</div>
</div>
<section id="important-note-about-cbind" class="level2">
<h2 class="anchored" data-anchor-id="important-note-about-cbind">Important Note About <code>cbind()</code></h2>
<p>When using <code>cbind()</code> with vectors of different types, be cautious of type coercion. Since <code>cbind()</code> first creates a matrix, and matrices in R can only contain elements of a single type, R will try to convert all values to a common type.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This forces all values to be characters</span></span>
<span id="cb9-2">cbind_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(name, age, score)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(cbind_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> chr [1:3, 1:3] "Alice" "Bob" "Charlie" "25" "30" "35" "88.5" "92.3" "79.8"
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:3] "name" "age" "score"</code></pre>
</div>
</div>
<p>To avoid this issue, convert the result to a data frame using <code>as.data.frame()</code> as shown in the earlier example.</p>
</section>
</section>
<section id="method-4-advanced-techniques-with-purrr" class="level1">
<h1>Method 4: Advanced Techniques with <code>purrr</code></h1>
<p>The <code>purrr</code> package provides functional programming tools for R and is particularly useful for more complex data frame creation scenarios, especially when combining multiple vectors programmatically.</p>
<section id="installing-and-loading-the-package-1" class="level2">
<h2 class="anchored" data-anchor-id="installing-and-loading-the-package-1">Installing and Loading the Package</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install purrr if you haven't already</span></span>
<span id="cb11-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#install.packages("purrr")</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the package</span></span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span></code></pre></div>
</div>
</section>
<section id="example-1-using-map_dfr-to-combine-results" class="level2">
<h2 class="anchored" data-anchor-id="example-1-using-map_dfr-to-combine-results">Example 1: Using <code>map_dfr()</code> to Combine Results</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a list of parameter sets</span></span>
<span id="cb12-2">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.5</span>),</span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>),</span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">score =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.8</span>)</span>
<span id="cb12-6">)</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using map_dfr to apply a function to each element and bind the results</span></span>
<span id="cb12-9">df_purrr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(params, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(.x))</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb12-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_purrr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     name age score
1   Alice  25  88.5
2     Bob  30  92.3
3 Charlie  35  79.8</code></pre>
</div>
</div>
</section>
<section id="example-2-using-a-named-list-of-vectors-with-as_tibble" class="level2">
<h2 class="anchored" data-anchor-id="example-2-using-a-named-list-of-vectors-with-as_tibble">Example 2: Using a Named List of Vectors with <code>as_tibble()</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a named list of vectors</span></span>
<span id="cb14-2">vectors_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb14-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb14-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>),</span>
<span id="cb14-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.8</span>)</span>
<span id="cb14-6">)</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the list to a tibble</span></span>
<span id="cb14-9">df_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(vectors_list)</span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb14-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_list)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  Name      Age Score
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 Alice      25  88.5
2 Bob        30  92.3
3 Charlie    35  79.8</code></pre>
</div>
</div>
</section>
<section id="example-3-using-pmap-for-parallel-vector-processing" class="level2">
<h2 class="anchored" data-anchor-id="example-3-using-pmap-for-parallel-vector-processing">Example 3: Using <code>pmap()</code> for Parallel Vector Processing</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create separate vectors</span></span>
<span id="cb16-2">names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>)</span>
<span id="cb16-3">ages <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>)</span>
<span id="cb16-4">scores <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">88.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.8</span>)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use pmap to create a data frame by processing vectors in parallel</span></span>
<span id="cb16-7">df_pmap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(</span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> ages, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> scores),</span>
<span id="cb16-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(Name, Age, Score) {</span>
<span id="cb16-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> Name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> Age, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Score =</span> Score)</span>
<span id="cb16-11">  }</span>
<span id="cb16-12">)</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View the result</span></span>
<span id="cb16-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_pmap)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 3 × 3
  Name      Age Score
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 Alice      25  88.5
2 Bob        30  92.3
3 Charlie    35  79.8</code></pre>
</div>
</div>
<p>The <code>purrr</code> approach shines when:</p>
<ul>
<li>Creating data frames dynamically or programmatically</li>
<li>Working with lists of data that need to be combined</li>
<li>Needing to apply transformations during the data frame creation process</li>
</ul>
</section>
</section>
<section id="best-practices-and-performance-considerations" class="level1">
<h1>Best Practices and Performance Considerations</h1>
<section id="vector-length-consistency" class="level2">
<h2 class="anchored" data-anchor-id="vector-length-consistency">Vector Length Consistency</h2>
<p>Always ensure all vectors have the same length. Unequal lengths can lead to unexpected behavior:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will raise a warning and recycle values</span></span>
<span id="cb18-2">problematic_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb18-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>),</span>
<span id="cb18-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One element short!</span></span>
<span id="cb18-5">)</span></code></pre></div>
</section>
<section id="data-types-and-conversion" class="level2">
<h2 class="anchored" data-anchor-id="data-types-and-conversion">Data Types and Conversion</h2>
<p>Be mindful of automatic type conversions:</p>
<ul>
<li>In older R versions, <code>data.frame()</code> converts strings to factors by default</li>
<li><code>cbind()</code> can cause type coercion when combining vectors of different types</li>
<li><code>tibble()</code> and modern approaches preserve the original vector types</li>
</ul>
</section>
<section id="performance-considerations" class="level2">
<h2 class="anchored" data-anchor-id="performance-considerations">Performance Considerations</h2>
<p>For very large datasets, consider the following:</p>
<ul>
<li><code>data.frame()</code> can be slower due to additional checks and conversions</li>
<li><code>tibble()</code> is generally more efficient for larger datasets</li>
<li><code>cbind()</code> followed by <code>as.data.frame()</code> may incur performance penalties due to the intermediate matrix creation</li>
<li>For massive data frame creation, consider <code>data.table::setDT()</code> for maximum performance</li>
</ul>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now that you’ve learned multiple methods for creating data frames from vectors, let’s practice with a hands-on exercise.</p>
<p><strong>Challenge:</strong> Create a data frame using three different methods (<code>data.frame()</code>, <code>tibble()</code>, and <code>purrr</code>) with the following vectors:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Your vectors</span></span>
<span id="cb19-2">product <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Laptop"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Phone"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tablet"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monitor"</span>)</span>
<span id="cb19-3">price <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>)</span>
<span id="cb19-4">stock <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-5">on_sale <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
</div>
<p>Your task is to create a data frame with columns named “Product”, “Price”, “Stock”, and “OnSale” using each method.</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 1: Using data.frame()</span></span>
<span id="cb20-2">df1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> product,</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> price,</span>
<span id="cb20-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Stock =</span> stock,</span>
<span id="cb20-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OnSale =</span> on_sale</span>
<span id="cb20-7">)</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 2: Using tibble</span></span>
<span id="cb20-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb20-11">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb20-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> product,</span>
<span id="cb20-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> price,</span>
<span id="cb20-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Stock =</span> stock,</span>
<span id="cb20-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OnSale =</span> on_sale</span>
<span id="cb20-16">)</span>
<span id="cb20-17"></span>
<span id="cb20-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Solution 3: Using purrr</span></span>
<span id="cb20-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb20-20">vectors_list <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb20-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> product,</span>
<span id="cb20-22">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> price,</span>
<span id="cb20-23">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Stock =</span> stock,</span>
<span id="cb20-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OnSale =</span> on_sale</span>
<span id="cb20-25">)</span>
<span id="cb20-26">df3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>(vectors_list)</span>
<span id="cb20-27"></span>
<span id="cb20-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alternative with purrr</span></span>
<span id="cb20-29">df4 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pmap_dfr</span>(</span>
<span id="cb20-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb20-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> product,</span>
<span id="cb20-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> price,</span>
<span id="cb20-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Stock =</span> stock,</span>
<span id="cb20-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OnSale =</span> on_sale</span>
<span id="cb20-35">  ),</span>
<span id="cb20-36">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(Product, Price, Stock, OnSale) {</span>
<span id="cb20-37">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Product =</span> Product, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Price =</span> Price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Stock =</span> Stock, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">OnSale =</span> OnSale)</span>
<span id="cb20-38">  }</span>
<span id="cb20-39">)</span>
<span id="cb20-40"></span>
<span id="cb20-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Product Price Stock OnSale
1  Laptop  1200    15   TRUE
2   Phone   800    25  FALSE
3  Tablet   300    40   TRUE
4 Monitor   250    10  FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  Product Price Stock OnSale
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; 
1 Laptop   1200    15 TRUE  
2 Phone     800    25 FALSE 
3 Tablet    300    40 TRUE  
4 Monitor   250    10 FALSE </code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df3)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  Product Price Stock OnSale
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; 
1 Laptop   1200    15 TRUE  
2 Phone     800    25 FALSE 
3 Tablet    300    40 TRUE  
4 Monitor   250    10 FALSE </code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df4)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 4
  Product Price Stock OnSale
  &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; 
1 Laptop   1200    15 TRUE  
2 Phone     800    25 FALSE 
3 Tablet    300    40 TRUE  
4 Monitor   250    10 FALSE </code></pre>
</div>
</div>
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<blockquote class="blockquote">
<p><strong>Important insights to remember about creating data frames from vectors in R:</strong></p>
</blockquote>
<ul>
<li><strong>Base R</strong> provides <code>data.frame()</code> for straightforward data frame creation from vectors</li>
<li><strong>Tibbles</strong> offer modern improvements over traditional data frames, including better printing and type handling</li>
<li><strong>Column binding</strong> with <code>cbind()</code> works but requires careful handling of data types</li>
<li><strong>Purrr</strong> functions enable powerful functional programming approaches for complex data frame creation</li>
<li><strong>Always check vector lengths</strong> to ensure they match before combining into a data frame</li>
<li><strong>Consider your use case</strong> when choosing a method—simple tasks may only need <code>data.frame()</code>, while complex operations might benefit from <code>purrr</code></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Creating data frames from vectors is a basic operation in R programming. Each method we’ve covered has its own advantages depending on your specific needs:</p>
<ul>
<li>Use <code>data.frame()</code> for simple, straightforward data frame creation in base R</li>
<li>Choose <code>tibble()</code> for a more modern approach with improved usability features</li>
<li>Apply <code>cbind()</code> for quick column binding, but be careful about type coercion</li>
<li>Leverage <code>purrr</code> functions when working with complex, programmatic, or functional approaches</li>
</ul>
<p>By understanding these different methods, you’ll be well-equipped to handle a variety of data manipulation tasks. Remember to consider factors like data types, performance needs, and code readability when selecting the appropriate approach for your project.</p>
<p>What method do you prefer for creating data frames from vectors? Have you discovered other techniques that work particularly well for your use cases? Share your experiences and insights in the comments below!</p>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<section id="when-should-i-use-tibbles-instead-of-traditional-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="when-should-i-use-tibbles-instead-of-traditional-data-frames">1. When should I use tibbles instead of traditional data frames?</h2>
<p>Use tibbles when working within the tidyverse ecosystem or when you want better printing behavior, preservation of column types, and improved subsetting. Tibbles are particularly useful for large or complex datasets.</p>
</section>
<section id="can-i-mix-vectors-of-different-lengths-when-creating-a-data-frame" class="level2">
<h2 class="anchored" data-anchor-id="can-i-mix-vectors-of-different-lengths-when-creating-a-data-frame">2. Can I mix vectors of different lengths when creating a data frame?</h2>
<p>No, all vectors must have the same length when creating a data frame. If vectors have different lengths, R will either throw an error or recycle the shorter vectors, which can lead to unexpected results.</p>
</section>
<section id="how-do-i-prevent-character-vectors-from-being-converted-to-factors-in-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-prevent-character-vectors-from-being-converted-to-factors-in-data-frames">3. How do I prevent character vectors from being converted to factors in data frames?</h2>
<p>In R versions prior to 4.0.0, use <code>stringsAsFactors = FALSE</code> in the <code>data.frame()</code> function. In R 4.0.0 and later, character vectors are no longer automatically converted to factors.</p>
</section>
<section id="what-are-the-advantages-of-using-purrr-for-data-frame-creation" class="level2">
<h2 class="anchored" data-anchor-id="what-are-the-advantages-of-using-purrr-for-data-frame-creation">4. What are the advantages of using purrr for data frame creation?</h2>
<p>The <code>purrr</code> package offers a functional programming approach that can make your code more concise and readable, especially for complex operations. It’s particularly useful for dynamically generating data frames or when applying transformations during creation.</p>
</section>
<section id="is-there-a-performance-difference-between-these-methods" class="level2">
<h2 class="anchored" data-anchor-id="is-there-a-performance-difference-between-these-methods">5. Is there a performance difference between these methods?</h2>
<p>For small datasets, performance differences are negligible. For larger datasets, tibbles tend to be more efficient than traditional data frames. The <code>data.table</code> package (not covered in this article) offers the best performance for very large data operations.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><strong>R Core Team</strong>. (2023). Data frame objects. <em>The R Base Package Documentation</em>. <a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/data.frame.html">https://stat.ethz.ch/R-manual/R-devel/library/base/html/data.frame.html</a></p></li>
<li><p><strong>Müller, K. &amp; Wickham, H.</strong>. (2023). Tibble: Simple data frames. <em>Tibble Package Documentation</em>. <a href="https://tibble.tidyverse.org/reference/tibble.html">https://tibble.tidyverse.org/reference/tibble.html</a></p></li>
<li><p><strong>R Core Team</strong>. (2023). An introduction to R: Data frames. <em>R Foundation for Statistical Computing</em>. <a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Data-frames">https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Data-frames</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-09/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Creating Data Frame from Vectors in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-06-09/</guid>
  <pubDate>Mon, 09 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create a Matrix with Random Numbers in R: A Complete Guide</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-06-02/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Creating matrices with random numbers is a fundamental skill for R programmers working in data analysis, machine learning, and statistical modeling. Whether you’re simulating data, initializing algorithms, or testing code, understanding how to <strong>create a matrix with random numbers in R</strong> efficiently will enhance your programming toolkit .</p>
<p>In this guide, we’ll explore the essential functions, syntax, and best practices for generating random matrices in R. You’ll learn how to use different random number distributions, avoid common pitfalls, and apply these techniques in real-world scenarios.</p>
<hr>
</section>
<section id="understanding-the-basics-the-matrix-function" class="level1">
<h1>Understanding the Basics: The matrix() Function</h1>
<p>The foundation of matrix creation in R is the <code>matrix()</code> function. Here’s its basic syntax :</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(data, nrow, ncol, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dimnames =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<section id="key-parameters" class="level2">
<h2 class="anchored" data-anchor-id="key-parameters">Key Parameters:</h2>
<ul>
<li><strong>data</strong>: Vector of elements to fill the matrix</li>
<li><strong>nrow</strong>: Number of rows</li>
<li><strong>ncol</strong>: Number of columns<br>
</li>
<li><strong>byrow</strong>: Fill by rows (TRUE) or columns (FALSE, default)</li>
<li><strong>dimnames</strong>: Optional row and column names</li>
</ul>
<hr>
</section>
</section>
<section id="random-number-generation-functions-in-r" class="level1">
<h1>Random Number Generation Functions in R</h1>
<p>Before creating random matrices, let’s understand the key functions for generating random numbers :</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Function</th>
<th>Distribution</th>
<th>Example Usage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>runif()</code></td>
<td>Uniform (continuous)</td>
<td><code>runif(10, min=0, max=1)</code></td>
</tr>
<tr class="even">
<td><code>rnorm()</code></td>
<td>Normal (Gaussian)</td>
<td><code>rnorm(10, mean=0, sd=1)</code></td>
</tr>
<tr class="odd">
<td><code>sample()</code></td>
<td>Random sampling</td>
<td><code>sample(1:10, 5, replace=TRUE)</code></td>
</tr>
<tr class="even">
<td><code>rbinom()</code></td>
<td>Binomial</td>
<td><code>rbinom(10, size=1, prob=0.5)</code></td>
</tr>
</tbody>
</table>
</section>
<section id="working-example-1-uniform-random-matrix" class="level1">
<h1>Working Example 1: Uniform Random Matrix</h1>
<p>Let’s start with creating a matrix filled with uniformly distributed random numbers between 0 and 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducibility</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 3x4 matrix with uniform random numbers</span></span>
<span id="cb2-5">uniform_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(uniform_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]      [,3]      [,4]
[1,] 0.9148060 0.8304476 0.7365883 0.7050648
[2,] 0.9370754 0.6417455 0.1346666 0.4577418
[3,] 0.2861395 0.5190959 0.6569923 0.7191123</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p><strong>Key Insight:</strong> The <code>runif()</code> function generates 12 random numbers, which are then arranged into a 3×4 matrix .</p>
</blockquote>
</section>
<section id="working-example-2-normal-distribution-matrix" class="level1">
<h1>Working Example 2: Normal Distribution Matrix</h1>
<p>Creating a matrix with normally distributed random numbers is essential for statistical simulations:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 5x3 matrix with normal distribution (mean=0, sd=1)</span></span>
<span id="cb4-2">normal_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(normal_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]       [,3]
[1,]  1.51152200  2.2866454 -0.2842529
[2,] -0.09465904 -1.3888607 -2.6564554
[3,]  2.01842371 -0.2787888 -2.4404669
[4,] -0.06271410 -0.1333213  1.3201133
[5,]  1.30486965  0.6359504 -0.3066386</code></pre>
</div>
</div>
<section id="understanding-the-parameters" class="level2">
<h2 class="anchored" data-anchor-id="understanding-the-parameters">Understanding the Parameters:</h2>
<ul>
<li><strong>n</strong>: Number of random values (15 in this case)</li>
<li><strong>mean</strong>: Center of the distribution (default: 0)</li>
<li><strong>sd</strong>: Standard deviation (default: 1)</li>
</ul>
</section>
</section>
<section id="working-example-3-random-integer-matrix" class="level1">
<h1>Working Example 3: Random Integer Matrix</h1>
<p>For discrete data simulations, you might need matrices with random integers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 4x5 matrix with random integers between 1 and 100</span></span>
<span id="cb6-2">integer_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(integer_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]   22   68   69   99   26
[2,]   58   86    4   88    6
[3,]    8   18   98   87    6
[4,]   36   92   50   49    2</code></pre>
</div>
</div>
</section>
<section id="working-example-4-custom-probability-matrix" class="level1">
<h1>Working Example 4: Custom Probability Matrix</h1>
<p>Create a binary matrix where each entry has a specific probability of being 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 5x5 matrix where each entry is 1 with probability 0.2</span></span>
<span id="cb8-2">binary_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(binary_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3] [,4] [,5]
[1,]    0    0    0    0    0
[2,]    1    0    0    0    0
[3,]    0    0    0    0    0
[4,]    0    0    0    0    0
[5,]    0    0    0    0    0</code></pre>
</div>
</div>
</section>
<section id="best-practices-for-random-matrix-creation" class="level1">
<h1>Best Practices for Random Matrix Creation</h1>
<section id="always-set-a-random-seed" class="level2">
<h2 class="anchored" data-anchor-id="always-set-a-random-seed">1. <strong>Always Set a Random Seed</strong></h2>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensures reproducible results</span></span></code></pre></div>
</section>
<section id="verify-matrix-dimensions" class="level2">
<h2 class="anchored" data-anchor-id="verify-matrix-dimensions">2. <strong>Verify Matrix Dimensions</strong></h2>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(your_matrix)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns c(nrow, ncol)</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(your_matrix)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of rows</span></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(your_matrix)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of columns</span></span></code></pre></div>
</section>
<section id="check-data-length" class="level2">
<h2 class="anchored" data-anchor-id="check-data-length">3. <strong>Check Data Length</strong></h2>
<p>Ensure your data length matches the matrix size to avoid recycling:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good: 12 elements for 3x4 matrix</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>             [,1]      [,2]      [,3]      [,4]
[1,] 0.0002388966 0.9256447 0.5150633 0.6262453
[2,] 0.2085699569 0.7340943 0.7439746 0.2171577
[3,] 0.9330341273 0.3330720 0.6191592 0.2165673</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid: 10 elements for 3x4 matrix (will recycle)</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in matrix(runif(10), nrow = 3, ncol = 4): data length [10] is not a
sub-multiple or multiple of the number of rows [3]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]        [,3]      [,4]
[1,] 0.3889450 0.7398553 0.002272966 0.7515226
[2,] 0.9424557 0.7332459 0.608937453 0.3889450
[3,] 0.9626080 0.5357613 0.836801559 0.9424557</code></pre>
</div>
</div>
</section>
</section>
<section id="common-pitfalls-and-solutions" class="level1">
<h1>Common Pitfalls and Solutions</h1>
<table class="caption-top table">
<colgroup>
<col style="width: 32%">
<col style="width: 32%">
<col style="width: 35%">
</colgroup>
<thead>
<tr class="header">
<th>Problem</th>
<th>Example</th>
<th>Solution</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>Dimension mismatch</strong></td>
<td><code>matrix(1:5, nrow=2, ncol=3)</code></td>
<td>Ensure data length = nrow × ncol</td>
</tr>
<tr class="even">
<td><strong>Mixed data types</strong></td>
<td><code>matrix(c(1, "a", 3), nrow=1)</code></td>
<td>Use consistent data types</td>
</tr>
<tr class="odd">
<td><strong>Missing dimensions</strong></td>
<td><code>matrix(1:6)</code></td>
<td>Always specify both nrow and ncol</td>
</tr>
<tr class="even">
<td><strong>Memory issues</strong></td>
<td>Large matrices</td>
<td>Check with <code>object.size()</code> first</td>
</tr>
</tbody>
</table>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p><strong>Challenge:</strong> Create a 6×6 matrix where:</p>
<ul>
<li>The upper triangle contains random numbers from a normal distribution (mean=10, sd=2)</li>
<li>The lower triangle contains random integers between 1 and 50</li>
<li>The diagonal contains zeros</li>
</ul>
<p>Try to solve this before looking at the solution!</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducibility</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty 6x6 matrix</span></span>
<span id="cb17-5">result_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill upper triangle with normal distribution</span></span>
<span id="cb17-8">upper_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 15 values for upper triangle</span></span>
<span id="cb17-9">upper_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) {</span>
<span id="cb17-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb17-13">    result_matrix[i, j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> upper_values[upper_index]</span>
<span id="cb17-14">    upper_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> upper_index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb17-15">  }</span>
<span id="cb17-16">}</span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill lower triangle with random integers</span></span>
<span id="cb17-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) {</span>
<span id="cb17-20">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(j <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>)) {</span>
<span id="cb17-21">    result_matrix[i, j] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-22">  }</span>
<span id="cb17-23">}</span>
<span id="cb17-24"></span>
<span id="cb17-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(result_matrix, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2]  [,3]  [,4]  [,5]  [,6]
[1,]    0    9 10.26  9.84 11.77 10.23
[2,]    2    0 10.64  8.84 11.43  8.35
[3,]    4    4  0.00  9.28 10.18 10.19
[4,]   48   32 21.00  0.00  9.60 11.48
[5,]   27   39 16.00 11.00  0.00 10.25
[6,]    2    6 29.00 45.00 30.00  0.00</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<p>• <strong>Essential Functions</strong>: <code>matrix()</code> for structure, <code>runif()</code>, <code>rnorm()</code>, <code>sample()</code> for random data • <strong>Always set seed</strong>: Use <code>set.seed()</code> for reproducible results • <strong>Check dimensions</strong>: Verify with <code>dim()</code>, <code>nrow()</code>, and <code>ncol()</code> • <strong>Data length matters</strong>: Ensure data length equals nrow × ncol • <strong>One type per matrix</strong>: All elements must be the same data type • <strong>Memory awareness</strong>: Large matrices can exceed system memory</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Creating matrices with random numbers in R is a powerful technique that opens doors to simulation, testing, and advanced statistical modeling. By mastering the <code>matrix()</code> function combined with random number generators like <code>runif()</code>, <code>rnorm()</code>, and <code>sample()</code>, you can efficiently generate the data structures needed for your R programming projects.</p>
<p>Remember to always set a seed for reproducibility, verify your matrix dimensions, and choose the appropriate random distribution for your specific use case. With these tools and best practices, you’re ready to <strong>create a matrix with random numbers in R</strong> for any application!</p>
<p><strong>Ready to level up your R skills?</strong> Try creating different types of random matrices for your next data science project and experiment with various distributions to see how they affect your analyses!</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<p><strong>Q1: How do I create a matrix with random numbers from a specific range?</strong> A: Use <code>runif()</code> with min and max parameters: <code>matrix(runif(12, min=5, max=10), nrow=3, ncol=4)</code></p>
<p><strong>Q2: Can I create a matrix with both positive and negative random numbers?</strong> A: Yes! Use <code>rnorm()</code> for normal distribution or <code>runif()</code> with negative min: <code>matrix(runif(9, min=-5, max=5), nrow=3, ncol=3)</code></p>
<p><strong>Q3: How do I create a sparse matrix with mostly zeros?</strong> A: Use <code>rbinom()</code> with low probability: <code>matrix(rbinom(100, size=1, prob=0.1), nrow=10, ncol=10)</code></p>
<p><strong>Q4: What’s the difference between sample() and runif() for matrices?</strong> A: <code>sample()</code> gives discrete values (integers), while <code>runif()</code> gives continuous decimal values</p>
<p><strong>Q5: How can I name the rows and columns of my random matrix?</strong> A: Use the dimnames parameter: <code>matrix(runif(6), nrow=2, ncol=3, dimnames=list(c("row1", "row2"), c("col1", "col2", "col3")))</code></p>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience!</h1>
<p>Did this guide help you master creating random matrices in R? We’d love to hear about your projects and how you’re using these techniques! Share your creative applications in the comments below or tag us on social media with #RMatrixMastery. Your insights might inspire other R programmers in our community!</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://bookdown.org/rdpeng/rprogdatascience/matrices.html">Introduction to Programming with R: Matrices</a></p></li>
<li><p><a href="https://www.datacamp.com/tutorial/random-number-generator-r">Random Number Generation in R: A How-To Guide</a></p></li>
<li><p><a href="https://www.datanovia.com/en/lessons/create-a-matrix-with-random-values-in-r/">Create a Matrix with Random Values in R</a></p></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-06-02/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Random Matrix in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-06-02/</guid>
  <pubDate>Mon, 02 Jun 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Generate Random Numbers in R With Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-05-26/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>Random number generation is a basic skill for statistics, simulations, and data analysis in R. This guide should help you get famililar with some of those basics.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Random number generation is a basic component of many statistical analyses, simulations, and data science workflows in R. Whether you’re running Monte Carlo simulations, creating sample datasets, or implementing statistical algorithms, knowing how to generate random numbers efficiently is a valuable skill. This article will walk you through the most common methods for generating random numbers in R, with practical examples and visualizations to help you understand the concepts better.</p>
</section>
<section id="understanding-random-number-generation-in-r" class="level1">
<h1>Understanding Random Number Generation in R</h1>
<p>R provides a powerful suite of functions for generating random numbers from various probability distributions. These functions are prefixed with <code>r</code> (for random), followed by the abbreviated name of the distribution. For example, <code>rnorm()</code> generates random numbers from a normal distribution, while <code>runif()</code> generates random numbers from a uniform distribution.</p>
</section>
<section id="basic-random-number-generation" class="level1">
<h1>Basic Random Number Generation</h1>
<section id="uniform-distribution-with-runif" class="level2">
<h2 class="anchored" data-anchor-id="uniform-distribution-with-runif">Uniform Distribution with runif()</h2>
<p>The <code>runif()</code> function generates random numbers from a uniform distribution where each number in the specified range has an equal probability of being chosen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 5 random numbers between 0 and 1</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.9631528 0.6473717 0.8502536 0.5132711 0.3478398</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 10 random numbers between 10 and 20</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 18.06993 14.80453 15.20832 16.79679 16.00856 10.91564 18.10421 19.74378
 [9] 12.87939 15.08066</code></pre>
</div>
</div>
</section>
<section id="normal-distribution-with-rnorm" class="level2">
<h2 class="anchored" data-anchor-id="normal-distribution-with-rnorm">Normal Distribution with rnorm()</h2>
<p>The <code>rnorm()</code> function generates random numbers from a normal (Gaussian) distribution with a specified mean and standard deviation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 5 random numbers from a normal distribution with mean 0 and sd 1</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.3169287 0.4466374 0.5926026 1.7024986 1.5120444</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 10 random numbers with mean 100 and sd 20</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 109.83534  93.56975 113.24464 128.31562 103.70459  87.70473  89.19045
 [8]  92.77541  80.40960 128.66981</code></pre>
</div>
</div>
</section>
<section id="random-integers-with-sample" class="level2">
<h2 class="anchored" data-anchor-id="random-integers-with-sample">Random Integers with sample()</h2>
<p>The <code>sample()</code> function is perfect for generating random integers or sampling from a specific set of values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 5 random integers between 1 and 100</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 81 70 98 46 89</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample with replacement (allowing repeated values)</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 8 9 5 4 7 4 8 3 7 5 4 9 1 4 8</code></pre>
</div>
</div>
</section>
</section>
<section id="setting-seeds-for-reproducibility" class="level1">
<h1>Setting Seeds for Reproducibility</h1>
<p>When working with random numbers, it’s often essential to make your results reproducible. The <code>set.seed()</code> function allows you to get the same sequence of “random” numbers each time you run your code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a seed for reproducibility</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random numbers</span></span>
<span id="cb13-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run again with the same seed for the same results</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673</code></pre>
</div>
</div>
</section>
<section id="visualizing-random-distributions" class="level1">
<h1>Visualizing Random Distributions</h1>
<p>Visualizing random number distributions helps you understand their properties better. Here’s a comparison of different random distributions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Uniform Distribution</span></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb17-4">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Uniform Distribution"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>)</span>
<span id="cb17-5"></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normal Distribution</span></span>
<span id="cb17-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb17-8">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normal Distribution"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgreen"</span>)</span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random Sampling</span></span>
<span id="cb17-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb17-12">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Sampling"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightcoral"</span>)</span>
<span id="cb17-13"></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability Density Functions Comparison</span></span>
<span id="cb17-15">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb17-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb17-17">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Probability Density Functions Comparison"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>,</span>
<span id="cb17-18">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Density"</span>)</span>
<span id="cb17-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb17-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lines</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dnorm</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lwd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-26/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The plots above show:</p>
<ol type="1">
<li><strong>Uniform Distribution</strong>: A flat distribution where all values in the range have equal probability</li>
<li><strong>Normal Distribution</strong>: The classic bell-shaped curve with most values clustered around the mean</li>
<li><strong>Random Sampling</strong>: The result of random sampling with replacement</li>
<li><strong>Probability Density Functions Comparison</strong>: A comparison of different probability distributions</li>
</ol>
</section>
<section id="advanced-random-number-generation" class="level1">
<h1>Advanced Random Number Generation</h1>
<p>R provides functions for generating random numbers from many other probability distributions. Here are some of the most commonly used ones:</p>
<section id="binomial-distribution-rbinom" class="level2">
<h2 class="anchored" data-anchor-id="binomial-distribution-rbinom">Binomial Distribution (rbinom)</h2>
<p>Useful for modeling success/failure scenarios with a fixed number of trials.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 10 random numbers from a binomial distribution </span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with 20 trials and probability 0.5</span></span>
<span id="cb19-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbinom</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 18 14 14 11 11 14  8 11  7 10</code></pre>
</div>
</div>
</section>
<section id="poisson-distribution-rpois" class="level2">
<h2 class="anchored" data-anchor-id="poisson-distribution-rpois">Poisson Distribution (rpois)</h2>
<p>Perfect for modeling the number of events occurring in a fixed time period.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 10 random numbers from a Poisson distribution with lambda = 5</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 6 1 3 2 7 4 6 6 3 4</code></pre>
</div>
</div>
</section>
<section id="other-useful-distributions" class="level2">
<h2 class="anchored" data-anchor-id="other-useful-distributions">Other Useful Distributions</h2>
<p>R supports many other probability distributions, including:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gamma distribution</span></span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.0359106 0.4800262 1.5689731 0.9516189 1.6413728</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Beta distribution</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.16886543 0.36738431 0.26962401 0.27630634 0.04024299</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Chi-squared distribution</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rchisq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.8795775 2.8472263 1.0508443 1.6913313 1.1525831</code></pre>
</div>
</div>
</section>
</section>
<section id="visualizing-advanced-distributions" class="level1">
<h1>Visualizing Advanced Distributions</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gamma Distribution</span></span>
<span id="cb29-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgamma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb29-5">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gamma Distribution"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>)</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Beta Distribution</span></span>
<span id="cb29-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape1 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape2 =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb29-9">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Beta Distribution"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgreen"</span>)</span>
<span id="cb29-10"></span>
<span id="cb29-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Poisson Distribution</span></span>
<span id="cb29-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lambda =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb29-13">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Poisson Distribution"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightcoral"</span>)</span>
<span id="cb29-14"></span>
<span id="cb29-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Chi-square Distribution</span></span>
<span id="cb29-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rchisq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, </span>
<span id="cb29-17">     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chi-square Distribution"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Value"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightyellow"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-26/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>The plots above show the theoretical distributions (red lines) compared to randomly sampled data (histograms) for:</p>
<ol type="1">
<li><strong>Gamma Distribution</strong>: Useful for modeling waiting times</li>
<li><strong>Beta Distribution</strong>: Often used for modeling probabilities or proportions</li>
<li><strong>Poisson Distribution</strong>: Models count data or rare events</li>
<li><strong>Chi-square Distribution</strong>: Used in hypothesis testing</li>
</ol>
</section>
<section id="common-pitfalls-and-best-practices" class="level1">
<h1>Common Pitfalls and Best Practices</h1>
<section id="pitfall-1-not-setting-a-seed" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-1-not-setting-a-seed">Pitfall 1: Not Setting a Seed</h2>
<p>If you don’t set a seed, you’ll get different random numbers each time you run your code, which can make debugging difficult and results irreproducible.</p>
</section>
<section id="best-practice-always-set-a-seed-for-reproducibility" class="level2">
<h2 class="anchored" data-anchor-id="best-practice-always-set-a-seed-for-reproducibility">Best Practice: Always Set a Seed for Reproducibility</h2>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose any number you like</span></span></code></pre></div>
</section>
<section id="pitfall-2-using-the-same-seed-in-parallel-processing" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-2-using-the-same-seed-in-parallel-processing">Pitfall 2: Using the Same Seed in Parallel Processing</h2>
<p>When using parallel processing, setting the same seed in each parallel worker can lead to correlated random numbers.</p>
</section>
<section id="best-practice-use-parallel-safe-rng-methods" class="level2">
<h2 class="anchored" data-anchor-id="best-practice-use-parallel-safe-rng-methods">Best Practice: Use Parallel-Safe RNG Methods</h2>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(parallel)</span>
<span id="cb32-2">cl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">makeCluster</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clusterSetRNGStream</span>(cl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iseed =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</section>
<section id="pitfall-3-ignoring-the-properties-of-the-distribution" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-3-ignoring-the-properties-of-the-distribution">Pitfall 3: Ignoring the Properties of the Distribution</h2>
<p>Using the wrong distribution for your data can lead to incorrect results.</p>
</section>
<section id="best-practice-select-the-appropriate-distribution" class="level2">
<h2 class="anchored" data-anchor-id="best-practice-select-the-appropriate-distribution">Best Practice: Select the Appropriate Distribution</h2>
<p>Choose the distribution that best models your data:</p>
<ul>
<li>Use <code>rnorm()</code> for continuous, symmetric data</li>
<li>Use <code>rpois()</code> for count data</li>
<li>Use <code>rbinom()</code> for binary outcomes</li>
</ul>
</section>
</section>
<section id="your-turn-interactive-section" class="level1">
<h1>Your Turn! Interactive Section</h1>
<p>Now, let’s put your knowledge into practice with a simple exercise.</p>
<p><strong>Exercise</strong>: Generate 1000 random numbers from a normal distribution with mean 50 and standard deviation 10. Then calculate their mean and standard deviation to verify they are close to the expected values.</p>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set seed for reproducibility</span></span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate 1000 random numbers from normal distribution</span></span>
<span id="cb33-5">random_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate mean and standard deviation</span></span>
<span id="cb33-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(random_numbers)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should be close to 50</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 50.16128</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(random_numbers)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should be close to 10</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9.91695</code></pre>
</div>
</div>
The mean should be approximately 50, and the standard deviation should be approximately 10, with small variations due to randomness.
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>Function Pattern</strong>: Random number generators in R follow the pattern r + distribution name (e.g., <code>rnorm</code>, <code>runif</code>)</li>
<li><strong>Reproducibility</strong>: Use <code>set.seed()</code> to make your random numbers reproducible</li>
<li><strong>Common Distributions</strong>:
<ul>
<li><code>runif()</code> for uniform distribution</li>
<li><code>rnorm()</code> for normal distribution</li>
<li><code>sample()</code> for random sampling</li>
<li><code>rbinom()</code> for binomial distribution</li>
<li><code>rpois()</code> for Poisson distribution</li>
</ul></li>
<li><strong>Visualization</strong>: Always visualize your random numbers to verify their distribution</li>
<li><strong>Parameters</strong>: Each distribution function has specific parameters that control its shape</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Random number generation is a powerful tool in R programming that enables everything from simple sampling to complex statistical simulations. By understanding the different distribution functions and their parameters, you can generate the precise type of random data you need for your analyses.</p>
<p>Now that you have a solid foundation in generating random numbers in R, try incorporating these techniques into your next data analysis project or statistical simulation. Remember to set a seed for reproducibility, choose the appropriate distribution for your data, and visualize your results to ensure they meet your expectations.</p>
<p><strong>Ready to level up your R programming skills?</strong> Share this article with your colleagues and let us know in the comments which random number generation techniques you find most useful in your work.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
</section>
<section id="why-do-i-get-different-random-numbers-each-time-i-run-my-code" class="level1">
<h1>1. Why do I get different random numbers each time I run my code?</h1>
<p>If you don’t set a seed using <code>set.seed()</code>, R will generate different random numbers each time. To get reproducible results, always set a seed at the beginning of your script.</p>
<section id="which-function-should-i-use-to-generate-random-integers" class="level2">
<h2 class="anchored" data-anchor-id="which-function-should-i-use-to-generate-random-integers">2. Which function should I use to generate random integers?</h2>
<p>Use the <code>sample()</code> function to generate random integers. For example, <code>sample(1:100, 10)</code> generates 10 random integers between 1 and 100.</p>
</section>
<section id="how-do-i-generate-random-numbers-from-a-custom-probability-distribution" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-generate-random-numbers-from-a-custom-probability-distribution">3. How do I generate random numbers from a custom probability distribution?</h2>
<p>You can use the <code>sample()</code> function with custom probabilities. For example:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span></code></pre></div>
<p>This will generate random numbers from 1 to 6, with 6 being five times more likely to appear than the other numbers.</p>
</section>
<section id="whats-the-difference-between-sampling-with-and-without-replacement" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-sampling-with-and-without-replacement">4. What’s the difference between sampling with and without replacement?</h2>
<p>When sampling with replacement (<code>replace = TRUE</code>), the same value can be selected multiple times. Without replacement (<code>replace = FALSE</code>), each value can only be selected once.</p>
</section>
<section id="how-can-i-check-if-my-random-numbers-follow-the-expected-distribution" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-check-if-my-random-numbers-follow-the-expected-distribution">5. How can I check if my random numbers follow the expected distribution?</h2>
<p>Use visualization techniques like histograms, density plots, or Q-Q plots to verify your random numbers follow the expected distribution:</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Histogram for normal distribution</span></span>
<span id="cb38-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qqnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Q-Q plot for normal distribution</span></span></code></pre></div>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><strong>Official R Documentation</strong>
<ul>
<li>R Core Team (2023). “Introduction to R: A Programming Environment for Data Analysis and Graphics”<br>
<a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.html">https://cran.r-project.org/doc/manuals/r-release/R-intro.html</a></li>
</ul></li>
<li><strong>R Random Number Generation Tutorial</strong>
<ul>
<li>GeeksforGeeks (2023). “How to Generate Random Numbers in R”<br>
<a href="https://www.geeksforgeeks.org/how-to-generate-random-numbers-in-r/">https://www.geeksforgeeks.org/how-to-generate-random-numbers-in-r/</a></li>
</ul></li>
<li><strong>Statistical Applications of Random Numbers</strong>
<ul>
<li>Statology (2023). “Random Number Generation in R”<br>
<a href="https://www.statology.org/r-random-number/">https://www.statology.org/r-random-number/</a></li>
</ul></li>
<li><strong>Academic Resources on Random Number Generation</strong>
<ul>
<li>MIT OpenCourseWare (2022). “R Tutorial B: Random Numbers”<br>
<a href="https://ocw.mit.edu/courses/18-05-introduction-to-probability-and-statistics-spring-2022/pages/r-tutorial-b-random-numbers/">https://ocw.mit.edu/courses/18-05-introduction-to-probability-and-statistics-spring-2022/pages/r-tutorial-b-random-numbers/</a></li>
</ul></li>
<li><strong>Random Number Generators in R</strong>
<ul>
<li>Wikibooks (2023). “R Programming/Random Number Generation”<br>
<a href="https://en.wikibooks.org/wiki/R_Programming/Random_Number_Generation">https://en.wikibooks.org/wiki/R_Programming/Random_Number_Generation</a></li>
</ul></li>
<li><strong>Practical Applications of Random Numbers</strong>
<ul>
<li>Ducat India (2023). “Random Number Generator in R”<br>
<a href="https://tutorials.ducatindia.com/r-programming/random-number-generator-in-r">https://tutorials.ducatindia.com/r-programming/random-number-generator-in-r</a></li>
</ul></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-26/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Random Numbers in R</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-05-26/</guid>
  <pubDate>Mon, 26 May 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Select Random Samples in R with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-05-19/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Random sampling is a fundamental technique in statistics, simulation, and data analysis. Whether you are building a model, testing a hypothesis, or simulating data, learning how to randomly select samples from your dataset is a must. In R, the built-in <code>sample()</code> function is an easy and powerful way to obtain random samples from vectors, data.frames, and even matrices.</p>
<p>In this article, we will explain the <code>sample()</code> function in detail, provide working examples, and show you how to perform both sampling with and without replacement. By the end, you will be able to confidently use random sampling to support your data analysis tasks in R.</p>
<p>Random sampling is useful for many tasks. With random samples, you can:</p>
<ul>
<li><strong>Test hypotheses:</strong> Evaluate if a sample represents the population.</li>
<li><strong>Split data:</strong> Create training and test sets for machine learning models.</li>
<li><strong>Bootstrap samples:</strong> Resample your data to estimate uncertainty.</li>
<li><strong>Shuffle data:</strong> Randomize the order of data for simulation studies.</li>
</ul>
<p>In R, the <code>sample()</code> function is a versatile tool that lets you randomly draw items from a collection—whether that collection is a simple vector, a data.frame, or even a matrix. In the following sections, we will explain the syntax of <code>sample()</code>, show examples with and without replacement, and provide sample code for various data structures.</p>
</section>
<section id="understanding-the-sample-function" class="level1">
<h1>Understanding the <code>sample()</code> Function</h1>
<p>The basic syntax of the <code>sample()</code> function in R is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(x, size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<p>Let’s break down the arguments:</p>
<ul>
<li><strong>x:</strong> The input vector (or sometimes more complex data structures) from which to sample.</li>
<li><strong>size:</strong> The number of items you want to pick.</li>
<li><strong>replace:</strong> A logical value indicating whether sampling is with replacement (set to <code>TRUE</code>) or without (the default value <code>FALSE</code>).</li>
<li><strong>prob:</strong> An optional vector of probability weights for performing weighted sampling.</li>
</ul>
<p>This function works by randomly shuffling the elements of <code>x</code> when <code>size</code> is not specified. When you set the <code>size</code> argument, <code>sample()</code> returns a random subset of the elements from <code>x</code>.</p>
<p>For more examples and detailed explanations on <code>sample()</code>, many great resources are available (https://www.statology.org/random-sample-in-r/) (https://www.r-bloggers.com/2024/03/mastering-random-sampling-in-r-with-the-sample-function/).</p>
</section>
<section id="sampling-from-vectors" class="level1">
<h1>Sampling from Vectors</h1>
<p>Vectors are the simplest data structure in R. Let’s start with a few examples that show how to use the <code>sample()</code> function to draw random samples from a vector.</p>
<section id="simple-random-sampling-without-replacement" class="level2">
<h2 class="anchored" data-anchor-id="simple-random-sampling-without-replacement">Simple Random Sampling (Without Replacement)</h2>
<p>In simple random sampling, each element is only selected once. Here’s how you can sample 5 elements from a vector of numbers without replacement:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector with numbers 1 through 10</span></span>
<span id="cb2-2">numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a random sample of 5 elements without replacement</span></span>
<span id="cb2-5">sample_without_replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(numbers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sampled values</span></span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sample_without_replacement)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  7  9 10  4  5</code></pre>
</div>
</div>
<p>Every time you run this script, you will see a different order for the five unique elements chosen from 1 to 10. This is because sampling without replacement means no element is repeated (https://www.r-bloggers.com/2024/03/mastering-random-sampling-in-r-with-the-sample-function/).</p>
</section>
<section id="random-sampling-with-replacement" class="level2">
<h2 class="anchored" data-anchor-id="random-sampling-with-replacement">Random Sampling with Replacement</h2>
<p>When sampling with replacement, the same element can be selected more than once. This is useful if you need to simulate scenarios where an observation might appear multiple times. To sample with replacement, simply set <code>replace = TRUE</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a sample of 5 elements with replacement from the same vector</span></span>
<span id="cb4-2">sample_with_replacement <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(numbers, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sampled values</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sample_with_replacement)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2  3  2 10 10</code></pre>
</div>
</div>
<p>Because replacement is allowed, you might see the same number appear more than once (for instance, you might get <code>3 3 7 2 9</code>). This method is also commonly used in bootstrapping methods .</p>
</section>
</section>
<section id="sampling-from-data-frames" class="level1">
<h1>Sampling from Data Frames</h1>
<p>Often you need to randomly select rows from a data.frame instead of just sampling from a vector of numbers. This is very useful when splitting data into training and testing sets, or when you need a subset for exploratory analysis.</p>
<p>Imagine you have the following data.frame:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a simple data.frame with names and ages</span></span>
<span id="cb6-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alice"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bob"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Charlie"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Diana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eve"</span>),</span>
<span id="cb6-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span>
<span id="cb6-5">)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Randomly select 3 rows from the data.frame without replacement</span></span>
<span id="cb6-8">df_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), ]</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sampled data.frame</span></span>
<span id="cb6-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(df_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   Name Age
4 Diana  28
5   Eve  22
2   Bob  30</code></pre>
</div>
</div>
<section id="explanation" class="level2">
<h2 class="anchored" data-anchor-id="explanation">Explanation:</h2>
<ol type="1">
<li><strong>nrow(df):</strong> This function inside <code>sample()</code> returns the total number of rows in the data.frame.</li>
<li><strong>sample(nrow(df), 3):</strong> This random function selects 3 unique row numbers from the total available.</li>
<li><strong>df[ … , ]:</strong> We then subset the original data.frame using the randomly chosen row numbers.</li>
</ol>
<p>This will return a new data.frame with 3 randomly selected rows, which might be useful for quick exploratory analysis or as input for further processing. Sampling rows using this technique is common when the dataset is large and you need to quickly check a random subset .</p>
</section>
</section>
<section id="sampling-from-a-matrix" class="level1">
<h1>Sampling from a Matrix</h1>
<p>Matrices in R are two-dimensional arrays, and you can also use the <code>sample()</code> function to work with them. The following examples demonstrate two common approaches to sampling from a matrix: sampling random elements from the entire matrix and sampling random rows.</p>
<section id="sampling-random-elements-from-a-matrix" class="level2">
<h2 class="anchored" data-anchor-id="sampling-random-elements-from-a-matrix">Sampling Random Elements from a Matrix</h2>
<p>You might want to pick random elements from a matrix regardless of rows and columns. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 3x3 matrix with numbers from 1 to 9</span></span>
<span id="cb8-2">matrix_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(matrix_data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample 4 random elements from the matrix (note: the matrix is treated as a vector)</span></span>
<span id="cb10-2">random_elements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(matrix_data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sampled elements</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(random_elements)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8 2 5 6</code></pre>
</div>
</div>
<p><strong>Explanation:</strong> - R internally treats the matrix as a vector when passed to <code>sample()</code>. Hence, the function picks 4 random values from all values in the matrix.</p>
</section>
<section id="sampling-rows-of-a-matrix" class="level2">
<h2 class="anchored" data-anchor-id="sampling-rows-of-a-matrix">Sampling Rows of a Matrix</h2>
<p>If you need to randomly select rows (maintaining the matrix structure), you can do this by sampling the row indices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample 2 random rows from the matrix</span></span>
<span id="cb12-2">random_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matrix_data[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(matrix_data), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), ]</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the sampled rows, which still keep the matrix-like structure</span></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(random_rows)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    4    5    6
[2,]    1    2    3</code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li><strong>nrow(matrix_data):</strong> Returns the number of rows in the matrix.</li>
<li><strong>sample(nrow(matrix_data), 2):</strong> Randomly selects 2 row indices.</li>
<li><strong>matrix_data[ … , ]:</strong> Subsets the matrix by these rows and returns a matrix.</li>
</ul>
<p>This technique is particularly useful when dealing with multivariate data stored as a matrix and you wish to preserve entire rows for subsequent analysis .</p>
</section>
</section>
<section id="weighted-random-sampling" class="level1">
<h1>Weighted Random Sampling</h1>
<p>Sometimes, you need elements to have a higher chance of being selected. This is where the <code>prob</code> argument comes into play. For example, let’s say you have a vector representing four options and they should not all have the same chance of appearing in the sample:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a vector representing four different items</span></span>
<span id="cb14-2">items <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cherry"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the weights so that "Date" has the highest probability of selection</span></span>
<span id="cb14-5">weights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample 3 elements from items using the weights (without replacement)</span></span>
<span id="cb14-8">weighted_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(items, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> weights)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the weighted sample</span></span>
<span id="cb14-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(weighted_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"   "Cherry" "Apple" </code></pre>
</div>
</div>
<p><strong>Explanation:</strong></p>
<ul>
<li>The <code>prob</code> parameter assigns selection probabilities. In this example, “Date” (with the highest weight of 0.4) is more likely to be picked.</li>
<li>Using weighted sampling can be very useful, for example, when you simulate real-world scenarios where some events occur more frequently than others.</li>
</ul>
</section>
<section id="using-set.seed-for-reproducible-results" class="level1">
<h1>Using <code>set.seed()</code> for Reproducible Results</h1>
<p>In random sampling, you might want to generate the same random output each time you run your code—especially when sharing code with colleagues or including examples in your reports. R’s <code>set.seed()</code> function lets you do exactly that.</p>
<p>For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed to ensure reproducibility</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample 5 numbers without replacement from 1 to 10</span></span>
<span id="cb16-5">reproducible_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(reproducible_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  5 10  8  2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Re-run with the same seed to see the same sample</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb18-3">reproducible_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb18-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(reproducible_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  1  5 10  8  2</code></pre>
</div>
</div>
<p>Using <code>set.seed()</code> guarantees that the random sequence is the same in every run, which is important for debugging and sharing reproducible research .</p>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn</h1>
<p>Now that we have covered the basics and more advanced examples of using the <code>sample()</code> function, it’s time for you to practice! Here are some exercises to try on your own:</p>
<details>
<summary>
Click to see solution.
</summary>
<p><strong>Exercise 1:</strong><br>
Generate a random sample of 10 elements from the letters of the English alphabet without replacement.</p>
<p><em>Hint:</em> Use <code>letters</code> (a built-in vector in R) and the <code>sample()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Answer:</span></span>
<span id="cb20-2">sample_letters <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(letters, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb20-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sample_letters)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "d" "r" "q" "o" "g" "z" "e" "n" "y" "w"</code></pre>
</div>
</div>
<p><strong>Exercise 2:</strong><br>
Sample 5 elements with replacement from the vector <code>c(10, 20, 30, 40, 50)</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Answer:</span></span>
<span id="cb22-2">sample_numbers <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb22-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(sample_numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 30 10 10 30 40</code></pre>
</div>
</div>
<p><strong>Exercise 3:</strong><br>
Create a vector of weights and perform weighted random sampling to select 3 elements from the vector <code>c("apple", "banana", "orange", "grape")</code>.<br>
<em>Make sure that “orange” has the highest probability of being selected.</em></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Answer:</span></span>
<span id="cb24-2">fruit_items <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apple"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"banana"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grape"</span>)</span>
<span id="cb24-3">fruit_weights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span>
<span id="cb24-4">weighted_fruit_sample <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(fruit_items, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> fruit_weights)</span>
<span id="cb24-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(weighted_fruit_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "orange" "apple"  "banana"</code></pre>
</div>
</div>
Experiment with these exercises by changing the parameters. This will help solidify your understanding of random sampling in R.
</details>
</section>
<section id="key-takeaways" class="level1">
<h1>Key Takeaways</h1>
<ul>
<li><p><strong><code>sample()</code> Function:</strong><br>
The <code>sample()</code> function in R is robust for drawing random elements from vectors, data.frames, and even matrices.</p></li>
<li><p><strong>With vs.&nbsp;Without Replacement:</strong><br>
– Use <code>replace = FALSE</code> for unique sampling.<br>
– Use <code>replace = TRUE</code> when you allow repeated values in the sample.</p></li>
<li><p><strong>Working with Complex Data Structures:</strong><br>
You can sample rows from data.frames or from entire matrices by using functions such as <code>nrow()</code> to index your data.</p></li>
<li><p><strong>Weighted Sampling:</strong><br>
The <code>prob</code> argument allows you to specify weights for elements, making some more likely to be sampled than others.</p></li>
<li><p><strong>Reproducibility:</strong><br>
Use <code>set.seed()</code> to ensure that your random samples are the same across multiple runs, which is critical for reproducible research.</p></li>
</ul>
<p>These points will help guide your use of random sampling.</p>
</section>
<section id="frequently-asked-questions-faqs" class="level1">
<h1>Frequently Asked Questions (FAQs)</h1>
<p><strong>Q1: What does sampling with replacement mean?</strong><br>
A: Sampling with replacement means that when you choose an element, it is “put back” into the pool of values. This allows the same element to be selected more than once. For example, using <code>sample(numbers, 5, replace = TRUE)</code> might select one number twice while missing another .</p>
<p><strong>Q2: How is weighted random sampling useful?</strong><br>
A: Weighted random sampling allows you to assign different probabilities to each element in your vector. This is useful in simulations where certain outcomes are more likely than others. By using the <code>prob</code> argument, you can simulate more realistic scenarios where not all elements have an equal chance of being selected.</p>
<p><strong>Q3: Can I use the <code>sample()</code> function on data.frames?</strong><br>
A: Yes, you can. By sampling the row indices using <code>sample(nrow(your_dataframe), size)</code>, you can randomly select rows from a data.frame. This method is especially useful for creating training and testing sets.</p>
<p><strong>Q4: How do I ensure that my random sampling is reproducible?</strong><br>
A: Use the <code>set.seed()</code> function at the start of your script. Setting a seed (e.g., <code>set.seed(42)</code>) ensures that the sequence of random numbers—and thus your samples—is the same each time you run your code.</p>
<p><strong>Q5: What if I try to sample more elements than are available in my vector?</strong><br>
A: If you attempt to sample without replacement more elements than exist in the vector, R will return an error. To prevent this, either ensure that the requested <code>size</code> does not exceed the length of the vector or set <code>replace = TRUE</code> if duplicates are acceptable.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Random sampling is an essential skill for any R programmer. Whether you’re working with simple vectors, data.frames, or matrices, the <code>sample()</code> function allows you to extract random subsets of your data with ease. In this article, we covered how to use <code>sample()</code> for both non-repetitive selection (without replacement) and for allowing repeated values (with replacement). We also touched on weighted sampling—useful when some elements should be more likely to appear—and demonstrated how to achieve reproducibility using <code>set.seed()</code>.</p>
<p>Make sure to experiment with the different options provided by the <code>sample()</code> function as part of your workflow.</p>
<p><em>If you found this article helpful, please feel free to comment below, share it on your favorite social media channels, or subscribe for more R programming tutorials.</em></p>
</section>
<section id="what-we-covered" class="level1">
<h1>What We Covered</h1>
<ul>
<li>✅ Syntax and arguments of the <code>sample()</code> function<br>
</li>
<li>✅ Sampling from a vector (with and without replacement)<br>
</li>
<li>✅ Sampling rows from a data.frame<br>
</li>
<li>✅ Sampling elements and rows from a matrix<br>
</li>
<li>✅ Weighted random sampling using the <code>prob</code> argument<br>
</li>
<li>✅ Reproducibility using <code>set.seed()</code><br>
</li>
<li>✅ Interactive “Your Turn” exercises<br>
</li>
<li>✅ FAQs to clarify common doubts<br>
</li>
<li>✅ Clear, step-by-step code examples with explanations</li>
</ul>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-19/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Sample Time…Again</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-05-19/</guid>
  <pubDate>Mon, 19 May 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Create a Vector of Zeros in R with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-05-14/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Key Takeaway</strong>: Creating vectors of zeros in R is easily accomplished using three main functions: <code>numeric()</code>, <code>integer()</code>, and <code>rep()</code>. Each method has specific advantages depending on your needs for memory usage, data type, and performance.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Creating vectors of zeros is a common task in R programming, especially when initializing data structures for later use. Whether you’re setting up placeholder vectors, pre-allocating memory for better performance, or building matrices, knowing how to efficiently create zero vectors is a good skill for any R programmer. This comprehensive guide will walk you through three reliable methods to create vectors filled with zeros in R, complete with working examples and practical applications.</p>
</section>
<section id="what-are-vectors-of-zeros-and-why-create-them" class="level1">
<h1>What are Vectors of Zeros and Why Create Them?</h1>
<p>Vectors are one-dimensional arrays that can hold data of the same type. Creating vectors filled with zeros is particularly useful in several scenarios:</p>
<ul>
<li><strong>Pre-allocating memory</strong> for better performance in loops and functions</li>
<li><strong>Initializing data structures</strong> before filling them with calculated values</li>
<li><strong>Creating placeholder vectors</strong> for statistical operations</li>
<li><strong>Setting up default values</strong> in algorithms</li>
</ul>
<p>Let’s take a look at the three primary methods to create vectors of zeros in R: <code>numeric()</code>, <code>integer()</code>, and <code>rep()</code>.</p>
</section>
<section id="method-1-using-the-numeric-function" class="level1">
<h1>Method 1: Using the <code>numeric()</code> Function</h1>
<p>The <code>numeric()</code> function is one of the most straightforward ways to create a vector of zeros in R. When you call this function with a length parameter, it automatically creates a numeric vector filled with zeros.</p>
<section id="basic-syntax" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax">Basic Syntax</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Syntax for numeric()</span></span>
<span id="cb1-2">zero_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(length)</span></code></pre></div>
</section>
<section id="examples-using-numeric" class="level2">
<h2 class="anchored" data-anchor-id="examples-using-numeric">Examples Using <code>numeric()</code></h2>
<p>Let’s look at some practical examples using the <code>numeric()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a numeric vector of zeros with length 5</span></span>
<span id="cb2-2">zero_vector_5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_vector_5)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0 0 0</code></pre>
</div>
</div>
<p>In this example, <code>numeric(5)</code> creates a vector of length 5, with all elements initialized to 0.0 (numeric type) .</p>
<p>Let’s create a longer vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a numeric vector of zeros with length 10</span></span>
<span id="cb4-2">zero_vector_10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_vector_10)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0 0 0 0 0 0 0 0 0 0</code></pre>
</div>
</div>
<p>What happens if you don’t specify a length? Let’s see:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty numeric vector</span></span>
<span id="cb6-2">empty_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(empty_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>numeric(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(empty_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<p>When no length is specified, <code>numeric()</code> creates an empty vector with length 0 .</p>
</section>
<section id="technical-details-of-numeric" class="level2">
<h2 class="anchored" data-anchor-id="technical-details-of-numeric">Technical Details of <code>numeric()</code></h2>
<p>When you use the <code>numeric()</code> function, here’s what you should know:</p>
<ul>
<li><strong>Data Type</strong>: Creates double-precision floating-point numbers (<code>float64</code>)</li>
<li><strong>Memory Usage</strong>: 8 bytes per element</li>
<li><strong>Default Value</strong>: All elements are initialized to 0</li>
<li><strong>Use Case</strong>: Best for mathematical operations requiring decimal precision</li>
</ul>
</section>
</section>
<section id="method-2-using-the-integer-function" class="level1">
<h1>Method 2: Using the <code>integer()</code> Function</h1>
<p>The <code>integer()</code> function creates a vector of zeros similar to <code>numeric()</code>, but with integer data type instead of floating-point.</p>
<section id="basic-syntax-1" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-1">Basic Syntax</h2>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Syntax for integer()</span></span>
<span id="cb10-2">zero_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(length)</span></code></pre></div>
</section>
<section id="examples-using-integer" class="level2">
<h2 class="anchored" data-anchor-id="examples-using-integer">Examples Using <code>integer()</code></h2>
<p>Let’s explore some examples of using the <code>integer()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an integer vector of zeros with length 5</span></span>
<span id="cb11-2">zero_vector_int5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_vector_int5)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0 0 0</code></pre>
</div>
</div>
<p>In this example, <code>integer(5)</code> creates a vector with 5 elements, all initialized to 0 as integers .</p>
<p>Let’s create a longer integer vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an integer vector of zeros with length 10</span></span>
<span id="cb13-2">zero_vector_int10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_vector_int10)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0 0 0 0 0 0 0 0 0 0</code></pre>
</div>
</div>
</section>
<section id="technical-details-of-integer" class="level2">
<h2 class="anchored" data-anchor-id="technical-details-of-integer">Technical Details of <code>integer()</code></h2>
<p>When you use the <code>integer()</code> function, here’s what you need to know:</p>
<ul>
<li><strong>Data Type</strong>: Creates integer numbers (<code>int32</code>)</li>
<li><strong>Memory Usage</strong>: 4 bytes per element (half the memory of <code>numeric()</code>)</li>
<li><strong>Default Value</strong>: All elements are initialized to 0</li>
<li><strong>Use Case</strong>: Best for counting, indexing, or when decimal precision isn’t needed</li>
</ul>
</section>
<section id="comparing-numeric-and-integer" class="level2">
<h2 class="anchored" data-anchor-id="comparing-numeric-and-integer">Comparing <code>numeric()</code> and <code>integer()</code></h2>
<p>While both functions create vectors of zeros, they differ in important ways:</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Feature</th>
<th><code>numeric()</code></th>
<th><code>integer()</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Data Type</td>
<td>Float (double)</td>
<td>Integer</td>
</tr>
<tr class="even">
<td>Memory Per Element</td>
<td>8 bytes</td>
<td>4 bytes</td>
</tr>
<tr class="odd">
<td>Use Case</td>
<td>Mathematical calculations</td>
<td>Counting, indexing</td>
</tr>
<tr class="even">
<td>Precision</td>
<td>Decimal precision</td>
<td>Whole numbers only</td>
</tr>
</tbody>
</table>
<p>This memory efficiency makes <code>integer()</code> a better choice when you’re working with large vectors and don’t need decimal precision .</p>
</section>
</section>
<section id="method-3-using-the-rep-function" class="level1">
<h1>Method 3: Using the <code>rep()</code> Function</h1>
<p>The <code>rep()</code> function takes a different approach by replicating values. To create a vector of zeros, you can replicate the value 0 a specified number of times.</p>
<section id="basic-syntax-2" class="level2">
<h2 class="anchored" data-anchor-id="basic-syntax-2">Basic Syntax</h2>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Syntax for rep()</span></span>
<span id="cb15-2">zero_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> length)</span></code></pre></div>
</section>
<section id="examples-using-rep" class="level2">
<h2 class="anchored" data-anchor-id="examples-using-rep">Examples Using <code>rep()</code></h2>
<p>Here are some practical examples of using the <code>rep()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector of zeros with length 5 using rep()</span></span>
<span id="cb16-2">zero_vector_rep5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb16-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_vector_rep5)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0 0 0 0 0</code></pre>
</div>
</div>
<p>In this example, <code>rep(0, times = 5)</code> replicates the value 0 five times, creating a vector of length 5 filled with zeros .</p>
<p>Let’s try a longer vector:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector of zeros with length 10 using rep()</span></span>
<span id="cb18-2">zero_vector_rep10 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb18-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_vector_rep10)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0 0 0 0 0 0 0 0 0 0</code></pre>
</div>
</div>
</section>
<section id="technical-details-of-rep" class="level2">
<h2 class="anchored" data-anchor-id="technical-details-of-rep">Technical Details of <code>rep()</code></h2>
<p>When you use the <code>rep()</code> function, here’s what you should know:</p>
<ul>
<li><strong>Data Type</strong>: Inherits the type of the value being repeated (typically <code>int64</code> for 0)</li>
<li><strong>Memory Usage</strong>: 8 bytes per element for integer zeros</li>
<li><strong>Default Value</strong>: Whatever value you specify to repeat (in our case, 0)</li>
<li><strong>Use Case</strong>: Flexible function that can create vectors with various patterns</li>
</ul>
<p>The <code>rep()</code> function is more flexible than <code>numeric()</code> or <code>integer()</code> as it can repeat any value, not just zeros. This makes it versatile for different initialization needs .</p>
</section>
</section>
<section id="performance-comparison" class="level1">
<h1>Performance Comparison</h1>
<p>When choosing which method to use, performance considerations may be important, especially for large vectors. Let’s compare these three methods:</p>
<section id="memory-usage-comparison" class="level2">
<h2 class="anchored" data-anchor-id="memory-usage-comparison">Memory Usage Comparison</h2>
<p>Our testing reveals significant differences in memory consumption:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create vectors using different methods</span></span>
<span id="cb20-4">zero_vector_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(n)</span>
<span id="cb20-5">zero_vector_integer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(n)</span>
<span id="cb20-6">zero_vector_rep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">times =</span> n)</span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check memory usage</span></span>
<span id="cb20-9">memory_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(zero_vector_numeric)</span>
<span id="cb20-10">memory_integer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(zero_vector_integer)</span>
<span id="cb20-11">memory_rep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(zero_vector_rep)</span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print memory usage</span></span>
<span id="cb20-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory usage for each method:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric() equivalent:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type: float64</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory per element: 8 bytes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total memory:"</span>, memory_numeric, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer() equivalent:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type: int32</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory per element: 4 bytes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total memory:"</span>, memory_integer, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rep() equivalent:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Type: int64</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory per element: 8 bytes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb20-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total memory:"</span>, memory_rep, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Memory usage for each method:

 numeric() equivalent:
 Type: float64
 Memory per element: 8 bytes
 Total memory: 848 bytes

 integer() equivalent:
 Type: int32
 Memory per element: 4 bytes
 Total memory: 448 bytes

 rep() equivalent:
 Type: int64
 Memory per element: 8 bytes
 Total memory: 848 bytes</code></pre>
</div>
</div>
<p>As you can see, <code>integer()</code> uses half the memory of either <code>numeric()</code> or <code>rep()</code> for the same vector length. This difference becomes increasingly important with larger vectors.</p>
</section>
<section id="type-verification" class="level2">
<h2 class="anchored" data-anchor-id="type-verification">Type Verification</h2>
<p>All three methods reliably create vectors filled with zeros:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verification</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
</section>
</section>
<section id="common-pitfalls-and-best-practices" class="level1">
<h1>Common Pitfalls and Best Practices</h1>
<p>When working with vectors of zeros in R, be aware of these common issues and best practices:</p>
<section id="pitfall-1-incorrect-data-types" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-1-incorrect-data-types">Pitfall 1: Incorrect Data Types</h2>
<p>One common mistake is mixing data types within a vector, which can lead to unexpected results due to implicit coercion.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mixing numeric and character types</span></span>
<span id="cb28-2">mixed_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>)</span>
<span id="cb28-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(mixed_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "0" "0"</code></pre>
</div>
</div>
<p>In this example, R coerces the numeric <code>0</code> to a character <code>"0"</code>, resulting in a character vector rather than a numeric one.</p>
<blockquote class="blockquote">
<p><strong>Best Practice</strong>: Ensure all elements in a vector are of the same type to avoid implicit coercion.</p>
</blockquote>
</section>
<section id="pitfall-2-using-uninitialized-vectors" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-2-using-uninitialized-vectors">Pitfall 2: Using Uninitialized Vectors</h2>
<p>Attempting to use a vector before it is properly initialized can lead to errors.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using an uninitialized vector</span></span>
<span id="cb30-2">uninitialized_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb30-3">uninitialized_vector[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(uninitialized_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
</div>
<p>While this works, it’s more efficient to initialize vectors with the desired length upfront.</p>
<blockquote class="blockquote">
<p><strong>Best Practice</strong>: Always initialize vectors with their intended length using <code>numeric(length)</code>, <code>integer(length)</code>, or <code>rep(0, times = length)</code>.</p>
</blockquote>
</section>
<section id="pitfall-3-incorrect-function-arguments" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-3-incorrect-function-arguments">Pitfall 3: Incorrect Function Arguments</h2>
<p>Providing incorrect arguments to functions can result in errors or unexpected behavior.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incorrect argument in rep()</span></span>
<span id="cb32-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># incorrect_rep &lt;- rep(0, "five")  # This would cause an error</span></span></code></pre></div>
<p>If executed, this would produce:</p>
<pre><code>Error in rep(0, "five") : invalid 'times' argument</code></pre>
<blockquote class="blockquote">
<p><strong>Best Practice</strong>: Always check function documentation to ensure correct usage of arguments.</p>
</blockquote>
</section>
<section id="pitfall-4-vector-recycling" class="level2">
<h2 class="anchored" data-anchor-id="pitfall-4-vector-recycling">Pitfall 4: Vector Recycling</h2>
<p>R’s vector recycling can lead to unexpected results if not used carefully.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vector recycling example</span></span>
<span id="cb34-2">recycled_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(recycled_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 3 3 5</code></pre>
</div>
</div>
<p>In this case, the shorter vector <code>c(0, 1)</code> is recycled to match the length of the longer vector, which might not be what you intended.</p>
<blockquote class="blockquote">
<p><strong>Best Practice</strong>: Be mindful of vector lengths to avoid unintended recycling.</p>
</blockquote>
</section>
</section>
<section id="practical-applications" class="level1">
<h1>Practical Applications</h1>
<p>Now that we understand the different methods to create vectors of zeros, let’s explore some practical applications:</p>
<section id="pre-allocating-memory-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="pre-allocating-memory-for-loops">1. Pre-allocating Memory for Loops</h2>
<p>Pre-allocating memory before using loops can significantly improve performance:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without pre-allocation (inefficient)</span></span>
<span id="cb36-2">result_inefficient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb36-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb36-4">  result_inefficient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(result_inefficient, i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb36-5">}</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With pre-allocation (efficient)</span></span>
<span id="cb36-8">result_efficient <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb36-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span>(i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb36-10">  result_efficient[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb36-11">}</span></code></pre></div>
</section>
<section id="initializing-matrices" class="level2">
<h2 class="anchored" data-anchor-id="initializing-matrices">2. Initializing Matrices</h2>
<p>Zero vectors can be used to initialize matrices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a 3x3 matrix filled with zeros</span></span>
<span id="cb37-2">zero_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb37-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zero_matrix)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    0    0    0
[2,]    0    0    0
[3,]    0    0    0</code></pre>
</div>
</div>
</section>
<section id="setting-default-values" class="level2">
<h2 class="anchored" data-anchor-id="setting-default-values">3. Setting Default Values</h2>
<p>Zero vectors are useful for setting default values in functions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function that requires a vector parameter with default zeros</span></span>
<span id="cb39-2">calculate_weighted_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(values, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weights =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(values))) {</span>
<span id="cb39-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If no weights provided, use zeros (which will then be adjusted internally)</span></span>
<span id="cb39-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(weights <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) {</span>
<span id="cb39-5">    weights <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(values), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(values))</span>
<span id="cb39-6">  }</span>
<span id="cb39-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> weights))</span>
<span id="cb39-8">}</span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb39-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_weighted_sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 20</code></pre>
</div>
</div>
</section>
</section>
<section id="your-turn" class="level1">
<h1>Your Turn!</h1>
<p>Now it’s time to apply what you’ve learned. Try solving these exercises:</p>
<section id="exercise-1" class="level2">
<h2 class="anchored" data-anchor-id="exercise-1">Exercise 1</h2>
<p>Create a vector of 15 zeros using the <code>numeric()</code> function and verify that all elements are indeed zeros.</p>
</section>
<section id="exercise-2" class="level2">
<h2 class="anchored" data-anchor-id="exercise-2">Exercise 2</h2>
<p>Create an integer vector of 20 zeros and calculate how much memory it saves compared to using <code>numeric()</code>.</p>
</section>
<section id="exercise-3" class="level2">
<h2 class="anchored" data-anchor-id="exercise-3">Exercise 3</h2>
<p>Write a function that accepts a parameter <code>n</code> and returns a vector of <code>n</code> zeros using the most memory-efficient method.</p>
<details>
<summary>
Click here for Solutions!
</summary>
<p>Solution 1</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a vector of 15 zeros</span></span>
<span id="cb41-2">zeros_15 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(zeros_15)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(zeros_15 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Should return TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Solution 2</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create integer and numeric vectors of 20 zeros</span></span>
<span id="cb45-2">int_zeros <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb45-3">num_zeros <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb45-4"></span>
<span id="cb45-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate memory usage (assuming int=4 bytes, numeric=8 bytes)</span></span>
<span id="cb45-6">int_memory <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80 bytes</span></span>
<span id="cb45-7">num_memory <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 160 bytes</span></span>
<span id="cb45-8">savings <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> num_memory <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_memory  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 80 bytes saved</span></span>
<span id="cb45-9"></span>
<span id="cb45-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Memory saved:"</span>, savings, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bytes"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Memory saved: 80 bytes"</code></pre>
</div>
</div>
<p>Solution 3</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to create vector of zeros efficiently</span></span>
<span id="cb47-2">efficient_zeros <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(n) {</span>
<span id="cb47-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># integer() is most memory efficient</span></span>
<span id="cb47-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(n))</span>
<span id="cb47-5">}</span>
<span id="cb47-6"></span>
<span id="cb47-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb47-8">test_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">efficient_zeros</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb47-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(test_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</code></pre>
</div>
</div>
</details>
</section>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong><code>numeric(length)</code></strong> creates a vector of floating-point zeros using 8 bytes per element.</li>
<li><strong><code>integer(length)</code></strong> creates a vector of integer zeros using 4 bytes per element, making it the most memory-efficient option.</li>
<li><strong><code>rep(0, times = length)</code></strong> is more flexible but typically uses 8 bytes per element.</li>
<li>Pre-allocate vectors before loops for better performance.</li>
<li>Pay attention to data types to avoid unintended type coercion.</li>
<li>The best function to use depends on your specific needs regarding memory efficiency and whether you need integer or floating-point values.</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Creating vectors of zeros is a core skill for R programmers. The three methods we’ve explored: <code>numeric()</code>, <code>integer()</code>, and <code>rep()</code> each have their strengths depending on your specific use case. The <code>integer()</code> function provides the most memory-efficient solution, while <code>numeric()</code> is ideal for floating-point calculations, and <code>rep()</code> offers flexibility for creating vectors with various patterns.</p>
<p>By understanding these methods and their characteristics, you can choose the most appropriate approach for your programming needs, leading to more efficient and effective R code.</p>
<p>Ready to enhance your R programming skills further? Try implementing these methods in your next project, experiment with different vector sizes, and observe the performance differences firsthand. The small optimization choices you make in fundamental operations like vector creation can have significant impacts on larger programs.</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="which-method-is-fastest-for-creating-large-vectors-of-zeros" class="level2">
<h2 class="anchored" data-anchor-id="which-method-is-fastest-for-creating-large-vectors-of-zeros">1. Which method is fastest for creating large vectors of zeros?</h2>
<p>All three methods (<code>numeric()</code>, <code>integer()</code>, and <code>rep()</code>) have similar performance for vector creation. However, <code>integer()</code> uses less memory, which can lead to better overall program performance when working with very large vectors.</p>
</section>
<section id="can-i-create-a-zero-vector-with-a-specific-data-type-other-than-integer-or-numeric" class="level2">
<h2 class="anchored" data-anchor-id="can-i-create-a-zero-vector-with-a-specific-data-type-other-than-integer-or-numeric">2. Can I create a zero vector with a specific data type other than integer or numeric?</h2>
<p>Yes, you can use the <code>vector()</code> function to specify the mode: <code>vector("double", length)</code> for numeric or <code>vector("logical", length)</code> for logical vectors. However, only certain types will initialize to zero by default.</p>
</section>
<section id="why-use-a-vector-of-zeros-instead-of-just-creating-an-empty-vector" class="level2">
<h2 class="anchored" data-anchor-id="why-use-a-vector-of-zeros-instead-of-just-creating-an-empty-vector">3. Why use a vector of zeros instead of just creating an empty vector?</h2>
<p>Pre-allocating with zeros helps avoid the performance penalty of growing vectors dynamically (which causes R to reallocate memory). It also ensures your vector has a known state before operations.</p>
</section>
<section id="do-matrices-and-arrays-in-r-also-initialize-to-zero" class="level2">
<h2 class="anchored" data-anchor-id="do-matrices-and-arrays-in-r-also-initialize-to-zero">4. Do matrices and arrays in R also initialize to zero?</h2>
<p>Yes, when you create matrices and arrays with the <code>matrix()</code> and <code>array()</code> functions without specifying values, they are filled with zeros by default.</p>
</section>
<section id="is-there-a-difference-between-rep0-n-and-numericn-in-terms-of-functionality" class="level2">
<h2 class="anchored" data-anchor-id="is-there-a-difference-between-rep0-n-and-numericn-in-terms-of-functionality">5. Is there a difference between <code>rep(0, n)</code> and <code>numeric(n)</code> in terms of functionality?</h2>
<p>While both create vectors of zeros, <code>numeric()</code> always creates double-precision values, while <code>rep(0, n)</code> creates a vector with the same type as the value being repeated (integer 0 remains integer). The <code>numeric()</code> function is also slightly more direct for this specific purpose.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><p><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/rep">R Documentation: The rep() Function</a></p></li>
<li><p><a href="https://www.statmethods.net/management/variables.html">StatMethods: R Data Management Guide</a></p></li>
<li><p><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/vector">R Documentation: Vector Initialization</a></p></li>
<li><p><a href="https://www.statology.org/r-create-vector-of-zeros/">Statology: Create Vector of Zeros in R</a></p></li>
<li><p><a href="https://www.tutorialspoint.com/how-to-create-a-vector-with-zero-values-in-r">TutorialsPoint: Create a Vector with Zero Values in R</a></p></li>
</ol>
<hr>
<p><em>Did you find this guide helpful? Share your experience creating zero vectors in R in the comments below! If you have any questions or additional tips, I’d love to hear them. Don’t forget to bookmark this page for future reference as you continue</em></p>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-14/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Creating Zero Vectors</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-05-14/</guid>
  <pubDate>Wed, 14 May 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Catch integer(0) in R: Comprehensive Guide with Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-05-12/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Key Takeaway:</strong> The <code>integer(0)</code> in R represents an empty integer vector that commonly appears during filtering operations and index searches. You can detect it using <code>length()</code>, <code>identical()</code>, or specialized functions, and proper handling is essential for robust R programming.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with R, you’ll often encounter <code>integer(0)</code> – an empty integer vector that can cause unexpected errors if not handled properly. This article explains what <code>integer(0)</code> is, how to detect it, and provides practical examples of handling it effectively in your R code. Whether you’re filtering data, finding indices, or manipulating datasets, understanding how to catch and manage <code>integer(0)</code> will make your code more robust and error-free.</p>
</section>
<section id="what-is-integer0-in-r" class="level1">
<h1>What is integer(0) in R?</h1>
<p><code>integer(0)</code> is an empty integer vector with zero length. It’s different from <code>NULL</code> or <code>NA</code> values, representing a vector of the integer type that contains no elements. This can occur in various scenarios, most commonly when using functions like <code>which()</code> that return indices of elements meeting certain conditions, but no elements satisfy those conditions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating integer(0) directly</span></span>
<span id="cb1-2">empty_int <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(empty_int)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: integer(0)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>integer(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Getting integer(0) from which() function</span></span>
<span id="cb3-2">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(a)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: integer(0)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>integer(0)</code></pre>
</div>
</div>
<p>In the second example, <code>which(1:3 == 5)</code> returns <code>integer(0)</code> because there are no elements in the vector <code>1:3</code> that equal 5.</p>
</section>
<section id="common-scenarios-where-integer0-occurs" class="level1">
<h1>Common Scenarios Where integer(0) Occurs</h1>
<section id="filtering-data" class="level2">
<h2 class="anchored" data-anchor-id="filtering-data">1. Filtering Data</h2>
<p>When you filter data but no elements meet your filtering criteria:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb5-2">filtered <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> data[data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>]</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(filtered <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> data))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>integer(0)</code></pre>
</div>
</div>
</section>
<section id="finding-indices" class="level2">
<h2 class="anchored" data-anchor-id="finding-indices">2. Finding Indices</h2>
<p>When searching for elements that don’t exist:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">letters_vec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "a" "b" "c" "d" "e"</span></span>
<span id="cb7-2">indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(letters_vec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span>)</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(indices)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: integer(0)</span></span></code></pre></div>
</section>
<section id="subsetting-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="subsetting-data-frames">3. Subsetting Data Frames</h2>
<p>When filtering a data frame with no matching rows:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb8-2">subset_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, ]</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(subset_df))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 0</span></span></code></pre></div>
</section>
</section>
<section id="methods-to-detect-integer0" class="level1">
<h1>Methods to Detect integer(0)</h1>
<section id="using-the-length-function" class="level2">
<h2 class="anchored" data-anchor-id="using-the-length-function">Using the length() Function</h2>
<p>The most common and straightforward way to check for <code>integer(0)</code> is using the <code>length()</code> function:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(a) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The vector is empty."</span>)</span>
<span id="cb9-4">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The vector is not empty."</span>)</span>
<span id="cb9-6">}</span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "The vector is empty."</span></span></code></pre></div>
</section>
<section id="using-identical-function" class="level2">
<h2 class="anchored" data-anchor-id="using-identical-function">Using identical() Function</h2>
<p>You can also use the <code>identical()</code> function to specifically check if a vector is exactly <code>integer(0)</code>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(a, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) {</span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The vector is integer(0)."</span>)</span>
<span id="cb10-4">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The vector is not integer(0)."</span>)</span>
<span id="cb10-6">}</span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "The vector is integer(0)."</span></span></code></pre></div>
</section>
<section id="using-is.integer-combined-with-length" class="level2">
<h2 class="anchored" data-anchor-id="using-is.integer-combined-with-length">Using is.integer() Combined with length()</h2>
<p>For a more comprehensive check:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(a) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(a) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The vector is an empty integer vector."</span>)</span>
<span id="cb11-4">} <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The vector is not an empty integer vector."</span>)</span>
<span id="cb11-6">}</span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "The vector is an empty integer vector."</span></span></code></pre></div>
</section>
</section>
<section id="practical-examples-of-handling-integer0" class="level1">
<h1>Practical Examples of Handling integer(0)</h1>
<section id="example-1-safe-subsetting" class="level2">
<h2 class="anchored" data-anchor-id="example-1-safe-subsetting">Example 1: Safe Subsetting</h2>
<p>When subsetting vectors, you should check for <code>integer(0)</code> to avoid unexpected behavior:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">safe_subset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec, condition) {</span>
<span id="cb12-2">  indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(condition)</span>
<span id="cb12-3">  </span>
<span id="cb12-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(indices) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb12-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No elements matched the condition"</span>)</span>
<span id="cb12-6">  }</span>
<span id="cb12-7">  </span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(vec[indices])</span>
<span id="cb12-9">}</span>
<span id="cb12-10"></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb12-12">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb12-13">result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_subset</span>(data, data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb12-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 40 50</span></span>
<span id="cb12-15"></span>
<span id="cb12-16">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_subset</span>(data, data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb12-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "No elements matched the condition"</span></span></code></pre></div>
</section>
<section id="example-2-filtering-data-frames" class="level2">
<h2 class="anchored" data-anchor-id="example-2-filtering-data-frames">Example 2: Filtering Data Frames</h2>
<p>When filtering data frames, handling empty results properly:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">safe_filter_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(df, condition) {</span>
<span id="cb13-2">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> df[condition, ]</span>
<span id="cb13-3">  </span>
<span id="cb13-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(result) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb13-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No rows matched the filter condition"</span>)</span>
<span id="cb13-6">  }</span>
<span id="cb13-7">  </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb13-9">}</span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb13-12">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb13-13">result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_filter_df</span>(df, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb13-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shows filtered data frame with rows where value &gt; 30</span></span>
<span id="cb13-15"></span>
<span id="cb13-16">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_filter_df</span>(df, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb13-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "No rows matched the filter condition"</span></span></code></pre></div>
</section>
<section id="example-3-using-trycatch-for-error-handling" class="level2">
<h2 class="anchored" data-anchor-id="example-3-using-trycatch-for-error-handling">Example 3: Using tryCatch for Error Handling</h2>
<p>When you need more sophisticated error handling:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">safe_which <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(condition) {</span>
<span id="cb14-2">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb14-3">    indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(condition)</span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(indices) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No elements found"</span>)</span>
<span id="cb14-5">    indices</span>
<span id="cb14-6">  }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb14-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error occurred: "</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message)</span>
<span id="cb14-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb14-9">  })</span>
<span id="cb14-10">  </span>
<span id="cb14-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb14-12">}</span>
<span id="cb14-13"></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb14-15">data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb14-16">result1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_which</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb14-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 4 5 (indices of elements &gt; 30)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">result2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_which</span>(data <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Error occurred: No elements found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prints: "Error occurred: No elements found"</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(result2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: NULL</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NULL</code></pre>
</div>
</div>
</section>
</section>
<section id="best-practices-for-handling-integer0" class="level1">
<h1>Best Practices for Handling integer(0)</h1>
<ol type="1">
<li><p><strong>Always check length before accessing elements</strong>:</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">indices <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(condition)</span>
<span id="cb20-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(indices) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb20-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Safe to use indices</span></span>
<span id="cb20-4">}</span></code></pre></div></li>
<li><p><strong>Return meaningful default values or messages</strong>:</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">find_values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec, condition) {</span>
<span id="cb21-2">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> vec[condition]</span>
<span id="cb21-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(result) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No matching values found"</span>)</span>
<span id="cb21-5">  }</span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb21-7">}</span></code></pre></div></li>
<li><p><strong>Use defensive programming for functions</strong>:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">calculate_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec) {</span>
<span id="cb22-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(vec) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb22-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Empty vector, returning NA"</span>)</span>
<span id="cb22-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb22-5">  }</span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(vec)</span>
<span id="cb22-7">}</span></code></pre></div></li>
<li><p><strong>Create wrapper functions for common operations</strong>:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">safe_max <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb23-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(x)</span>
<span id="cb23-4">}</span></code></pre></div></li>
<li><p><strong>Use appropriate error messages</strong>:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">get_element <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(vec, index) {</span>
<span id="cb24-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(vec) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb24-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cannot get element from empty vector"</span>)</span>
<span id="cb24-4">  }</span>
<span id="cb24-5">  vec[index]</span>
<span id="cb24-6">}</span></code></pre></div></li>
</ol>
</section>
<section id="your-turn-interactive-exercise" class="level1">
<h1>Your Turn! Interactive Exercise</h1>
<p>Now that you understand how to catch <code>integer(0)</code>, try solving this problem:</p>
<p><strong>Exercise</strong>: Create a function called <code>safe_division</code> that takes two arguments: a vector of numerators and a vector of denominators. The function should perform element-wise division but handle cases where:</p>
<ol type="1">
<li>The denominator vector is <code>integer(0)</code></li>
<li>Any denominator value is 0</li>
<li>The numerator vector is <code>integer(0)</code></li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">safe_division <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(numerator, denominator) {</span>
<span id="cb25-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case 1: Check if denominator is integer(0)</span></span>
<span id="cb25-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(denominator) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb25-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Denominator is empty, returning NA"</span>)</span>
<span id="cb25-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb25-6">  }</span>
<span id="cb25-7">  </span>
<span id="cb25-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case 2: Check if numerator is integer(0)</span></span>
<span id="cb25-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(numerator) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb25-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numerator is empty, returning integer(0)"</span>)</span>
<span id="cb25-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb25-12">  }</span>
<span id="cb25-13">  </span>
<span id="cb25-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create result vector</span></span>
<span id="cb25-15">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(numerator))</span>
<span id="cb25-16">  </span>
<span id="cb25-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Case 3: Handle zero denominators</span></span>
<span id="cb25-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(numerator)) {</span>
<span id="cb25-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(denominator)) {</span>
<span id="cb25-20">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (denominator[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb25-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Division by zero at position "</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", using NA"</span>)</span>
<span id="cb25-22">        result[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb25-23">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb25-24">        result[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> numerator[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denominator[i]</span>
<span id="cb25-25">      }</span>
<span id="cb25-26">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb25-27">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If denominator is shorter, recycle</span></span>
<span id="cb25-28">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (denominator[((i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(denominator)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb25-29">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Division by zero at position "</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", using NA"</span>)</span>
<span id="cb25-30">        result[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb25-31">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb25-32">        result[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> numerator[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> denominator[((i<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">-1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(denominator)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb25-33">      }</span>
<span id="cb25-34">    }</span>
<span id="cb25-35">  }</span>
<span id="cb25-36">  </span>
<span id="cb25-37">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb25-38">}</span>
<span id="cb25-39"></span>
<span id="cb25-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test cases</span></span>
<span id="cb25-41">test1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_division</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in safe_division(c(10, 20, 30), c(2, 0, 5)): Division by zero at
position 2, using NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(test1)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5 NA 6 (with warning)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  5 NA  6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">test2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_division</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in safe_division(c(10, 20, 30), integer(0)): Denominator is empty,
returning NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(test2)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: NA (with warning)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">test3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_division</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in safe_division(integer(0), c(1, 2, 3)): Numerator is empty, returning
integer(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(test3)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: integer(0) (with warning)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>integer(0)</code></pre>
</div>
</div>
</details>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><code>integer(0)</code> is an empty integer vector with zero length</li>
<li>Use <code>length()</code> to check if a vector is empty (<code>length(x) == 0</code>)</li>
<li><code>identical(x, integer(0))</code> provides a precise check for empty integer vectors</li>
<li>Always check for empty vectors before accessing elements to prevent errors</li>
<li>Create wrapper functions that handle <code>integer(0)</code> gracefully</li>
<li>Return meaningful default values or messages when encountering empty vectors</li>
<li>Use <code>tryCatch()</code> for more sophisticated error handling</li>
<li>Consider using defensive programming techniques in your functions</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Understanding how to catch and handle <code>integer(0)</code> in R is essential for writing robust, error-free code. By using functions like <code>length()</code>, <code>identical()</code>, and implementing proper error handling patterns, you can ensure your R scripts work correctly even when operations result in empty vectors.</p>
<p>Remember that good R programming involves anticipating edge cases like empty vectors and handling them appropriately. The techniques and examples in this article provide a solid foundation for managing <code>integer(0)</code> in various scenarios, from simple data filtering to complex data manipulation tasks.</p>
<p>Start implementing these practices in your R code today to make it more reliable and maintainable. Your future self (and anyone else working with your code) will thank you!</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="whats-the-difference-between-integer0-and-null-in-r" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-integer0-and-null-in-r">1. What’s the difference between integer(0) and NULL in R?</h2>
<p><code>integer(0)</code> is an empty vector of the integer type with length 0, while <code>NULL</code> represents the absence of a value or an undefined value. You can check the length of <code>integer(0)</code> (which is 0), but <code>NULL</code> doesn’t have a length property in the same way.</p>
</section>
<section id="can-integer0-cause-errors-in-my-r-code" class="level2">
<h2 class="anchored" data-anchor-id="can-integer0-cause-errors-in-my-r-code">2. Can integer(0) cause errors in my R code?</h2>
<p>Yes, attempting to access elements of an <code>integer(0)</code> vector or using it in operations that expect non-empty vectors can cause unexpected results or errors. For example, <code>max(integer(0))</code> will produce an error unless properly handled.</p>
</section>
<section id="how-can-i-convert-integer0-to-na" class="level2">
<h2 class="anchored" data-anchor-id="how-can-i-convert-integer0-to-na">3. How can I convert integer(0) to NA?</h2>
<p>You can use a simple conditional statement:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))) <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x</span></code></pre></div>
</section>
<section id="is-integer0-the-same-as-character0-or-numeric0" class="level2">
<h2 class="anchored" data-anchor-id="is-integer0-the-same-as-character0-or-numeric0">4. Is integer(0) the same as character(0) or numeric(0)?</h2>
<p>While all represent empty vectors of different types, they are not identical. Each has its specific type (integer, character, or numeric) despite being empty. Use <code>typeof()</code> to check the specific type.</p>
</section>
<section id="how-does-integer0-behave-in-logical-operations" class="level2">
<h2 class="anchored" data-anchor-id="how-does-integer0-behave-in-logical-operations">5. How does integer(0) behave in logical operations?</h2>
<p>Empty vectors like <code>integer(0)</code> in logical operations often result in logical(0), which is also an empty vector but of logical type. Always check lengths before performing logical operations.</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.statology.org/integer-0-r/">Statology: How to Handle integer(0) in R</a></li>
<li><a href="https://www.edureka.co/community/2413/catch-integer-0-in-r">Edureka: Catch integer 0 in R</a></li>
<li><a href="https://statisticsglobe.com/catch-integer-0-in-r">Statistics Globe: Catch Integer 0 in R</a></li>
<li><a href="https://how.dev/answers/how-to-get-the-length-of-a-vector-in-r">How.dev: How to get the length of a vector in R</a></li>
<li><a href="https://www.spsanderson.com/steveondata/posts/2025-01-14/">Steve’s Data Tips and Tricks: Creating Empty Vectors in R</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-12/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>interger(0)?</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-05-12/</guid>
  <pubDate>Mon, 12 May 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>RandomWalker for R 0.3.0: Expanding Dimensions in Random Walk Analysis</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-05-09/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Key Updates:</strong> Version 0.3.0 introduces multi-dimensional random walks (up to 3D), subset functionality for targeting specific y-values, and confidence interval calculations for enhanced statistical analysis. This major update significantly expands RandomWalker’s capabilities for R programmers working with stochastic processes.</p>
</blockquote>
<section id="introduction-taking-random-walks-to-new-dimensions" class="level1">
<h1>Introduction: Taking Random Walks to New Dimensions</h1>
<p>The RandomWalker package for R has been a valuable tool for generating and analyzing random walks compatible with the tidyverse ecosystem. Version 0.3.0 brings three major enhancements that significantly expand its capabilities: multi-dimensional random walks (up to three dimensions), a new subset function for filtering walks based on y-values, and a confidence interval function for statistical analysis. This update addresses several user requests while maintaining the package’s commitment to simplicity and integration with the tidyverse workflow.</p>
<p>If you’re working with stochastic processes, time series analysis, or simulation in R, these new features offer powerful new options for your analytical toolkit. Let’s explore what’s new and how to leverage these enhancements in your projects.</p>
</section>
<section id="breaking-change-alert" class="level1">
<h1>Breaking Change Alert</h1>
<p>Before jumping into the new features, there’s an important <strong>breaking change</strong> to note: the <code>x</code> column in the output data frames has been renamed to <code>step_number</code>. This change provides more clarity about what the column represents, but it will require updates to existing code that references the <code>x</code> column if you have the. We’ll provide migration guidance later in this article.</p>
</section>
<section id="new-feature-1-multi-dimensional-random-walks" class="level1">
<h1>New Feature #1: Multi-Dimensional Random Walks</h1>
<section id="what-are-multi-dimensional-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="what-are-multi-dimensional-random-walks">What Are Multi-Dimensional Random Walks?</h2>
<p>Random walks are mathematical models describing paths consisting of random steps. Previously, RandomWalker was limited to one-dimensional walks, where each step moved only forward or backward along a single axis.</p>
<p>With version 0.3.0, you can now generate random walks in up to three dimensions, allowing for more complex and realistic simulations. This enhancement opens up new possibilities for modeling phenomena in physics (like particle movement), finance (multi-asset price movements), biology (animal movement patterns), and many other fields.</p>
</section>
<section id="technical-implementation" class="level2">
<h2 class="anchored" data-anchor-id="technical-implementation">Technical Implementation</h2>
<p>The multi-dimensional random walks feature was implemented through Fix 107, which served as the parent task for related fixes (108, 109, 110, 111, and 112). The implementation allows users to specify the number of dimensions (1, 2, or 3) when generating a random walk.</p>
</section>
<section id="example-usage" class="level2">
<h2 class="anchored" data-anchor-id="example-usage">Example Usage</h2>
<p>Let’s look at how to generate multi-dimensional random walks using the new functionality:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the RandomWalker package</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RandomWalker)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a 1D random walk (same as before)</span></span>
<span id="cb1-6">walk_1d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a 2D random walk</span></span>
<span id="cb1-9">walk_2d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a 3D random walk</span></span>
<span id="cb1-12">walk_3d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Preview the structure of each walk</span></span>
<span id="cb1-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(walk_1d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2,000
Columns: 8
$ walk_number &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…
$ step_number &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…
$ y           &lt;dbl&gt; -0.162321110, -0.122323437, 0.116489147, -0.128727711, -0.…
$ cum_sum_y   &lt;dbl&gt; -0.1623211, -0.2846445, -0.1681554, -0.2968831, -0.3917613…
$ cum_prod_y  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ cum_min_y   &lt;dbl&gt; -0.1623211, -0.1623211, -0.1623211, -0.1623211, -0.1623211…
$ cum_max_y   &lt;dbl&gt; -0.1623211, -0.1223234, 0.1164891, 0.1164891, 0.1164891, 0…
$ cum_mean_y  &lt;dbl&gt; -0.16232111, -0.14232227, -0.05605180, -0.07422078, -0.078…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(walk_2d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2,000
Columns: 14
$ walk_number &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…
$ step_number &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…
$ x           &lt;dbl&gt; 0.242145613, -0.133935016, 0.195128642, -0.274061039, -0.0…
$ y           &lt;dbl&gt; 0.09884026, 0.09560559, -0.01621698, -0.08385851, -0.05142…
$ cum_sum_x   &lt;dbl&gt; 0.24214561, 0.10821060, 0.30333924, 0.02927820, -0.0161840…
$ cum_sum_y   &lt;dbl&gt; 0.098840261, 0.194445847, 0.178228865, 0.094370352, 0.0429…
$ cum_prod_x  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ cum_prod_y  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ cum_min_x   &lt;dbl&gt; 0.2421456, -0.1339350, -0.1339350, -0.2740610, -0.2740610,…
$ cum_min_y   &lt;dbl&gt; 0.09884026, 0.09560559, -0.01621698, -0.08385851, -0.08385…
$ cum_max_x   &lt;dbl&gt; 0.2421456, 0.2421456, 0.2421456, 0.2421456, 0.2421456, 0.2…
$ cum_max_y   &lt;dbl&gt; 0.09884026, 0.09884026, 0.09884026, 0.09884026, 0.09884026…
$ cum_mean_x  &lt;dbl&gt; 0.242145613, 0.054105298, 0.101113080, 0.007319550, -0.003…
$ cum_mean_y  &lt;dbl&gt; 0.0988402607, 0.0972229237, 0.0594096218, 0.0235925880, 0.…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(walk_3d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2,000
Columns: 20
$ walk_number &lt;fct&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…
$ step_number &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…
$ x           &lt;dbl&gt; -0.01747962, -0.01747962, 0.17788529, -0.03681459, 0.03456…
$ y           &lt;dbl&gt; 0.071397707, 0.037954071, 0.109013795, -0.051819870, 0.003…
$ z           &lt;dbl&gt; -0.02407884, -0.12273330, 0.24745096, -0.04891862, 0.03499…
$ cum_sum_x   &lt;dbl&gt; -0.01747962, -0.03495925, 0.14292604, 0.10611145, 0.140671…
$ cum_sum_y   &lt;dbl&gt; 0.07139771, 0.10935178, 0.21836557, 0.16654570, 0.16961060…
$ cum_sum_z   &lt;dbl&gt; -0.02407884, -0.14681214, 0.10063882, 0.05172020, 0.086712…
$ cum_prod_x  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ cum_prod_y  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ cum_prod_z  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…
$ cum_min_x   &lt;dbl&gt; -0.01747962, -0.01747962, -0.01747962, -0.03681459, -0.036…
$ cum_min_y   &lt;dbl&gt; 0.07139771, 0.03795407, 0.03795407, -0.05181987, -0.051819…
$ cum_min_z   &lt;dbl&gt; -0.02407884, -0.12273330, -0.12273330, -0.12273330, -0.122…
$ cum_max_x   &lt;dbl&gt; -0.01747962, -0.01747962, 0.17788529, 0.17788529, 0.177885…
$ cum_max_y   &lt;dbl&gt; 0.07139771, 0.07139771, 0.10901380, 0.10901380, 0.10901380…
$ cum_max_z   &lt;dbl&gt; -0.02407884, -0.02407884, 0.24745096, 0.24745096, 0.247450…
$ cum_mean_x  &lt;dbl&gt; -0.01747962, -0.01747962, 0.04764201, 0.02652786, 0.028134…
$ cum_mean_y  &lt;dbl&gt; 0.07139771, 0.05467589, 0.07278852, 0.04163643, 0.03392212…
$ cum_mean_z  &lt;dbl&gt; -0.02407884, -0.07340607, 0.03354627, 0.01293005, 0.017342…</code></pre>
</div>
</div>
<p>The output data frame for multi-dimensional walks includes columns for each dimension (<code>x</code>, <code>y</code>, <code>z</code>), along with the <code>step_number</code> and <code>walk_number</code> columns.</p>
</section>
<section id="visualization-of-2d-and-3d-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="visualization-of-2d-and-3d-random-walks">Visualization of 2D and 3D Random Walks</h2>
<p>Random walks are best understood visually. Here’s a comparison of 2D and 3D random walks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(plotly)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rw30</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(walk_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a 2D random walk</span></span>
<span id="cb8-2">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-3">random_walk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(</span>
<span id="cb8-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb8-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> n, </span>
<span id="cb8-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-7">  )</span>
<span id="cb8-8"></span>
<span id="cb8-9">random_walk <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cum_sum_x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> cum_sum_y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> random_walk[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n), ], </span>
<span id="cb8-13">             <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> step_number), </span>
<span id="cb8-14">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"plasma"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2D Random Walk"</span>,</span>
<span id="cb8-17">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Position"</span>,</span>
<span id="cb8-18">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Position"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#remove x axis labels</span></span>
<span id="cb8-22">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.x=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#remove x axis ticks</span></span>
<span id="cb8-23">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#remove y axis labels</span></span>
<span id="cb8-24">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y=</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#remove y axis ticks</span></span>
<span id="cb8-25">  )</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">random_walk_3d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, </span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> n, </span>
<span id="cb9-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-5">)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot_ly</span>(</span>
<span id="cb9-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> random_walk_3d,</span>
<span id="cb9-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cum_sum_x,</span>
<span id="cb9-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cum_sum_y,</span>
<span id="cb9-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cum_sum_z,</span>
<span id="cb9-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scatter3d"</span>,</span>
<span id="cb9-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lines'</span>,</span>
<span id="cb9-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">opacity =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'steelblue'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reverscale =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb9-15">)</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item" id="htmlwidget-ee3cb06aaa2f181dd40c" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-ee3cb06aaa2f181dd40c">{"x":{"visdat":{"35dc3d373daa":["function () ","plotlyVisDat"]},"cur_data":"35dc3d373daa","attrs":{"35dc3d373daa":{"x":{},"y":{},"z":{},"mode":"lines","opacity":1,"line":{"width":1,"color":"steelblue","reverscale":false},"alpha_stroke":1,"sizes":[10,100],"spans":[1,20],"type":"scatter3d"}},"layout":{"margin":{"b":40,"l":60,"t":25,"r":10},"scene":{"xaxis":{"title":"cum_sum_x"},"yaxis":{"title":"cum_sum_y"},"zaxis":{"title":"cum_sum_z"}},"hovermode":"closest","showlegend":false},"source":"A","config":{"modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"data":[{"x":[0.0036799908359359638,0.035901727804248579,-0.0958274352991067,-0.33022160321353555,-0.35992733002062111,-0.59024633509128155,-0.69765796777087363,-0.75451716192551832,-0.7023623923927198,-0.70243132071947412,-0.80526796298068326,-0.78932446308927573,-0.71415556178668493,-0.76632879183105429,-0.71098693214455599,-0.60859912623691159,-0.44536640112687348,-0.45459445225992778,-0.61566638659655171,-0.55414621241353923,-0.62566761114756664,-0.63372467454192871,-0.50675776129778849,-0.40154533123191427,-0.43977680979637179,-0.42591250539104808,-0.32872458551721051,-0.39492988719883909,-0.36871537252555664,-0.37713580582984341,-0.26335073231615702,-0.16269331968058487,-0.036516416410675316,0.0098779115432267427,-0.099732253631276149,-0.23033932756852335,-0.35191310058413594,-0.2779427436634318,-0.34497695356703523,-0.42261386527325356,-0.50100100827442817,-0.61438358786868397,-0.50197315172459911,-0.7052392120664327,-0.6700102934665163,-0.65634170299058359,-0.61582045182293066,-0.65854317155706166,-0.77255345418435295,-0.64405010469460788,-0.71443509513530257,-0.66809964558060719,-0.81915331916865186,-0.80778872568664661,-0.82226513988297911,-0.69496091557137507,-0.56879098894348534,-0.43671723504498067,-0.33069554343907387,-0.35926178671937381,-0.26605297402064665,-0.13233681261540778,-0.25152370189430251,-0.17805394439414099,-0.17703100756475243,-0.309335002823108,-0.43090877583872061,-0.65734667652012879,-0.62467293740007046,-0.42391864197860946,-0.22713332586487789,-0.37932667162745459,-0.51163066688581016,-0.35527967079571648,-0.38792575820255826,-0.4236197564409459,-0.41669087938194277,-0.4201077038327275,-0.46280947438223169,-0.42572212857694181,-0.23830771415622734,-0.20042400930023677,-0.16362722559476811,-0.19196249964523757,-0.19200524041100545,-0.15587073763473924,-0.071605932146480117,-0.15239872338773769,-0.14159284763316943,-0.068574544976821597,-0.12811871077173659,0.032324429184625206,0.11287974793378271,0.047219034899191326,-0.012795217132989128,-0.029001216521275922,-0.14238379611553165,-0.14212641833860104,-0.080401643621998933,-0.065351288541767277,-0.0094562029622548942,-0.057689858569023492,-0.012638618436280929,-0.043489270654390594,0.0007327698308333267,-0.10353978701618814,0.17478591763735229,0.11477166560517185,0.044471548887853228,0.0092981188754733268,-0.0093793467571446805,-0.085317430814631154,-0.21631615319921838,-0.39899535508665812,-0.29906226611720421,-0.27243785129573878,-0.19681348876679616,-0.20023031321758086,-0.020547347749925116,0.17369303545778059,0.087077684850196971,0.22625085140236817,0.13239084733058237,0.11351651029149147,0.13287426279395995,0.13847054596243782,0.18954686175616403,0.38283292308575761,0.36044877091944005,0.33034960382544937,0.33344526618458414,0.4532663876482082,0.37202878243036164,0.27889919233950167,0.26376234386404346,0.074961405976849541,0.15785124432604389,0.10127361960008716,0.055092405284213976,0.071698440899010535,0.060067848792770294,0.13056153723235656,0.099710885014246894,0.062652237690190044,0.1807017489762755,0.17123592396020423,0.080663853475012537,0.052492929632296216,0.055588591991430993,0.044794339298228028,0.18953983299094584,0.1802829468315898,0.29520437166716729,0.36743346808527955,0.32962963543025092,0.55810756577669884,0.51854657513666436,0.63246964716906018,0.6015369083070059,0.61714433199348651,0.39316741191454574,0.43950286146924111,0.57637959788540116,0.57199902928509483,0.68921855280655875,0.82145287904173314,0.90943206465448279,0.79963918643912424,0.80551548224709701,0.71125875434230756,0.72786478995710413,0.62396151592427218,0.52970478801948284,0.63209259392712724,0.78100769640206502,0.92526157065743975,0.97430397104737065,0.95735462234841806,0.82081976403077006,0.75138578554965374,0.92221143301160025,0.96009513786759082,1.1026140751704609,1.1182214988569414,1.1025726340387938,0.96737931051425385,0.92871056002801133,0.98124116649707838,1.1819954619185393,1.1731178847324089,1.1069298528656917,1.0607486385498186,1.2794006789796859,1.2684342109233886,1.1267786640784483,1.1006546459301036,1.0296020348818435,0.83953894738754076,0.80384494914915305,0.84891367564176023,0.84610071676526966,0.75249624158518125,0.70940136898390138,0.73003201301057741,0.64667888649190175,0.57610238340161579,0.66053405851336877,0.77913006646014338,0.63768894460210701,0.69176817146669112,0.60865764584971283,0.66455273142922522,0.63645307945850682,0.77408838922011292,0.82619243296976785,0.7377568182691322,0.7258857148400627,0.72609462530911606,0.71483775609274669,0.79492967166947937,0.7944311844271813,0.8243499585233417,0.81458889746678853,0.72784128230552037,0.78519735611678931,0.91891351752202821,0.8949204719275754,0.70325053122230741,0.8372725032407905,0.94730649859041716,0.86689715860811156,0.87277345441608423,0.74820775081040025,0.77513103835656627,0.65640118764218058,0.69100626698754775,0.72039768013369632,0.7318310173617415,0.83565598690488918,0.66505007026782792,0.68268533778902807,0.71881984056529424,0.63133596869516762,0.58442294882556667,0.35410394375490617,0.42927284505749697,0.47434157155010415,0.46708520468157394,0.43707586431893863,0.4602554462782662,0.53076816110706981,0.31952051927049641,0.40444120943241973,0.38205705726610212,0.43790722246392971,0.394980741480361,0.44388010660073707,0.46684370503675438,0.58062877855044071,0.57362741383242422,0.61405781612979693,0.7851280088717989,0.8309371674796967,0.88102765286632245,0.96833697945635044,0.96492015500556572,0.98495322717795697,0.98445473993565891,1.0648743689607278,1.2017511053768879,1.2388384511821777,1.2333344491491449,1.3355901770471124,1.4273501826748651,1.5374966188414638,1.5699913779182815,1.6953679594851336,1.7874086331323205,1.875604990217997,1.7986426931008703,1.7558805759688163,1.7318444995379749,1.78626580065873,1.9085454231747228,1.9711848145066642,2.0422117944562452,2.1011129308495624,2.0210100735658392,1.9548220416991222,1.9204969791878008,2.0610349721222825,2.0470181812991313,1.7849469875230759,1.8018850797886998,1.9386342189208372,2.0331323312365308,2.1652060851350354,2.1732160046792166,2.1868564186321664,2.0932382557800557,1.9744496811271319,1.9602309037418979,2.0534397164406251,2.0282670966272018,1.8557542683535619,2.020940689168425,2.1331694750821981,2.2193879151643121,2.1553878784469616,1.9454540415062551,1.9917894910609506,2.1066357899158987,2.1540189422710414,2.1173543308100644,2.2098719627030543,2.2659627322779246,2.2365862875293687,2.0841218276817508,2.0452752257307782,1.9435901140678082,2.0396232556689506,2.0818643863505022,2.0821217641274328,2.0971721192076647,2.2026331834645383,2.0000552644469685,1.9516442005846957,2.0075392861642083,1.9360178874301808,1.9074516441498808,1.6810137434684727,1.7814223952116943,1.5926214573245003,1.6980825215813742,1.5685250261251453,1.5655656176593942,1.5815091175508018,1.7324409532592395,1.8125328688359721,1.5781387009215431,1.7051056141656833,1.6219950885487051,1.6454648563944836,1.7128996694110374,1.5715668509114389,1.5102853056529897,1.7016786595693993,1.6134908988294971,1.6410943620236644,1.656952719209507,1.8526534566240389,1.9064402620150351,1.7966473837996766,1.7395298864422428,1.8752239680220837,1.8760470832514771,1.9493205311236399,2.0298758498727976,2.0015405758223279,1.9384266959481657,1.9820877481119381,1.900331349845088,1.814317382744564,1.7944588487962012,1.7587648505578135,1.9384478160254692,1.8061438207671137,1.8644189632099371,2.0001130447897779,1.9946090427567453,2.1388629170121201,2.1688486847101194,2.0977960736618591,2.220529951381589,2.3381553251096827,2.2299853062715256,2.4806943856111934,2.3853203148436912,2.2771502960055336,2.4089394275353349,2.4016830606668047,2.4316018347629651,2.5307784195239109,2.6426161001065984,2.5942050362443259,2.6192161376138663,2.6897277916485063,2.6226935817449029,2.8098055136641067,2.9837877720289221,3.038890898513221,3.2019813124804286,3.2316487577097708,3.3061395064383969,3.141278909239114,3.0710471673992812,3.0910333031910002,3.0497691798873454,3.0943504452438377,2.9685850965831277,3.1507239595328924,3.2575837100563607,3.3798633325723535,3.3411945820861111,3.2191620387327804,3.4378140791626479,3.3486733871397054,3.5394298948416423,3.5474398143858235,3.4759184156517957,3.536281985203114,3.507737375067439,3.4037802007293507,3.4231379532318189,3.5883243740466821,3.7704632369964468,3.8536741964826673,3.9095243616804947,3.872465714356438,3.8301744768225436,3.7625182875263725,3.8910216370161175,3.9229529026534546,4.1428268458083659,4.1742954038507998,3.9478575031693914,4.0853105417107489,3.9393512312381196,4.0048430836450715,3.9661743331588291,3.8019489183570996,3.8288722059032656,3.9562443201140489,3.8602312014351616,3.8752779995652182,3.9487929329929288,3.9393271079768573,3.9087708511877644,3.9767192486166385,4.0943446223447326,3.9926595106817624,4.0543842853983643,3.9178317270414391,4.1377056701963504,4.0981446795563157,4.2092654702006875,4.3096909593999078,4.2507167543081703,4.4440028156377638,4.3993063675180579,4.4715354639361697,4.5085751154931941,4.6104197851545994,4.5620087212923268,4.6881856245622355,4.631326430407591,4.6564110568022423,4.5728243814568721,4.6353939079205437,4.6724335594775681,4.9231426388172359,5.0507970993585074,4.9317389185594722,4.9739800492410238,5.0452778660432402,5.074669279189389,5.1092743585347558,5.1750482084327318,5.1119343285585703,5.065753114242697,5.124936272036809,5.3120482039560128,5.2955130475676571,5.2920962231168716,5.4182731263867812,5.473666587250591,5.5778984379640884,5.6951179614855523,5.615015104201829,5.655445506499202,5.7536493827034407,5.7987006228361828,5.7894437366768265,5.8405200524705529,5.9237363018096518,6.0042916205588091,5.8701091405982195,5.847724988431902,5.9028281149162014,5.8640020918609732,5.7382367432002637,5.7486870992382118,5.7452702747874271,5.5381978384391966,5.5504974028014811,5.4799208997111952,5.4352429637028079,5.4915595002025457,5.4055455331020212,5.7160170521730951,5.5988313953843818,5.7186525168480058,5.6829585186096185,5.6360454987400175,5.6108691543559308,5.5143635330415472,5.41835041436266,5.4259254444381009,5.4959957583963375,5.3317703435946084,5.4504020781466682,5.4448980761136356,5.3790788087385506,5.2830631716376732,5.4206984813992793,5.4997852025385097,5.5034625870035434,5.4010942450771351,5.5264708266439868,5.4258699207873224,5.3543485220532947,5.4557261967718125,5.427159953491512,5.5652118436286084,5.5419417610209765,5.6325043788378775,5.5962613862511761,5.5806125214330287,5.5248221713524979,5.6964237151649026,5.8169457726715983,5.5364518403115124,5.5081165662610427,5.5621957931256265,5.7006715111707065,5.5956530926881181,5.6182989752251968,5.6646933031790994,5.7409468223046325,5.7299415564034772,5.7804040381574113,5.8377601119686799,5.7267150342985849,5.5241371152810146,5.5687987580720817,5.4507069137490269,5.5780111380606314,5.6230798645532385,5.734917545135926,5.7688422285403576,5.9135877222330757,5.9916793870939262,5.9810300846496425,6.018069736206666,6.0920217740596501,5.9955161527452665,6.1313021648810722,6.1568181362693188,6.2313058939309371,6.2639796330509956,6.392905705051243,6.4603405180677971,6.4245879523750684,6.3677112675468441,6.4174898547405732,6.3608566022394246,6.456979507744669,6.5541674276185065,6.6565552335261513,6.5581944004292883,6.7141865437367043,6.5756535473349507,6.6238771328291746,6.6830602906232874,6.7873998271878664,6.6077590141743618,6.6869041914359926,6.5503516330790665,6.5763577090182483,6.8179708799016643,6.7479927526902745,6.6558693527310497,6.5519121783929615,6.6152492890443693,6.6446407021905181,6.5769845128943469,6.6275692196100602,6.5201876800121239,6.3872787577270564,6.3621193927798503,6.3850340125363116,6.270881061339594,6.3151031018248176,6.1839026369347705,6.2121286240847562,6.2269593756486881,6.3775594945304217,6.4326626210147211,6.5711383390598002,6.4369797234819339,6.4528017488687555,6.1656968695489169,6.0651748387319229,6.0821771321679563,6.1432142005907098,6.242390785351656,6.4028339253080171,6.4099559610340293,6.3268454354170505,6.4386831159997389,6.5648530426276279,6.6231281850704518,6.5873756193777231,6.6374661047643491,6.4486651668771557,6.3901639598216864,6.3650794226994343,6.4924515369102185,6.5032574126647864,6.5202597061008207,6.6320296041905396,6.6545830011142684,6.6439336986699837,6.681041119771046,6.5590085764177148,6.6207333511343176,6.6562212116273223,6.657526211602482,6.620861600141505,6.6654428654979974,6.6991560987361112,6.6639826687237314,6.6482248157280992,6.5344482987979209,6.6036868700951779,6.509826866023392,6.5596054532171211,6.6428164127033416,6.6985215270523408,6.5186169795181463,6.4420244551569388,6.40261713350269,6.3260359015540706,6.3639862497566293,6.499772261892435,6.4900112008358821,6.3861079268030503,6.2877470937061872,6.3847521811468306,6.3385709668309573,6.4450952016923964,6.3565078896008842,6.2373210003219901,6.5412428288277864,6.4636660781049322,6.5284137583543256,6.5857698321655951,6.6661894611906636,6.7452654640515828,6.6492523453726955,6.5918889205805042,6.606187349890293,6.8560297629486877,6.6836196092770912,6.7111985541726176,6.618233229249058,6.5322192621485344,6.5203481587194645,6.6650936524121827,6.64814430371323,6.5370992260431349,6.6060897291184411,6.5665287384784072,6.6312764187278006,6.6525225565172867,6.6000656677906582,6.4950472493080689,6.3808942981113521,6.4272886260652538,6.3135121091350763,6.3175774405832019,6.4972604060508576,6.4051370060916328,6.3872686711593056,6.2543597488742373,6.1499223822453102,6.0686847770274639,6.1668886532317027,6.0486595980849538,5.9508560205039958,6.0933749578068657,6.0362574604494323,5.8192305690566242,5.7249738411518347,5.8343868912208103,5.78845310056629,5.8636066708822607,5.9194012422357902,5.9463245297819567,5.9340648209205833,5.9270634562025668,5.944698723723767,5.9473166698412463,6.0055521242571217,5.953015910227534,5.8462669119364525,5.7693690823183825,5.9553315781375016,5.9733611669094238,5.9738021698582919,5.9668008051402754,6.0142826096947601,5.9507466601567085,5.8002900996763964,5.8232047194328578,5.7189321625858369,5.7568158674418273,5.8586605371032325,5.9084391242969607,6.0303002506524788,6.0734315497448854,6.0779606183157169,6.1700012919629037,6.1850516470431351,6.2324347993982778,6.1442470386583761,6.0756000478498891,5.9616634077552941,5.922816805804322,5.8525850639644892,5.8877858611119773,5.7368312409248947,5.6318986116044583,5.5313765807874642,5.5818405302281082,5.5656345308398212,5.5029689274952291,5.5003873684545983,5.5273106560007648,5.5257702459355196,5.5711429503219279,5.6066308108149334,5.554173922088304,5.4831213110400441,5.2660944196472359,5.3179577725230844,5.1849027094640388,5.2400066122003759,5.3550585575473413,5.2802412357307977,5.3535146836029606,5.3147593428216906,5.1914430666081666,5.0190329129365701,5.3295044320076439,5.2494015747239207,5.0694970271897262,5.0708020271648859,5.1701074647799503,4.9789861419418546,4.9894364979798027,5.1602621454417488,5.1321624934710304,4.9936294970692767,5.0005054763284535,5.0887018334141301,5.0224965317325019,4.9941612576820322,5.0343671204470173,5.1192878106089408,5.1519615497289992,5.1449601850109827,5.237367655153351,5.2777980574507239,5.2057382676683996,5.0994141417659211,5.1856325818480355,5.3125994950921758,5.2755408477681192,5.2326143667845502,5.0683889519828202,5.1389016668116243,5.1439180299434115,5.0228767638760363,5.0633071661734084,5.0994311717721548,4.9321667849879747,5.0658829463932138,4.9893017144445944,4.9393613079172312,5.0133133457702144,4.9724991647523265,5.0430118795811296,5.0729976472791289,5.0169708428773259,5.0932330132026271,5.155703392666247,5.0665627006433045,5.0920786720315512,5.1902825482357899],"y":[-0.17178056363743388,-0.31939720539452365,-0.44459762721372109,-0.41601825844727702,-0.40693236202377453,-0.25973274764047422,-0.44404634974085866,-0.65280119393632163,-0.64858445408214793,-0.49214354608679245,-0.37806522552664812,-0.46172244965926618,-0.63888034103232927,-0.6714964430468352,-0.66567273875853705,-0.73909591411123243,-0.67192208334385184,-0.63745093803819741,-0.5836446531758509,-0.55268793118352866,-0.5207415672142337,-0.37349623210312655,-0.49147357754095933,-0.48702953754847017,-0.4491064803473066,-0.525103570800038,-0.59910958062218711,-0.71607424139721476,-0.76206973495192798,-0.75624603066362983,-0.7767098583047467,-0.84400843015537563,-0.73939831022181102,-0.71330533097853432,-0.82511953910570812,-0.81588275028315194,-0.8067968538596495,-0.81706929874590239,-0.86667172636750633,-1.0356690694905379,-0.98444583749096282,-0.92204760993460588,-0.97261234437727295,-0.94180666108630628,-1.046075432852571,-0.9736100389874951,-1.0708035955606152,-1.0206834588065437,-0.81168777362051803,-0.76254432883805334,-0.84262938840890578,-0.71044055719693722,-0.6740934942291863,-0.63705046168636792,-0.65392508011938799,-0.46636138965336327,-0.49961049441182398,-0.48925742865657229,-0.52119912059475904,-0.59471232188117562,-0.68109540185957373,-0.75510141168172284,-0.7966074905657119,-0.80299484005222022,-0.67067422091469431,-0.71552951643504825,-0.77695563070932205,-0.53368203691971061,-0.36809224769955551,-0.36216888448563445,-0.38452825708244731,-0.50661044714422421,-0.28394597466695831,-0.34990159240630841,-0.2426633736118492,-0.36137182906826054,-0.33811468833753539,-0.3098009348939792,-0.2778545709246843,-0.055190098447418463,0.07940796030686488,0.26826527564408792,0.255787385597817,0.40629790191851056,0.40671348077387454,0.42953223586508199,0.49352626020948859,0.54901526665822575,0.35831761593312095,0.37087497660115792,0.53089140127292711,0.58101153802699856,0.7338879319788244,0.90401226188976314,1.0916141391884771,1.132273628415656,1.0708475141413822,0.98859950393098539,0.99864068623176316,1.0147845796129216,0.9863606423834983,0.87436088100116782,0.8829900494905859,0.87569120402246725,1.0514031407036613,1.1628854375196402,1.108034404883196,1.1157130157524233,0.88116398500684734,0.88388450338545299,0.85574008455502237,0.93200646555853051,1.1244178419391637,1.186070117909364,1.1820727242602398,1.1719110805522139,1.1873130047322444,1.2587678362733903,1.1659284256003433,1.0795453456219453,1.0202662072997291,0.77724176001520195,0.71136693288076325,0.79278829224823089,0.74974695817070558,0.79302734873761394,0.79434446291959615,0.8109538489117728,0.98666578559296669,0.93338009330276639,0.93371827236602145,0.94627563303405837,0.89419400232441915,0.96665939618949503,1.1099226890792744,1.1798870335792819,1.1611034111580816,1.1357355868153365,1.225500962783389,1.2618645596728364,1.3365594921303554,1.3234714320915237,1.2566648034429135,1.1793894145331361,1.3671090820234404,1.2084612676320847,1.2432328544289757,1.3322338511039524,1.3135659263849937,1.189597539401718,1.0040841844289119,0.89525704438200526,0.94395105038155758,1.027942961448328,0.94053994256693874,0.96778068588149613,1.1664944401965252,1.2417972984268688,1.1892838956337557,1.1367704928406428,1.0798718542115953,1.2120606854235638,1.2798927780583853,1.2212457008574957,1.1743582313420942,1.0752202015380627,1.1279691038464192,1.1088987980122891,1.1885825599789368,1.0720206419297607,1.1490284683384444,1.1556015156355026,1.1569429424915905,1.3117677479537937,1.3385340256508489,1.2003458299893304,1.3760577666705245,1.4060654943059487,1.5318002322915607,1.4968253093647852,1.5947809073105743,1.6067831940292003,1.6957841907041771,1.8363770316455632,2.0226669578015888,2.1943537234429971,2.2288248687486516,2.2894434370973276,2.2171818517460746,2.0563416700279356,2.1495838810155976,2.2403503296158997,2.3396467337508873,2.098460373085548,2.0969642337538987,2.2235618107473134,2.2183261415751829,2.2242495047891042,2.2385459941287129,2.2872400001282656,2.3225162803801411,2.2518971884843406,2.1251897360989842,2.1683040194911718,2.2359254612821657,2.1525750084042303,2.0354732381057432,1.9510657203523465,1.9426857889181233,1.7274922238694836,1.8776353096878766,1.6823609392496757,1.847816110466397,1.7355257589656579,1.6478802952471185,1.8235922319283127,1.9476110875490149,2.0583045194568919,2.2673002046429174,2.1828926868895207,2.079337705721068,2.1373668756260935,2.1015998901591746,2.048385431745626,1.9326771173872124,1.9663528234774752,1.7498459351499793,1.7462463409054592,1.636812839028702,1.5176105991090953,1.2890280508023821,1.0949278670615761,1.2368162329175603,1.3367304370819522,1.4195254012307532,1.3411224612632786,1.3474402027421448,1.4192500925617162,1.317861333764599,1.5019035832816923,1.5204062672161047,1.5207444462793598,1.5220615604613419,1.5990693868700256,1.7366132641793861,1.542101499625238,1.6702053038463178,1.532261698219991,1.6085280792234991,1.4386052804761191,1.360586181017172,1.3504245373091461,1.2124809316828193,1.303247380283121,1.1895165551045974,1.3678320774320187,1.4392869089731646,1.812482582545407,1.9529477760919236,1.8794949322516019,1.875971857067904,1.8852265049164807,1.8662629455362871,1.8508396150358775,2.0243435432471655,1.9022613531853887,1.9306671440679661,2.0550857149907902,2.1252449011474237,2.071174149375639,2.0248399425721084,2.0827091278738727,2.1640967241691409,2.148452427247002,2.0555144749900891,1.8700011200172826,1.852298675799666,1.8529364170647697,1.8342416899217968,1.901128461640063,1.8351728439007129,1.6773395531573025,1.7910914457986888,1.6835258809340459,1.6659590511019513,1.7549600477769283,1.5495189035988639,1.4668752432040302,1.5313611325387442,1.5546182732694693,1.7772827457467351,1.6804275725994897,1.8223159384554739,1.7379084207020772,1.6836967889339571,1.6237676932274867,1.6953327839759533,1.7290084900662162,1.6127867500965243,1.7546751159525085,1.6574815593793886,1.6351304138462086,1.5686985965355575,1.4551124037040704,1.3557386889314342,1.4205045127235079,1.1591719079784095,0.91614746069388231,1.0878342263352909,1.194695011641961,1.1769925674243444,1.1979080770100032,1.0727076551908059,0.99262259561995336,0.89783559776235167,0.71623056123248197,0.73251160312260755,0.6962512059325483,0.79233754199853201,0.94716234746073513,1.0120506487599008,0.86218789987037936,0.80931561017768461,0.8316513233559828,0.8004530531747126,0.68666194209955755,0.74134216718930779,0.67991605291503387,0.64274486508755002,0.66219253485358376,0.4669181644153827,0.36477174078726576,0.38230773211665925,0.28511417554353918,0.18183713332867146,0.19158856509592678,0.21003705350586255,0.036774197500505874,0.16142343352865923,0.43558391439611055,0.47742552103374958,0.49370656292387516,0.32963746233203861,0.42985136758460085,0.36369502781273244,0.39737073390299527,0.3750113613061824,0.59437599885369818,0.58798864936718986,0.71669965302328154,0.81789445552020201,0.88945954626866863,0.90490382171447781,0.96655609768467821,0.98500458609461394,0.77624974189915097,0.83173874834788819,0.84177993064866585,0.84770329386258692,0.80598348776099671,0.72654596850092945,0.81386458244932125,0.82801469211896483,0.82356428529204162,0.67326476259315138,0.6476028455456615,0.57132180699189128,0.62328666209755179,0.53256906989954589,0.57853497226384332,0.41446587167200677,0.3888074049580354,0.42582079935854333,0.54490349236745594,0.66006719527596958,0.84635712143199504,0.94704021240724612,0.93687856869922026,0.98743084245989143,0.86945349702205876,0.84331370144859885,0.82225427079742064,0.85008706990574234,0.83139234276276941,0.8906204364479452,0.89523924146363598,1.0312999319978271,1.1552558329328677,1.2114283053425565,1.1476395414000156,1.1492502691110129,1.0637130187665247,1.0947111005005736,0.93671912245685895,0.83245035069059425,0.95377417352286964,0.89414679221421678,0.93598839885185581,0.85158088109845886,1.0080217890938143,1.1156077675215745,1.0457667441976293,1.1004469692873795,1.2927227140546742,1.1764702550874671,1.2365807617570985,1.23870474588478,1.3476967838374176,1.1947561970777938,1.1519272275923962,1.2936367943434746,1.4948747773289526,1.421361576042536,1.411089131156283,1.3543031678346773,1.3579577894317301,1.3392898647127713,1.0962654174282442,0.97828807199041146,0.8644969609152563,0.75566982086834977,0.66678076452941004,0.66467916959021467,0.75982425502664286,0.64411594066822908,0.63742978015843377,0.57815064183621767,0.4591294123555254,0.59372747110980872,0.60235663959922681,0.62425895773036311,0.30177992648207713,0.29566289840611365,0.25222987039890243,0.33622178146567278,0.23821558122037562,0.14278765138233607,0.037278689897693895,0.085972695897246154,0.23829548641956164,0.20387781835855867,0.26501336583811402,0.48437800338562981,0.35896393803075505,0.46821040956824622,0.71554547613981667,0.79796451987918882,0.7728895269099455,0.71867789514182545,0.75893514159514341,0.86634817676081444,0.82573150145334617,0.67543221266329689,0.64741342096660015,0.63529565807468624,0.57515970046904374,0.54299396819160417,0.58752881034252114,0.53696407589985407,0.42359593765807568,0.10165162299078004,-0.018164226229522667,-0.12285527950483917,-0.12749021022078857,-0.044564936465567306,-0.1107212762374357,-0.006111156303871091,0.058732236135756899,-0.029675449304733873,0.34352022426750844,0.29100682147439549,0.32196354346671779,0.30887548342788612,0.32134450513316226,0.37878896734812428,0.3428512677175895,0.2894390510647703,0.32818843772693529,0.33793986949419058,0.43595155816880876,0.40153389010780577,0.4778002711113139,0.4773986952601767,0.56733471019045079,0.52544006864288673,0.48261109915748918,0.47737542998535859,0.57857023248227901,0.6058109757968364,0.62508378466754466,0.7769064532449933,0.63286145930998539,0.57944924265716624,0.70518398064277821,0.76425173138989178,0.60625975334617699,0.66716528172797662,0.66506368678878125,0.6818198331488986,0.65062156296762841,0.64332271749950976,0.7584864204080235,0.67674810526170126,0.65778454588150759,0.59301715375098196,0.55840294243509958,0.51206873563156896,0.55534912619847732,0.62252295696585802,0.55522438511522909,0.41117939118022123,0.23494275697819353,0.24724142703938232,0.29320732940367972,0.28261607635118097,0.43312659267187453,0.25411251106312949,0.22790757791350175,0.17462188562330141,0.13779194890157098,-0.063810511129110542,-0.15509762353389681,-0.24803557579080995,-0.44493247777508316,-0.44242480858588634,-0.35163352364966849,-0.35099578238456475,-0.45314220601268168,-0.52393315839254795,-0.51530398990312987,-0.63080547140685983,-0.44324178094083522,-0.39983786007664684,-0.43196669934890985,-0.45704169231815317,-0.36010961887116838,-0.25506138970480435,-0.33434326936199321,-0.30239690539269831,-0.34897185055834196,-0.47657146991216548,-0.64345723249548792,-0.56876230003796879,-0.61219532804517995,-0.62879279009046585,-0.72306349971507589,-0.65601703469546613,-0.69663371000293439,-0.48296112863113216,-0.51855298428802976,-0.65525277295047457,-0.62439647360389017,-0.69274138881082281,-0.60994642466202187,-0.70964513919400418,-0.80212919896878632,-0.75539858076626776,-0.81218454408787355,-0.78609156484459686,-0.77517402354530163,-0.90037444536449907,-0.70772865640440885,-0.77390612574535411,-0.93508656465785023,-0.8004885059035669,-0.71559605656652092,-0.57927936891724063,-0.51462901288514917,-0.56344854755912599,-0.42018525466934664,-0.39690704004784494,-0.28337701886586297,-0.17331926681841731,-0.22761281310827133,-0.38797191963624145,-0.50668037509265285,-0.45290207101792329,-0.51669083496046408,-0.53223131109641053,-0.77525575838093774,-0.82485818600254157,-0.91769759667558859,-0.923064722587842,-0.98461088055203527,-1.0090053692176366,-0.92658632547826447,-1.0094235307991744,-0.97198134309589623,-0.87886563595719369,-1.0368576140009085,-1.2150824526091923,-1.0547366839457271,-0.99729222173076493,-1.0495733705927204,-0.88937343122227785,-0.84911618476895978,-0.91054229904323369,-1.0437461416829268,-0.95885369234588091,-0.84368998943736728,-0.78307142108869143,-0.77303023878791377,-0.87103643903321093,-0.8606833732779593,-0.6056410681429909,-0.63809546511139137,-0.48521907115956547,-0.49857636929651006,-0.7476015255361057,-0.81798259443828725,-0.69889990142937475,-0.63293428386408479,-0.62902231320524948,-0.73304523343697237,-0.72380844461441629,-0.72055907033703237,-0.65459345277174252,-0.57179848862294147,-0.58972783338865808,-0.47377342147542068,-0.46329278520767109,-0.16668407961660267,-0.2822405532672258,-0.44857814032993854,-0.33751340559181459,-0.2405813321448298,-0.2186790140136935,-0.34686428033629335,-0.56337116866378922,-0.44984114748180731,-0.42053702033575285,-0.1756064801326272,-0.18896377826957181,-0.16055798738699439,-0.18124305047708397,-0.281750071889937,-0.32660536741029089,-0.40944257273120077,-0.2828449957377861,-0.21049691370163728,-0.021312489897760648,0.17096325486953412,0.23813708563691477,0.23877482690201851,0.23349844034506134,0.22207212810660051,0.33355442492257964,0.3846325517942818,0.28135550957941413,0.39060198111690531,0.42804416882018331,0.31553652231573931,0.34230280001279467,0.28087668573852081,0.2629919815124071,0.18414929651227471,0.26707457026749598,0.41995096421932188,0.59241438773051158,0.64574177046334713,0.63170933420054109,0.56553186485959572,0.52650350991980677,0.40253512293653104,0.52767478701364656,0.46839564869143041,0.45809920917059677,0.53659867351300949,0.60108456284772349,0.5418054245255074,0.6383948502067549,0.31220268825159181,0.32881207424376846,0.22742331544665134,0.29551781580170045,0.28009448530129089,0.434919290763494,0.51181949434257301,0.46454068636868939,0.38726136920901172,0.4132198876700961,0.43266755743612989,0.49799764720410417,0.26326492416545028,0.34027275057413403,0.32473227443818758,0.14992301136571287,0.15967444313296816,-0.069029876152782679,-0.051493884823389242,0.072150099589093381,0.25971379005511802,0.13904012211792124,0.20404787837288152,0.1861185336071649,0.3293818264969442,0.32414615732481356,0.32584288371293951,0.23843986483155041,0.31313479728906962,0.37334696047932237,0.34768504343183254,0.37058972702194426,0.27539660880623856,0.29773232198453675,0.21888963698440433,0.36059920373548282,0.54464145325257618,0.53716644417504067,0.58028072756722837,0.508463354265831,0.38449496728255528,0.46150279369123903,0.41224239447363459,0.34999444603077029,0.34269560056265164,0.22367437108195942,0.47353856242740844,0.50721426851767126,0.63067995924507614,0.68854914454684046,0.62927000622462426,0.54753169107830202,0.45210376124026247,0.43374948916503897,0.58011310018204731,0.47460413869740509,0.41595706149651546,0.32466994909172919,0.39713534295680508,0.34657060851413801,0.48242757564100935,0.48845791470783106,0.51776204185388552,0.618956844350806,0.63571299071092335,0.70640827851367372,0.76849083957441777,0.73939347557520518,0.52955687582757038,0.51059331644737671,0.44834536800451236,0.63046936028678358,0.598303628009344,0.27635931334204838,0.10155005026957366,-0.092084967354562161,-0.098472316841070426,-0.086173646779881624,-0.1717108971243699,-0.139764533155075,-0.18202288702274685,-0.24932145887337573,-0.33215866419428558,-0.29688238394240984,-0.35378102257145755,-0.52556158620889137,-0.48854819180838344,-0.57220541594100149,-0.52892502537409314,-0.58757210257498282,-0.36051043815499328,-0.3706720818630192,-0.31834834339699408,-0.31443637273815883,-0.33131099117117885,-0.22061755926330198,-0.237492177696322,-0.161157073587504,-0.16788457629348957,-0.13747950676994591,-0.23041745902685906,-0.24877173110208262,-0.36788342390837697,-0.22729058296699081,-0.089667468575352169,-0.13271817878711711,-0.15150180120831758,-0.015185113559037275,-0.078904351771998754,-0.13893890237905765,-0.24362995565437415,-0.10787233876961375,-0.10936847810126282,0.068947044226158605,0.12552827421455226,0.048248957054874579,0.15367846522199616,0.20282191000446079,0.18973384996562911,0.39069298669630442,0.23474302824580076,0.16141577212127226,0.23834981757633372,0.036747357545652184,-0.16485510248502933,-0.054797350437583658,-0.038516308547458092,-0.012557790086373741,-0.24126210937212461],"z":[0.12414756884958833,0.16524893972048299,0.025818006412690428,0.16392145403132924,0.22026686843818793,0.24404236323073225,0.10811427098796447,0.15142036056684677,-0.0030581708515570738,-0.20359175692077486,-0.25660678200982112,-0.2601419310692093,-0.31922465313803794,-0.34501821042647718,-0.20947247592879256,-0.086989196641660729,0.062546805489093318,0.072902169933163383,0.093355368723716137,0.31871098294106986,0.35596100661022056,0.19878670153607764,0.17427482088243063,0.0086801934888301614,0.032623109632421904,0.15451022585306215,0.13452711522214744,0.11339966432751815,0.15097385117249329,0.24644089686430498,0.13321373969271136,0.11460813472224293,0.064672526847579168,0.029677910773580889,-0.20367356582381518,-0.4131060157003843,-0.22816841410970692,-0.3934997618994534,-0.2671364185079273,-0.38378423629965769,-0.31420213850975309,-0.1763961264299303,-0.12354046061101762,-0.10709515240132758,-0.10428784277182396,-0.12177875681715522,-0.18531647688648129,-0.2231754205719047,-0.20936375410039948,-0.13132137845599981,-0.055435332487567296,0.040031713204244396,0.12788676129798282,0.16192558886738476,0.10712466294749902,0.014351198899778702,0.19920298466593417,0.17921987403501946,0.17893711326731476,0.15760904477563417,0.28009232406276602,0.17006395405557806,0.20273526246855533,0.1822484695985862,-0.00020425907691325721,-0.026656362851403569,-0.00053974895249313802,0.050017492905672443,-0.16921386178789949,-0.22401478770778524,-0.13807085188076765,-0.15972230268126486,-0.19546313866873621,-0.14302069526157274,0.077156963657888378,-0.043241600707082162,-0.16584534990621871,-0.14912271284726467,-0.2006487385467971,-0.16126858739470787,-0.082714448773517663,-0.13099222114451606,-0.11722637458171867,-0.057490090947811948,-0.023833667702221388,-0.25359136570328589,-0.14336131342806327,-0.11987390106234563,-0.17798142874734932,-0.30042141815515433,-0.096492290766632668,-0.25097082218503652,-0.36102977328952068,-0.31529258691846057,-0.27155283035521499,-0.42809838190608623,-0.48087764782186782,-0.40735708163102852,-0.4994897661110787,-0.49412872491451426,-0.51992228220295356,-0.57375253667799542,-0.75718967286450911,-0.66172262717269748,-0.69109060293431412,-0.80114955403879828,-0.96990253421885331,-0.99829218330826619,-0.92938355161140973,-0.99734958637638804,-1.0207287517135517,-0.94085216418074868,-1.0020091119136783,-1.1670144059573788,-1.1881418568520081,-1.17258756031779,-1.1259939550252647,-1.067129745826106,-0.82093348493229312,-1.0506911829333576,-1.0216844107980001,-0.98789062928018934,-1.0338825908641704,-1.0815331356997187,-1.1144868753985124,-0.91360742909261949,-0.84198973523206244,-0.901518626319049,-0.79678802818203054,-0.61780684775541173,-0.57396136963739941,-0.39429762348028868,-0.38122303732190821,-0.32213404048097988,-0.40350242567795452,-0.33713172122537577,-0.32066940864152049,-0.21772168080382467,-0.26010986632054062,-0.28150950875177472,-0.30316095955227196,-0.35309656742693574,-0.45236417329966983,-0.44857139518179806,-0.3552017018539228,-0.39483399445103295,-0.47084327824343342,-0.21338650752542057,-0.24021655958199822,-0.10430626081428947,0.045229741316464581,-0.072735994994733488,0.00078457119610579455,0.017507208255059852,-0.018928090380137153,0.02332063998719161,0.063555608680636311,0.010700714273236557,0.08743475415941869,0.052819891044889239,0.0013314561513996361,-0.2029458655814928,-0.05340986345073874,-0.10587140890652592,-0.063608045932366214,-0.18308973185248015,-0.21191139750659729,-0.38368213420361003,-0.2711490895146989,-0.41246166211820445,-0.39869581555540706,-0.35791254189038652,-0.30204829136340444,-0.25274307952392516,-0.14335148306852516,-0.03081843837961401,0.11871756375114004,-0.0075050270125608387,0.080836296099918006,0.1795917715272318,0.41847067585987796,0.27355095515918304,0.45321470131629382,0.3530137068506084,0.42329772576756303,0.4973453501612482,0.43883755317339573,0.47578885900581619,0.40570407347833581,0.46914440022340231,0.5119174400721529,0.34014670337514019,0.59760347409315295,0.48437631692155936,0.48113284855989669,0.36870680652938337,0.33586333906216098,0.29849407502851638,0.1613012644050846,0.28779516145973244,0.3975167469457232,0.37702995407575407,0.33546082749112732,0.233991249322474,0.30560894318303106,0.2596756179337838,0.39920407709843969,0.39526412118200632,0.53377269276334327,0.49706648753857469,0.45518332862755462,0.39696428398265243,0.52869043176670005,0.62030217704338608,0.61404920615558256,0.45810498848218384,0.25837279067195557,0.31471820507881426,0.35626536299192091,0.50766784977291413,0.46648115218697089,0.47248177150991444,0.31066687226459527,0.30672691634816185,0.33666931211532392,0.42951879974727153,0.42203037749326688,0.44274648367693886,0.28454419202948955,0.30878418841478089,0.32375335150397166,0.27924679775236533,0.20916201222488498,0.38882575838199573,0.39605330703892366,0.16233794407162502,0.25570763739950025,0.21120108364789394,0.25243231459714777,0.22193254691300507,0.086004454670237304,0.057182789016120159,0.039691874970788896,0.060407981154460888,0.17012956664045165,0.022362749580704083,-0.065037336223431663,-0.11187988549331788,-0.10503793582725099,-0.081262441034706673,-0.1886600287637766,-0.22488547917694499,-0.3720652387957642,-0.47545302492437252,-0.33442765860632906,-0.45629131162832315,-0.38040526565989063,-0.3639429530760353,-0.20229953979302354,-0.068546580989388123,-0.10640552467481153,-0.092593858203306303,-0.14642411267834826,-0.24985416724892512,-0.23974140390848173,-0.35551476392682796,-0.21960446515911924,-0.24943197974000106,-0.049551958520704688,-0.26649376138888992,-0.24738204761937918,-0.32523513797795167,-0.27973592815237025,-0.38316598272294711,-0.40961808649743742,-0.39807309014302933,-0.34521742432411662,-0.46476703649262491,-0.45586902782059185,-0.41088041186809415,-0.39375989477770451,-0.45649813291990871,-0.58077558746742808,-0.69550948937897838,-0.65909647655341574,-0.6661199717167674,-0.75352005752090323,-0.7215503973259817,-0.56934509211967377,-0.67602048186264141,-0.77018528713587286,-0.66598201106614874,-0.5942655586761646,-0.56022673110676258,-0.61171516600025222,-0.49032477893480442,-0.53855261649767805,-0.5182755513804328,-0.75692735327388116,-0.66848926113599427,-0.64041250612088407,-0.5800783144427788,-0.48923451707468191,-0.60193079870894151,-0.62160586520003425,-0.5071272211329666,-0.40417949329527075,-0.2378685838671562,-0.19220206083052455,-0.2271966769045228,-0.20729876053740792,-0.20397906775617963,-0.16853001511964924,-0.33386136290939572,-0.31155131321042911,-0.38565685527175708,-0.38333014355491996,-0.40540358820293065,-0.3678294013579555,-0.35401773488645027,-0.337555422302595,-0.40646987086081587,-0.4078583223118642,-0.26777529132240202,-0.1655789122771095,-0.2873248524544364,-0.37550753635289569,-0.43817938647522531,-0.54499948984798097,-0.53345449349357288,-0.50378761625722523,-0.57312197853125868,-0.54934648373871431,-0.50893334511557009,-0.45300349274433277,-0.24907436535581109,-0.4019423638686821,-0.29608650782526036,-0.28000670027281827,-0.28792795452167891,-0.31348639652931559,-0.2781080986829278,-0.31543585405700175,-0.216680378629688,-0.46063591764659412,-0.46208931415315496,-0.39092496791606285,-0.39416843627772558,-0.22553898343535414,-0.18338578191692104,-0.13764859554586092,-0.006271042039503405,-0.010210997955936787,0.080922415666739619,0.063431501621408357,0.32498803384781166,0.43042325255623298,0.41227084603984948,0.4363506847003531,0.36876389878680071,0.32283057353755346,0.4540294577394991,0.50287137655670611,0.3186882926140403,0.32911074114144978,0.30969118934634821,0.29754016384723248,0.23480192570502828,0.18567705384135449,0.33541046381190542,0.29897516517670841,0.26178698906013331,0.31557014286291096,0.42810318755182208,0.42989783898910955,0.52150958426579552,0.65770529185701487,0.82556194954696538,1.0015885001749012,0.94912695471911412,0.87106329669012161,0.9524057305777528,0.96290912020874575,0.84968196303715215,0.9708169133829192,0.96232128936955397,1.0151769551884666,1.0004533482922988,0.96829497695326527,0.94690594204739054,0.76346880586087684,0.78695621822659445,0.70753433336191929,0.55466633484904837,0.65653623661419247,0.62800678974553947,0.39465531314814334,0.44946220565859546,0.55463151795025689,0.53755548331913983,0.46154619952673936,0.57320879672613601,0.64022779592010637,0.73188321800628864,0.78438332246033526,0.87381823377975332,0.81428934269276665,0.88705984019976758,0.84447423440572156,0.87644389460064309,0.70467315790363028,0.70442092097156195,0.68430530277416368,0.9066225511354693,0.84709366004848274,0.82656580223755016,0.82511240573098943,0.83076931758535455,0.7892001910007278,0.76921708036981307,0.7195887889315673,0.64501922674630896,0.41523317143403915,0.42266537058914072,0.58056409737520909,0.64758309656917945,0.76947021278981964,0.64703022338201466,0.5875013322950281,0.3669367257595646,0.43722074467651922,0.39556727862428176,0.37306070241573741,0.36160381829169375,0.45321556356837972,0.59131901118701846,0.61976476325873964,0.62272322135108937,0.58698238536361802,0.76595187778146423,0.98110857302279231,0.82257285373117184,0.66996229576451216,0.72589214813574943,0.75396890315085963,0.90461527709627976,0.87478776251539792,0.89135505008036697,0.98248846370304332,1.0154627197786035,1.155071211780623,1.066092563573511,1.157704308850197,1.1101881587703268,1.1869221986565091,1.0994027657165608,1.0988381942974892,0.97623444509835255,1.0353234419392809,0.98538783406461716,0.84046811336392224,0.78745308827487592,0.73004637606646083,0.70864673363522679,0.77053499781846957,0.69816638389420582,0.73354468174059362,0.63358309087484943,0.64734893743764677,0.61895928834823399,0.49468183380071457,0.46734490069605739,0.38529690847271342,0.43103409484377353,0.52978957027108731,0.53011159145045528,0.53908228486740217,0.43551299312971631,0.58691547991070958,0.46495396726702592,0.6171592724733338,0.48292566646753748,0.44530976567316388,0.48685692358627053,0.59708697586149317,0.49126208699485391,0.50280708334926205,0.50239308839767771,0.49045337273420125,0.46489493072656457,0.4660205802731166,0.428651316239472,0.38342668839806671,0.25863544276104444,0.20710941706151198,0.267070917657314,0.24765136586221245,0.3030104225880903,0.37329444150504493,0.35276658369411235,0.39608993094120276,0.40506062435814977,0.53553377069888519,0.60901764108302869,0.58635026253947575,0.68244686112600117,0.74486071332847192,0.67896651498262262,0.89763244645818197,0.87764933582726723,0.88776209916771065,0.85923265229905754,0.92192826123493454,0.7678872640124581,0.76428477848156828,0.64519798238780335,0.64632363193435538,0.74931941221483767,0.78022010518375262,0.60781096868142015,0.67952742107140429,0.62803898617791476,0.55578417078008768,0.6714540462733386,0.64306439718392572,0.5344015317393922,0.77328043607203834,0.71857444485954958,0.78973879109664169,0.89394206716636571,0.94243526897673713,1.1433147152826302,1.2482655383299848,1.2575019970812327,1.2531644986127806,1.111851926009275,1.1184303686715347,1.1895960298989003,1.0277811306535811,0.89453580773763952,0.82060083414391194,0.69799708494477541,0.75705701983636453,0.77362430740133359,0.75890070050516567,0.71324159742464222,0.8687213512278299,0.74675983858414641,0.96542577005970576,1.1402071626644703,1.0828738849706498,1.0965351576088405,0.93833286596139109,0.70461750299409243,0.77218772861049967,0.77238537843364263,0.79817683575959608,0.79013416162332273,0.5778825040516995,0.68373836009512112,0.63828324822554516,0.72531941573307079,0.5524629861036372,0.71956553293896763,0.8420488122260994,0.76927831665044522,0.85833294362256718,0.88257294000785858,0.95170198330936484,0.73247062861579282,0.63250903775004863,0.48474222069030104,0.33213166272364136,0.34869895028861037,0.25814265541863124,0.47405654079453385,0.50250229286625503,0.51147298628320192,0.60893116609626297,0.53897318689435503,0.58970820625951115,0.51401837281807872,0.52767964545626922,0.50602819465577198,0.61019258613950578,0.60521051307421714,0.75579470758666989,0.57395344146407201,0.58292413488101902,0.36369278018744711,0.43282182348895337,0.41142218105771922,0.5146253327573429,0.66416133488809692,0.71346654672757615,0.67088094093353012,0.55557911976462893,0.73454861218247514,0.56895398478887471,0.753891586379552,0.86796014662847087,0.66742656055925309,0.50922426891180383,0.59923501506176347,0.6862711825692891,0.7278183404823958,0.74150189527697519,0.68228890487881455,0.51353592469875953,0.49461193114780827,0.52793443543493357,0.45999577210100012,0.27815450597840224,0.39997138121681625,0.61820186231211327,0.59566830186538211,0.73377174948402091,0.5132071429485574,0.51934168052184082,0.39673793132270424,0.41233158764726963,0.31233563536063164,0.22399088010374743,0.20318490085831953,0.17379768666420253,0.19610773636316911,0.19372209308277949,0.081296051052266199,0.19382909574117735,0.22377149150833942,0.34847801323919492,0.43424379991682083,0.3635972825173891,0.40522842853365137,0.35244916261786985,0.36552374877625027,0.31318299795390914,0.2858460648492519,0.12622336757085797,0.093379900103635588,0.047446574854388336,-0.039153751650238093,-0.0060762125740899042,0.0094780839601283084,0.015478703283071858,-0.057476220316776745,-0.067951886797663535,-0.25138902298417726,-0.24249101431214418,-0.33001044725209233,-0.3302626841841606,-0.32342073451809372,-0.43024083789084944,-0.27934486587821528,-0.32173305139493119,-0.34735385548714726,-0.27690997636887282,-0.29098320419596274,-0.32399598583029449,-0.18487869924179001,-0.12414756225773448,-0.1709877633556792,-0.17948338736904443,-0.21249616900337617,-0.45645170802028229,-0.53336373075976795,-0.48411662268509953,-0.34098216058367969,-0.28189316374275136,-0.29319471352052179,-0.28044861594354242,-0.25630732906556652,-0.2229848247784412,-0.11978167307881757,-0.086182246054301095,-0.055647379503368413,-0.16583357533778265,-0.28531526125789658,-0.15882136420324874,-0.22678739896822706,-0.26917558448494294,-0.29168011286548823,-0.26109856469599185,-0.19415732965781807,-0.20451663541005424,-0.23097263421467717,-0.13639177001315758,-0.032227378529423756,-0.092285296124074379,-0.14102608978476017,-0.2484236775138301,-0.27890959644736757,-0.21033823845898036,-0.22475845277746839,-0.1292914070856567,-0.18399739829814551,-0.21278511225675459,-0.32982825989942038,-0.3226007112424924,-0.11240710515627592,-0.083961353084554782,0.084668099757816653,-0.035638124804292792,-0.07515743144189968,-0.06720665747649833,0.11177452295012048,0.18068315464697687,0.18819778221940328,0.19355882341596772,0.027438067588062297,-0.044816747809764711,-0.054178005132872666,-0.11804412097916873,-0.046936939005761395,-0.18636787231355398,-0.30687663442092977,-0.32699225261832804,-0.32937789589871769,-0.26468647710313564,-0.26136678432190735,-0.26030544549979245,-0.30195891155202992,-0.28108243928883858,-0.48161602535805637,-0.63476184762738497,-0.66121395140187533,-0.47090847521184909,-0.25575177997052101,-0.076770599543902224,-0.12589547140757601,-0.020039615364154287,0.040691521619901264,0.05628517794446667,0.024648544306129356,-0.10976166089542601,-0.19716174669956174,-0.22361385047405205,-0.31685693242222096,0.010101184850152701,0.085987230818585211,0.10626429593583044,0.10828988410740037,0.050956606413580081,0.12257430027413713,0.034391616375677843,0.0060019672862649739,-0.018619381415106724,-0.12126918680462005,-0.11794949402339175,-0.15886170966680221,-0.52055998099563994,-0.35345743416030956,-0.3523960953381946,-0.43045975336718711,-0.39288556652221202,-0.36624565132741882,-0.44430930935641133,-0.42822950180396924,-0.55019101444765284,-0.4288131881366436,-0.530490557939997,-0.65088912230496754,-0.67137591517493667,-0.55689727110786891,-0.36594787031290066,-0.52776276955821988,-0.54051822199119126,-0.40914066848483377,-0.5282274645785987,-0.49181445175303617,-0.47932646964759429,-0.43047424291455794,-0.31551858795021465,-0.27652657514886703,-0.46070965909153283,-0.46863091334039347,-0.59188350659792321,-0.70511066376951681,-0.52880556883939267,-0.45989693714253621,-0.59833857040596794,-0.64821630198704328,-0.79099863708700424,-0.77828825672332058,-0.8313032818123669,-1.0505346365059387,-1.1637617936775324,-1.1398188775339406,-1.5015171488627785,-1.4426529396636196,-1.5442033778330073,-1.6476334324035842,-1.6044675452529007,-1.7768766817552331,-1.7693620541828068,-1.6550474855443471,-1.4640980847493787,-1.3021564207769587,-1.3661280001129632,-1.3679422649393154],"mode":"lines","opacity":1,"line":{"color":"steelblue","width":1,"reverscale":false},"type":"scatter3d","marker":{"color":"rgba(31,119,180,1)","line":{"color":"rgba(31,119,180,1)"}},"error_y":{"color":"rgba(31,119,180,1)"},"error_x":{"color":"rgba(31,119,180,1)"},"frame":null}],"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.20000000000000001,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>The first plot shows a 1D random walk with th Y values plotted over step_number, while the second the X-Y projection of a 2D random walk. Notice how the 2D walk creates more complex patterns as it moves through two-dimensional space. Lastly the third plot shows a 3D random walk, which adds depth to the visualization. The 3D plot allows you to see how the walk moves through three-dimensional space, providing a more comprehensive view of the random walk’s path.</p>
</section>
</section>
<section id="new-feature-2-subset-walks-function" class="level1">
<h1>New Feature #2: Subset Walks Function</h1>
<section id="purpose-and-functionality" class="level2">
<h2 class="anchored" data-anchor-id="purpose-and-functionality">Purpose and Functionality</h2>
<p>The new <code>subset_walks</code> function allows you to filter random walks based on maximum or minimum y-values. This feature in it’s current state will grab the walk that has either the highest or lowest y value. This can be useful if you only want to see the maximum ending value.</p>
<p>Fix 105 introduced this functionality in response to user requests for more targeted analysis capabilities.</p>
</section>
<section id="example-usage-1" class="level2">
<h2 class="anchored" data-anchor-id="example-usage-1">Example Usage</h2>
<p>Here’s how you can use the new <code>subset_walks</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random walk</span></span>
<span id="cb10-2">walk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rw30</span>()</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Subset the walk to include only steps where y is between -10 and 10</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walk, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"min"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walk, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/index_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walk, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">visualize_walks</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/index_files/figure-html/unnamed-chunk-3-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The function returns a new data frame containing only the walk with either the max or minimum y value.</p>
</section>
</section>
<section id="new-feature-3-confidence-interval-function" class="level1">
<h1>New Feature #3: Confidence Interval Function</h1>
<section id="understanding-confidence-intervals-for-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="understanding-confidence-intervals-for-random-walks">Understanding Confidence Intervals for Random Walks</h2>
<p>Confidence intervals provide a range of values that are likely to contain the true value of an unknown parameter with a specified level of confidence. In the context of random walks, confidence intervals can help quantify the uncertainty in the walk’s path and provide statistical bounds for analysis.</p>
<p>Fix 142 introduced the <code>confidence_interval</code> function, allowing users to calculate these statistical boundaries for their random walks.</p>
</section>
<section id="example-usage-2" class="level2">
<h2 class="anchored" data-anchor-id="example-usage-2">Example Usage</h2>
<p>Here’s how to use the new <code>confidence_interval</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random walk</span></span>
<span id="cb13-2">walk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.num_walks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate 95% confidence interval for the y values</span></span>
<span id="cb13-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confidence_interval</span>(walk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interval =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 2
    lower   upper
    &lt;dbl&gt;   &lt;dbl&gt;
1 -0.0120 0.00640</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confidence_interval</span>(walk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interval =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 2
    lower   upper
    &lt;dbl&gt;   &lt;dbl&gt;
1 -0.0150 0.00932</code></pre>
</div>
</div>
<p>The function returns a tibble containing the lower and upper bounds of the confidence interval at the specified confidence level.</p>
</section>
</section>
<section id="migration-guide-updating-your-code-for-version-0.3.0" class="level1">
<h1>Migration Guide: Updating Your Code for Version 0.3.0</h1>
<section id="breaking-change-from-x-to-step_number" class="level2">
<h2 class="anchored" data-anchor-id="breaking-change-from-x-to-step_number">Breaking Change: From <code>x</code> to <code>step_number</code></h2>
<p>As mentioned earlier, version 0.3.0 introduces a breaking change: the <code>x</code> column in output data frames has been renamed to <code>step_number</code>. This change makes the column name more descriptive of what it actually represents (the step number in the walk), but it requires updating existing code that references the <code>x</code> column.</p>
</section>
<section id="before-and-after-comparison" class="level2">
<h2 class="anchored" data-anchor-id="before-and-after-comparison">Before and After Comparison</h2>
<p>Let’s compare the data structure and common operations before and after the update:</p>
<section id="data-structure-before-pre-0.3.0" class="level3">
<h3 class="anchored" data-anchor-id="data-structure-before-pre-0.3.0">Data Structure Before (pre 0.3.0):</h3>
<pre><code>   walk_number  x  y
1            1  1 -1
2            1  2  0
3            1  3 -1</code></pre>
</section>
<section id="data-structure-after-version-0.3.0" class="level3">
<h3 class="anchored" data-anchor-id="data-structure-after-version-0.3.0">Data Structure After (version 0.3.0+):</h3>
<pre><code>   walk_number  step_number  y
1            1            1 -1
2            1            2  0
3            1            3 -1</code></pre>
</section>
</section>
<section id="code-migration-examples" class="level2">
<h2 class="anchored" data-anchor-id="code-migration-examples">Code Migration Examples</h2>
<p>Here are some common code patterns and how to update them:</p>
<section id="plotting" class="level3">
<h3 class="anchored" data-anchor-id="plotting">1. Plotting:</h3>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Old code</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New code</span></span>
<span id="cb19-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> step_number, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
</section>
<section id="summarizing-by-steps" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-by-steps">2. Summarizing by steps:</h3>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Old code</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New code</span></span>
<span id="cb20-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(step_number) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean_y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(y))</span></code></pre></div>
</section>
<section id="filtering-specific-steps" class="level3">
<h3 class="anchored" data-anchor-id="filtering-specific-steps">3. Filtering specific steps:</h3>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Old code</span></span>
<span id="cb21-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New code</span></span>
<span id="cb21-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> step_number <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</section>
</section>
<section id="quick-migration-script" class="level2">
<h2 class="anchored" data-anchor-id="quick-migration-script">Quick Migration Script</h2>
<p>If you have many scripts that need updating, consider using this find-and-replace approach <strong>USE AT YOUR OWN RISK</strong>:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all scripts in a directory that use RandomWalker</span></span>
<span id="cb22-2">scripts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">path =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_scripts_directory"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*.R"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each script, replace 'x' column references with 'step_number'</span></span>
<span id="cb22-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (script <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> scripts) {</span>
<span id="cb22-6">  content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(script)</span>
<span id="cb22-7">  updated_content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">bx</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"step_number"</span>, content)</span>
<span id="cb22-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(updated_content, script)</span>
<span id="cb22-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Updated:"</span>, script, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb22-10">}</span></code></pre></div>
<p><strong>Note:</strong> This is a simplified example and may need adjustment based on your specific code patterns. Always back up your scripts before applying automated changes.</p>
</section>
</section>
<section id="practical-applications-of-the-new-features" class="level1">
<h1>Practical Applications of the New Features</h1>
<section id="multi-dimensional-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="multi-dimensional-random-walks">Multi-Dimensional Random Walks</h2>
<ol type="1">
<li><strong>Financial Modeling</strong>: Simulate price movements of multiple correlated assets simultaneously.</li>
<li><strong>Ecological Studies</strong>: Model animal movement patterns in 2D or 3D space.</li>
<li><strong>Physics Simulations</strong>: Represent particle movements in fluids (Brownian motion).</li>
<li><strong>Network Analysis</strong>: Analyze how information or diseases spread through multi-dimensional networks.</li>
</ol>
</section>
<section id="subset-walks-function" class="level2">
<h2 class="anchored" data-anchor-id="subset-walks-function">Subset Walks Function</h2>
<ol type="1">
<li><strong>Risk Management</strong>: Focus on periods when a financial asset exceeds certain price boundaries.</li>
<li><strong>Anomaly Detection</strong>: Identify and analyze outlier behavior in time series data.</li>
<li><strong>Threshold Analysis</strong>: Study system behavior when it crosses specific thresholds.</li>
<li><strong>Boundary Testing</strong>: Analyze how often and when random processes exceed certain limits.</li>
</ol>
</section>
<section id="confidence-interval-function" class="level2">
<h2 class="anchored" data-anchor-id="confidence-interval-function">Confidence Interval Function</h2>
<ol type="1">
<li><strong>Statistical Inference</strong>: Make probabilistic statements about random walk behavior.</li>
<li><strong>Hypothesis Testing</strong>: Test assumptions about random walk properties.</li>
<li><strong>Forecasting</strong>: Create prediction intervals for future values.</li>
<li><strong>Quality Control</strong>: Establish control limits for process monitoring.</li>
</ol>
</section>
</section>
<section id="your-turn-implementing-random-walker-0.3.0" class="level1">
<h1>Your Turn! Implementing Random Walker 0.3.0</h1>
<p>Let’s put what you’ve learned into practice with a short exercise. Try implementing a multi-dimensional random walk analysis that uses all three new features.</p>
<section id="exercise" class="level2">
<h2 class="anchored" data-anchor-id="exercise">Exercise:</h2>
<ol type="1">
<li>Generate a 2D random walk with 500 steps.</li>
<li>Calculate the 95% confidence interval for the y values.</li>
<li>Subset the walk to include only the walk with the maximum y value.</li>
<li>Visualize the original walk and the subsetted walk.</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RandomWalker)</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Generate a 2D random walk with 500 steps</span></span>
<span id="cb23-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb23-7">walk_2d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random_normal_walk</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.dimensions =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Subset the walk to include only points where y is within the confidence interval</span></span>
<span id="cb23-10">subsetted_walk <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset_walks</span>(walk_2d, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span>)</span>
<span id="cb23-11"></span>
<span id="cb23-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Calculate the 95% confidence interval for the y values</span></span>
<span id="cb23-13">ci <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">confidence_interval</span>(walk_2d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.interval =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.95</span>)</span>
<span id="cb23-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"95% Confidence Interval:"</span>, ci[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to"</span>, ci[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>95% Confidence Interval: 0.000643959 to 0.004598803 </code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Visualize the original and subsetted walks</span></span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> walk_2d, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cum_sum_x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> cum_sum_y),</span>
<span id="cb25-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightgrey"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_path</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> subsetted_walk, </span>
<span id="cb25-6">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cum_sum_x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> cum_sum_y), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb25-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2D Random Walk with Confidence Interval Subsetting"</span>,</span>
<span id="cb25-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"95% CI: ["</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(ci[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), </span>
<span id="cb25-10">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(ci[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"]"</span>),</span>
<span id="cb25-11">       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X Position"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Y Position"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</details>
</section>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong>Multi-Dimensional Random Walks</strong>: RandomWalker now supports random walks in up to 3 dimensions, greatly expanding simulation possibilities.</li>
<li><strong>Breaking Change Alert</strong>: The <code>x</code> column is now called <code>step_number</code> – update your code accordingly.</li>
<li><strong>Subset Walks Function</strong>: Filter random walks based on y-values to focus analysis on specific regions.</li>
<li><strong>Confidence Interval Function</strong>: Calculate statistical boundaries to quantify uncertainty in random walks.</li>
<li><strong>Migration Path</strong>: Simple find-and-replace operations can update most existing code to work with version 0.3.0.</li>
<li><strong>Diverse Applications</strong>: The new features enable more sophisticated analyses across fields like finance, biology, physics, and more.</li>
</ul>
</section>
<section id="conclusion-a-major-leap-forward-for-randomwalker" class="level1">
<h1>Conclusion: A Major Leap Forward for RandomWalker</h1>
<p>The update to RandomWalker version 0.3.0 represents a significant expansion of the package’s capabilities. By adding support for multi-dimensional random walks, subset functionality, and confidence interval calculations, this update enables more sophisticated analyses and broadens the package’s applicability across various domains.</p>
<p>While the breaking change from <code>x</code> to <code>step_number</code> requires some code updates, the improved clarity and expanded functionality more than compensate for this minor inconvenience. The migration path is straightforward, and the examples provided should make the transition smooth.</p>
<p>Whether you’re modeling financial markets, analyzing ecological data, or simulating physical processes, RandomWalker 0.3.0 provides powerful tools to generate, visualize, and analyze random walks in a tidyverse-compatible framework.</p>
<p>We encourage you to update to version 0.3.0 and explore how these new capabilities can enhance your stochastic process analyses. As always, we welcome feedback and suggestions for future improvements!</p>
</section>
<section id="frequently-asked-questions" class="level1">
<h1>Frequently Asked Questions</h1>
<section id="will-my-existing-code-still-work-with-randomwalker-0.3.0" class="level2">
<h2 class="anchored" data-anchor-id="will-my-existing-code-still-work-with-randomwalker-0.3.0">1. Will my existing code still work with RandomWalker 0.3.0?</h2>
<p>Not without changes. Version 0.3.0 includes a breaking change where the <code>x</code> column is renamed to <code>step_number</code>. You’ll need to update your code accordingly. See the Migration Guide section for details.</p>
</section>
<section id="how-do-i-install-or-update-to-randomwalker-0.3.0" class="level2">
<h2 class="anchored" data-anchor-id="how-do-i-install-or-update-to-randomwalker-0.3.0">2. How do I install or update to RandomWalker 0.3.0?</h2>
<p>You can install or update using the standard R package installation method:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install.packages</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RandomWalker"</span>)</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or for the development version:</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># devtools::install_github("spsanderson/RandomWalker")</span></span></code></pre></div>
</section>
<section id="can-i-generate-random-walks-with-more-than-3-dimensions" class="level2">
<h2 class="anchored" data-anchor-id="can-i-generate-random-walks-with-more-than-3-dimensions">3. Can I generate random walks with more than 3 dimensions?</h2>
<p>No, version 0.3.0 supports up to 3 dimensions (x, y, z). If you need higher-dimensional random walks, you might need to use multiple 3D walks or explore other packages.</p>
</section>
<section id="how-do-confidence-intervals-work-with-random-walks" class="level2">
<h2 class="anchored" data-anchor-id="how-do-confidence-intervals-work-with-random-walks">4. How do confidence intervals work with random walks?</h2>
<p>The confidence intervals in RandomWalker 0.3.0 provide statistical boundaries within which we expect the true mean to fall with a specified level of confidence. This helps quantify the uncertainty in the random walk’s path.</p>
</section>
<section id="is-randomwalker-compatible-with-the-tidyverse" class="level2">
<h2 class="anchored" data-anchor-id="is-randomwalker-compatible-with-the-tidyverse">5. Is RandomWalker compatible with the tidyverse?</h2>
<p>Yes, RandomWalker is designed to be fully compatible with the tidyverse suite of packages. Its output data frames work seamlessly with dplyr, ggplot2, and other tidyverse tools.</p>
</section>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience!</h1>
<p>Have you tried RandomWalker 0.3.0? We’d love to hear about your experience and how you’re using these new features in your projects. Share your thoughts and examples on Bluesky, Mastadon or LinkedIn using #RandomWalkerR or join the discussion on GitHub.</p>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li>RandomWalker GitHub repository: <a href="https://github.com/spsanderson/RandomWalker" class="uri">https://github.com/spsanderson/RandomWalker</a></li>
<li>Fix 107 - Multi-dimensional random walks: <a href="https://github.com/spsanderson/RandomWalker/issues/107" class="uri">https://github.com/spsanderson/RandomWalker/issues/107</a></li>
<li>Fix 105 - Subset walks function: <a href="https://github.com/spsanderson/RandomWalker/issues/71" class="uri">https://github.com/spsanderson/RandomWalker/issues/71</a></li>
<li>Fix 142 - Confidence interval function: <a href="https://github.com/spsanderson/RandomWalker/issues/142" class="uri">https://github.com/spsanderson/RandomWalker/issues/142</a></li>
<li>R Documentation on confidence intervals: <a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/confint.html" class="uri">https://stat.ethz.ch/R-manual/R-devel/library/stats/html/confint.html</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-09/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>RandomWalker 0.3.0</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-05-09/</guid>
  <pubDate>Fri, 09 May 2025 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Exit a Function in R: Complete Guide with Working Examples</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2025-05-07/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p><strong>Quick Summary</strong>: This comprehensive guide explains all methods to properly exit R functions including <code>return()</code>, <code>stop()</code>, and <code>on.exit()</code>. Learn best practices, avoid common pitfalls, and master function control flow with practical examples for R programmers of all levels.</p>
</blockquote>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Understanding how to properly exit functions in R is a fundamental skill that separates novice programmers from experienced ones. Whether you need to return values, handle errors gracefully, or ensure resources are properly managed, knowing the right exit mechanism can make your code more efficient, readable, and robust.</p>
<p>In this comprehensive guide, we’ll explore all the different ways to exit functions in R, including <code>return()</code>, <code>stop()</code>, and <code>on.exit()</code>. Through practical examples and exercises, you’ll learn when and how to use each method effectively. By the end of this article, you’ll have mastered the art of function exits in R and be able to write cleaner, more professional code.</p>
</section>
<section id="methods-to-exit-a-function-in-r" class="level1">
<h1>Methods to Exit a Function in R</h1>
<p>There are several ways to exit a function in R, each serving different purposes and appropriate for different scenarios. Let’s explore each method in detail with working examples.</p>
<section id="using-return-for-normal-function-exits" class="level2">
<h2 class="anchored" data-anchor-id="using-return-for-normal-function-exits">1. Using <code>return()</code> for Normal Function Exits</h2>
<p>The <code>return()</code> function is the most common way to exit a function in R. It immediately terminates the function execution and returns a specified value to the caller.</p>
<section id="basic-example" class="level3">
<h3 class="anchored" data-anchor-id="basic-example">Basic Example</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">check_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Positive number"</span>)</span>
<span id="cb1-4">  }</span>
<span id="cb1-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative number"</span>)</span>
<span id="cb1-7">  }</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zero"</span>)</span>
<span id="cb1-9">}</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_number</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Positive number"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Positive number"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_number</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Negative number"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Negative number"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_number</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Zero"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Zero"</code></pre>
</div>
</div>
<p>In this simple example, the function checks the input value and returns an appropriate message based on whether the number is positive, negative, or zero . Each <code>return()</code> statement immediately exits the function when executed.</p>
</section>
<section id="multiple-return-values" class="level3">
<h3 class="anchored" data-anchor-id="multiple-return-values">Multiple Return Values</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">analyze_number <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb7-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x)) {</span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">valid =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input is not numeric"</span>))</span>
<span id="cb7-4">  }</span>
<span id="cb7-5">  </span>
<span id="cb7-6">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb7-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">valid =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">value =</span> x,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">squared =</span> x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb7-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sqrt =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x), <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span>
<span id="cb7-11">  )</span>
<span id="cb7-12">  </span>
<span id="cb7-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb7-14">}</span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb7-17">positive_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analyze_number</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb7-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(positive_result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$valid
[1] TRUE

$value
[1] 4

$squared
[1] 16

$sqrt
[1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">invalid_result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">analyze_number</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(invalid_result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$valid
[1] FALSE

$message
[1] "Input is not numeric"</code></pre>
</div>
</div>
<p>In this example, we return either an error message or a list of computed values depending on the validity of the input .</p>
</section>
</section>
<section id="using-stop-for-error-handling" class="level2">
<h2 class="anchored" data-anchor-id="using-stop-for-error-handling">2. Using <code>stop()</code> for Error Handling</h2>
<p>The <code>stop()</code> function terminates the function execution and generates an error message. This is useful for signaling that something unexpected has happened and the function cannot continue.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">calculate_sqrt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb11-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x)) {</span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be numeric"</span>)</span>
<span id="cb11-4">  }</span>
<span id="cb11-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb11-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cannot calculate square root of negative number"</span>)</span>
<span id="cb11-7">  }</span>
<span id="cb11-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(x))</span>
<span id="cb11-9">}</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb11-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb11-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_sqrt</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 4</span></span>
<span id="cb11-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">calculate_sqrt</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error: Cannot calculate square root of negative number</span></span>
<span id="cb11-15">}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error:"</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-17">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4
Error: Cannot calculate square root of negative number </code></pre>
</div>
</div>
<p>Here, <code>stop()</code> is used to handle invalid inputs by stopping the function execution and providing a meaningful error message . The <code>tryCatch()</code> function allows us to catch and handle these errors gracefully.</p>
</section>
<section id="using-on.exit-for-resource-management" class="level2">
<h2 class="anchored" data-anchor-id="using-on.exit-for-resource-management">3. Using <code>on.exit()</code> for Resource Management</h2>
<p>The <code>on.exit()</code> function specifies code that should be executed when the function exits, regardless of how it exits (normally or due to an error). This is particularly useful for cleanup tasks like closing connections or freeing resources.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">process_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(filename) {</span>
<span id="cb13-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open file connection</span></span>
<span id="cb13-3">  con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span>(con))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This will run when the function exits</span></span>
<span id="cb13-5">  </span>
<span id="cb13-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Try to process the file</span></span>
<span id="cb13-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(filename)) {</span>
<span id="cb13-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File does not exist"</span>)</span>
<span id="cb13-9">  }</span>
<span id="cb13-10">  </span>
<span id="cb13-11">  data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(con)</span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(data))</span>
<span id="cb13-13">}</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb13-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb13-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">process_file</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example.txt"</span>))</span>
<span id="cb13-18">}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb13-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error:"</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-20">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in file(filename, "r"): cannot open file 'example.txt': No such file or
directory</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Error: cannot open the connection </code></pre>
</div>
</div>
<p>In this example, <code>on.exit(close(con))</code> ensures that the file connection is closed when the function exits, regardless of whether it completes successfully or encounters an error . This prevents resource leaks and is a best practice when working with external resources.</p>
</section>
<section id="using-break-in-loops-within-functions" class="level2">
<h2 class="anchored" data-anchor-id="using-break-in-loops-within-functions">4. Using <code>break</code> in Loops Within Functions</h2>
<p>While <code>break</code> doesn’t directly exit a function, it’s commonly used to exit loops within functions. This can be useful when you want to stop iterating but continue with the rest of the function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">find_first_negative <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(numbers) {</span>
<span id="cb16-2">  position <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb16-3">  </span>
<span id="cb16-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(numbers)) {</span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (numbers[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb16-6">      position <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i</span>
<span id="cb16-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit the loop when first negative number is found</span></span>
<span id="cb16-8">    }</span>
<span id="cb16-9">  }</span>
<span id="cb16-10">  </span>
<span id="cb16-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(position)) {</span>
<span id="cb16-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No negative numbers found"</span>)</span>
<span id="cb16-13">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> {</span>
<span id="cb16-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"First negative number found at position"</span>, position))</span>
<span id="cb16-15">  }</span>
<span id="cb16-16">}</span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb16-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_first_negative</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "First negative number found at position 3"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "First negative number found at position 3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_first_negative</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "No negative numbers found"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "No negative numbers found"</code></pre>
</div>
</div>
<p>In this example, we use <code>break</code> to exit the loop as soon as we find a negative number, but the function continues executing to return the appropriate message .</p>
</section>
</section>
<section id="common-pitfalls-and-edge-cases" class="level1">
<h1>Common Pitfalls and Edge Cases</h1>
<section id="nested-functions-and-return-values" class="level2">
<h2 class="anchored" data-anchor-id="nested-functions-and-return-values">Nested Functions and Return Values</h2>
<p>A common mistake is misunderstanding how <code>return()</code> works in nested functions. The <code>return()</code> statement only exits the function it’s contained in, not any outer functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">outer_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb20-2">  inner_function <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(y) {</span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb20-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Negative input"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only exits the inner function</span></span>
<span id="cb20-5">    }</span>
<span id="cb20-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Positive or zero input"</span>)</span>
<span id="cb20-7">  }</span>
<span id="cb20-8">  </span>
<span id="cb20-9">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inner_function</span>(x)</span>
<span id="cb20-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processed result:"</span>, result))</span>
<span id="cb20-11">}</span>
<span id="cb20-12"></span>
<span id="cb20-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the function</span></span>
<span id="cb20-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer_function</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Processed result: Positive or zero input"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Processed result: Positive or zero input"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer_function</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Processed result: Negative input"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Processed result: Negative input"</code></pre>
</div>
</div>
<p>In this example, the <code>return()</code> statement in the inner function only exits that function, not the outer one .</p>
</section>
<section id="forgetting-return-values" class="level2">
<h2 class="anchored" data-anchor-id="forgetting-return-values">Forgetting Return Values</h2>
<p>In R, if you don’t explicitly use <code>return()</code>, the function will return the value of the last evaluated expression. While this works, it can lead to less readable and sometimes unexpected behavior.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Without explicit return</span></span>
<span id="cb24-2">square_implicit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb24-3">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last expression is returned implicitly</span></span>
<span id="cb24-4">}</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># With explicit return</span></span>
<span id="cb24-7">square_explicit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb24-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explicitly return the result</span></span>
<span id="cb24-9">}</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">square_implicit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 16</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 16</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">square_explicit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 16</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 16</code></pre>
</div>
</div>
<p>Both functions work, but the second one with explicit <code>return()</code> is clearer about its intent .</p>
</section>
<section id="using-stop-vs.-return-for-errors" class="level2">
<h2 class="anchored" data-anchor-id="using-stop-vs.-return-for-errors">Using <code>stop()</code> vs.&nbsp;<code>return()</code> for Errors</h2>
<p>A common mistake is using <code>return()</code> to handle errors instead of <code>stop()</code>. This can lead to inconsistent behavior and harder debugging.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Incorrect approach</span></span>
<span id="cb28-2">divide_incorrect <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb28-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: Division by zero"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns a string instead of throwing an error</span></span>
<span id="cb28-5">  }</span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y)</span>
<span id="cb28-7">}</span>
<span id="cb28-8"></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct approach</span></span>
<span id="cb28-10">divide_correct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb28-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb28-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Division by zero"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Throws a proper error</span></span>
<span id="cb28-13">  }</span>
<span id="cb28-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y)</span>
<span id="cb28-15">}</span>
<span id="cb28-16"></span>
<span id="cb28-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test the functions</span></span>
<span id="cb28-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_incorrect</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_incorrect</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Error: Division by zero"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Error: Division by zero"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_correct</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: 5</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">divide_correct</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Throws error</span></span>
<span id="cb32-4">}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb32-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error caught:"</span>, e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-6">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5
Error caught: Division by zero </code></pre>
</div>
</div>
<p>The correct approach using <code>stop()</code> properly signals that an error has occurred, allowing for proper error handling with <code>tryCatch()</code> .</p>
</section>
</section>
<section id="best-practices-for-exiting-functions" class="level1">
<h1>Best Practices for Exiting Functions</h1>
<section id="use-return-for-normal-exits" class="level2">
<h2 class="anchored" data-anchor-id="use-return-for-normal-exits">1. Use <code>return()</code> for Normal Exits</h2>
<p>Always use <code>return()</code> for normal function exits, especially in complex functions. This makes your code’s intent clear and easier to follow.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">process_data <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb34-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validation</span></span>
<span id="cb34-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.data.frame</span>(data)) {</span>
<span id="cb34-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be a data frame"</span>)</span>
<span id="cb34-5">  }</span>
<span id="cb34-6">  </span>
<span id="cb34-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Early exit for empty data frames</span></span>
<span id="cb34-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb34-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">status =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">result =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb34-10">  }</span>
<span id="cb34-11">  </span>
<span id="cb34-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process the data</span></span>
<span id="cb34-13">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(data)</span>
<span id="cb34-14">  </span>
<span id="cb34-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the result</span></span>
<span id="cb34-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">status =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">result =</span> result))</span>
<span id="cb34-17">}</span></code></pre></div>
</section>
<section id="use-stop-for-error-handling" class="level2">
<h2 class="anchored" data-anchor-id="use-stop-for-error-handling">2. Use <code>stop()</code> for Error Handling</h2>
<p>When you encounter an error condition, use <code>stop()</code> to terminate the function and provide a meaningful error message.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">validate_input <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, min_value, max_value) {</span>
<span id="cb35-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x)) {</span>
<span id="cb35-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be numeric"</span>)</span>
<span id="cb35-4">  }</span>
<span id="cb35-5">  </span>
<span id="cb35-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> min_value) {</span>
<span id="cb35-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be greater than or equal to"</span>, min_value))</span>
<span id="cb35-8">  }</span>
<span id="cb35-9">  </span>
<span id="cb35-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> max_value) {</span>
<span id="cb35-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be less than or equal to"</span>, max_value))</span>
<span id="cb35-12">  }</span>
<span id="cb35-13">  </span>
<span id="cb35-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input is valid</span></span>
<span id="cb35-15">}</span></code></pre></div>
</section>
<section id="use-on.exit-for-cleanup" class="level2">
<h2 class="anchored" data-anchor-id="use-on.exit-for-cleanup">3. Use <code>on.exit()</code> for Cleanup</h2>
<p>Always use <code>on.exit()</code> for cleanup operations to ensure resources are properly released, regardless of how the function exits.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">plot_to_pdf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data, filename) {</span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pdf</span>(filename)</span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the PDF device is closed when the function exits</span></span>
<span id="cb36-4">  </span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(data)</span>
<span id="cb36-6">  </span>
<span id="cb36-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb36-8">}</span></code></pre></div>
</section>
<section id="avoid-deep-nesting" class="level2">
<h2 class="anchored" data-anchor-id="avoid-deep-nesting">4. Avoid Deep Nesting</h2>
<p>Keep your functions simple and avoid deep nesting to prevent confusion about which function a <code>return()</code> or <code>stop()</code> will exit from.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instead of deeply nested functions</span></span>
<span id="cb37-2">process_complex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb37-3">  helper1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb37-4">    helper2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(y) {</span>
<span id="cb37-5">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Complex logic...</span></span>
<span id="cb37-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confusing which function this exits</span></span>
<span id="cb37-7">    }</span>
<span id="cb37-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helper2</span>(x))</span>
<span id="cb37-9">  }</span>
<span id="cb37-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helper1</span>(data))</span>
<span id="cb37-11">}</span>
<span id="cb37-12"></span>
<span id="cb37-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better approach: separate functions</span></span>
<span id="cb37-14">helper2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(y) {</span>
<span id="cb37-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Complex logic...</span></span>
<span id="cb37-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb37-17">}</span>
<span id="cb37-18"></span>
<span id="cb37-19">helper1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb37-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helper2</span>(x))</span>
<span id="cb37-21">}</span>
<span id="cb37-22"></span>
<span id="cb37-23">process_complex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb37-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">helper1</span>(data))</span>
<span id="cb37-25">}</span></code></pre></div>
</section>
<section id="early-validation-for-performance" class="level2">
<h2 class="anchored" data-anchor-id="early-validation-for-performance">5. Early Validation for Performance</h2>
<p>Perform validation checks early in your function to avoid unnecessary computations for invalid inputs.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">calculate_statistics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(data) {</span>
<span id="cb38-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Early validation</span></span>
<span id="cb38-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(data)) {</span>
<span id="cb38-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be numeric"</span>)</span>
<span id="cb38-5">  }</span>
<span id="cb38-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(data) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb38-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Need at least 2 data points"</span>)</span>
<span id="cb38-8">  }</span>
<span id="cb38-9">  </span>
<span id="cb38-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expensive operations only performed if validation passes</span></span>
<span id="cb38-11">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb38-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(data),</span>
<span id="cb38-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">median =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">median</span>(data),</span>
<span id="cb38-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(data),</span>
<span id="cb38-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(data),</span>
<span id="cb38-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quantiles =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quantile</span>(data)</span>
<span id="cb38-17">  )</span>
<span id="cb38-18">  </span>
<span id="cb38-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb38-20">}</span></code></pre></div>
</section>
</section>
<section id="performance-considerations" class="level1">
<h1>Performance Considerations</h1>
<p>How you structure your function exits can impact performance, especially for functions that are called frequently or process large amounts of data.</p>
<section id="early-exits-for-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="early-exits-for-efficiency">Early Exits for Efficiency</h2>
<p>Early exits can significantly improve performance by avoiding unnecessary computations for invalid or special cases.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1">compute_complex_value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x) {</span>
<span id="cb39-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Special cases - early exits</span></span>
<span id="cb39-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb39-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb39-5">  </span>
<span id="cb39-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validation</span></span>
<span id="cb39-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(x)) {</span>
<span id="cb39-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input must be numeric"</span>)</span>
<span id="cb39-9">  }</span>
<span id="cb39-10">  </span>
<span id="cb39-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expensive computation only for non-special cases</span></span>
<span id="cb39-12">  result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb39-13">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) {</span>
<span id="cb39-14">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> result <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> i</span>
<span id="cb39-15">  }</span>
<span id="cb39-16">  </span>
<span id="cb39-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb39-18">}</span></code></pre></div>
<p>In this example, the function immediately returns for special cases (0 and 1) without performing the expensive computation loop .</p>
</section>
</section>
<section id="your-turn-interactive-exercise" class="level1">
<h1>Your Turn! Interactive Exercise</h1>
<p>Now that you’ve learned about different ways to exit functions in R, let’s practice with a few exercises.</p>
<section id="exercise-1-build-a-function-with-multiple-exit-points" class="level2">
<h2 class="anchored" data-anchor-id="exercise-1-build-a-function-with-multiple-exit-points">Exercise 1: Build a Function with Multiple Exit Points</h2>
<p>Create a function called <code>categorize_age()</code> that:</p>
<ul>
<li>Returns “Invalid” if age is negative or not numeric</li>
<li>Returns “Minor” if age &lt; 18</li>
<li>Returns “Adult” if age 18-64</li>
<li>Returns “Senior” if age &gt;= 65</li>
</ul>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">categorize_age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(age) {</span>
<span id="cb40-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(age)) {</span>
<span id="cb40-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid: not a number"</span>)</span>
<span id="cb40-4">  }</span>
<span id="cb40-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb40-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid: negative age"</span>)</span>
<span id="cb40-7">  }</span>
<span id="cb40-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>) {</span>
<span id="cb40-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Minor"</span>)</span>
<span id="cb40-10">  }</span>
<span id="cb40-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (age <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>) {</span>
<span id="cb40-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adult"</span>)</span>
<span id="cb40-13">  }</span>
<span id="cb40-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Senior"</span>)</span>
<span id="cb40-15">}</span>
<span id="cb40-16"></span>
<span id="cb40-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test cases</span></span>
<span id="cb40-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categorize_age</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Minor"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Minor"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categorize_age</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Adult"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Adult"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categorize_age</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Senior"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Senior"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categorize_age</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Invalid: negative age"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Invalid: negative age"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">categorize_age</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output: "Invalid: not a number"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Invalid: not a number"</code></pre>
</div>
</div>
</details>
</section>
<section id="exercise-2-create-a-resource-management-function" class="level2">
<h2 class="anchored" data-anchor-id="exercise-2-create-a-resource-management-function">Exercise 2: Create a Resource Management Function</h2>
<p>Build a function called <code>read_safe()</code> that:</p>
<ol type="1">
<li>Takes a filename as input</li>
<li>Opens and reads the file</li>
<li>Makes sure the file connection is closed regardless of errors</li>
<li>Returns the file contents or an error message</li>
</ol>
<details>
<summary>
Click here for Solution!
</summary>
<div class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">read_safe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(filename) {</span>
<span id="cb50-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(filename)) {</span>
<span id="cb50-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"File does not exist"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb50-4">  }</span>
<span id="cb50-5">  </span>
<span id="cb50-6">  con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb50-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span>(con))</span>
<span id="cb50-8">  </span>
<span id="cb50-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>({</span>
<span id="cb50-10">    content <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(con)</span>
<span id="cb50-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> content))</span>
<span id="cb50-12">  }, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(e) {</span>
<span id="cb50-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">success =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> e<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>message, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">content =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>))</span>
<span id="cb50-14">  })</span>
<span id="cb50-15">}</span>
<span id="cb50-16"></span>
<span id="cb50-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test with existing and non-existing files</span></span>
<span id="cb50-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_safe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"existing_file.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$success
[1] FALSE

$error
[1] "File does not exist"

$content
NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_safe</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non_existing_file.txt"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$success
[1] FALSE

$error
[1] "File does not exist"

$content
NULL</code></pre>
</div>
</div>
</details>
</section>
</section>
<section id="quick-takeaways" class="level1">
<h1>Quick Takeaways</h1>
<ul>
<li><strong><code>return()</code></strong> is used for normal function exits, immediately terminating the function and returning a value</li>
<li><strong><code>stop()</code></strong> is used for error handling, terminating the function and signaling an error condition</li>
<li><strong><code>on.exit()</code></strong> ensures cleanup code runs regardless of how the function exits</li>
<li><strong><code>break</code></strong> exits loops within functions, not the function itself</li>
<li>Always validate inputs early in your functions for better performance</li>
<li>Use explicit <code>return()</code> statements for clarity, especially in complex functions</li>
<li>Handle resources properly with <code>on.exit()</code> to prevent leaks</li>
<li>Remember that <code>return()</code> in nested functions only exits the innermost function</li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Understanding how to properly exit functions in R is crucial for writing clean, efficient, and robust code. By mastering the use of <code>return()</code>, <code>stop()</code>, and <code>on.exit()</code>, you can create functions that handle various scenarios gracefully, from normal execution to error conditions.</p>
<p>Remember to follow best practices: use <code>return()</code> for normal exits, <code>stop()</code> for error conditions, and <code>on.exit()</code> for resource cleanup. Structure your functions with early validations and avoid deep nesting for better readability and performance.</p>
<p>Now it’s your turn to apply these techniques in your own R code. Start by refactoring existing functions to follow these best practices, and you’ll notice immediate improvements in your code’s readability and robustness.</p>
</section>
<section id="share-your-experience" class="level1">
<h1>Share Your Experience</h1>
<p>Have you encountered any tricky situations with function exits in R? Share your experience in the comments below! If you found this article helpful, please share it with your fellow R programmers who might benefit from these techniques.</p>
</section>
<section id="faqs" class="level1">
<h1>FAQs</h1>
<section id="does-r-need-a-return-statement" class="level2">
<h2 class="anchored" data-anchor-id="does-r-need-a-return-statement">1. Does R need a return statement?</h2>
<p>No, R does not strictly require a return statement. If no return statement is provided, the function will return the value of the last evaluated expression. However, using explicit return statements is considered best practice for clarity and readability .</p>
</section>
<section id="whats-the-difference-between-using-stop-and-return-for-error-handling" class="level2">
<h2 class="anchored" data-anchor-id="whats-the-difference-between-using-stop-and-return-for-error-handling">2. What’s the difference between using stop() and return() for error handling?</h2>
<p><code>stop()</code> generates an actual error that can be caught with <code>tryCatch()</code> and signals that something unexpected happened. <code>return()</code> with an error message simply returns a value and doesn’t indicate that an error occurred, making proper error handling more difficult .</p>
</section>
<section id="does-on.exit-work-with-nested-functions" class="level2">
<h2 class="anchored" data-anchor-id="does-on.exit-work-with-nested-functions">3. Does on.exit() work with nested functions?</h2>
<p>Yes, <code>on.exit()</code> works with nested functions, but it only applies to the function where it’s defined. Each nested function needs its own <code>on.exit()</code> calls to ensure proper cleanup .</p>
</section>
<section id="can-i-have-multiple-on.exit-calls-in-a-function" class="level2">
<h2 class="anchored" data-anchor-id="can-i-have-multiple-on.exit-calls-in-a-function">4. Can I have multiple on.exit() calls in a function?</h2>
<p>Yes, you can have multiple <code>on.exit()</code> calls in a function. By default, newer calls replace older ones, but you can use <code>on.exit(expr, add = TRUE)</code> to append actions instead of replacing them .</p>
</section>
<section id="how-does-returning-from-nested-functions-work-in-r" class="level2">
<h2 class="anchored" data-anchor-id="how-does-returning-from-nested-functions-work-in-r">5. How does returning from nested functions work in R?</h2>
<p>When using <code>return()</code> in a nested function, it only exits that specific nested function, not any outer functions. Each function needs its own return mechanism to exit properly .</p>
</section>
</section>
<section id="references" class="level1">
<h1>References</h1>
<ol type="1">
<li><a href="https://www.statology.org/r-exit-function/">Statology: How to Exit a Function in R</a></li>
<li><a href="https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/stop">R Documentation: stop</a></li>
<li><a href="https://www.datamentor.io/r-programming/break-next/">R Programming: break and next</a></li>
<li><a href="https://adv-r.hadley.nz/functions.html">Advanced R: Functions</a></li>
<li><a href="https://r4ds.had.co.nz/functions.html">R for Data Science: Functions</a></li>
<li><a href="https://rdrr.io/r/base/on.exit.html">R Documentation: on.exit</a></li>
<li><a href="https://www.r-bloggers.com/2016/06/error-handling-in-r/">R Programming: Error Handling</a></li>
</ol>
<hr>
<p>Happy Coding! 🚀</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/2025-05-07/todays_post.png" class="img-fluid figure-img"></p>
<figcaption>Exit R Functions</figcaption>
</figure>
</div>
<hr>
<p><em>You can connect with me at any one of the below</em>:</p>
<p><em>Telegram Channel here</em>: <a href="https://t.me/steveondata" class="uri">https://t.me/steveondata</a></p>
<p><em>LinkedIn Network here</em>: <a href="https://www.linkedin.com/in/spsanderson/" class="uri">https://www.linkedin.com/in/spsanderson/</a></p>
<p><em>Mastadon Social here</em>: <a href="https://mstdn.social/@stevensanderson">https://mstdn.social/@stevensanderson</a></p>
<p><em>RStats Network here</em>: <a href="https://rstats.me/@spsanderson">https://rstats.me/@spsanderson</a></p>
<p><em>GitHub Network here</em>: <a href="https://github.com/spsanderson" class="uri">https://github.com/spsanderson</a></p>
<p><em>Bluesky Network here</em>: <a href="https://bsky.app/profile/spsanderson.com" class="uri">https://bsky.app/profile/spsanderson.com</a></p>
<p><em>My Book: Extending Excel with Python and R</em> here: <a href="https://packt.link/oTyZJ" class="uri">https://packt.link/oTyZJ</a></p>
<p><em>You.com Referral Link</em>: <a href="https://you.com/join/EHSLDTL6" class="uri">https://you.com/join/EHSLDTL6</a></p>
<hr>
<script src="https://giscus.app/client.js" data-repo="spsanderson/steveondata" data-repo-id="R_kgDOIIxnLw" data-category="Comments" data-category-id="DIC_kwDOIIxnL84ChTk8" data-mapping="url" data-strict="0" data-reactions-enabled="1" data-emit-metadata="0" data-input-position="top" data-theme="dark" data-lang="en" data-loading="lazy" crossorigin="anonymous" async="">
</script>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2025-05-07/</guid>
  <pubDate>Wed, 07 May 2025 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
